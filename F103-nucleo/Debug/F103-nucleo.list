
F103-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043f4  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004500  08004500  00014500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045e8  080045e8  00020380  2**0
                  CONTENTS
  4 .ARM          00000000  080045e8  080045e8  00020380  2**0
                  CONTENTS
  5 .preinit_array 00000000  080045e8  080045e8  00020380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e8  080045e8  000145e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080045ec  080045ec  000145ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  080045f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  20000380  08004970  00020380  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08004970  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001333d  00000000  00000000  000203a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c7c  00000000  00000000  000336e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001050  00000000  00000000  00036368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ef0  00000000  00000000  000373b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a785  00000000  00000000  000382a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010489  00000000  00000000  00052a2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e627  00000000  00000000  00062eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f14dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a28  00000000  00000000  000f1558  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000380 	.word	0x20000380
 8000128:	00000000 	.word	0x00000000
 800012c:	080044e8 	.word	0x080044e8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000384 	.word	0x20000384
 8000148:	080044e8 	.word	0x080044e8

0800014c <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart2 ;

void DEBUG_init(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	RetargetInit(&huart2);
 8000150:	4802      	ldr	r0, [pc, #8]	; (800015c <DEBUG_init+0x10>)
 8000152:	f000 f805 	bl	8000160 <RetargetInit>
}
 8000156:	bf00      	nop
 8000158:	bd80      	pop	{r7, pc}
 800015a:	bf00      	nop
 800015c:	20000484 	.word	0x20000484

08000160 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000168:	4a07      	ldr	r2, [pc, #28]	; (8000188 <RetargetInit+0x28>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800016e:	4b07      	ldr	r3, [pc, #28]	; (800018c <RetargetInit+0x2c>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	6898      	ldr	r0, [r3, #8]
 8000174:	2300      	movs	r3, #0
 8000176:	2202      	movs	r2, #2
 8000178:	2100      	movs	r1, #0
 800017a:	f003 fa29 	bl	80035d0 <setvbuf>
}
 800017e:	bf00      	nop
 8000180:	3708      	adds	r7, #8
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	200003c8 	.word	0x200003c8
 800018c:	2000031c 	.word	0x2000031c

08000190 <_isatty>:

int _isatty(int fd) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2b00      	cmp	r3, #0
 800019c:	db04      	blt.n	80001a8 <_isatty+0x18>
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2b02      	cmp	r3, #2
 80001a2:	dc01      	bgt.n	80001a8 <_isatty+0x18>
    return 1;
 80001a4:	2301      	movs	r3, #1
 80001a6:	e005      	b.n	80001b4 <_isatty+0x24>

  errno = EBADF;
 80001a8:	f003 f94a 	bl	8003440 <__errno>
 80001ac:	4602      	mov	r2, r0
 80001ae:	2309      	movs	r3, #9
 80001b0:	6013      	str	r3, [r2, #0]
  return 0;
 80001b2:	2300      	movs	r3, #0
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <_write>:

int _write(int fd, char* ptr, int len) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	b086      	sub	sp, #24
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	60f8      	str	r0, [r7, #12]
 80001c4:	60b9      	str	r1, [r7, #8]
 80001c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d002      	beq.n	80001d4 <_write+0x18>
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	2b02      	cmp	r3, #2
 80001d2:	d110      	bne.n	80001f6 <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 80001d4:	4b0d      	ldr	r3, [pc, #52]	; (800020c <_write+0x50>)
 80001d6:	6818      	ldr	r0, [r3, #0]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	b29a      	uxth	r2, r3
 80001dc:	2364      	movs	r3, #100	; 0x64
 80001de:	68b9      	ldr	r1, [r7, #8]
 80001e0:	f002 fc7d 	bl	8002ade <HAL_UART_Transmit>
 80001e4:	4603      	mov	r3, r0
 80001e6:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80001e8:	7dfb      	ldrb	r3, [r7, #23]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d101      	bne.n	80001f2 <_write+0x36>
      return len;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	e008      	b.n	8000204 <_write+0x48>
    else
      return EIO;
 80001f2:	2305      	movs	r3, #5
 80001f4:	e006      	b.n	8000204 <_write+0x48>
  }
  errno = EBADF;
 80001f6:	f003 f923 	bl	8003440 <__errno>
 80001fa:	4602      	mov	r2, r0
 80001fc:	2309      	movs	r3, #9
 80001fe:	6013      	str	r3, [r2, #0]
  return -1;
 8000200:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000204:	4618      	mov	r0, r3
 8000206:	3718      	adds	r7, #24
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	200003c8 	.word	0x200003c8

08000210 <_close>:

int _close(int fd) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b00      	cmp	r3, #0
 800021c:	db04      	blt.n	8000228 <_close+0x18>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2b02      	cmp	r3, #2
 8000222:	dc01      	bgt.n	8000228 <_close+0x18>
    return 0;
 8000224:	2300      	movs	r3, #0
 8000226:	e006      	b.n	8000236 <_close+0x26>

  errno = EBADF;
 8000228:	f003 f90a 	bl	8003440 <__errno>
 800022c:	4602      	mov	r2, r0
 800022e:	2309      	movs	r3, #9
 8000230:	6013      	str	r3, [r2, #0]
  return -1;
 8000232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000236:	4618      	mov	r0, r3
 8000238:	3708      	adds	r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}

0800023e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800023e:	b580      	push	{r7, lr}
 8000240:	b084      	sub	sp, #16
 8000242:	af00      	add	r7, sp, #0
 8000244:	60f8      	str	r0, [r7, #12]
 8000246:	60b9      	str	r1, [r7, #8]
 8000248:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800024a:	f003 f8f9 	bl	8003440 <__errno>
 800024e:	4602      	mov	r2, r0
 8000250:	2309      	movs	r3, #9
 8000252:	6013      	str	r3, [r2, #0]
  return -1;
 8000254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000258:	4618      	mov	r0, r3
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <_read>:

int _read(int fd, char* ptr, int len) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d110      	bne.n	8000294 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <_read+0x4c>)
 8000274:	6818      	ldr	r0, [r3, #0]
 8000276:	f04f 33ff 	mov.w	r3, #4294967295
 800027a:	2201      	movs	r2, #1
 800027c:	68b9      	ldr	r1, [r7, #8]
 800027e:	f002 fcc0 	bl	8002c02 <HAL_UART_Receive>
 8000282:	4603      	mov	r3, r0
 8000284:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000286:	7dfb      	ldrb	r3, [r7, #23]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d101      	bne.n	8000290 <_read+0x30>
      return 1;
 800028c:	2301      	movs	r3, #1
 800028e:	e008      	b.n	80002a2 <_read+0x42>
    else
      return EIO;
 8000290:	2305      	movs	r3, #5
 8000292:	e006      	b.n	80002a2 <_read+0x42>
  }
  errno = EBADF;
 8000294:	f003 f8d4 	bl	8003440 <__errno>
 8000298:	4602      	mov	r2, r0
 800029a:	2309      	movs	r3, #9
 800029c:	6013      	str	r3, [r2, #0]
  return -1;
 800029e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3718      	adds	r7, #24
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200003c8 	.word	0x200003c8

080002b0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db08      	blt.n	80002d2 <_fstat+0x22>
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	dc05      	bgt.n	80002d2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002cc:	605a      	str	r2, [r3, #4]
    return 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	e005      	b.n	80002de <_fstat+0x2e>
  }

  errno = EBADF;
 80002d2:	f003 f8b5 	bl	8003440 <__errno>
 80002d6:	4602      	mov	r2, r0
 80002d8:	2309      	movs	r3, #9
 80002da:	6013      	str	r3, [r2, #0]
  return 0;
 80002dc:	2300      	movs	r3, #0
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 80002f0:	4a05      	ldr	r2, [pc, #20]	; (8000308 <SCHEDULER_init+0x20>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 80002f6:	f7ff ff29 	bl	800014c <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f000 fa02 	bl	8000704 <tasks_init>
}
 8000300:	bf00      	nop
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	200003b0 	.word	0x200003b0

0800030c <SCHEDULER_run>:

void SCHEDULER_run(void){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 8000312:	f000 fa49 	bl	80007a8 <TIME_us>
 8000316:	6078      	str	r0, [r7, #4]
	task_t * task = get_first_task();
 8000318:	f000 f856 	bl	80003c8 <get_first_task>
 800031c:	6038      	str	r0, [r7, #0]

	while(task_queu_position < task_queu_size && task != NULL){
 800031e:	e015      	b.n	800034c <SCHEDULER_run+0x40>

		//TODO : Tâches par évennement
		if(task->static_priority != PRIORITY_REAL_TIME)
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	f993 3000 	ldrsb.w	r3, [r3]
 8000326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800032a:	d00c      	beq.n	8000346 <SCHEDULER_run+0x3a>
			if(current_time_us >= task->it_last_execution_us + task->it_desired_period_us)
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	69da      	ldr	r2, [r3, #28]
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4413      	add	r3, r2
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	d304      	bcc.n	8000346 <SCHEDULER_run+0x3a>
					current_time_us = task_process_it(task, current_time_us);
 800033c:	6879      	ldr	r1, [r7, #4]
 800033e:	6838      	ldr	r0, [r7, #0]
 8000340:	f000 f866 	bl	8000410 <task_process_it>
 8000344:	6078      	str	r0, [r7, #4]

		task = get_next_task();
 8000346:	f000 f84f 	bl	80003e8 <get_next_task>
 800034a:	6038      	str	r0, [r7, #0]
	while(task_queu_position < task_queu_size && task != NULL){
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <SCHEDULER_run+0x5c>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <SCHEDULER_run+0x60>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	429a      	cmp	r2, r3
 8000356:	d202      	bcs.n	800035e <SCHEDULER_run+0x52>
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1e0      	bne.n	8000320 <SCHEDULER_run+0x14>
	}
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	200003ac 	.word	0x200003ac
 800036c:	200003a8 	.word	0x200003a8

08000370 <SCHEDULER_get_cpu_load>:

uint32_t SCHEDULER_get_cpu_load(void){
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
	uint32_t load_pourcentage = 0 ;
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
	for(uint32_t t = 0; t < task_queu_size; t++)
 800037a:	2300      	movs	r3, #0
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	e014      	b.n	80003aa <SCHEDULER_get_cpu_load+0x3a>
		load_pourcentage += task_queu[t]->it_duration_us * 100 / task_queu[t]->it_desired_period_us ;
 8000380:	4a0f      	ldr	r2, [pc, #60]	; (80003c0 <SCHEDULER_get_cpu_load+0x50>)
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	2264      	movs	r2, #100	; 0x64
 800038c:	fb02 f203 	mul.w	r2, r2, r3
 8000390:	490b      	ldr	r1, [pc, #44]	; (80003c0 <SCHEDULER_get_cpu_load+0x50>)
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	fbb2 f3f3 	udiv	r3, r2, r3
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	607b      	str	r3, [r7, #4]
	for(uint32_t t = 0; t < task_queu_size; t++)
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	3301      	adds	r3, #1
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <SCHEDULER_get_cpu_load+0x54>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d3e5      	bcc.n	8000380 <SCHEDULER_get_cpu_load+0x10>
	return load_pourcentage ;
 80003b4:	687b      	ldr	r3, [r7, #4]
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	2000039c 	.word	0x2000039c
 80003c4:	200003a8 	.word	0x200003a8

080003c8 <get_first_task>:

static task_t * get_first_task(void){
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <get_first_task+0x18>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <get_first_task+0x1c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	200003ac 	.word	0x200003ac
 80003e4:	2000039c 	.word	0x2000039c

080003e8 <get_next_task>:

static task_t * get_next_task(void){
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <get_next_task+0x20>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	4a05      	ldr	r2, [pc, #20]	; (8000408 <get_next_task+0x20>)
 80003f4:	6013      	str	r3, [r2, #0]
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <get_next_task+0x20>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a04      	ldr	r2, [pc, #16]	; (800040c <get_next_task+0x24>)
 80003fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000400:	4618      	mov	r0, r3
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	200003ac 	.word	0x200003ac
 800040c:	2000039c 	.word	0x2000039c

08000410 <task_process_it>:

static uint32_t task_process_it(task_t * task, uint32_t current_time_us){
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->it == NULL)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d101      	bne.n	8000426 <task_process_it+0x16>
		return current_time_us ;
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	e08c      	b.n	8000540 <task_process_it+0x130>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->it_real_period_us_average_sum -= task->it_real_period_us_average_array[task->it_average_index];
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	310c      	adds	r1, #12
 8000436:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800043a:	1ad2      	subs	r2, r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	task->it_real_period_us_average_array[task->it_average_index] = current_time_us - task->it_last_execution_us ;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 800044c:	6839      	ldr	r1, [r7, #0]
 800044e:	1ac9      	subs	r1, r1, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	320c      	adds	r2, #12
 8000454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->it_real_period_us_average_sum += task->it_real_period_us_average_array[task->it_average_index] ;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	310c      	adds	r1, #12
 8000468:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800046c:	441a      	add	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	task->it_real_period_us = task->it_real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800047a:	4a33      	ldr	r2, [pc, #204]	; (8000548 <task_process_it+0x138>)
 800047c:	fba2 2303 	umull	r2, r3, r2, r3
 8000480:	091a      	lsrs	r2, r3, #4
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	619a      	str	r2, [r3, #24]

	task->it_last_execution_us = current_time_us ;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	683a      	ldr	r2, [r7, #0]
 800048a:	61da      	str	r2, [r3, #28]
	task->it(current_time_us);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	6838      	ldr	r0, [r7, #0]
 8000492:	4798      	blx	r3
	current_time_us = TIME_us();
 8000494:	f000 f988 	bl	80007a8 <TIME_us>
 8000498:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->it_duration_us_average_sum -= task->it_duration_us_average_array[task->it_average_index];
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004a6:	6879      	ldr	r1, [r7, #4]
 80004a8:	3320      	adds	r3, #32
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	440b      	add	r3, r1
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	1ad2      	subs	r2, r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	task->it_duration_us_average_array[task->it_average_index] = current_time_us - task->it_last_execution_us ;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	69da      	ldr	r2, [r3, #28]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004c2:	6839      	ldr	r1, [r7, #0]
 80004c4:	1a8a      	subs	r2, r1, r2
 80004c6:	6879      	ldr	r1, [r7, #4]
 80004c8:	3320      	adds	r3, #32
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	440b      	add	r3, r1
 80004ce:	605a      	str	r2, [r3, #4]
	task->it_duration_us_worst = MAX(task->it_duration_us_average_array[task->it_average_index] , task->it_duration_us_worst);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	691a      	ldr	r2, [r3, #16]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	3320      	adds	r3, #32
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	440b      	add	r3, r1
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	bf38      	it	cc
 80004e8:	461a      	movcc	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	611a      	str	r2, [r3, #16]
	task->it_duration_us_average_sum += task->it_duration_us_average_array[task->it_average_index];
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	3320      	adds	r3, #32
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	440b      	add	r3, r1
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	441a      	add	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	task->it_duration_us = task->it_duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <task_process_it+0x138>)
 8000514:	fba2 2303 	umull	r2, r3, r2, r3
 8000518:	091a      	lsrs	r2, r3, #4
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	60da      	str	r2, [r3, #12]

	if(++task->it_average_index == TASK_STAT_AVERAGE_OVER)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000524:	1c5a      	adds	r2, r3, #1
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000532:	2b14      	cmp	r3, #20
 8000534:	d103      	bne.n	800053e <task_process_it+0x12e>
		task->it_average_index = 0 ;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	return current_time_us ;
 800053e:	683b      	ldr	r3, [r7, #0]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	cccccccd 	.word	0xcccccccd

0800054c <SCHEDULER_enable_task>:
	return current_time_us ;
}


//Activation ou d�sactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	6039      	str	r1, [r7, #0]
 8000556:	71fb      	strb	r3, [r7, #7]
	if(enable && id < TASK_COUNT)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00b      	beq.n	8000576 <SCHEDULER_enable_task+0x2a>
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d808      	bhi.n	8000576 <SCHEDULER_enable_task+0x2a>
		queu_add(TASK_get_task(id));
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f90a 	bl	8000780 <TASK_get_task>
 800056c:	4603      	mov	r3, r0
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f830 	bl	80005d4 <queu_add>
 8000574:	e007      	b.n	8000586 <SCHEDULER_enable_task+0x3a>
	else
		queu_remove(TASK_get_task(id));
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f901 	bl	8000780 <TASK_get_task>
 800057e:	4603      	mov	r3, r0
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f87f 	bl	8000684 <queu_remove>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	for(uint32_t t = 0; t < task_queu_size; t++)
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	e00b      	b.n	80005b6 <queu_contains+0x26>
		if(task_queu[t] == task)
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <queu_contains+0x3c>)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d101      	bne.n	80005b0 <queu_contains+0x20>
			return TRUE ;
 80005ac:	2301      	movs	r3, #1
 80005ae:	e008      	b.n	80005c2 <queu_contains+0x32>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3301      	adds	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <queu_contains+0x40>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d3ee      	bcc.n	800059e <queu_contains+0xe>
	return FALSE ;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	2000039c 	.word	0x2000039c
 80005d0:	200003a8 	.word	0x200003a8

080005d4 <queu_add>:

static bool_e queu_add(task_t * task){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if(queu_contains(task) || task_queu_size >= TASK_COUNT)
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff ffd7 	bl	8000590 <queu_contains>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d103      	bne.n	80005f0 <queu_add+0x1c>
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <queu_add+0xa8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d901      	bls.n	80005f4 <queu_add+0x20>
		return FALSE ;
 80005f0:	2300      	movs	r3, #0
 80005f2:	e03e      	b.n	8000672 <queu_add+0x9e>


	uint32_t t = 0 ;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 80005f8:	e037      	b.n	800066a <queu_add+0x96>
	{
		if(task_queu[t] == NULL || task->static_priority > task_queu[t]->static_priority){
 80005fa:	4a21      	ldr	r2, [pc, #132]	; (8000680 <queu_add+0xac>)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00a      	beq.n	800061c <queu_add+0x48>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f993 2000 	ldrsb.w	r2, [r3]
 800060c:	491c      	ldr	r1, [pc, #112]	; (8000680 <queu_add+0xac>)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000614:	f993 3000 	ldrsb.w	r3, [r3]
 8000618:	429a      	cmp	r2, r3
 800061a:	dd23      	ble.n	8000664 <queu_add+0x90>
			if(task_queu[t] != NULL)
 800061c:	4a18      	ldr	r2, [pc, #96]	; (8000680 <queu_add+0xac>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d011      	beq.n	800064c <queu_add+0x78>
				memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size +1 - t));
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3301      	adds	r3, #1
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <queu_add+0xac>)
 8000630:	1898      	adds	r0, r3, r2
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <queu_add+0xac>)
 8000638:	1899      	adds	r1, r3, r2
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <queu_add+0xa8>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	3301      	adds	r3, #1
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	461a      	mov	r2, r3
 8000648:	f002 ff24 	bl	8003494 <memmove>
			task_queu[t] = task ;
 800064c:	490c      	ldr	r1, [pc, #48]	; (8000680 <queu_add+0xac>)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <queu_add+0xa8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <queu_add+0xa8>)
 800065e:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8000660:	2301      	movs	r3, #1
 8000662:	e006      	b.n	8000672 <queu_add+0x9e>
		}
		t++;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3301      	adds	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d9c4      	bls.n	80005fa <queu_add+0x26>
	}
	return FALSE ;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200003a8 	.word	0x200003a8
 8000680:	2000039c 	.word	0x2000039c

08000684 <queu_remove>:

static bool_e queu_remove(task_t * task){
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task))
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ff7f 	bl	8000590 <queu_contains>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d101      	bne.n	800069c <queu_remove+0x18>
		return FALSE ;
 8000698:	2300      	movs	r3, #0
 800069a:	e02a      	b.n	80006f2 <queu_remove+0x6e>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	e021      	b.n	80006e6 <queu_remove+0x62>
		if(task == task_queu[t]){
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <queu_remove+0x78>)
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d117      	bne.n	80006e0 <queu_remove+0x5c>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4a11      	ldr	r2, [pc, #68]	; (80006fc <queu_remove+0x78>)
 80006b6:	1898      	adds	r0, r3, r2
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3301      	adds	r3, #1
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <queu_remove+0x78>)
 80006c0:	1899      	adds	r1, r3, r2
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <queu_remove+0x7c>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	461a      	mov	r2, r3
 80006ce:	f002 fee1 	bl	8003494 <memmove>
			task_queu_size -- ;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <queu_remove+0x7c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <queu_remove+0x7c>)
 80006da:	6013      	str	r3, [r2, #0]
			return TRUE ;
 80006dc:	2301      	movs	r3, #1
 80006de:	e008      	b.n	80006f2 <queu_remove+0x6e>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <queu_remove+0x7c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3d8      	bcc.n	80006a2 <queu_remove+0x1e>
		}
	}
	return FALSE ;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000039c 	.word	0x2000039c
 8000700:	200003a8 	.word	0x200003a8

08000704 <tasks_init>:
#include "task.h"
#include "../scheduler/scheduler.h"

static system_t * sys;

void tasks_init(system_t * sys_){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 800070c:	4a07      	ldr	r2, [pc, #28]	; (800072c <tasks_init+0x28>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_LED, TRUE);
 8000712:	2101      	movs	r1, #1
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff ff19 	bl	800054c <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_PRINTF, TRUE);
 800071a:	2101      	movs	r1, #1
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff15 	bl	800054c <SCHEDULER_enable_task>

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200003b4 	.word	0x200003b4

08000730 <task_main_print_f>:

void task_main_print_f(uint32_t current_time_us){
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	printf("%lu\t%lu\n", TASK_get_task(TASK_PRINTF)->it_duration_us, SCHEDULER_get_cpu_load());
 8000738:	2000      	movs	r0, #0
 800073a:	f000 f821 	bl	8000780 <TASK_get_task>
 800073e:	4603      	mov	r3, r0
 8000740:	68dc      	ldr	r4, [r3, #12]
 8000742:	f7ff fe15 	bl	8000370 <SCHEDULER_get_cpu_load>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	4621      	mov	r1, r4
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <task_main_print_f+0x2c>)
 800074e:	f002 fec3 	bl	80034d8 <iprintf>
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bd90      	pop	{r4, r7, pc}
 800075a:	bf00      	nop
 800075c:	08004500 	.word	0x08004500

08000760 <task_main_led>:


void task_main_led(uint32_t current_time_us){
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	LED_SEQUENCE_play(&sys->led, current_time_us);
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <task_main_led+0x1c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fe12 	bl	8003398 <LED_SEQUENCE_play>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200003b4 	.word	0x200003b4

08000780 <TASK_get_task>:
task_t tasks [TASK_COUNT] ={
		[TASK_PRINTF] = 		DEFINE_TASK(TASK_PRINTF, 			PRIORITY_HIGH, 			task_main_print_f, 			PERIOD_US_FROM_HERTZ(5000)),
		[TASK_LED] = 			DEFINE_TASK(TASK_LED, 				PRIORITY_LOW,	 		task_main_led, 				PERIOD_US_FROM_HERTZ(10))
};

task_t * TASK_get_task(task_ids_t id){
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000790:	fb02 f303 	mul.w	r3, r2, r3
 8000794:	4a03      	ldr	r2, [pc, #12]	; (80007a4 <TASK_get_task+0x24>)
 8000796:	4413      	add	r3, r2
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000000 	.word	0x20000000

080007a8 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ae:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 64;
 80007b0:	f000 fbb2 	bl	8000f18 <HAL_GetTick>
 80007b4:	4603      	mov	r3, r0
 80007b6:	3301      	adds	r3, #1
 80007b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007bc:	fb02 f203 	mul.w	r2, r2, r3
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <TIME_us+0x48>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	099b      	lsrs	r3, r3, #6
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80007ca:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s ait pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us >= t_us)
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <TIME_us+0x4c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d803      	bhi.n	80007de <TIME_us+0x36>
		t_us += 1000;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80007dc:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <TIME_us+0x4c>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6013      	str	r3, [r2, #0]

	return t_us;
 80007e4:	687b      	ldr	r3, [r7, #4]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	e000e010 	.word	0xe000e010
 80007f4:	200003b8 	.word	0x200003b8

080007f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b088      	sub	sp, #32
 80007fc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0310 	add.w	r3, r7, #16
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080c:	4b23      	ldr	r3, [pc, #140]	; (800089c <MX_GPIO_Init+0xa4>)
 800080e:	699b      	ldr	r3, [r3, #24]
 8000810:	4a22      	ldr	r2, [pc, #136]	; (800089c <MX_GPIO_Init+0xa4>)
 8000812:	f043 0310 	orr.w	r3, r3, #16
 8000816:	6193      	str	r3, [r2, #24]
 8000818:	4b20      	ldr	r3, [pc, #128]	; (800089c <MX_GPIO_Init+0xa4>)
 800081a:	699b      	ldr	r3, [r3, #24]
 800081c:	f003 0310 	and.w	r3, r3, #16
 8000820:	60fb      	str	r3, [r7, #12]
 8000822:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000824:	4b1d      	ldr	r3, [pc, #116]	; (800089c <MX_GPIO_Init+0xa4>)
 8000826:	699b      	ldr	r3, [r3, #24]
 8000828:	4a1c      	ldr	r2, [pc, #112]	; (800089c <MX_GPIO_Init+0xa4>)
 800082a:	f043 0304 	orr.w	r3, r3, #4
 800082e:	6193      	str	r3, [r2, #24]
 8000830:	4b1a      	ldr	r3, [pc, #104]	; (800089c <MX_GPIO_Init+0xa4>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0304 	and.w	r3, r3, #4
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <MX_GPIO_Init+0xa4>)
 800083e:	699b      	ldr	r3, [r3, #24]
 8000840:	4a16      	ldr	r2, [pc, #88]	; (800089c <MX_GPIO_Init+0xa4>)
 8000842:	f043 0308 	orr.w	r3, r3, #8
 8000846:	6193      	str	r3, [r2, #24]
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_GPIO_Init+0xa4>)
 800084a:	699b      	ldr	r3, [r3, #24]
 800084c:	f003 0308 	and.w	r3, r3, #8
 8000850:	607b      	str	r3, [r7, #4]
 8000852:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_VCC_GPIO_Port, MPU_VCC_Pin, GPIO_PIN_RESET);
 8000854:	2200      	movs	r2, #0
 8000856:	2120      	movs	r1, #32
 8000858:	4811      	ldr	r0, [pc, #68]	; (80008a0 <MX_GPIO_Init+0xa8>)
 800085a:	f000 fe67 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 800085e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 0310 	add.w	r3, r7, #16
 8000870:	4619      	mov	r1, r3
 8000872:	480c      	ldr	r0, [pc, #48]	; (80008a4 <MX_GPIO_Init+0xac>)
 8000874:	f000 fd00 	bl	8001278 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_VCC_Pin;
 8000878:	2320      	movs	r3, #32
 800087a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2302      	movs	r3, #2
 8000886:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU_VCC_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 0310 	add.w	r3, r7, #16
 800088c:	4619      	mov	r1, r3
 800088e:	4804      	ldr	r0, [pc, #16]	; (80008a0 <MX_GPIO_Init+0xa8>)
 8000890:	f000 fcf2 	bl	8001278 <HAL_GPIO_Init>

}
 8000894:	bf00      	nop
 8000896:	3720      	adds	r7, #32
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010800 	.word	0x40010800
 80008a4:	40011000 	.word	0x40011000

080008a8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008ac:	4b12      	ldr	r3, [pc, #72]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ae:	4a13      	ldr	r2, [pc, #76]	; (80008fc <MX_I2C1_Init+0x54>)
 80008b0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80008b2:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008b4:	4a12      	ldr	r2, [pc, #72]	; (8000900 <MX_I2C1_Init+0x58>)
 80008b6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008b8:	4b0f      	ldr	r3, [pc, #60]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008c6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008ca:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008cc:	4b0a      	ldr	r3, [pc, #40]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008d8:	4b07      	ldr	r3, [pc, #28]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008da:	2200      	movs	r2, #0
 80008dc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008de:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008e4:	4804      	ldr	r0, [pc, #16]	; (80008f8 <MX_I2C1_Init+0x50>)
 80008e6:	f000 fe39 	bl	800155c <HAL_I2C_Init>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008f0:	f000 f8ec 	bl	8000acc <Error_Handler>
  }

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200003cc 	.word	0x200003cc
 80008fc:	40005400 	.word	0x40005400
 8000900:	00061a80 	.word	0x00061a80

08000904 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08a      	sub	sp, #40	; 0x28
 8000908:	af00      	add	r7, sp, #0
 800090a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800090c:	f107 0314 	add.w	r3, r7, #20
 8000910:	2200      	movs	r2, #0
 8000912:	601a      	str	r2, [r3, #0]
 8000914:	605a      	str	r2, [r3, #4]
 8000916:	609a      	str	r2, [r3, #8]
 8000918:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <HAL_I2C_MspInit+0x90>)
 8000920:	4293      	cmp	r3, r2
 8000922:	d132      	bne.n	800098a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000924:	4b1c      	ldr	r3, [pc, #112]	; (8000998 <HAL_I2C_MspInit+0x94>)
 8000926:	699b      	ldr	r3, [r3, #24]
 8000928:	4a1b      	ldr	r2, [pc, #108]	; (8000998 <HAL_I2C_MspInit+0x94>)
 800092a:	f043 0308 	orr.w	r3, r3, #8
 800092e:	6193      	str	r3, [r2, #24]
 8000930:	4b19      	ldr	r3, [pc, #100]	; (8000998 <HAL_I2C_MspInit+0x94>)
 8000932:	699b      	ldr	r3, [r3, #24]
 8000934:	f003 0308 	and.w	r3, r3, #8
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800093c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000942:	2312      	movs	r3, #18
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000946:	2303      	movs	r3, #3
 8000948:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800094a:	f107 0314 	add.w	r3, r7, #20
 800094e:	4619      	mov	r1, r3
 8000950:	4812      	ldr	r0, [pc, #72]	; (800099c <HAL_I2C_MspInit+0x98>)
 8000952:	f000 fc91 	bl	8001278 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8000956:	4b12      	ldr	r3, [pc, #72]	; (80009a0 <HAL_I2C_MspInit+0x9c>)
 8000958:	685b      	ldr	r3, [r3, #4]
 800095a:	627b      	str	r3, [r7, #36]	; 0x24
 800095c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800095e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000962:	627b      	str	r3, [r7, #36]	; 0x24
 8000964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000966:	f043 0302 	orr.w	r3, r3, #2
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
 800096c:	4a0c      	ldr	r2, [pc, #48]	; (80009a0 <HAL_I2C_MspInit+0x9c>)
 800096e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000970:	6053      	str	r3, [r2, #4]

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000972:	4b09      	ldr	r3, [pc, #36]	; (8000998 <HAL_I2C_MspInit+0x94>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a08      	ldr	r2, [pc, #32]	; (8000998 <HAL_I2C_MspInit+0x94>)
 8000978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b06      	ldr	r3, [pc, #24]	; (8000998 <HAL_I2C_MspInit+0x94>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40005400 	.word	0x40005400
 8000998:	40021000 	.word	0x40021000
 800099c:	40010c00 	.word	0x40010c00
 80009a0:	40010000 	.word	0x40010000

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009aa:	f000 fa5d 	bl	8000e68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ae:	f000 f839 	bl	8000a24 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f7ff ff21 	bl	80007f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009b6:	f000 f9b5 	bl	8000d24 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 80009ba:	f000 f93d 	bl	8000c38 <MX_TIM1_Init>
  MX_I2C1_Init();
 80009be:	f7ff ff73 	bl	80008a8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //Init des modules : on fait le lien entre les modules et les structures hal
  LED_SEQUENCE_init(&sys.led, MPU_VCC_GPIO_Port, MPU_VCC_Pin, SEQUENCE_LED_9, 200, 12, FALSE);
 80009c2:	2300      	movs	r3, #0
 80009c4:	9302      	str	r3, [sp, #8]
 80009c6:	230c      	movs	r3, #12
 80009c8:	9301      	str	r3, [sp, #4]
 80009ca:	23c8      	movs	r3, #200	; 0xc8
 80009cc:	9300      	str	r3, [sp, #0]
 80009ce:	f640 73ff 	movw	r3, #4095	; 0xfff
 80009d2:	2220      	movs	r2, #32
 80009d4:	490e      	ldr	r1, [pc, #56]	; (8000a10 <main+0x6c>)
 80009d6:	480f      	ldr	r0, [pc, #60]	; (8000a14 <main+0x70>)
 80009d8:	f002 fcb4 	bl	8003344 <LED_SEQUENCE_init>

  //Init du task manager
  SCHEDULER_init(&sys);
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <main+0x70>)
 80009de:	f7ff fc83 	bl	80002e8 <SCHEDULER_init>

  //Test présence mpu en i2c
  HAL_Delay(500);
 80009e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009e6:	f000 faa1 	bl	8000f2c <HAL_Delay>
  HAL_StatusTypeDef mpu_ok = HAL_I2C_IsDeviceReady(&hi2c1, 0xD0, 2, 5);
 80009ea:	2305      	movs	r3, #5
 80009ec:	2202      	movs	r2, #2
 80009ee:	21d0      	movs	r1, #208	; 0xd0
 80009f0:	4809      	ldr	r0, [pc, #36]	; (8000a18 <main+0x74>)
 80009f2:	f000 feeb 	bl	80017cc <HAL_I2C_IsDeviceReady>
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  printf("Mpu\t%d\n", mpu_ok);
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4619      	mov	r1, r3
 80009fe:	4807      	ldr	r0, [pc, #28]	; (8000a1c <main+0x78>)
 8000a00:	f002 fd6a 	bl	80034d8 <iprintf>
  HAL_Delay(500000);
 8000a04:	4806      	ldr	r0, [pc, #24]	; (8000a20 <main+0x7c>)
 8000a06:	f000 fa91 	bl	8000f2c <HAL_Delay>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCHEDULER_run();
 8000a0a:	f7ff fc7f 	bl	800030c <SCHEDULER_run>
 8000a0e:	e7fc      	b.n	8000a0a <main+0x66>
 8000a10:	40010800 	.word	0x40010800
 8000a14:	20000420 	.word	0x20000420
 8000a18:	200003cc 	.word	0x200003cc
 8000a1c:	0800450c 	.word	0x0800450c
 8000a20:	0007a120 	.word	0x0007a120

08000a24 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b090      	sub	sp, #64	; 0x40
 8000a28:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a2a:	f107 0318 	add.w	r3, r7, #24
 8000a2e:	2228      	movs	r2, #40	; 0x28
 8000a30:	2100      	movs	r1, #0
 8000a32:	4618      	mov	r0, r3
 8000a34:	f002 fd47 	bl	80034c6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a38:	1d3b      	adds	r3, r7, #4
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	601a      	str	r2, [r3, #0]
 8000a3e:	605a      	str	r2, [r3, #4]
 8000a40:	609a      	str	r2, [r3, #8]
 8000a42:	60da      	str	r2, [r3, #12]
 8000a44:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a46:	2302      	movs	r3, #2
 8000a48:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a4a:	2301      	movs	r3, #1
 8000a4c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a4e:	2310      	movs	r3, #16
 8000a50:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a52:	2302      	movs	r3, #2
 8000a54:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000a56:	2300      	movs	r3, #0
 8000a58:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000a5a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	f107 0318 	add.w	r3, r7, #24
 8000a64:	4618      	mov	r0, r3
 8000a66:	f001 f837 	bl	8001ad8 <HAL_RCC_OscConfig>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000a70:	f000 f82c 	bl	8000acc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a74:	230f      	movs	r3, #15
 8000a76:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a78:	2302      	movs	r3, #2
 8000a7a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a80:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2102      	movs	r1, #2
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 faa2 	bl	8001fd8 <HAL_RCC_ClockConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000a9a:	f000 f817 	bl	8000acc <Error_Handler>
  }
}
 8000a9e:	bf00      	nop
 8000aa0:	3740      	adds	r7, #64	; 0x40
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	bd80      	pop	{r7, pc}

08000aa6 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	b083      	sub	sp, #12
 8000aaa:	af00      	add	r7, sp, #0
 8000aac:	6078      	str	r0, [r7, #4]
	UNUSED(huart);


}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bc80      	pop	{r7}
 8000ab6:	4770      	bx	lr

08000ab8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b083      	sub	sp, #12
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
	UNUSED(htim);
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bc80      	pop	{r7}
 8000ac8:	4770      	bx	lr
	...

08000acc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	printf("error_handler\n");
 8000ad0:	4802      	ldr	r0, [pc, #8]	; (8000adc <Error_Handler+0x10>)
 8000ad2:	f002 fd75 	bl	80035c0 <puts>
  /* USER CODE END Error_Handler_Debug */
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	08004514 	.word	0x08004514

08000ae0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <HAL_MspInit+0x5c>)
 8000ae8:	699b      	ldr	r3, [r3, #24]
 8000aea:	4a14      	ldr	r2, [pc, #80]	; (8000b3c <HAL_MspInit+0x5c>)
 8000aec:	f043 0301 	orr.w	r3, r3, #1
 8000af0:	6193      	str	r3, [r2, #24]
 8000af2:	4b12      	ldr	r3, [pc, #72]	; (8000b3c <HAL_MspInit+0x5c>)
 8000af4:	699b      	ldr	r3, [r3, #24]
 8000af6:	f003 0301 	and.w	r3, r3, #1
 8000afa:	60bb      	str	r3, [r7, #8]
 8000afc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	4b0f      	ldr	r3, [pc, #60]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b00:	69db      	ldr	r3, [r3, #28]
 8000b02:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b08:	61d3      	str	r3, [r2, #28]
 8000b0a:	4b0c      	ldr	r3, [pc, #48]	; (8000b3c <HAL_MspInit+0x5c>)
 8000b0c:	69db      	ldr	r3, [r3, #28]
 8000b0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b12:	607b      	str	r3, [r7, #4]
 8000b14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b16:	4b0a      	ldr	r3, [pc, #40]	; (8000b40 <HAL_MspInit+0x60>)
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	60fb      	str	r3, [r7, #12]
 8000b1c:	68fb      	ldr	r3, [r7, #12]
 8000b1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	4a04      	ldr	r2, [pc, #16]	; (8000b40 <HAL_MspInit+0x60>)
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b32:	bf00      	nop
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	40010000 	.word	0x40010000

08000b44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b44:	b480      	push	{r7}
 8000b46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b48:	bf00      	nop
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bc80      	pop	{r7}
 8000b4e:	4770      	bx	lr

08000b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b54:	e7fe      	b.n	8000b54 <HardFault_Handler+0x4>

08000b56 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b56:	b480      	push	{r7}
 8000b58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b5a:	e7fe      	b.n	8000b5a <MemManage_Handler+0x4>

08000b5c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b60:	e7fe      	b.n	8000b60 <BusFault_Handler+0x4>

08000b62 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b62:	b480      	push	{r7}
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b66:	e7fe      	b.n	8000b66 <UsageFault_Handler+0x4>

08000b68 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b6c:	bf00      	nop
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bc80      	pop	{r7}
 8000b72:	4770      	bx	lr

08000b74 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b78:	bf00      	nop
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bc80      	pop	{r7}
 8000b7e:	4770      	bx	lr

08000b80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b84:	bf00      	nop
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bc80      	pop	{r7}
 8000b8a:	4770      	bx	lr

08000b8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b90:	f000 f9b0 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}

08000b98 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM1_UP_IRQHandler+0x10>)
 8000b9e:	f001 fc06 	bl	80023ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	2000043c 	.word	0x2000043c

08000bac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bb0:	4802      	ldr	r0, [pc, #8]	; (8000bbc <USART2_IRQHandler+0x10>)
 8000bb2:	f002 f8c5 	bl	8002d40 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000484 	.word	0x20000484

08000bc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bc8:	4a14      	ldr	r2, [pc, #80]	; (8000c1c <_sbrk+0x5c>)
 8000bca:	4b15      	ldr	r3, [pc, #84]	; (8000c20 <_sbrk+0x60>)
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bd0:	697b      	ldr	r3, [r7, #20]
 8000bd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bd4:	4b13      	ldr	r3, [pc, #76]	; (8000c24 <_sbrk+0x64>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	2b00      	cmp	r3, #0
 8000bda:	d102      	bne.n	8000be2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bdc:	4b11      	ldr	r3, [pc, #68]	; (8000c24 <_sbrk+0x64>)
 8000bde:	4a12      	ldr	r2, [pc, #72]	; (8000c28 <_sbrk+0x68>)
 8000be0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000be2:	4b10      	ldr	r3, [pc, #64]	; (8000c24 <_sbrk+0x64>)
 8000be4:	681a      	ldr	r2, [r3, #0]
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	4413      	add	r3, r2
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	429a      	cmp	r2, r3
 8000bee:	d207      	bcs.n	8000c00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bf0:	f002 fc26 	bl	8003440 <__errno>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	230c      	movs	r3, #12
 8000bf8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8000bfe:	e009      	b.n	8000c14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c00:	4b08      	ldr	r3, [pc, #32]	; (8000c24 <_sbrk+0x64>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c06:	4b07      	ldr	r3, [pc, #28]	; (8000c24 <_sbrk+0x64>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4413      	add	r3, r2
 8000c0e:	4a05      	ldr	r2, [pc, #20]	; (8000c24 <_sbrk+0x64>)
 8000c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c12:	68fb      	ldr	r3, [r7, #12]
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3718      	adds	r7, #24
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20005000 	.word	0x20005000
 8000c20:	00000400 	.word	0x00000400
 8000c24:	200003bc 	.word	0x200003bc
 8000c28:	200004d0 	.word	0x200004d0

08000c2c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c30:	bf00      	nop
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr

08000c38 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b086      	sub	sp, #24
 8000c3c:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c3e:	f107 0308 	add.w	r3, r7, #8
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
 8000c4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c4c:	463b      	mov	r3, r7
 8000c4e:	2200      	movs	r2, #0
 8000c50:	601a      	str	r2, [r3, #0]
 8000c52:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000c54:	4b1e      	ldr	r3, [pc, #120]	; (8000cd0 <MX_TIM1_Init+0x98>)
 8000c56:	4a1f      	ldr	r2, [pc, #124]	; (8000cd4 <MX_TIM1_Init+0x9c>)
 8000c58:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000c5a:	4b1d      	ldr	r3, [pc, #116]	; (8000cd0 <MX_TIM1_Init+0x98>)
 8000c5c:	223f      	movs	r2, #63	; 0x3f
 8000c5e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c60:	4b1b      	ldr	r3, [pc, #108]	; (8000cd0 <MX_TIM1_Init+0x98>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000c66:	4b1a      	ldr	r3, [pc, #104]	; (8000cd0 <MX_TIM1_Init+0x98>)
 8000c68:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c6c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <MX_TIM1_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c74:	4b16      	ldr	r3, [pc, #88]	; (8000cd0 <MX_TIM1_Init+0x98>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000c7a:	4b15      	ldr	r3, [pc, #84]	; (8000cd0 <MX_TIM1_Init+0x98>)
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c80:	4813      	ldr	r0, [pc, #76]	; (8000cd0 <MX_TIM1_Init+0x98>)
 8000c82:	f001 fb45 	bl	8002310 <HAL_TIM_Base_Init>
 8000c86:	4603      	mov	r3, r0
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d001      	beq.n	8000c90 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000c8c:	f7ff ff1e 	bl	8000acc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c96:	f107 0308 	add.w	r3, r7, #8
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <MX_TIM1_Init+0x98>)
 8000c9e:	f001 fc8e 	bl	80025be <HAL_TIM_ConfigClockSource>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ca8:	f7ff ff10 	bl	8000acc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cac:	2300      	movs	r3, #0
 8000cae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cb4:	463b      	mov	r3, r7
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4805      	ldr	r0, [pc, #20]	; (8000cd0 <MX_TIM1_Init+0x98>)
 8000cba:	f001 fe53 	bl	8002964 <HAL_TIMEx_MasterConfigSynchronization>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000cc4:	f7ff ff02 	bl	8000acc <Error_Handler>
  }

}
 8000cc8:	bf00      	nop
 8000cca:	3718      	adds	r7, #24
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	2000043c 	.word	0x2000043c
 8000cd4:	40012c00 	.word	0x40012c00

08000cd8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a0d      	ldr	r2, [pc, #52]	; (8000d1c <HAL_TIM_Base_MspInit+0x44>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d113      	bne.n	8000d12 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cea:	4b0d      	ldr	r3, [pc, #52]	; (8000d20 <HAL_TIM_Base_MspInit+0x48>)
 8000cec:	699b      	ldr	r3, [r3, #24]
 8000cee:	4a0c      	ldr	r2, [pc, #48]	; (8000d20 <HAL_TIM_Base_MspInit+0x48>)
 8000cf0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000cf4:	6193      	str	r3, [r2, #24]
 8000cf6:	4b0a      	ldr	r3, [pc, #40]	; (8000d20 <HAL_TIM_Base_MspInit+0x48>)
 8000cf8:	699b      	ldr	r3, [r3, #24]
 8000cfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000d02:	2200      	movs	r2, #0
 8000d04:	2100      	movs	r1, #0
 8000d06:	2019      	movs	r0, #25
 8000d08:	f000 fa09 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000d0c:	2019      	movs	r0, #25
 8000d0e:	f000 fa22 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000d12:	bf00      	nop
 8000d14:	3710      	adds	r7, #16
 8000d16:	46bd      	mov	sp, r7
 8000d18:	bd80      	pop	{r7, pc}
 8000d1a:	bf00      	nop
 8000d1c:	40012c00 	.word	0x40012c00
 8000d20:	40021000 	.word	0x40021000

08000d24 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d2a:	4a12      	ldr	r2, [pc, #72]	; (8000d74 <MX_USART2_UART_Init+0x50>)
 8000d2c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000d2e:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d30:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000d34:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d3c:	4b0c      	ldr	r3, [pc, #48]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d4a:	220c      	movs	r2, #12
 8000d4c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d4e:	4b08      	ldr	r3, [pc, #32]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d54:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d5a:	4805      	ldr	r0, [pc, #20]	; (8000d70 <MX_USART2_UART_Init+0x4c>)
 8000d5c:	f001 fe72 	bl	8002a44 <HAL_UART_Init>
 8000d60:	4603      	mov	r3, r0
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d001      	beq.n	8000d6a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d66:	f7ff feb1 	bl	8000acc <Error_Handler>
  }

}
 8000d6a:	bf00      	nop
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	20000484 	.word	0x20000484
 8000d74:	40004400 	.word	0x40004400

08000d78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b088      	sub	sp, #32
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0310 	add.w	r3, r7, #16
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a1f      	ldr	r2, [pc, #124]	; (8000e10 <HAL_UART_MspInit+0x98>)
 8000d94:	4293      	cmp	r3, r2
 8000d96:	d137      	bne.n	8000e08 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d98:	4b1e      	ldr	r3, [pc, #120]	; (8000e14 <HAL_UART_MspInit+0x9c>)
 8000d9a:	69db      	ldr	r3, [r3, #28]
 8000d9c:	4a1d      	ldr	r2, [pc, #116]	; (8000e14 <HAL_UART_MspInit+0x9c>)
 8000d9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000da2:	61d3      	str	r3, [r2, #28]
 8000da4:	4b1b      	ldr	r3, [pc, #108]	; (8000e14 <HAL_UART_MspInit+0x9c>)
 8000da6:	69db      	ldr	r3, [r3, #28]
 8000da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000dac:	60fb      	str	r3, [r7, #12]
 8000dae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000db0:	4b18      	ldr	r3, [pc, #96]	; (8000e14 <HAL_UART_MspInit+0x9c>)
 8000db2:	699b      	ldr	r3, [r3, #24]
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <HAL_UART_MspInit+0x9c>)
 8000db6:	f043 0304 	orr.w	r3, r3, #4
 8000dba:	6193      	str	r3, [r2, #24]
 8000dbc:	4b15      	ldr	r3, [pc, #84]	; (8000e14 <HAL_UART_MspInit+0x9c>)
 8000dbe:	699b      	ldr	r3, [r3, #24]
 8000dc0:	f003 0304 	and.w	r3, r3, #4
 8000dc4:	60bb      	str	r3, [r7, #8]
 8000dc6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000dc8:	2304      	movs	r3, #4
 8000dca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd4:	f107 0310 	add.w	r3, r7, #16
 8000dd8:	4619      	mov	r1, r3
 8000dda:	480f      	ldr	r0, [pc, #60]	; (8000e18 <HAL_UART_MspInit+0xa0>)
 8000ddc:	f000 fa4c 	bl	8001278 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000de0:	2308      	movs	r3, #8
 8000de2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000de4:	2300      	movs	r3, #0
 8000de6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de8:	2300      	movs	r3, #0
 8000dea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dec:	f107 0310 	add.w	r3, r7, #16
 8000df0:	4619      	mov	r1, r3
 8000df2:	4809      	ldr	r0, [pc, #36]	; (8000e18 <HAL_UART_MspInit+0xa0>)
 8000df4:	f000 fa40 	bl	8001278 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	2026      	movs	r0, #38	; 0x26
 8000dfe:	f000 f98e 	bl	800111e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e02:	2026      	movs	r0, #38	; 0x26
 8000e04:	f000 f9a7 	bl	8001156 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e08:	bf00      	nop
 8000e0a:	3720      	adds	r7, #32
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	40004400 	.word	0x40004400
 8000e14:	40021000 	.word	0x40021000
 8000e18:	40010800 	.word	0x40010800

08000e1c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e1c:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e1e:	e003      	b.n	8000e28 <LoopCopyDataInit>

08000e20 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e22:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e24:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e26:	3104      	adds	r1, #4

08000e28 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e28:	480a      	ldr	r0, [pc, #40]	; (8000e54 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e2c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e2e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e30:	d3f6      	bcc.n	8000e20 <CopyDataInit>
  ldr r2, =_sbss
 8000e32:	4a0a      	ldr	r2, [pc, #40]	; (8000e5c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e34:	e002      	b.n	8000e3c <LoopFillZerobss>

08000e36 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e36:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e38:	f842 3b04 	str.w	r3, [r2], #4

08000e3c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e3c:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e3e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e40:	d3f9      	bcc.n	8000e36 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e42:	f7ff fef3 	bl	8000c2c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e46:	f002 fb01 	bl	800344c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e4a:	f7ff fdab 	bl	80009a4 <main>
  bx lr
 8000e4e:	4770      	bx	lr
  ldr r3, =_sidata
 8000e50:	080045f0 	.word	0x080045f0
  ldr r0, =_sdata
 8000e54:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e58:	20000380 	.word	0x20000380
  ldr r2, =_sbss
 8000e5c:	20000380 	.word	0x20000380
  ldr r3, = _ebss
 8000e60:	200004cc 	.word	0x200004cc

08000e64 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e64:	e7fe      	b.n	8000e64 <ADC1_2_IRQHandler>
	...

08000e68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <HAL_Init+0x28>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a07      	ldr	r2, [pc, #28]	; (8000e90 <HAL_Init+0x28>)
 8000e72:	f043 0310 	orr.w	r3, r3, #16
 8000e76:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e78:	2003      	movs	r0, #3
 8000e7a:	f000 f945 	bl	8001108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e7e:	2000      	movs	r0, #0
 8000e80:	f000 f808 	bl	8000e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e84:	f7ff fe2c 	bl	8000ae0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40022000 	.word	0x40022000

08000e94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e9c:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_InitTick+0x54>)
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	4b12      	ldr	r3, [pc, #72]	; (8000eec <HAL_InitTick+0x58>)
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f000 f95d 	bl	8001172 <HAL_SYSTICK_Config>
 8000eb8:	4603      	mov	r3, r0
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d001      	beq.n	8000ec2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	e00e      	b.n	8000ee0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b0f      	cmp	r3, #15
 8000ec6:	d80a      	bhi.n	8000ede <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ec8:	2200      	movs	r2, #0
 8000eca:	6879      	ldr	r1, [r7, #4]
 8000ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed0:	f000 f925 	bl	800111e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed4:	4a06      	ldr	r2, [pc, #24]	; (8000ef0 <HAL_InitTick+0x5c>)
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	e000      	b.n	8000ee0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20000310 	.word	0x20000310
 8000eec:	20000318 	.word	0x20000318
 8000ef0:	20000314 	.word	0x20000314

08000ef4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef8:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <HAL_IncTick+0x1c>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b05      	ldr	r3, [pc, #20]	; (8000f14 <HAL_IncTick+0x20>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a03      	ldr	r2, [pc, #12]	; (8000f14 <HAL_IncTick+0x20>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bc80      	pop	{r7}
 8000f0e:	4770      	bx	lr
 8000f10:	20000318 	.word	0x20000318
 8000f14:	200004c4 	.word	0x200004c4

08000f18 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b02      	ldr	r3, [pc, #8]	; (8000f28 <HAL_GetTick+0x10>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr
 8000f28:	200004c4 	.word	0x200004c4

08000f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f34:	f7ff fff0 	bl	8000f18 <HAL_GetTick>
 8000f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f44:	d005      	beq.n	8000f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f46:	4b09      	ldr	r3, [pc, #36]	; (8000f6c <HAL_Delay+0x40>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	4413      	add	r3, r2
 8000f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f52:	bf00      	nop
 8000f54:	f7ff ffe0 	bl	8000f18 <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	68fa      	ldr	r2, [r7, #12]
 8000f60:	429a      	cmp	r2, r3
 8000f62:	d8f7      	bhi.n	8000f54 <HAL_Delay+0x28>
  {
  }
}
 8000f64:	bf00      	nop
 8000f66:	3710      	adds	r7, #16
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000318 	.word	0x20000318

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	bc80      	pop	{r7}
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4906      	ldr	r1, [pc, #24]	; (8001008 <__NVIC_EnableIRQ+0x34>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	bc80      	pop	{r7}
 8001006:	4770      	bx	lr
 8001008:	e000e100 	.word	0xe000e100

0800100c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
 8001012:	4603      	mov	r3, r0
 8001014:	6039      	str	r1, [r7, #0]
 8001016:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001018:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800101c:	2b00      	cmp	r3, #0
 800101e:	db0a      	blt.n	8001036 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001020:	683b      	ldr	r3, [r7, #0]
 8001022:	b2da      	uxtb	r2, r3
 8001024:	490c      	ldr	r1, [pc, #48]	; (8001058 <__NVIC_SetPriority+0x4c>)
 8001026:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102a:	0112      	lsls	r2, r2, #4
 800102c:	b2d2      	uxtb	r2, r2
 800102e:	440b      	add	r3, r1
 8001030:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001034:	e00a      	b.n	800104c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	b2da      	uxtb	r2, r3
 800103a:	4908      	ldr	r1, [pc, #32]	; (800105c <__NVIC_SetPriority+0x50>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	f003 030f 	and.w	r3, r3, #15
 8001042:	3b04      	subs	r3, #4
 8001044:	0112      	lsls	r2, r2, #4
 8001046:	b2d2      	uxtb	r2, r2
 8001048:	440b      	add	r3, r1
 800104a:	761a      	strb	r2, [r3, #24]
}
 800104c:	bf00      	nop
 800104e:	370c      	adds	r7, #12
 8001050:	46bd      	mov	sp, r7
 8001052:	bc80      	pop	{r7}
 8001054:	4770      	bx	lr
 8001056:	bf00      	nop
 8001058:	e000e100 	.word	0xe000e100
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001060:	b480      	push	{r7}
 8001062:	b089      	sub	sp, #36	; 0x24
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 0307 	and.w	r3, r3, #7
 8001072:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	f1c3 0307 	rsb	r3, r3, #7
 800107a:	2b04      	cmp	r3, #4
 800107c:	bf28      	it	cs
 800107e:	2304      	movcs	r3, #4
 8001080:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	3304      	adds	r3, #4
 8001086:	2b06      	cmp	r3, #6
 8001088:	d902      	bls.n	8001090 <NVIC_EncodePriority+0x30>
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	3b03      	subs	r3, #3
 800108e:	e000      	b.n	8001092 <NVIC_EncodePriority+0x32>
 8001090:	2300      	movs	r3, #0
 8001092:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001094:	f04f 32ff 	mov.w	r2, #4294967295
 8001098:	69bb      	ldr	r3, [r7, #24]
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43da      	mvns	r2, r3
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	401a      	ands	r2, r3
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010a8:	f04f 31ff 	mov.w	r1, #4294967295
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa01 f303 	lsl.w	r3, r1, r3
 80010b2:	43d9      	mvns	r1, r3
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010b8:	4313      	orrs	r3, r2
         );
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3724      	adds	r7, #36	; 0x24
 80010be:	46bd      	mov	sp, r7
 80010c0:	bc80      	pop	{r7}
 80010c2:	4770      	bx	lr

080010c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	3b01      	subs	r3, #1
 80010d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010d4:	d301      	bcc.n	80010da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010d6:	2301      	movs	r3, #1
 80010d8:	e00f      	b.n	80010fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010da:	4a0a      	ldr	r2, [pc, #40]	; (8001104 <SysTick_Config+0x40>)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3b01      	subs	r3, #1
 80010e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010e2:	210f      	movs	r1, #15
 80010e4:	f04f 30ff 	mov.w	r0, #4294967295
 80010e8:	f7ff ff90 	bl	800100c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010ec:	4b05      	ldr	r3, [pc, #20]	; (8001104 <SysTick_Config+0x40>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010f2:	4b04      	ldr	r3, [pc, #16]	; (8001104 <SysTick_Config+0x40>)
 80010f4:	2207      	movs	r2, #7
 80010f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010f8:	2300      	movs	r3, #0
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	e000e010 	.word	0xe000e010

08001108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ff2d 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 8001116:	bf00      	nop
 8001118:	3708      	adds	r7, #8
 800111a:	46bd      	mov	sp, r7
 800111c:	bd80      	pop	{r7, pc}

0800111e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800111e:	b580      	push	{r7, lr}
 8001120:	b086      	sub	sp, #24
 8001122:	af00      	add	r7, sp, #0
 8001124:	4603      	mov	r3, r0
 8001126:	60b9      	str	r1, [r7, #8]
 8001128:	607a      	str	r2, [r7, #4]
 800112a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800112c:	2300      	movs	r3, #0
 800112e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001130:	f7ff ff42 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	6978      	ldr	r0, [r7, #20]
 800113c:	f7ff ff90 	bl	8001060 <NVIC_EncodePriority>
 8001140:	4602      	mov	r2, r0
 8001142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001146:	4611      	mov	r1, r2
 8001148:	4618      	mov	r0, r3
 800114a:	f7ff ff5f 	bl	800100c <__NVIC_SetPriority>
}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}

08001156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	b082      	sub	sp, #8
 800115a:	af00      	add	r7, sp, #0
 800115c:	4603      	mov	r3, r0
 800115e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001164:	4618      	mov	r0, r3
 8001166:	f7ff ff35 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800116a:	bf00      	nop
 800116c:	3708      	adds	r7, #8
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}

08001172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001172:	b580      	push	{r7, lr}
 8001174:	b082      	sub	sp, #8
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800117a:	6878      	ldr	r0, [r7, #4]
 800117c:	f7ff ffa2 	bl	80010c4 <SysTick_Config>
 8001180:	4603      	mov	r3, r0
}
 8001182:	4618      	mov	r0, r3
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800118c:	b580      	push	{r7, lr}
 800118e:	b084      	sub	sp, #16
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001194:	2300      	movs	r3, #0
 8001196:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800119e:	2b02      	cmp	r3, #2
 80011a0:	d005      	beq.n	80011ae <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2204      	movs	r2, #4
 80011a6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	73fb      	strb	r3, [r7, #15]
 80011ac:	e051      	b.n	8001252 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f022 020e 	bic.w	r2, r2, #14
 80011bc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0201 	bic.w	r2, r2, #1
 80011cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a22      	ldr	r2, [pc, #136]	; (800125c <HAL_DMA_Abort_IT+0xd0>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d029      	beq.n	800122c <HAL_DMA_Abort_IT+0xa0>
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a20      	ldr	r2, [pc, #128]	; (8001260 <HAL_DMA_Abort_IT+0xd4>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d022      	beq.n	8001228 <HAL_DMA_Abort_IT+0x9c>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	4a1f      	ldr	r2, [pc, #124]	; (8001264 <HAL_DMA_Abort_IT+0xd8>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d01a      	beq.n	8001222 <HAL_DMA_Abort_IT+0x96>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	4a1d      	ldr	r2, [pc, #116]	; (8001268 <HAL_DMA_Abort_IT+0xdc>)
 80011f2:	4293      	cmp	r3, r2
 80011f4:	d012      	beq.n	800121c <HAL_DMA_Abort_IT+0x90>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a1c      	ldr	r2, [pc, #112]	; (800126c <HAL_DMA_Abort_IT+0xe0>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d00a      	beq.n	8001216 <HAL_DMA_Abort_IT+0x8a>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4a1a      	ldr	r2, [pc, #104]	; (8001270 <HAL_DMA_Abort_IT+0xe4>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d102      	bne.n	8001210 <HAL_DMA_Abort_IT+0x84>
 800120a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800120e:	e00e      	b.n	800122e <HAL_DMA_Abort_IT+0xa2>
 8001210:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001214:	e00b      	b.n	800122e <HAL_DMA_Abort_IT+0xa2>
 8001216:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800121a:	e008      	b.n	800122e <HAL_DMA_Abort_IT+0xa2>
 800121c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001220:	e005      	b.n	800122e <HAL_DMA_Abort_IT+0xa2>
 8001222:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001226:	e002      	b.n	800122e <HAL_DMA_Abort_IT+0xa2>
 8001228:	2310      	movs	r3, #16
 800122a:	e000      	b.n	800122e <HAL_DMA_Abort_IT+0xa2>
 800122c:	2301      	movs	r3, #1
 800122e:	4a11      	ldr	r2, [pc, #68]	; (8001274 <HAL_DMA_Abort_IT+0xe8>)
 8001230:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2201      	movs	r2, #1
 8001236:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	2200      	movs	r2, #0
 800123e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001246:	2b00      	cmp	r3, #0
 8001248:	d003      	beq.n	8001252 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800124e:	6878      	ldr	r0, [r7, #4]
 8001250:	4798      	blx	r3
    } 
  }
  return status;
 8001252:	7bfb      	ldrb	r3, [r7, #15]
}
 8001254:	4618      	mov	r0, r3
 8001256:	3710      	adds	r7, #16
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40020008 	.word	0x40020008
 8001260:	4002001c 	.word	0x4002001c
 8001264:	40020030 	.word	0x40020030
 8001268:	40020044 	.word	0x40020044
 800126c:	40020058 	.word	0x40020058
 8001270:	4002006c 	.word	0x4002006c
 8001274:	40020000 	.word	0x40020000

08001278 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001278:	b480      	push	{r7}
 800127a:	b08b      	sub	sp, #44	; 0x2c
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001286:	2300      	movs	r3, #0
 8001288:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800128a:	e127      	b.n	80014dc <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800128c:	2201      	movs	r2, #1
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	69fa      	ldr	r2, [r7, #28]
 800129c:	4013      	ands	r3, r2
 800129e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	429a      	cmp	r2, r3
 80012a6:	f040 8116 	bne.w	80014d6 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b12      	cmp	r3, #18
 80012b0:	d034      	beq.n	800131c <HAL_GPIO_Init+0xa4>
 80012b2:	2b12      	cmp	r3, #18
 80012b4:	d80d      	bhi.n	80012d2 <HAL_GPIO_Init+0x5a>
 80012b6:	2b02      	cmp	r3, #2
 80012b8:	d02b      	beq.n	8001312 <HAL_GPIO_Init+0x9a>
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d804      	bhi.n	80012c8 <HAL_GPIO_Init+0x50>
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d031      	beq.n	8001326 <HAL_GPIO_Init+0xae>
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d01c      	beq.n	8001300 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012c6:	e048      	b.n	800135a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012c8:	2b03      	cmp	r3, #3
 80012ca:	d043      	beq.n	8001354 <HAL_GPIO_Init+0xdc>
 80012cc:	2b11      	cmp	r3, #17
 80012ce:	d01b      	beq.n	8001308 <HAL_GPIO_Init+0x90>
          break;
 80012d0:	e043      	b.n	800135a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012d2:	4a89      	ldr	r2, [pc, #548]	; (80014f8 <HAL_GPIO_Init+0x280>)
 80012d4:	4293      	cmp	r3, r2
 80012d6:	d026      	beq.n	8001326 <HAL_GPIO_Init+0xae>
 80012d8:	4a87      	ldr	r2, [pc, #540]	; (80014f8 <HAL_GPIO_Init+0x280>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d806      	bhi.n	80012ec <HAL_GPIO_Init+0x74>
 80012de:	4a87      	ldr	r2, [pc, #540]	; (80014fc <HAL_GPIO_Init+0x284>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d020      	beq.n	8001326 <HAL_GPIO_Init+0xae>
 80012e4:	4a86      	ldr	r2, [pc, #536]	; (8001500 <HAL_GPIO_Init+0x288>)
 80012e6:	4293      	cmp	r3, r2
 80012e8:	d01d      	beq.n	8001326 <HAL_GPIO_Init+0xae>
          break;
 80012ea:	e036      	b.n	800135a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80012ec:	4a85      	ldr	r2, [pc, #532]	; (8001504 <HAL_GPIO_Init+0x28c>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d019      	beq.n	8001326 <HAL_GPIO_Init+0xae>
 80012f2:	4a85      	ldr	r2, [pc, #532]	; (8001508 <HAL_GPIO_Init+0x290>)
 80012f4:	4293      	cmp	r3, r2
 80012f6:	d016      	beq.n	8001326 <HAL_GPIO_Init+0xae>
 80012f8:	4a84      	ldr	r2, [pc, #528]	; (800150c <HAL_GPIO_Init+0x294>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0xae>
          break;
 80012fe:	e02c      	b.n	800135a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	68db      	ldr	r3, [r3, #12]
 8001304:	623b      	str	r3, [r7, #32]
          break;
 8001306:	e028      	b.n	800135a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	3304      	adds	r3, #4
 800130e:	623b      	str	r3, [r7, #32]
          break;
 8001310:	e023      	b.n	800135a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	3308      	adds	r3, #8
 8001318:	623b      	str	r3, [r7, #32]
          break;
 800131a:	e01e      	b.n	800135a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	330c      	adds	r3, #12
 8001322:	623b      	str	r3, [r7, #32]
          break;
 8001324:	e019      	b.n	800135a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d102      	bne.n	8001334 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800132e:	2304      	movs	r3, #4
 8001330:	623b      	str	r3, [r7, #32]
          break;
 8001332:	e012      	b.n	800135a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	2b01      	cmp	r3, #1
 800133a:	d105      	bne.n	8001348 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800133c:	2308      	movs	r3, #8
 800133e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	69fa      	ldr	r2, [r7, #28]
 8001344:	611a      	str	r2, [r3, #16]
          break;
 8001346:	e008      	b.n	800135a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001348:	2308      	movs	r3, #8
 800134a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	69fa      	ldr	r2, [r7, #28]
 8001350:	615a      	str	r2, [r3, #20]
          break;
 8001352:	e002      	b.n	800135a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
          break;
 8001358:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800135a:	69bb      	ldr	r3, [r7, #24]
 800135c:	2bff      	cmp	r3, #255	; 0xff
 800135e:	d801      	bhi.n	8001364 <HAL_GPIO_Init+0xec>
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	e001      	b.n	8001368 <HAL_GPIO_Init+0xf0>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	3304      	adds	r3, #4
 8001368:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	2bff      	cmp	r3, #255	; 0xff
 800136e:	d802      	bhi.n	8001376 <HAL_GPIO_Init+0xfe>
 8001370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	e002      	b.n	800137c <HAL_GPIO_Init+0x104>
 8001376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001378:	3b08      	subs	r3, #8
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	210f      	movs	r1, #15
 8001384:	693b      	ldr	r3, [r7, #16]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43db      	mvns	r3, r3
 800138c:	401a      	ands	r2, r3
 800138e:	6a39      	ldr	r1, [r7, #32]
 8001390:	693b      	ldr	r3, [r7, #16]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	431a      	orrs	r2, r3
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	f000 8096 	beq.w	80014d6 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013aa:	4b59      	ldr	r3, [pc, #356]	; (8001510 <HAL_GPIO_Init+0x298>)
 80013ac:	699b      	ldr	r3, [r3, #24]
 80013ae:	4a58      	ldr	r2, [pc, #352]	; (8001510 <HAL_GPIO_Init+0x298>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6193      	str	r3, [r2, #24]
 80013b6:	4b56      	ldr	r3, [pc, #344]	; (8001510 <HAL_GPIO_Init+0x298>)
 80013b8:	699b      	ldr	r3, [r3, #24]
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013c2:	4a54      	ldr	r2, [pc, #336]	; (8001514 <HAL_GPIO_Init+0x29c>)
 80013c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013c6:	089b      	lsrs	r3, r3, #2
 80013c8:	3302      	adds	r3, #2
 80013ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013ce:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d2:	f003 0303 	and.w	r3, r3, #3
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	220f      	movs	r2, #15
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43db      	mvns	r3, r3
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4a4b      	ldr	r2, [pc, #300]	; (8001518 <HAL_GPIO_Init+0x2a0>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d013      	beq.n	8001416 <HAL_GPIO_Init+0x19e>
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4a4a      	ldr	r2, [pc, #296]	; (800151c <HAL_GPIO_Init+0x2a4>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d00d      	beq.n	8001412 <HAL_GPIO_Init+0x19a>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	4a49      	ldr	r2, [pc, #292]	; (8001520 <HAL_GPIO_Init+0x2a8>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d007      	beq.n	800140e <HAL_GPIO_Init+0x196>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	4a48      	ldr	r2, [pc, #288]	; (8001524 <HAL_GPIO_Init+0x2ac>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d101      	bne.n	800140a <HAL_GPIO_Init+0x192>
 8001406:	2303      	movs	r3, #3
 8001408:	e006      	b.n	8001418 <HAL_GPIO_Init+0x1a0>
 800140a:	2304      	movs	r3, #4
 800140c:	e004      	b.n	8001418 <HAL_GPIO_Init+0x1a0>
 800140e:	2302      	movs	r3, #2
 8001410:	e002      	b.n	8001418 <HAL_GPIO_Init+0x1a0>
 8001412:	2301      	movs	r3, #1
 8001414:	e000      	b.n	8001418 <HAL_GPIO_Init+0x1a0>
 8001416:	2300      	movs	r3, #0
 8001418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800141a:	f002 0203 	and.w	r2, r2, #3
 800141e:	0092      	lsls	r2, r2, #2
 8001420:	4093      	lsls	r3, r2
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	4313      	orrs	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001428:	493a      	ldr	r1, [pc, #232]	; (8001514 <HAL_GPIO_Init+0x29c>)
 800142a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800142c:	089b      	lsrs	r3, r3, #2
 800142e:	3302      	adds	r3, #2
 8001430:	68fa      	ldr	r2, [r7, #12]
 8001432:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d006      	beq.n	8001450 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001442:	4b39      	ldr	r3, [pc, #228]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	4938      	ldr	r1, [pc, #224]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 8001448:	69bb      	ldr	r3, [r7, #24]
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
 800144e:	e006      	b.n	800145e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001450:	4b35      	ldr	r3, [pc, #212]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	43db      	mvns	r3, r3
 8001458:	4933      	ldr	r1, [pc, #204]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 800145a:	4013      	ands	r3, r2
 800145c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800145e:	683b      	ldr	r3, [r7, #0]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001466:	2b00      	cmp	r3, #0
 8001468:	d006      	beq.n	8001478 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800146a:	4b2f      	ldr	r3, [pc, #188]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 800146c:	685a      	ldr	r2, [r3, #4]
 800146e:	492e      	ldr	r1, [pc, #184]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 8001470:	69bb      	ldr	r3, [r7, #24]
 8001472:	4313      	orrs	r3, r2
 8001474:	604b      	str	r3, [r1, #4]
 8001476:	e006      	b.n	8001486 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001478:	4b2b      	ldr	r3, [pc, #172]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 800147a:	685a      	ldr	r2, [r3, #4]
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	43db      	mvns	r3, r3
 8001480:	4929      	ldr	r1, [pc, #164]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 8001482:	4013      	ands	r3, r2
 8001484:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d006      	beq.n	80014a0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001492:	4b25      	ldr	r3, [pc, #148]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 8001494:	689a      	ldr	r2, [r3, #8]
 8001496:	4924      	ldr	r1, [pc, #144]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	4313      	orrs	r3, r2
 800149c:	608b      	str	r3, [r1, #8]
 800149e:	e006      	b.n	80014ae <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80014a2:	689a      	ldr	r2, [r3, #8]
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	43db      	mvns	r3, r3
 80014a8:	491f      	ldr	r1, [pc, #124]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80014aa:	4013      	ands	r3, r2
 80014ac:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d006      	beq.n	80014c8 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80014bc:	68da      	ldr	r2, [r3, #12]
 80014be:	491a      	ldr	r1, [pc, #104]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	60cb      	str	r3, [r1, #12]
 80014c6:	e006      	b.n	80014d6 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80014c8:	4b17      	ldr	r3, [pc, #92]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	69bb      	ldr	r3, [r7, #24]
 80014ce:	43db      	mvns	r3, r3
 80014d0:	4915      	ldr	r1, [pc, #84]	; (8001528 <HAL_GPIO_Init+0x2b0>)
 80014d2:	4013      	ands	r3, r2
 80014d4:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	3301      	adds	r3, #1
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e2:	fa22 f303 	lsr.w	r3, r2, r3
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	f47f aed0 	bne.w	800128c <HAL_GPIO_Init+0x14>
  }
}
 80014ec:	bf00      	nop
 80014ee:	372c      	adds	r7, #44	; 0x2c
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bc80      	pop	{r7}
 80014f4:	4770      	bx	lr
 80014f6:	bf00      	nop
 80014f8:	10210000 	.word	0x10210000
 80014fc:	10110000 	.word	0x10110000
 8001500:	10120000 	.word	0x10120000
 8001504:	10310000 	.word	0x10310000
 8001508:	10320000 	.word	0x10320000
 800150c:	10220000 	.word	0x10220000
 8001510:	40021000 	.word	0x40021000
 8001514:	40010000 	.word	0x40010000
 8001518:	40010800 	.word	0x40010800
 800151c:	40010c00 	.word	0x40010c00
 8001520:	40011000 	.word	0x40011000
 8001524:	40011400 	.word	0x40011400
 8001528:	40010400 	.word	0x40010400

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	611a      	str	r2, [r3, #16]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	bc80      	pop	{r7}
 800155a:	4770      	bx	lr

0800155c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d101      	bne.n	800156e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800156a:	2301      	movs	r3, #1
 800156c:	e11f      	b.n	80017ae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001574:	b2db      	uxtb	r3, r3
 8001576:	2b00      	cmp	r3, #0
 8001578:	d106      	bne.n	8001588 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f7ff f9be 	bl	8000904 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2224      	movs	r2, #36	; 0x24
 800158c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f022 0201 	bic.w	r2, r2, #1
 800159e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80015ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	681a      	ldr	r2, [r3, #0]
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015c0:	f000 fe60 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 80015c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4a7b      	ldr	r2, [pc, #492]	; (80017b8 <HAL_I2C_Init+0x25c>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d807      	bhi.n	80015e0 <HAL_I2C_Init+0x84>
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	4a7a      	ldr	r2, [pc, #488]	; (80017bc <HAL_I2C_Init+0x260>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	bf94      	ite	ls
 80015d8:	2301      	movls	r3, #1
 80015da:	2300      	movhi	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	e006      	b.n	80015ee <HAL_I2C_Init+0x92>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4a77      	ldr	r2, [pc, #476]	; (80017c0 <HAL_I2C_Init+0x264>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	bf94      	ite	ls
 80015e8:	2301      	movls	r3, #1
 80015ea:	2300      	movhi	r3, #0
 80015ec:	b2db      	uxtb	r3, r3
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d001      	beq.n	80015f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80015f2:	2301      	movs	r3, #1
 80015f4:	e0db      	b.n	80017ae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	4a72      	ldr	r2, [pc, #456]	; (80017c4 <HAL_I2C_Init+0x268>)
 80015fa:	fba2 2303 	umull	r2, r3, r2, r3
 80015fe:	0c9b      	lsrs	r3, r3, #18
 8001600:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68ba      	ldr	r2, [r7, #8]
 8001612:	430a      	orrs	r2, r1
 8001614:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6a1b      	ldr	r3, [r3, #32]
 800161c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	4a64      	ldr	r2, [pc, #400]	; (80017b8 <HAL_I2C_Init+0x25c>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d802      	bhi.n	8001630 <HAL_I2C_Init+0xd4>
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	3301      	adds	r3, #1
 800162e:	e009      	b.n	8001644 <HAL_I2C_Init+0xe8>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001636:	fb02 f303 	mul.w	r3, r2, r3
 800163a:	4a63      	ldr	r2, [pc, #396]	; (80017c8 <HAL_I2C_Init+0x26c>)
 800163c:	fba2 2303 	umull	r2, r3, r2, r3
 8001640:	099b      	lsrs	r3, r3, #6
 8001642:	3301      	adds	r3, #1
 8001644:	687a      	ldr	r2, [r7, #4]
 8001646:	6812      	ldr	r2, [r2, #0]
 8001648:	430b      	orrs	r3, r1
 800164a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	69db      	ldr	r3, [r3, #28]
 8001652:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001656:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	4956      	ldr	r1, [pc, #344]	; (80017b8 <HAL_I2C_Init+0x25c>)
 8001660:	428b      	cmp	r3, r1
 8001662:	d80d      	bhi.n	8001680 <HAL_I2C_Init+0x124>
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	1e59      	subs	r1, r3, #1
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	005b      	lsls	r3, r3, #1
 800166e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001672:	3301      	adds	r3, #1
 8001674:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001678:	2b04      	cmp	r3, #4
 800167a:	bf38      	it	cc
 800167c:	2304      	movcc	r3, #4
 800167e:	e04f      	b.n	8001720 <HAL_I2C_Init+0x1c4>
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d111      	bne.n	80016ac <HAL_I2C_Init+0x150>
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	1e58      	subs	r0, r3, #1
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6859      	ldr	r1, [r3, #4]
 8001690:	460b      	mov	r3, r1
 8001692:	005b      	lsls	r3, r3, #1
 8001694:	440b      	add	r3, r1
 8001696:	fbb0 f3f3 	udiv	r3, r0, r3
 800169a:	3301      	adds	r3, #1
 800169c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	bf0c      	ite	eq
 80016a4:	2301      	moveq	r3, #1
 80016a6:	2300      	movne	r3, #0
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	e012      	b.n	80016d2 <HAL_I2C_Init+0x176>
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	1e58      	subs	r0, r3, #1
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6859      	ldr	r1, [r3, #4]
 80016b4:	460b      	mov	r3, r1
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	440b      	add	r3, r1
 80016ba:	0099      	lsls	r1, r3, #2
 80016bc:	440b      	add	r3, r1
 80016be:	fbb0 f3f3 	udiv	r3, r0, r3
 80016c2:	3301      	adds	r3, #1
 80016c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	bf0c      	ite	eq
 80016cc:	2301      	moveq	r3, #1
 80016ce:	2300      	movne	r3, #0
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <HAL_I2C_Init+0x17e>
 80016d6:	2301      	movs	r3, #1
 80016d8:	e022      	b.n	8001720 <HAL_I2C_Init+0x1c4>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	689b      	ldr	r3, [r3, #8]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d10e      	bne.n	8001700 <HAL_I2C_Init+0x1a4>
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	1e58      	subs	r0, r3, #1
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6859      	ldr	r1, [r3, #4]
 80016ea:	460b      	mov	r3, r1
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	440b      	add	r3, r1
 80016f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80016f4:	3301      	adds	r3, #1
 80016f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80016fe:	e00f      	b.n	8001720 <HAL_I2C_Init+0x1c4>
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	1e58      	subs	r0, r3, #1
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	6859      	ldr	r1, [r3, #4]
 8001708:	460b      	mov	r3, r1
 800170a:	009b      	lsls	r3, r3, #2
 800170c:	440b      	add	r3, r1
 800170e:	0099      	lsls	r1, r3, #2
 8001710:	440b      	add	r3, r1
 8001712:	fbb0 f3f3 	udiv	r3, r0, r3
 8001716:	3301      	adds	r3, #1
 8001718:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800171c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	6809      	ldr	r1, [r1, #0]
 8001724:	4313      	orrs	r3, r2
 8001726:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69da      	ldr	r2, [r3, #28]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	431a      	orrs	r2, r3
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	430a      	orrs	r2, r1
 8001742:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	689b      	ldr	r3, [r3, #8]
 800174a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800174e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001752:	687a      	ldr	r2, [r7, #4]
 8001754:	6911      	ldr	r1, [r2, #16]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	68d2      	ldr	r2, [r2, #12]
 800175a:	4311      	orrs	r1, r2
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	430b      	orrs	r3, r1
 8001762:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	695a      	ldr	r2, [r3, #20]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	431a      	orrs	r2, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f042 0201 	orr.w	r2, r2, #1
 800178e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	2200      	movs	r2, #0
 8001794:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	2220      	movs	r2, #32
 800179a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	2200      	movs	r2, #0
 80017a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017ac:	2300      	movs	r3, #0
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	000186a0 	.word	0x000186a0
 80017bc:	001e847f 	.word	0x001e847f
 80017c0:	003d08ff 	.word	0x003d08ff
 80017c4:	431bde83 	.word	0x431bde83
 80017c8:	10624dd3 	.word	0x10624dd3

080017cc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b08a      	sub	sp, #40	; 0x28
 80017d0:	af02      	add	r7, sp, #8
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	607a      	str	r2, [r7, #4]
 80017d6:	603b      	str	r3, [r7, #0]
 80017d8:	460b      	mov	r3, r1
 80017da:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80017dc:	f7ff fb9c 	bl	8000f18 <HAL_GetTick>
 80017e0:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 80017e2:	2301      	movs	r3, #1
 80017e4:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	2b20      	cmp	r3, #32
 80017f0:	f040 8111 	bne.w	8001a16 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80017f4:	69fb      	ldr	r3, [r7, #28]
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	2319      	movs	r3, #25
 80017fa:	2201      	movs	r2, #1
 80017fc:	4988      	ldr	r1, [pc, #544]	; (8001a20 <HAL_I2C_IsDeviceReady+0x254>)
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f000 f912 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d001      	beq.n	800180e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800180a:	2302      	movs	r3, #2
 800180c:	e104      	b.n	8001a18 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001814:	2b01      	cmp	r3, #1
 8001816:	d101      	bne.n	800181c <HAL_I2C_IsDeviceReady+0x50>
 8001818:	2302      	movs	r3, #2
 800181a:	e0fd      	b.n	8001a18 <HAL_I2C_IsDeviceReady+0x24c>
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	2201      	movs	r2, #1
 8001820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	2b01      	cmp	r3, #1
 8001830:	d007      	beq.n	8001842 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f042 0201 	orr.w	r2, r2, #1
 8001840:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001850:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	2224      	movs	r2, #36	; 0x24
 8001856:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	2200      	movs	r2, #0
 800185e:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	4a70      	ldr	r2, [pc, #448]	; (8001a24 <HAL_I2C_IsDeviceReady+0x258>)
 8001864:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001874:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	2200      	movs	r2, #0
 800187e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001882:	68f8      	ldr	r0, [r7, #12]
 8001884:	f000 f8d0 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d00d      	beq.n	80018aa <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001898:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800189c:	d103      	bne.n	80018a6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018a4:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e0b6      	b.n	8001a18 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80018aa:	897b      	ldrh	r3, [r7, #10]
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	461a      	mov	r2, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80018b8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80018ba:	f7ff fb2d 	bl	8000f18 <HAL_GetTick>
 80018be:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695b      	ldr	r3, [r3, #20]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	bf0c      	ite	eq
 80018ce:	2301      	moveq	r3, #1
 80018d0:	2300      	movne	r3, #0
 80018d2:	b2db      	uxtb	r3, r3
 80018d4:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	695b      	ldr	r3, [r3, #20]
 80018dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e4:	bf0c      	ite	eq
 80018e6:	2301      	moveq	r3, #1
 80018e8:	2300      	movne	r3, #0
 80018ea:	b2db      	uxtb	r3, r3
 80018ec:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80018ee:	e025      	b.n	800193c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80018f0:	f7ff fb12 	bl	8000f18 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	69fb      	ldr	r3, [r7, #28]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	683a      	ldr	r2, [r7, #0]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d302      	bcc.n	8001906 <HAL_I2C_IsDeviceReady+0x13a>
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d103      	bne.n	800190e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	22a0      	movs	r2, #160	; 0xa0
 800190a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f003 0302 	and.w	r3, r3, #2
 8001918:	2b02      	cmp	r3, #2
 800191a:	bf0c      	ite	eq
 800191c:	2301      	moveq	r3, #1
 800191e:	2300      	movne	r3, #0
 8001920:	b2db      	uxtb	r3, r3
 8001922:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001932:	bf0c      	ite	eq
 8001934:	2301      	moveq	r3, #1
 8001936:	2300      	movne	r3, #0
 8001938:	b2db      	uxtb	r3, r3
 800193a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001942:	b2db      	uxtb	r3, r3
 8001944:	2ba0      	cmp	r3, #160	; 0xa0
 8001946:	d005      	beq.n	8001954 <HAL_I2C_IsDeviceReady+0x188>
 8001948:	7dfb      	ldrb	r3, [r7, #23]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d102      	bne.n	8001954 <HAL_I2C_IsDeviceReady+0x188>
 800194e:	7dbb      	ldrb	r3, [r7, #22]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0cd      	beq.n	80018f0 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2220      	movs	r2, #32
 8001958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	695b      	ldr	r3, [r3, #20]
 8001962:	f003 0302 	and.w	r3, r3, #2
 8001966:	2b02      	cmp	r3, #2
 8001968:	d129      	bne.n	80019be <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	681a      	ldr	r2, [r3, #0]
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001978:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800197a:	2300      	movs	r3, #0
 800197c:	613b      	str	r3, [r7, #16]
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	695b      	ldr	r3, [r3, #20]
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	613b      	str	r3, [r7, #16]
 800198e:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001990:	69fb      	ldr	r3, [r7, #28]
 8001992:	9300      	str	r3, [sp, #0]
 8001994:	2319      	movs	r3, #25
 8001996:	2201      	movs	r2, #1
 8001998:	4921      	ldr	r1, [pc, #132]	; (8001a20 <HAL_I2C_IsDeviceReady+0x254>)
 800199a:	68f8      	ldr	r0, [r7, #12]
 800199c:	f000 f844 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e036      	b.n	8001a18 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	2220      	movs	r2, #32
 80019ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	2200      	movs	r2, #0
 80019b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 80019ba:	2300      	movs	r3, #0
 80019bc:	e02c      	b.n	8001a18 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80019cc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80019d6:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	2319      	movs	r3, #25
 80019de:	2201      	movs	r2, #1
 80019e0:	490f      	ldr	r1, [pc, #60]	; (8001a20 <HAL_I2C_IsDeviceReady+0x254>)
 80019e2:	68f8      	ldr	r0, [r7, #12]
 80019e4:	f000 f820 	bl	8001a28 <I2C_WaitOnFlagUntilTimeout>
 80019e8:	4603      	mov	r3, r0
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e012      	b.n	8001a18 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	3301      	adds	r3, #1
 80019f6:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80019f8:	69ba      	ldr	r2, [r7, #24]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	429a      	cmp	r2, r3
 80019fe:	f4ff af32 	bcc.w	8001866 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	2220      	movs	r2, #32
 8001a06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a0a:	68fb      	ldr	r3, [r7, #12]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e000      	b.n	8001a18 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001a16:	2302      	movs	r3, #2
  }
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3720      	adds	r7, #32
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	00100002 	.word	0x00100002
 8001a24:	ffff0000 	.word	0xffff0000

08001a28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	603b      	str	r3, [r7, #0]
 8001a34:	4613      	mov	r3, r2
 8001a36:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a38:	e025      	b.n	8001a86 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a40:	d021      	beq.n	8001a86 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a42:	f7ff fa69 	bl	8000f18 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d302      	bcc.n	8001a58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d116      	bne.n	8001a86 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	2220      	movs	r2, #32
 8001a62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a72:	f043 0220 	orr.w	r2, r3, #32
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e023      	b.n	8001ace <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	0c1b      	lsrs	r3, r3, #16
 8001a8a:	b2db      	uxtb	r3, r3
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d10d      	bne.n	8001aac <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	695b      	ldr	r3, [r3, #20]
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	b29b      	uxth	r3, r3
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	bf0c      	ite	eq
 8001aa2:	2301      	moveq	r3, #1
 8001aa4:	2300      	movne	r3, #0
 8001aa6:	b2db      	uxtb	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	e00c      	b.n	8001ac6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	43da      	mvns	r2, r3
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4013      	ands	r3, r2
 8001ab8:	b29b      	uxth	r3, r3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bf0c      	ite	eq
 8001abe:	2301      	moveq	r3, #1
 8001ac0:	2300      	movne	r3, #0
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	461a      	mov	r2, r3
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d0b6      	beq.n	8001a3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d101      	bne.n	8001aea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e26c      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	f000 8087 	beq.w	8001c06 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001af8:	4b92      	ldr	r3, [pc, #584]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f003 030c 	and.w	r3, r3, #12
 8001b00:	2b04      	cmp	r3, #4
 8001b02:	d00c      	beq.n	8001b1e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b04:	4b8f      	ldr	r3, [pc, #572]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f003 030c 	and.w	r3, r3, #12
 8001b0c:	2b08      	cmp	r3, #8
 8001b0e:	d112      	bne.n	8001b36 <HAL_RCC_OscConfig+0x5e>
 8001b10:	4b8c      	ldr	r3, [pc, #560]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b1c:	d10b      	bne.n	8001b36 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1e:	4b89      	ldr	r3, [pc, #548]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d06c      	beq.n	8001c04 <HAL_RCC_OscConfig+0x12c>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d168      	bne.n	8001c04 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	e246      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b3e:	d106      	bne.n	8001b4e <HAL_RCC_OscConfig+0x76>
 8001b40:	4b80      	ldr	r3, [pc, #512]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a7f      	ldr	r2, [pc, #508]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b4a:	6013      	str	r3, [r2, #0]
 8001b4c:	e02e      	b.n	8001bac <HAL_RCC_OscConfig+0xd4>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10c      	bne.n	8001b70 <HAL_RCC_OscConfig+0x98>
 8001b56:	4b7b      	ldr	r3, [pc, #492]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7a      	ldr	r2, [pc, #488]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b60:	6013      	str	r3, [r2, #0]
 8001b62:	4b78      	ldr	r3, [pc, #480]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a77      	ldr	r2, [pc, #476]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b68:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b6c:	6013      	str	r3, [r2, #0]
 8001b6e:	e01d      	b.n	8001bac <HAL_RCC_OscConfig+0xd4>
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b78:	d10c      	bne.n	8001b94 <HAL_RCC_OscConfig+0xbc>
 8001b7a:	4b72      	ldr	r3, [pc, #456]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4a71      	ldr	r2, [pc, #452]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b84:	6013      	str	r3, [r2, #0]
 8001b86:	4b6f      	ldr	r3, [pc, #444]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a6e      	ldr	r2, [pc, #440]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	e00b      	b.n	8001bac <HAL_RCC_OscConfig+0xd4>
 8001b94:	4b6b      	ldr	r3, [pc, #428]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a6a      	ldr	r2, [pc, #424]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001b9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9e:	6013      	str	r3, [r2, #0]
 8001ba0:	4b68      	ldr	r3, [pc, #416]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a67      	ldr	r2, [pc, #412]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001baa:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d013      	beq.n	8001bdc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bb4:	f7ff f9b0 	bl	8000f18 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bba:	e008      	b.n	8001bce <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bbc:	f7ff f9ac 	bl	8000f18 <HAL_GetTick>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	1ad3      	subs	r3, r2, r3
 8001bc6:	2b64      	cmp	r3, #100	; 0x64
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e1fa      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bce:	4b5d      	ldr	r3, [pc, #372]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d0f0      	beq.n	8001bbc <HAL_RCC_OscConfig+0xe4>
 8001bda:	e014      	b.n	8001c06 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f99c 	bl	8000f18 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001be4:	f7ff f998 	bl	8000f18 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b64      	cmp	r3, #100	; 0x64
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e1e6      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001bf6:	4b53      	ldr	r3, [pc, #332]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x10c>
 8001c02:	e000      	b.n	8001c06 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c04:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0302 	and.w	r3, r3, #2
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d063      	beq.n	8001cda <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c12:	4b4c      	ldr	r3, [pc, #304]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f003 030c 	and.w	r3, r3, #12
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d00b      	beq.n	8001c36 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c1e:	4b49      	ldr	r3, [pc, #292]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f003 030c 	and.w	r3, r3, #12
 8001c26:	2b08      	cmp	r3, #8
 8001c28:	d11c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x18c>
 8001c2a:	4b46      	ldr	r3, [pc, #280]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d116      	bne.n	8001c64 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c36:	4b43      	ldr	r3, [pc, #268]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d005      	beq.n	8001c4e <HAL_RCC_OscConfig+0x176>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e1ba      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c4e:	4b3d      	ldr	r3, [pc, #244]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	695b      	ldr	r3, [r3, #20]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	4939      	ldr	r1, [pc, #228]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c62:	e03a      	b.n	8001cda <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d020      	beq.n	8001cae <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c6c:	4b36      	ldr	r3, [pc, #216]	; (8001d48 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	2201      	movs	r2, #1
 8001c70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c72:	f7ff f951 	bl	8000f18 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff f94d 	bl	8000f18 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e19b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c8c:	4b2d      	ldr	r3, [pc, #180]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b2a      	ldr	r3, [pc, #168]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	695b      	ldr	r3, [r3, #20]
 8001ca4:	00db      	lsls	r3, r3, #3
 8001ca6:	4927      	ldr	r1, [pc, #156]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	600b      	str	r3, [r1, #0]
 8001cac:	e015      	b.n	8001cda <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b26      	ldr	r3, [pc, #152]	; (8001d48 <HAL_RCC_OscConfig+0x270>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cb4:	f7ff f930 	bl	8000f18 <HAL_GetTick>
 8001cb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cba:	e008      	b.n	8001cce <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cbc:	f7ff f92c 	bl	8000f18 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	693b      	ldr	r3, [r7, #16]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	2b02      	cmp	r3, #2
 8001cc8:	d901      	bls.n	8001cce <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e17a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cce:	4b1d      	ldr	r3, [pc, #116]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1f0      	bne.n	8001cbc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d03a      	beq.n	8001d5c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d019      	beq.n	8001d22 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cee:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_RCC_OscConfig+0x274>)
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cf4:	f7ff f910 	bl	8000f18 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cfc:	f7ff f90c 	bl	8000f18 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b02      	cmp	r3, #2
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e15a      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d0e:	4b0d      	ldr	r3, [pc, #52]	; (8001d44 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d12:	f003 0302 	and.w	r3, r3, #2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d1a:	2001      	movs	r0, #1
 8001d1c:	f000 fada 	bl	80022d4 <RCC_Delay>
 8001d20:	e01c      	b.n	8001d5c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d22:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_RCC_OscConfig+0x274>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d28:	f7ff f8f6 	bl	8000f18 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d2e:	e00f      	b.n	8001d50 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d30:	f7ff f8f2 	bl	8000f18 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d908      	bls.n	8001d50 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e140      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
 8001d42:	bf00      	nop
 8001d44:	40021000 	.word	0x40021000
 8001d48:	42420000 	.word	0x42420000
 8001d4c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d50:	4b9e      	ldr	r3, [pc, #632]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d1e9      	bne.n	8001d30 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f003 0304 	and.w	r3, r3, #4
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	f000 80a6 	beq.w	8001eb6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d6e:	4b97      	ldr	r3, [pc, #604]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001d70:	69db      	ldr	r3, [r3, #28]
 8001d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10d      	bne.n	8001d96 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d7a:	4b94      	ldr	r3, [pc, #592]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001d7c:	69db      	ldr	r3, [r3, #28]
 8001d7e:	4a93      	ldr	r2, [pc, #588]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001d80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d84:	61d3      	str	r3, [r2, #28]
 8001d86:	4b91      	ldr	r3, [pc, #580]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001d88:	69db      	ldr	r3, [r3, #28]
 8001d8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	60bb      	str	r3, [r7, #8]
 8001d90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d92:	2301      	movs	r3, #1
 8001d94:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d96:	4b8e      	ldr	r3, [pc, #568]	; (8001fd0 <HAL_RCC_OscConfig+0x4f8>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d118      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001da2:	4b8b      	ldr	r3, [pc, #556]	; (8001fd0 <HAL_RCC_OscConfig+0x4f8>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a8a      	ldr	r2, [pc, #552]	; (8001fd0 <HAL_RCC_OscConfig+0x4f8>)
 8001da8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dae:	f7ff f8b3 	bl	8000f18 <HAL_GetTick>
 8001db2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001db4:	e008      	b.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001db6:	f7ff f8af 	bl	8000f18 <HAL_GetTick>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	1ad3      	subs	r3, r2, r3
 8001dc0:	2b64      	cmp	r3, #100	; 0x64
 8001dc2:	d901      	bls.n	8001dc8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	e0fd      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc8:	4b81      	ldr	r3, [pc, #516]	; (8001fd0 <HAL_RCC_OscConfig+0x4f8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d0f0      	beq.n	8001db6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	2b01      	cmp	r3, #1
 8001dda:	d106      	bne.n	8001dea <HAL_RCC_OscConfig+0x312>
 8001ddc:	4b7b      	ldr	r3, [pc, #492]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001dde:	6a1b      	ldr	r3, [r3, #32]
 8001de0:	4a7a      	ldr	r2, [pc, #488]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6213      	str	r3, [r2, #32]
 8001de8:	e02d      	b.n	8001e46 <HAL_RCC_OscConfig+0x36e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d10c      	bne.n	8001e0c <HAL_RCC_OscConfig+0x334>
 8001df2:	4b76      	ldr	r3, [pc, #472]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001df4:	6a1b      	ldr	r3, [r3, #32]
 8001df6:	4a75      	ldr	r2, [pc, #468]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001df8:	f023 0301 	bic.w	r3, r3, #1
 8001dfc:	6213      	str	r3, [r2, #32]
 8001dfe:	4b73      	ldr	r3, [pc, #460]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e00:	6a1b      	ldr	r3, [r3, #32]
 8001e02:	4a72      	ldr	r2, [pc, #456]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e04:	f023 0304 	bic.w	r3, r3, #4
 8001e08:	6213      	str	r3, [r2, #32]
 8001e0a:	e01c      	b.n	8001e46 <HAL_RCC_OscConfig+0x36e>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	2b05      	cmp	r3, #5
 8001e12:	d10c      	bne.n	8001e2e <HAL_RCC_OscConfig+0x356>
 8001e14:	4b6d      	ldr	r3, [pc, #436]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e16:	6a1b      	ldr	r3, [r3, #32]
 8001e18:	4a6c      	ldr	r2, [pc, #432]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6213      	str	r3, [r2, #32]
 8001e20:	4b6a      	ldr	r3, [pc, #424]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e22:	6a1b      	ldr	r3, [r3, #32]
 8001e24:	4a69      	ldr	r2, [pc, #420]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e26:	f043 0301 	orr.w	r3, r3, #1
 8001e2a:	6213      	str	r3, [r2, #32]
 8001e2c:	e00b      	b.n	8001e46 <HAL_RCC_OscConfig+0x36e>
 8001e2e:	4b67      	ldr	r3, [pc, #412]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a66      	ldr	r2, [pc, #408]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	6213      	str	r3, [r2, #32]
 8001e3a:	4b64      	ldr	r3, [pc, #400]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
 8001e3e:	4a63      	ldr	r2, [pc, #396]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e40:	f023 0304 	bic.w	r3, r3, #4
 8001e44:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68db      	ldr	r3, [r3, #12]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d015      	beq.n	8001e7a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4e:	f7ff f863 	bl	8000f18 <HAL_GetTick>
 8001e52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e54:	e00a      	b.n	8001e6c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e56:	f7ff f85f 	bl	8000f18 <HAL_GetTick>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	1ad3      	subs	r3, r2, r3
 8001e60:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e64:	4293      	cmp	r3, r2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e0ab      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e6c:	4b57      	ldr	r3, [pc, #348]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	6a1b      	ldr	r3, [r3, #32]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0ee      	beq.n	8001e56 <HAL_RCC_OscConfig+0x37e>
 8001e78:	e014      	b.n	8001ea4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7a:	f7ff f84d 	bl	8000f18 <HAL_GetTick>
 8001e7e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e80:	e00a      	b.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e82:	f7ff f849 	bl	8000f18 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e095      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e98:	4b4c      	ldr	r3, [pc, #304]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001e9a:	6a1b      	ldr	r3, [r3, #32]
 8001e9c:	f003 0302 	and.w	r3, r3, #2
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1ee      	bne.n	8001e82 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ea4:	7dfb      	ldrb	r3, [r7, #23]
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d105      	bne.n	8001eb6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eaa:	4b48      	ldr	r3, [pc, #288]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001eac:	69db      	ldr	r3, [r3, #28]
 8001eae:	4a47      	ldr	r2, [pc, #284]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001eb4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	f000 8081 	beq.w	8001fc2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ec0:	4b42      	ldr	r3, [pc, #264]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f003 030c 	and.w	r3, r3, #12
 8001ec8:	2b08      	cmp	r3, #8
 8001eca:	d061      	beq.n	8001f90 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69db      	ldr	r3, [r3, #28]
 8001ed0:	2b02      	cmp	r3, #2
 8001ed2:	d146      	bne.n	8001f62 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ed4:	4b3f      	ldr	r3, [pc, #252]	; (8001fd4 <HAL_RCC_OscConfig+0x4fc>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff f81d 	bl	8000f18 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ee2:	f7ff f819 	bl	8000f18 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e067      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ef4:	4b35      	ldr	r3, [pc, #212]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d1f0      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a1b      	ldr	r3, [r3, #32]
 8001f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f08:	d108      	bne.n	8001f1c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f0a:	4b30      	ldr	r3, [pc, #192]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	492d      	ldr	r1, [pc, #180]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f1c:	4b2b      	ldr	r3, [pc, #172]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6a19      	ldr	r1, [r3, #32]
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	4927      	ldr	r1, [pc, #156]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f34:	4b27      	ldr	r3, [pc, #156]	; (8001fd4 <HAL_RCC_OscConfig+0x4fc>)
 8001f36:	2201      	movs	r2, #1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7fe ffed 	bl	8000f18 <HAL_GetTick>
 8001f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f40:	e008      	b.n	8001f54 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f42:	f7fe ffe9 	bl	8000f18 <HAL_GetTick>
 8001f46:	4602      	mov	r2, r0
 8001f48:	693b      	ldr	r3, [r7, #16]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d901      	bls.n	8001f54 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f50:	2303      	movs	r3, #3
 8001f52:	e037      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f54:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d0f0      	beq.n	8001f42 <HAL_RCC_OscConfig+0x46a>
 8001f60:	e02f      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f62:	4b1c      	ldr	r3, [pc, #112]	; (8001fd4 <HAL_RCC_OscConfig+0x4fc>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f68:	f7fe ffd6 	bl	8000f18 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f70:	f7fe ffd2 	bl	8000f18 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e020      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f82:	4b12      	ldr	r3, [pc, #72]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d1f0      	bne.n	8001f70 <HAL_RCC_OscConfig+0x498>
 8001f8e:	e018      	b.n	8001fc2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	69db      	ldr	r3, [r3, #28]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e013      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	; (8001fcc <HAL_RCC_OscConfig+0x4f4>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6a1b      	ldr	r3, [r3, #32]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d106      	bne.n	8001fbe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d001      	beq.n	8001fc2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	e000      	b.n	8001fc4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001fc2:	2300      	movs	r3, #0
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40007000 	.word	0x40007000
 8001fd4:	42420060 	.word	0x42420060

08001fd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e0d0      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b6a      	ldr	r3, [pc, #424]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d910      	bls.n	800201c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b67      	ldr	r3, [pc, #412]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f023 0207 	bic.w	r2, r3, #7
 8002002:	4965      	ldr	r1, [pc, #404]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	4313      	orrs	r3, r2
 8002008:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800200a:	4b63      	ldr	r3, [pc, #396]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	429a      	cmp	r2, r3
 8002016:	d001      	beq.n	800201c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0b8      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b00      	cmp	r3, #0
 8002026:	d020      	beq.n	800206a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 0304 	and.w	r3, r3, #4
 8002030:	2b00      	cmp	r3, #0
 8002032:	d005      	beq.n	8002040 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002034:	4b59      	ldr	r3, [pc, #356]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	4a58      	ldr	r2, [pc, #352]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800203a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800203e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0308 	and.w	r3, r3, #8
 8002048:	2b00      	cmp	r3, #0
 800204a:	d005      	beq.n	8002058 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800204c:	4b53      	ldr	r3, [pc, #332]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	4a52      	ldr	r2, [pc, #328]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002052:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002056:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002058:	4b50      	ldr	r3, [pc, #320]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	494d      	ldr	r1, [pc, #308]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f003 0301 	and.w	r3, r3, #1
 8002072:	2b00      	cmp	r3, #0
 8002074:	d040      	beq.n	80020f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	2b01      	cmp	r3, #1
 800207c:	d107      	bne.n	800208e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800207e:	4b47      	ldr	r3, [pc, #284]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d115      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800208a:	2301      	movs	r3, #1
 800208c:	e07f      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	2b02      	cmp	r3, #2
 8002094:	d107      	bne.n	80020a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002096:	4b41      	ldr	r3, [pc, #260]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d109      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e073      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e06b      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b6:	4b39      	ldr	r3, [pc, #228]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020b8:	685b      	ldr	r3, [r3, #4]
 80020ba:	f023 0203 	bic.w	r2, r3, #3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	4936      	ldr	r1, [pc, #216]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020c4:	4313      	orrs	r3, r2
 80020c6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020c8:	f7fe ff26 	bl	8000f18 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020d0:	f7fe ff22 	bl	8000f18 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e053      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020e6:	4b2d      	ldr	r3, [pc, #180]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f003 020c 	and.w	r2, r3, #12
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d1eb      	bne.n	80020d0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0307 	and.w	r3, r3, #7
 8002100:	683a      	ldr	r2, [r7, #0]
 8002102:	429a      	cmp	r2, r3
 8002104:	d210      	bcs.n	8002128 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002106:	4b24      	ldr	r3, [pc, #144]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f023 0207 	bic.w	r2, r3, #7
 800210e:	4922      	ldr	r1, [pc, #136]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	4313      	orrs	r3, r2
 8002114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002116:	4b20      	ldr	r3, [pc, #128]	; (8002198 <HAL_RCC_ClockConfig+0x1c0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	683a      	ldr	r2, [r7, #0]
 8002120:	429a      	cmp	r2, r3
 8002122:	d001      	beq.n	8002128 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002124:	2301      	movs	r3, #1
 8002126:	e032      	b.n	800218e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0304 	and.w	r3, r3, #4
 8002130:	2b00      	cmp	r3, #0
 8002132:	d008      	beq.n	8002146 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	4916      	ldr	r1, [pc, #88]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002142:	4313      	orrs	r3, r2
 8002144:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0308 	and.w	r3, r3, #8
 800214e:	2b00      	cmp	r3, #0
 8002150:	d009      	beq.n	8002166 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002152:	4b12      	ldr	r3, [pc, #72]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	691b      	ldr	r3, [r3, #16]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	490e      	ldr	r1, [pc, #56]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 8002162:	4313      	orrs	r3, r2
 8002164:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002166:	f000 f821 	bl	80021ac <HAL_RCC_GetSysClockFreq>
 800216a:	4601      	mov	r1, r0
 800216c:	4b0b      	ldr	r3, [pc, #44]	; (800219c <HAL_RCC_ClockConfig+0x1c4>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	091b      	lsrs	r3, r3, #4
 8002172:	f003 030f 	and.w	r3, r3, #15
 8002176:	4a0a      	ldr	r2, [pc, #40]	; (80021a0 <HAL_RCC_ClockConfig+0x1c8>)
 8002178:	5cd3      	ldrb	r3, [r2, r3]
 800217a:	fa21 f303 	lsr.w	r3, r1, r3
 800217e:	4a09      	ldr	r2, [pc, #36]	; (80021a4 <HAL_RCC_ClockConfig+0x1cc>)
 8002180:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002182:	4b09      	ldr	r3, [pc, #36]	; (80021a8 <HAL_RCC_ClockConfig+0x1d0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe fe84 	bl	8000e94 <HAL_InitTick>

  return HAL_OK;
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	3710      	adds	r7, #16
 8002192:	46bd      	mov	sp, r7
 8002194:	bd80      	pop	{r7, pc}
 8002196:	bf00      	nop
 8002198:	40022000 	.word	0x40022000
 800219c:	40021000 	.word	0x40021000
 80021a0:	08004538 	.word	0x08004538
 80021a4:	20000310 	.word	0x20000310
 80021a8:	20000314 	.word	0x20000314

080021ac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021ac:	b490      	push	{r4, r7}
 80021ae:	b08a      	sub	sp, #40	; 0x28
 80021b0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021b2:	4b2a      	ldr	r3, [pc, #168]	; (800225c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021b4:	1d3c      	adds	r4, r7, #4
 80021b6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021b8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021bc:	4b28      	ldr	r3, [pc, #160]	; (8002260 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	2300      	movs	r3, #0
 80021cc:	627b      	str	r3, [r7, #36]	; 0x24
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80021d2:	2300      	movs	r3, #0
 80021d4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80021d6:	4b23      	ldr	r3, [pc, #140]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d002      	beq.n	80021ec <HAL_RCC_GetSysClockFreq+0x40>
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d003      	beq.n	80021f2 <HAL_RCC_GetSysClockFreq+0x46>
 80021ea:	e02d      	b.n	8002248 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80021ec:	4b1e      	ldr	r3, [pc, #120]	; (8002268 <HAL_RCC_GetSysClockFreq+0xbc>)
 80021ee:	623b      	str	r3, [r7, #32]
      break;
 80021f0:	e02d      	b.n	800224e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	0c9b      	lsrs	r3, r3, #18
 80021f6:	f003 030f 	and.w	r3, r3, #15
 80021fa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80021fe:	4413      	add	r3, r2
 8002200:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002204:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	2b00      	cmp	r3, #0
 800220e:	d013      	beq.n	8002238 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002210:	4b14      	ldr	r3, [pc, #80]	; (8002264 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	0c5b      	lsrs	r3, r3, #17
 8002216:	f003 0301 	and.w	r3, r3, #1
 800221a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800221e:	4413      	add	r3, r2
 8002220:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002224:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	4a0f      	ldr	r2, [pc, #60]	; (8002268 <HAL_RCC_GetSysClockFreq+0xbc>)
 800222a:	fb02 f203 	mul.w	r2, r2, r3
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	fbb2 f3f3 	udiv	r3, r2, r3
 8002234:	627b      	str	r3, [r7, #36]	; 0x24
 8002236:	e004      	b.n	8002242 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	4a0c      	ldr	r2, [pc, #48]	; (800226c <HAL_RCC_GetSysClockFreq+0xc0>)
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002244:	623b      	str	r3, [r7, #32]
      break;
 8002246:	e002      	b.n	800224e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <HAL_RCC_GetSysClockFreq+0xbc>)
 800224a:	623b      	str	r3, [r7, #32]
      break;
 800224c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800224e:	6a3b      	ldr	r3, [r7, #32]
}
 8002250:	4618      	mov	r0, r3
 8002252:	3728      	adds	r7, #40	; 0x28
 8002254:	46bd      	mov	sp, r7
 8002256:	bc90      	pop	{r4, r7}
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	08004524 	.word	0x08004524
 8002260:	08004534 	.word	0x08004534
 8002264:	40021000 	.word	0x40021000
 8002268:	007a1200 	.word	0x007a1200
 800226c:	003d0900 	.word	0x003d0900

08002270 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002274:	4b02      	ldr	r3, [pc, #8]	; (8002280 <HAL_RCC_GetHCLKFreq+0x10>)
 8002276:	681b      	ldr	r3, [r3, #0]
}
 8002278:	4618      	mov	r0, r3
 800227a:	46bd      	mov	sp, r7
 800227c:	bc80      	pop	{r7}
 800227e:	4770      	bx	lr
 8002280:	20000310 	.word	0x20000310

08002284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002288:	f7ff fff2 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 800228c:	4601      	mov	r1, r0
 800228e:	4b05      	ldr	r3, [pc, #20]	; (80022a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	0a1b      	lsrs	r3, r3, #8
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	4a03      	ldr	r2, [pc, #12]	; (80022a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08004548 	.word	0x08004548

080022ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022ac:	b580      	push	{r7, lr}
 80022ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022b0:	f7ff ffde 	bl	8002270 <HAL_RCC_GetHCLKFreq>
 80022b4:	4601      	mov	r1, r0
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	0adb      	lsrs	r3, r3, #11
 80022bc:	f003 0307 	and.w	r3, r3, #7
 80022c0:	4a03      	ldr	r2, [pc, #12]	; (80022d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022c2:	5cd3      	ldrb	r3, [r2, r3]
 80022c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	08004548 	.word	0x08004548

080022d4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b085      	sub	sp, #20
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <RCC_Delay+0x34>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a0a      	ldr	r2, [pc, #40]	; (800230c <RCC_Delay+0x38>)
 80022e2:	fba2 2303 	umull	r2, r3, r2, r3
 80022e6:	0a5b      	lsrs	r3, r3, #9
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
 80022ee:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80022f0:	bf00      	nop
  }
  while (Delay --);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	1e5a      	subs	r2, r3, #1
 80022f6:	60fa      	str	r2, [r7, #12]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1f9      	bne.n	80022f0 <RCC_Delay+0x1c>
}
 80022fc:	bf00      	nop
 80022fe:	3714      	adds	r7, #20
 8002300:	46bd      	mov	sp, r7
 8002302:	bc80      	pop	{r7}
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000310 	.word	0x20000310
 800230c:	10624dd3 	.word	0x10624dd3

08002310 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d101      	bne.n	8002322 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800231e:	2301      	movs	r3, #1
 8002320:	e041      	b.n	80023a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002328:	b2db      	uxtb	r3, r3
 800232a:	2b00      	cmp	r3, #0
 800232c:	d106      	bne.n	800233c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002336:	6878      	ldr	r0, [r7, #4]
 8002338:	f7fe fcce 	bl	8000cd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3304      	adds	r3, #4
 800234c:	4619      	mov	r1, r3
 800234e:	4610      	mov	r0, r2
 8002350:	f000 fa10 	bl	8002774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2201      	movs	r2, #1
 8002358:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2201      	movs	r2, #1
 8002370:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2201      	movs	r2, #1
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	2201      	movs	r2, #1
 8002380:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023a4:	2300      	movs	r3, #0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	3708      	adds	r7, #8
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023ae:	b580      	push	{r7, lr}
 80023b0:	b082      	sub	sp, #8
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f003 0302 	and.w	r3, r3, #2
 80023c0:	2b02      	cmp	r3, #2
 80023c2:	d122      	bne.n	800240a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b02      	cmp	r3, #2
 80023d0:	d11b      	bne.n	800240a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f06f 0202 	mvn.w	r2, #2
 80023da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0303 	and.w	r3, r3, #3
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d003      	beq.n	80023f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80023f0:	6878      	ldr	r0, [r7, #4]
 80023f2:	f000 f9a4 	bl	800273e <HAL_TIM_IC_CaptureCallback>
 80023f6:	e005      	b.n	8002404 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80023f8:	6878      	ldr	r0, [r7, #4]
 80023fa:	f000 f997 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80023fe:	6878      	ldr	r0, [r7, #4]
 8002400:	f000 f9a6 	bl	8002750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	691b      	ldr	r3, [r3, #16]
 8002410:	f003 0304 	and.w	r3, r3, #4
 8002414:	2b04      	cmp	r3, #4
 8002416:	d122      	bne.n	800245e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	68db      	ldr	r3, [r3, #12]
 800241e:	f003 0304 	and.w	r3, r3, #4
 8002422:	2b04      	cmp	r3, #4
 8002424:	d11b      	bne.n	800245e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f06f 0204 	mvn.w	r2, #4
 800242e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2202      	movs	r2, #2
 8002434:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	699b      	ldr	r3, [r3, #24]
 800243c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002444:	6878      	ldr	r0, [r7, #4]
 8002446:	f000 f97a 	bl	800273e <HAL_TIM_IC_CaptureCallback>
 800244a:	e005      	b.n	8002458 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800244c:	6878      	ldr	r0, [r7, #4]
 800244e:	f000 f96d 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 f97c 	bl	8002750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	f003 0308 	and.w	r3, r3, #8
 8002468:	2b08      	cmp	r3, #8
 800246a:	d122      	bne.n	80024b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	f003 0308 	and.w	r3, r3, #8
 8002476:	2b08      	cmp	r3, #8
 8002478:	d11b      	bne.n	80024b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f06f 0208 	mvn.w	r2, #8
 8002482:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2204      	movs	r2, #4
 8002488:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	f003 0303 	and.w	r3, r3, #3
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f000 f950 	bl	800273e <HAL_TIM_IC_CaptureCallback>
 800249e:	e005      	b.n	80024ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 f943 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024a6:	6878      	ldr	r0, [r7, #4]
 80024a8:	f000 f952 	bl	8002750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	691b      	ldr	r3, [r3, #16]
 80024b8:	f003 0310 	and.w	r3, r3, #16
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d122      	bne.n	8002506 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	f003 0310 	and.w	r3, r3, #16
 80024ca:	2b10      	cmp	r3, #16
 80024cc:	d11b      	bne.n	8002506 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f06f 0210 	mvn.w	r2, #16
 80024d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2208      	movs	r2, #8
 80024dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	69db      	ldr	r3, [r3, #28]
 80024e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024ec:	6878      	ldr	r0, [r7, #4]
 80024ee:	f000 f926 	bl	800273e <HAL_TIM_IC_CaptureCallback>
 80024f2:	e005      	b.n	8002500 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f000 f919 	bl	800272c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f000 f928 	bl	8002750 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	691b      	ldr	r3, [r3, #16]
 800250c:	f003 0301 	and.w	r3, r3, #1
 8002510:	2b01      	cmp	r3, #1
 8002512:	d10e      	bne.n	8002532 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	68db      	ldr	r3, [r3, #12]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b01      	cmp	r3, #1
 8002520:	d107      	bne.n	8002532 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f06f 0201 	mvn.w	r2, #1
 800252a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f7fe fac3 	bl	8000ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	691b      	ldr	r3, [r3, #16]
 8002538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253c:	2b80      	cmp	r3, #128	; 0x80
 800253e:	d10e      	bne.n	800255e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800254a:	2b80      	cmp	r3, #128	; 0x80
 800254c:	d107      	bne.n	800255e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002556:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 fa6a 	bl	8002a32 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	691b      	ldr	r3, [r3, #16]
 8002564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002568:	2b40      	cmp	r3, #64	; 0x40
 800256a:	d10e      	bne.n	800258a <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	68db      	ldr	r3, [r3, #12]
 8002572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002576:	2b40      	cmp	r3, #64	; 0x40
 8002578:	d107      	bne.n	800258a <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002582:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f000 f8ec 	bl	8002762 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	691b      	ldr	r3, [r3, #16]
 8002590:	f003 0320 	and.w	r3, r3, #32
 8002594:	2b20      	cmp	r3, #32
 8002596:	d10e      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68db      	ldr	r3, [r3, #12]
 800259e:	f003 0320 	and.w	r3, r3, #32
 80025a2:	2b20      	cmp	r3, #32
 80025a4:	d107      	bne.n	80025b6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f06f 0220 	mvn.w	r2, #32
 80025ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f000 fa35 	bl	8002a20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025be:	b580      	push	{r7, lr}
 80025c0:	b084      	sub	sp, #16
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d101      	bne.n	80025d6 <HAL_TIM_ConfigClockSource+0x18>
 80025d2:	2302      	movs	r3, #2
 80025d4:	e0a6      	b.n	8002724 <HAL_TIM_ConfigClockSource+0x166>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2201      	movs	r2, #1
 80025da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2202      	movs	r2, #2
 80025e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80025f4:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80025fc:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	68fa      	ldr	r2, [r7, #12]
 8002604:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002606:	683b      	ldr	r3, [r7, #0]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	2b40      	cmp	r3, #64	; 0x40
 800260c:	d067      	beq.n	80026de <HAL_TIM_ConfigClockSource+0x120>
 800260e:	2b40      	cmp	r3, #64	; 0x40
 8002610:	d80b      	bhi.n	800262a <HAL_TIM_ConfigClockSource+0x6c>
 8002612:	2b10      	cmp	r3, #16
 8002614:	d073      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x140>
 8002616:	2b10      	cmp	r3, #16
 8002618:	d802      	bhi.n	8002620 <HAL_TIM_ConfigClockSource+0x62>
 800261a:	2b00      	cmp	r3, #0
 800261c:	d06f      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800261e:	e078      	b.n	8002712 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002620:	2b20      	cmp	r3, #32
 8002622:	d06c      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x140>
 8002624:	2b30      	cmp	r3, #48	; 0x30
 8002626:	d06a      	beq.n	80026fe <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002628:	e073      	b.n	8002712 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800262a:	2b70      	cmp	r3, #112	; 0x70
 800262c:	d00d      	beq.n	800264a <HAL_TIM_ConfigClockSource+0x8c>
 800262e:	2b70      	cmp	r3, #112	; 0x70
 8002630:	d804      	bhi.n	800263c <HAL_TIM_ConfigClockSource+0x7e>
 8002632:	2b50      	cmp	r3, #80	; 0x50
 8002634:	d033      	beq.n	800269e <HAL_TIM_ConfigClockSource+0xe0>
 8002636:	2b60      	cmp	r3, #96	; 0x60
 8002638:	d041      	beq.n	80026be <HAL_TIM_ConfigClockSource+0x100>
      break;
 800263a:	e06a      	b.n	8002712 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800263c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002640:	d066      	beq.n	8002710 <HAL_TIM_ConfigClockSource+0x152>
 8002642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002646:	d017      	beq.n	8002678 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002648:	e063      	b.n	8002712 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6818      	ldr	r0, [r3, #0]
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	6899      	ldr	r1, [r3, #8]
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	685a      	ldr	r2, [r3, #4]
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	f000 f964 	bl	8002926 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800266c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	609a      	str	r2, [r3, #8]
      break;
 8002676:	e04c      	b.n	8002712 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6899      	ldr	r1, [r3, #8]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f000 f94d 	bl	8002926 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800269a:	609a      	str	r2, [r3, #8]
      break;
 800269c:	e039      	b.n	8002712 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6818      	ldr	r0, [r3, #0]
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	6859      	ldr	r1, [r3, #4]
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	461a      	mov	r2, r3
 80026ac:	f000 f8c4 	bl	8002838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	2150      	movs	r1, #80	; 0x50
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f91b 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 80026bc:	e029      	b.n	8002712 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	6859      	ldr	r1, [r3, #4]
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	461a      	mov	r2, r3
 80026cc:	f000 f8e2 	bl	8002894 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2160      	movs	r1, #96	; 0x60
 80026d6:	4618      	mov	r0, r3
 80026d8:	f000 f90b 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 80026dc:	e019      	b.n	8002712 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6818      	ldr	r0, [r3, #0]
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	6859      	ldr	r1, [r3, #4]
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	461a      	mov	r2, r3
 80026ec:	f000 f8a4 	bl	8002838 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2140      	movs	r1, #64	; 0x40
 80026f6:	4618      	mov	r0, r3
 80026f8:	f000 f8fb 	bl	80028f2 <TIM_ITRx_SetConfig>
      break;
 80026fc:	e009      	b.n	8002712 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4619      	mov	r1, r3
 8002708:	4610      	mov	r0, r2
 800270a:	f000 f8f2 	bl	80028f2 <TIM_ITRx_SetConfig>
        break;
 800270e:	e000      	b.n	8002712 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002710:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2201      	movs	r2, #1
 8002716:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002722:	2300      	movs	r3, #0
}
 8002724:	4618      	mov	r0, r3
 8002726:	3710      	adds	r7, #16
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}

0800272c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	bc80      	pop	{r7}
 800273c:	4770      	bx	lr

0800273e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800273e:	b480      	push	{r7}
 8002740:	b083      	sub	sp, #12
 8002742:	af00      	add	r7, sp, #0
 8002744:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002746:	bf00      	nop
 8002748:	370c      	adds	r7, #12
 800274a:	46bd      	mov	sp, r7
 800274c:	bc80      	pop	{r7}
 800274e:	4770      	bx	lr

08002750 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	bc80      	pop	{r7}
 8002760:	4770      	bx	lr

08002762 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002762:	b480      	push	{r7}
 8002764:	b083      	sub	sp, #12
 8002766:	af00      	add	r7, sp, #0
 8002768:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	bc80      	pop	{r7}
 8002772:	4770      	bx	lr

08002774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002774:	b480      	push	{r7}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
 800277c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	4a29      	ldr	r2, [pc, #164]	; (800282c <TIM_Base_SetConfig+0xb8>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d00b      	beq.n	80027a4 <TIM_Base_SetConfig+0x30>
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002792:	d007      	beq.n	80027a4 <TIM_Base_SetConfig+0x30>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a26      	ldr	r2, [pc, #152]	; (8002830 <TIM_Base_SetConfig+0xbc>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d003      	beq.n	80027a4 <TIM_Base_SetConfig+0x30>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	4a25      	ldr	r2, [pc, #148]	; (8002834 <TIM_Base_SetConfig+0xc0>)
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d108      	bne.n	80027b6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a1c      	ldr	r2, [pc, #112]	; (800282c <TIM_Base_SetConfig+0xb8>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00b      	beq.n	80027d6 <TIM_Base_SetConfig+0x62>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c4:	d007      	beq.n	80027d6 <TIM_Base_SetConfig+0x62>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a19      	ldr	r2, [pc, #100]	; (8002830 <TIM_Base_SetConfig+0xbc>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d003      	beq.n	80027d6 <TIM_Base_SetConfig+0x62>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a18      	ldr	r2, [pc, #96]	; (8002834 <TIM_Base_SetConfig+0xc0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d108      	bne.n	80027e8 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027dc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	68db      	ldr	r3, [r3, #12]
 80027e2:	68fa      	ldr	r2, [r7, #12]
 80027e4:	4313      	orrs	r3, r2
 80027e6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68fa      	ldr	r2, [r7, #12]
 80027fa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	689a      	ldr	r2, [r3, #8]
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	681a      	ldr	r2, [r3, #0]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	4a07      	ldr	r2, [pc, #28]	; (800282c <TIM_Base_SetConfig+0xb8>)
 8002810:	4293      	cmp	r3, r2
 8002812:	d103      	bne.n	800281c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	691a      	ldr	r2, [r3, #16]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2201      	movs	r2, #1
 8002820:	615a      	str	r2, [r3, #20]
}
 8002822:	bf00      	nop
 8002824:	3714      	adds	r7, #20
 8002826:	46bd      	mov	sp, r7
 8002828:	bc80      	pop	{r7}
 800282a:	4770      	bx	lr
 800282c:	40012c00 	.word	0x40012c00
 8002830:	40000400 	.word	0x40000400
 8002834:	40000800 	.word	0x40000800

08002838 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002838:	b480      	push	{r7}
 800283a:	b087      	sub	sp, #28
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a1b      	ldr	r3, [r3, #32]
 8002848:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f023 0201 	bic.w	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002862:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	4313      	orrs	r3, r2
 800286c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800286e:	697b      	ldr	r3, [r7, #20]
 8002870:	f023 030a 	bic.w	r3, r3, #10
 8002874:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002876:	697a      	ldr	r2, [r7, #20]
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	4313      	orrs	r3, r2
 800287c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	693a      	ldr	r2, [r7, #16]
 8002882:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	697a      	ldr	r2, [r7, #20]
 8002888:	621a      	str	r2, [r3, #32]
}
 800288a:	bf00      	nop
 800288c:	371c      	adds	r7, #28
 800288e:	46bd      	mov	sp, r7
 8002890:	bc80      	pop	{r7}
 8002892:	4770      	bx	lr

08002894 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002894:	b480      	push	{r7}
 8002896:	b087      	sub	sp, #28
 8002898:	af00      	add	r7, sp, #0
 800289a:	60f8      	str	r0, [r7, #12]
 800289c:	60b9      	str	r1, [r7, #8]
 800289e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6a1b      	ldr	r3, [r3, #32]
 80028a4:	f023 0210 	bic.w	r2, r3, #16
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	699b      	ldr	r3, [r3, #24]
 80028b0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028be:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	031b      	lsls	r3, r3, #12
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	4313      	orrs	r3, r2
 80028c8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80028d0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80028d2:	68bb      	ldr	r3, [r7, #8]
 80028d4:	011b      	lsls	r3, r3, #4
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	4313      	orrs	r3, r2
 80028da:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	693a      	ldr	r2, [r7, #16]
 80028e6:	621a      	str	r2, [r3, #32]
}
 80028e8:	bf00      	nop
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80028f2:	b480      	push	{r7}
 80028f4:	b085      	sub	sp, #20
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
 80028fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	4313      	orrs	r3, r2
 8002910:	f043 0307 	orr.w	r3, r3, #7
 8002914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	609a      	str	r2, [r3, #8]
}
 800291c:	bf00      	nop
 800291e:	3714      	adds	r7, #20
 8002920:	46bd      	mov	sp, r7
 8002922:	bc80      	pop	{r7}
 8002924:	4770      	bx	lr

08002926 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002926:	b480      	push	{r7}
 8002928:	b087      	sub	sp, #28
 800292a:	af00      	add	r7, sp, #0
 800292c:	60f8      	str	r0, [r7, #12]
 800292e:	60b9      	str	r1, [r7, #8]
 8002930:	607a      	str	r2, [r7, #4]
 8002932:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002940:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	021a      	lsls	r2, r3, #8
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	431a      	orrs	r2, r3
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	4313      	orrs	r3, r2
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	4313      	orrs	r3, r2
 8002952:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	697a      	ldr	r2, [r7, #20]
 8002958:	609a      	str	r2, [r3, #8]
}
 800295a:	bf00      	nop
 800295c:	371c      	adds	r7, #28
 800295e:	46bd      	mov	sp, r7
 8002960:	bc80      	pop	{r7}
 8002962:	4770      	bx	lr

08002964 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002974:	2b01      	cmp	r3, #1
 8002976:	d101      	bne.n	800297c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002978:	2302      	movs	r3, #2
 800297a:	e046      	b.n	8002a0a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	68fa      	ldr	r2, [r7, #12]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a16      	ldr	r2, [pc, #88]	; (8002a14 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d00e      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c8:	d009      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	4a12      	ldr	r2, [pc, #72]	; (8002a18 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d004      	beq.n	80029de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a10      	ldr	r2, [pc, #64]	; (8002a1c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d10c      	bne.n	80029f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	68ba      	ldr	r2, [r7, #8]
 80029ec:	4313      	orrs	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	68ba      	ldr	r2, [r7, #8]
 80029f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2201      	movs	r2, #1
 80029fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bc80      	pop	{r7}
 8002a12:	4770      	bx	lr
 8002a14:	40012c00 	.word	0x40012c00
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	40000800 	.word	0x40000800

08002a20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b083      	sub	sp, #12
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a28:	bf00      	nop
 8002a2a:	370c      	adds	r7, #12
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bc80      	pop	{r7}
 8002a30:	4770      	bx	lr

08002a32 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr

08002a44 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b082      	sub	sp, #8
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d101      	bne.n	8002a56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e03f      	b.n	8002ad6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d106      	bne.n	8002a70 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2200      	movs	r2, #0
 8002a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a6a:	6878      	ldr	r0, [r7, #4]
 8002a6c:	f7fe f984 	bl	8000d78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2224      	movs	r2, #36	; 0x24
 8002a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002a86:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fbcd 	bl	8003228 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	691a      	ldr	r2, [r3, #16]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a9c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695a      	ldr	r2, [r3, #20]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002aac:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	68da      	ldr	r2, [r3, #12]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002abc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2220      	movs	r2, #32
 8002ac8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2220      	movs	r2, #32
 8002ad0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ad4:	2300      	movs	r3, #0
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}

08002ade <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ade:	b580      	push	{r7, lr}
 8002ae0:	b08a      	sub	sp, #40	; 0x28
 8002ae2:	af02      	add	r7, sp, #8
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	603b      	str	r3, [r7, #0]
 8002aea:	4613      	mov	r3, r2
 8002aec:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002aee:	2300      	movs	r3, #0
 8002af0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2b20      	cmp	r3, #32
 8002afc:	d17c      	bne.n	8002bf8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d002      	beq.n	8002b0a <HAL_UART_Transmit+0x2c>
 8002b04:	88fb      	ldrh	r3, [r7, #6]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e075      	b.n	8002bfa <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b14:	2b01      	cmp	r3, #1
 8002b16:	d101      	bne.n	8002b1c <HAL_UART_Transmit+0x3e>
 8002b18:	2302      	movs	r3, #2
 8002b1a:	e06e      	b.n	8002bfa <HAL_UART_Transmit+0x11c>
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2200      	movs	r2, #0
 8002b28:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2221      	movs	r2, #33	; 0x21
 8002b2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002b32:	f7fe f9f1 	bl	8000f18 <HAL_GetTick>
 8002b36:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	88fa      	ldrh	r2, [r7, #6]
 8002b3c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	88fa      	ldrh	r2, [r7, #6]
 8002b42:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b4c:	d108      	bne.n	8002b60 <HAL_UART_Transmit+0x82>
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d104      	bne.n	8002b60 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b56:	2300      	movs	r3, #0
 8002b58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	61bb      	str	r3, [r7, #24]
 8002b5e:	e003      	b.n	8002b68 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b64:	2300      	movs	r3, #0
 8002b66:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002b70:	e02a      	b.n	8002bc8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	9300      	str	r3, [sp, #0]
 8002b76:	697b      	ldr	r3, [r7, #20]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	2180      	movs	r1, #128	; 0x80
 8002b7c:	68f8      	ldr	r0, [r7, #12]
 8002b7e:	f000 f9f1 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 8002b82:	4603      	mov	r3, r0
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d001      	beq.n	8002b8c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002b88:	2303      	movs	r3, #3
 8002b8a:	e036      	b.n	8002bfa <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d10b      	bne.n	8002baa <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002ba0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	3302      	adds	r3, #2
 8002ba6:	61bb      	str	r3, [r7, #24]
 8002ba8:	e007      	b.n	8002bba <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	781a      	ldrb	r2, [r3, #0]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	3301      	adds	r3, #1
 8002bb8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	3b01      	subs	r3, #1
 8002bc2:	b29a      	uxth	r2, r3
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1cf      	bne.n	8002b72 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	9300      	str	r3, [sp, #0]
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2140      	movs	r1, #64	; 0x40
 8002bdc:	68f8      	ldr	r0, [r7, #12]
 8002bde:	f000 f9c1 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d001      	beq.n	8002bec <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002be8:	2303      	movs	r3, #3
 8002bea:	e006      	b.n	8002bfa <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	e000      	b.n	8002bfa <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002bf8:	2302      	movs	r3, #2
  }
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3720      	adds	r7, #32
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b08a      	sub	sp, #40	; 0x28
 8002c06:	af02      	add	r7, sp, #8
 8002c08:	60f8      	str	r0, [r7, #12]
 8002c0a:	60b9      	str	r1, [r7, #8]
 8002c0c:	603b      	str	r3, [r7, #0]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c12:	2300      	movs	r3, #0
 8002c14:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b20      	cmp	r3, #32
 8002c20:	f040 8089 	bne.w	8002d36 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d002      	beq.n	8002c30 <HAL_UART_Receive+0x2e>
 8002c2a:	88fb      	ldrh	r3, [r7, #6]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d101      	bne.n	8002c34 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	e081      	b.n	8002d38 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Receive+0x40>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e07a      	b.n	8002d38 <HAL_UART_Receive+0x136>
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2222      	movs	r2, #34	; 0x22
 8002c54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c58:	f7fe f95e 	bl	8000f18 <HAL_GetTick>
 8002c5c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	88fa      	ldrh	r2, [r7, #6]
 8002c62:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	88fa      	ldrh	r2, [r7, #6]
 8002c68:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c72:	d108      	bne.n	8002c86 <HAL_UART_Receive+0x84>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d104      	bne.n	8002c86 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	61bb      	str	r3, [r7, #24]
 8002c84:	e003      	b.n	8002c8e <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002c86:	68bb      	ldr	r3, [r7, #8]
 8002c88:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002c96:	e043      	b.n	8002d20 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	9300      	str	r3, [sp, #0]
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	2120      	movs	r1, #32
 8002ca2:	68f8      	ldr	r0, [r7, #12]
 8002ca4:	f000 f95e 	bl	8002f64 <UART_WaitOnFlagUntilTimeout>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002cae:	2303      	movs	r3, #3
 8002cb0:	e042      	b.n	8002d38 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002cb2:	69fb      	ldr	r3, [r7, #28]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d10c      	bne.n	8002cd2 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	685b      	ldr	r3, [r3, #4]
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc4:	b29a      	uxth	r2, r3
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002cca:	69bb      	ldr	r3, [r7, #24]
 8002ccc:	3302      	adds	r3, #2
 8002cce:	61bb      	str	r3, [r7, #24]
 8002cd0:	e01f      	b.n	8002d12 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	d007      	beq.n	8002cec <HAL_UART_Receive+0xea>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d10a      	bne.n	8002cfa <HAL_UART_Receive+0xf8>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d106      	bne.n	8002cfa <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	e008      	b.n	8002d0c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d06:	b2da      	uxtb	r2, r3
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d16:	b29b      	uxth	r3, r3
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b29a      	uxth	r2, r3
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d1b6      	bne.n	8002c98 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	2220      	movs	r2, #32
 8002d2e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002d32:	2300      	movs	r3, #0
 8002d34:	e000      	b.n	8002d38 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002d36:	2302      	movs	r3, #2
  }
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3720      	adds	r7, #32
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}

08002d40 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b088      	sub	sp, #32
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	695b      	ldr	r3, [r3, #20]
 8002d5e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002d60:	2300      	movs	r3, #0
 8002d62:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002d64:	2300      	movs	r3, #0
 8002d66:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 030f 	and.w	r3, r3, #15
 8002d6e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10d      	bne.n	8002d92 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 0320 	and.w	r3, r3, #32
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d008      	beq.n	8002d92 <HAL_UART_IRQHandler+0x52>
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	f003 0320 	and.w	r3, r3, #32
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f000 f9cc 	bl	8003128 <UART_Receive_IT>
      return;
 8002d90:	e0d1      	b.n	8002f36 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 80b0 	beq.w	8002efa <HAL_UART_IRQHandler+0x1ba>
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	f003 0301 	and.w	r3, r3, #1
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d105      	bne.n	8002db0 <HAL_UART_IRQHandler+0x70>
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	f000 80a5 	beq.w	8002efa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002db0:	69fb      	ldr	r3, [r7, #28]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x90>
 8002dba:	69bb      	ldr	r3, [r7, #24]
 8002dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d005      	beq.n	8002dd0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	f043 0201 	orr.w	r2, r3, #1
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f003 0304 	and.w	r3, r3, #4
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d00a      	beq.n	8002df0 <HAL_UART_IRQHandler+0xb0>
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d005      	beq.n	8002df0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002de8:	f043 0202 	orr.w	r2, r3, #2
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0302 	and.w	r3, r3, #2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00a      	beq.n	8002e10 <HAL_UART_IRQHandler+0xd0>
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d005      	beq.n	8002e10 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e08:	f043 0204 	orr.w	r2, r3, #4
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0308 	and.w	r3, r3, #8
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00f      	beq.n	8002e3a <HAL_UART_IRQHandler+0xfa>
 8002e1a:	69bb      	ldr	r3, [r7, #24]
 8002e1c:	f003 0320 	and.w	r3, r3, #32
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d104      	bne.n	8002e2e <HAL_UART_IRQHandler+0xee>
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d005      	beq.n	8002e3a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e32:	f043 0208 	orr.w	r2, r3, #8
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d078      	beq.n	8002f34 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f003 0320 	and.w	r3, r3, #32
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d007      	beq.n	8002e5c <HAL_UART_IRQHandler+0x11c>
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	f003 0320 	and.w	r3, r3, #32
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002e56:	6878      	ldr	r0, [r7, #4]
 8002e58:	f000 f966 	bl	8003128 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	bf14      	ite	ne
 8002e6a:	2301      	movne	r3, #1
 8002e6c:	2300      	moveq	r3, #0
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e76:	f003 0308 	and.w	r3, r3, #8
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <HAL_UART_IRQHandler+0x144>
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d031      	beq.n	8002ee8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f8b7 	bl	8002ff8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	695b      	ldr	r3, [r3, #20]
 8002e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d023      	beq.n	8002ee0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695a      	ldr	r2, [r3, #20]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ea6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d013      	beq.n	8002ed8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	4a21      	ldr	r2, [pc, #132]	; (8002f3c <HAL_UART_IRQHandler+0x1fc>)
 8002eb6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f7fe f965 	bl	800118c <HAL_DMA_Abort_IT>
 8002ec2:	4603      	mov	r3, r0
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d016      	beq.n	8002ef6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ed6:	e00e      	b.n	8002ef6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f83a 	bl	8002f52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ede:	e00a      	b.n	8002ef6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f836 	bl	8002f52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ee6:	e006      	b.n	8002ef6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f832 	bl	8002f52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002ef4:	e01e      	b.n	8002f34 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ef6:	bf00      	nop
    return;
 8002ef8:	e01c      	b.n	8002f34 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002efa:	69fb      	ldr	r3, [r7, #28]
 8002efc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d008      	beq.n	8002f16 <HAL_UART_IRQHandler+0x1d6>
 8002f04:	69bb      	ldr	r3, [r7, #24]
 8002f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d003      	beq.n	8002f16 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f8a3 	bl	800305a <UART_Transmit_IT>
    return;
 8002f14:	e00f      	b.n	8002f36 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d00a      	beq.n	8002f36 <HAL_UART_IRQHandler+0x1f6>
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d005      	beq.n	8002f36 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f000 f8e4 	bl	80030f8 <UART_EndTransmit_IT>
    return;
 8002f30:	bf00      	nop
 8002f32:	e000      	b.n	8002f36 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002f34:	bf00      	nop
  }
}
 8002f36:	3720      	adds	r7, #32
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bd80      	pop	{r7, pc}
 8002f3c:	08003033 	.word	0x08003033

08002f40 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b083      	sub	sp, #12
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f48:	bf00      	nop
 8002f4a:	370c      	adds	r7, #12
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bc80      	pop	{r7}
 8002f50:	4770      	bx	lr

08002f52 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f5a:	bf00      	nop
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	bc80      	pop	{r7}
 8002f62:	4770      	bx	lr

08002f64 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	60b9      	str	r1, [r7, #8]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	4613      	mov	r3, r2
 8002f72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f74:	e02c      	b.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f76:	69bb      	ldr	r3, [r7, #24]
 8002f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7c:	d028      	beq.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f7e:	69bb      	ldr	r3, [r7, #24]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d007      	beq.n	8002f94 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f84:	f7fd ffc8 	bl	8000f18 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	429a      	cmp	r2, r3
 8002f92:	d21d      	bcs.n	8002fd0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fa2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	2220      	movs	r2, #32
 8002fc0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002fcc:	2303      	movs	r3, #3
 8002fce:	e00f      	b.n	8002ff0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	681a      	ldr	r2, [r3, #0]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4013      	ands	r3, r2
 8002fda:	68ba      	ldr	r2, [r7, #8]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	bf0c      	ite	eq
 8002fe0:	2301      	moveq	r3, #1
 8002fe2:	2300      	movne	r3, #0
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	461a      	mov	r2, r3
 8002fe8:	79fb      	ldrb	r3, [r7, #7]
 8002fea:	429a      	cmp	r2, r3
 8002fec:	d0c3      	beq.n	8002f76 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fee:	2300      	movs	r3, #0
}
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	3710      	adds	r7, #16
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800300e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	695a      	ldr	r2, [r3, #20]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	bc80      	pop	{r7}
 8003030:	4770      	bx	lr

08003032 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003032:	b580      	push	{r7, lr}
 8003034:	b084      	sub	sp, #16
 8003036:	af00      	add	r7, sp, #0
 8003038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2200      	movs	r2, #0
 800304a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800304c:	68f8      	ldr	r0, [r7, #12]
 800304e:	f7ff ff80 	bl	8002f52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003052:	bf00      	nop
 8003054:	3710      	adds	r7, #16
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800305a:	b480      	push	{r7}
 800305c:	b085      	sub	sp, #20
 800305e:	af00      	add	r7, sp, #0
 8003060:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b21      	cmp	r3, #33	; 0x21
 800306c:	d13e      	bne.n	80030ec <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003076:	d114      	bne.n	80030a2 <UART_Transmit_IT+0x48>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	691b      	ldr	r3, [r3, #16]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d110      	bne.n	80030a2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	881b      	ldrh	r3, [r3, #0]
 800308a:	461a      	mov	r2, r3
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003094:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a1b      	ldr	r3, [r3, #32]
 800309a:	1c9a      	adds	r2, r3, #2
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	621a      	str	r2, [r3, #32]
 80030a0:	e008      	b.n	80030b4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a1b      	ldr	r3, [r3, #32]
 80030a6:	1c59      	adds	r1, r3, #1
 80030a8:	687a      	ldr	r2, [r7, #4]
 80030aa:	6211      	str	r1, [r2, #32]
 80030ac:	781a      	ldrb	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b29b      	uxth	r3, r3
 80030be:	687a      	ldr	r2, [r7, #4]
 80030c0:	4619      	mov	r1, r3
 80030c2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10f      	bne.n	80030e8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030d6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030e6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030e8:	2300      	movs	r3, #0
 80030ea:	e000      	b.n	80030ee <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030ec:	2302      	movs	r3, #2
  }
}
 80030ee:	4618      	mov	r0, r3
 80030f0:	3714      	adds	r7, #20
 80030f2:	46bd      	mov	sp, r7
 80030f4:	bc80      	pop	{r7}
 80030f6:	4770      	bx	lr

080030f8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b082      	sub	sp, #8
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	68da      	ldr	r2, [r3, #12]
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800310e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2220      	movs	r2, #32
 8003114:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003118:	6878      	ldr	r0, [r7, #4]
 800311a:	f7fd fcc4 	bl	8000aa6 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800311e:	2300      	movs	r3, #0
}
 8003120:	4618      	mov	r0, r3
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003136:	b2db      	uxtb	r3, r3
 8003138:	2b22      	cmp	r3, #34	; 0x22
 800313a:	d170      	bne.n	800321e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003144:	d117      	bne.n	8003176 <UART_Receive_IT+0x4e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d113      	bne.n	8003176 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003156:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	b29b      	uxth	r3, r3
 8003160:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003164:	b29a      	uxth	r2, r3
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	1c9a      	adds	r2, r3, #2
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	629a      	str	r2, [r3, #40]	; 0x28
 8003174:	e026      	b.n	80031c4 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800317a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800317c:	2300      	movs	r3, #0
 800317e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003188:	d007      	beq.n	800319a <UART_Receive_IT+0x72>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d10a      	bne.n	80031a8 <UART_Receive_IT+0x80>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	691b      	ldr	r3, [r3, #16]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d106      	bne.n	80031a8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	b2da      	uxtb	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	701a      	strb	r2, [r3, #0]
 80031a6:	e008      	b.n	80031ba <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	b2db      	uxtb	r3, r3
 80031b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031be:	1c5a      	adds	r2, r3, #1
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	3b01      	subs	r3, #1
 80031cc:	b29b      	uxth	r3, r3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	4619      	mov	r1, r3
 80031d2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d120      	bne.n	800321a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	68da      	ldr	r2, [r3, #12]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f022 0220 	bic.w	r2, r2, #32
 80031e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68da      	ldr	r2, [r3, #12]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	695a      	ldr	r2, [r3, #20]
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f022 0201 	bic.w	r2, r2, #1
 8003206:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f7ff fe95 	bl	8002f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003216:	2300      	movs	r3, #0
 8003218:	e002      	b.n	8003220 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800321a:	2300      	movs	r3, #0
 800321c:	e000      	b.n	8003220 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800321e:	2302      	movs	r3, #2
  }
}
 8003220:	4618      	mov	r0, r3
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b084      	sub	sp, #16
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	68da      	ldr	r2, [r3, #12]
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	430a      	orrs	r2, r1
 8003244:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	689a      	ldr	r2, [r3, #8]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	691b      	ldr	r3, [r3, #16]
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	695b      	ldr	r3, [r3, #20]
 8003254:	4313      	orrs	r3, r2
 8003256:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003262:	f023 030c 	bic.w	r3, r3, #12
 8003266:	687a      	ldr	r2, [r7, #4]
 8003268:	6812      	ldr	r2, [r2, #0]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	430b      	orrs	r3, r1
 800326e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699a      	ldr	r2, [r3, #24]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a2c      	ldr	r2, [pc, #176]	; (800333c <UART_SetConfig+0x114>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d103      	bne.n	8003298 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003290:	f7ff f80c 	bl	80022ac <HAL_RCC_GetPCLK2Freq>
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	e002      	b.n	800329e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003298:	f7fe fff4 	bl	8002284 <HAL_RCC_GetPCLK1Freq>
 800329c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800329e:	68fa      	ldr	r2, [r7, #12]
 80032a0:	4613      	mov	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	4413      	add	r3, r2
 80032a6:	009a      	lsls	r2, r3, #2
 80032a8:	441a      	add	r2, r3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b4:	4a22      	ldr	r2, [pc, #136]	; (8003340 <UART_SetConfig+0x118>)
 80032b6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ba:	095b      	lsrs	r3, r3, #5
 80032bc:	0119      	lsls	r1, r3, #4
 80032be:	68fa      	ldr	r2, [r7, #12]
 80032c0:	4613      	mov	r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	009a      	lsls	r2, r3, #2
 80032c8:	441a      	add	r2, r3
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	fbb2 f2f3 	udiv	r2, r2, r3
 80032d4:	4b1a      	ldr	r3, [pc, #104]	; (8003340 <UART_SetConfig+0x118>)
 80032d6:	fba3 0302 	umull	r0, r3, r3, r2
 80032da:	095b      	lsrs	r3, r3, #5
 80032dc:	2064      	movs	r0, #100	; 0x64
 80032de:	fb00 f303 	mul.w	r3, r0, r3
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	011b      	lsls	r3, r3, #4
 80032e6:	3332      	adds	r3, #50	; 0x32
 80032e8:	4a15      	ldr	r2, [pc, #84]	; (8003340 <UART_SetConfig+0x118>)
 80032ea:	fba2 2303 	umull	r2, r3, r2, r3
 80032ee:	095b      	lsrs	r3, r3, #5
 80032f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80032f4:	4419      	add	r1, r3
 80032f6:	68fa      	ldr	r2, [r7, #12]
 80032f8:	4613      	mov	r3, r2
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	4413      	add	r3, r2
 80032fe:	009a      	lsls	r2, r3, #2
 8003300:	441a      	add	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	fbb2 f2f3 	udiv	r2, r2, r3
 800330c:	4b0c      	ldr	r3, [pc, #48]	; (8003340 <UART_SetConfig+0x118>)
 800330e:	fba3 0302 	umull	r0, r3, r3, r2
 8003312:	095b      	lsrs	r3, r3, #5
 8003314:	2064      	movs	r0, #100	; 0x64
 8003316:	fb00 f303 	mul.w	r3, r0, r3
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	3332      	adds	r3, #50	; 0x32
 8003320:	4a07      	ldr	r2, [pc, #28]	; (8003340 <UART_SetConfig+0x118>)
 8003322:	fba2 2303 	umull	r2, r3, r2, r3
 8003326:	095b      	lsrs	r3, r3, #5
 8003328:	f003 020f 	and.w	r2, r3, #15
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	440a      	add	r2, r1
 8003332:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003334:	bf00      	nop
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40013800 	.word	0x40013800
 8003340:	51eb851f 	.word	0x51eb851f

08003344 <LED_SEQUENCE_init>:

#include "../Inc/Sequence_led.h"


//On initialise les paramètres
void LED_SEQUENCE_init(sequence_led_t * seq_led, GPIO_TypeDef* gpio, uint16_t gpio_pin, int32_t init_seq, uint32_t periode, int8_t length_sequence, bool_e output_logic){
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	60b9      	str	r1, [r7, #8]
 800334e:	603b      	str	r3, [r7, #0]
 8003350:	4613      	mov	r3, r2
 8003352:	80fb      	strh	r3, [r7, #6]
	//Init des varaibles
	seq_led->compteur = 0;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2200      	movs	r2, #0
 8003358:	741a      	strb	r2, [r3, #16]
	seq_led->gpio = gpio ;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	601a      	str	r2, [r3, #0]
	seq_led->gpio_pin = gpio_pin ;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	88fa      	ldrh	r2, [r7, #6]
 8003364:	809a      	strh	r2, [r3, #4]
	seq_led->length_sequence = length_sequence ;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	7f3a      	ldrb	r2, [r7, #28]
 800336a:	745a      	strb	r2, [r3, #17]
	seq_led->periode = periode ;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	609a      	str	r2, [r3, #8]
	seq_led->output_logic = output_logic ;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a3a      	ldr	r2, [r7, #32]
 8003376:	619a      	str	r2, [r3, #24]
	if(seq_led->output_logic == 1)
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d102      	bne.n	8003386 <LED_SEQUENCE_init+0x42>
		//Si logique négative on inverse la séquence
		init_seq = ~init_seq ;
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	43db      	mvns	r3, r3
 8003384:	603b      	str	r3, [r7, #0]
	seq_led->sequence = init_seq ;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	60da      	str	r2, [r3, #12]




}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	bc80      	pop	{r7}
 8003394:	4770      	bx	lr
	...

08003398 <LED_SEQUENCE_play>:
	seq_led->compteur = 0 ;
	seq_led->sequence = seq ;
}

//On change la sortie de la led en fonction de la séquence active
void LED_SEQUENCE_play(sequence_led_t * seq_led, uint32_t current_time_us){
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]
 80033a0:	6039      	str	r1, [r7, #0]
	if(current_time_us / 1000 > seq_led->previous_time + seq_led->periode){
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	4a25      	ldr	r2, [pc, #148]	; (800343c <LED_SEQUENCE_play+0xa4>)
 80033a6:	fba2 2303 	umull	r2, r3, r2, r3
 80033aa:	099a      	lsrs	r2, r3, #6
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6959      	ldr	r1, [r3, #20]
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	440b      	add	r3, r1
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d93a      	bls.n	8003430 <LED_SEQUENCE_play+0x98>
		seq_led->previous_time += seq_led->periode ;
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	695a      	ldr	r2, [r3, #20]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	441a      	add	r2, r3
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	615a      	str	r2, [r3, #20]
		//on récupère le niveau logique de la sortie
		bool_e output = ((seq_led->sequence) >> ((seq_led->length_sequence - seq_led->compteur) - 1)) & 1 ;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68da      	ldr	r2, [r3, #12]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	f993 3011 	ldrsb.w	r3, [r3, #17]
 80033d2:	4619      	mov	r1, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	f993 3010 	ldrsb.w	r3, [r3, #16]
 80033da:	1acb      	subs	r3, r1, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	fa42 f303 	asr.w	r3, r2, r3
 80033e2:	f003 0301 	and.w	r3, r3, #1
 80033e6:	60fb      	str	r3, [r7, #12]
		//On update la sortie
		if(output)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <LED_SEQUENCE_play+0x62>
			seq_led->gpio->BSRR = seq_led->gpio_pin ;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	889a      	ldrh	r2, [r3, #4]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	611a      	str	r2, [r3, #16]
 80033f8:	e006      	b.n	8003408 <LED_SEQUENCE_play+0x70>
		else
			seq_led->gpio->BSRR = (uint32_t)(seq_led->gpio_pin) << 16U ;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	889b      	ldrh	r3, [r3, #4]
 80033fe:	461a      	mov	r2, r3
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	0412      	lsls	r2, r2, #16
 8003406:	611a      	str	r2, [r3, #16]
		//on update le compteur
		seq_led->compteur ++ ;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800340e:	b2db      	uxtb	r3, r3
 8003410:	3301      	adds	r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	b25a      	sxtb	r2, r3
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	741a      	strb	r2, [r3, #16]
		//TODO : verif l'init si length > 0
		if(seq_led->compteur == seq_led->length_sequence)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	f993 2010 	ldrsb.w	r2, [r3, #16]
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8003426:	429a      	cmp	r2, r3
 8003428:	d102      	bne.n	8003430 <LED_SEQUENCE_play+0x98>
			seq_led->compteur = 0 ;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	741a      	strb	r2, [r3, #16]
	}
}
 8003430:	bf00      	nop
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	bc80      	pop	{r7}
 8003438:	4770      	bx	lr
 800343a:	bf00      	nop
 800343c:	10624dd3 	.word	0x10624dd3

08003440 <__errno>:
 8003440:	4b01      	ldr	r3, [pc, #4]	; (8003448 <__errno+0x8>)
 8003442:	6818      	ldr	r0, [r3, #0]
 8003444:	4770      	bx	lr
 8003446:	bf00      	nop
 8003448:	2000031c 	.word	0x2000031c

0800344c <__libc_init_array>:
 800344c:	b570      	push	{r4, r5, r6, lr}
 800344e:	2500      	movs	r5, #0
 8003450:	4e0c      	ldr	r6, [pc, #48]	; (8003484 <__libc_init_array+0x38>)
 8003452:	4c0d      	ldr	r4, [pc, #52]	; (8003488 <__libc_init_array+0x3c>)
 8003454:	1ba4      	subs	r4, r4, r6
 8003456:	10a4      	asrs	r4, r4, #2
 8003458:	42a5      	cmp	r5, r4
 800345a:	d109      	bne.n	8003470 <__libc_init_array+0x24>
 800345c:	f001 f844 	bl	80044e8 <_init>
 8003460:	2500      	movs	r5, #0
 8003462:	4e0a      	ldr	r6, [pc, #40]	; (800348c <__libc_init_array+0x40>)
 8003464:	4c0a      	ldr	r4, [pc, #40]	; (8003490 <__libc_init_array+0x44>)
 8003466:	1ba4      	subs	r4, r4, r6
 8003468:	10a4      	asrs	r4, r4, #2
 800346a:	42a5      	cmp	r5, r4
 800346c:	d105      	bne.n	800347a <__libc_init_array+0x2e>
 800346e:	bd70      	pop	{r4, r5, r6, pc}
 8003470:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003474:	4798      	blx	r3
 8003476:	3501      	adds	r5, #1
 8003478:	e7ee      	b.n	8003458 <__libc_init_array+0xc>
 800347a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800347e:	4798      	blx	r3
 8003480:	3501      	adds	r5, #1
 8003482:	e7f2      	b.n	800346a <__libc_init_array+0x1e>
 8003484:	080045e8 	.word	0x080045e8
 8003488:	080045e8 	.word	0x080045e8
 800348c:	080045e8 	.word	0x080045e8
 8003490:	080045ec 	.word	0x080045ec

08003494 <memmove>:
 8003494:	4288      	cmp	r0, r1
 8003496:	b510      	push	{r4, lr}
 8003498:	eb01 0302 	add.w	r3, r1, r2
 800349c:	d807      	bhi.n	80034ae <memmove+0x1a>
 800349e:	1e42      	subs	r2, r0, #1
 80034a0:	4299      	cmp	r1, r3
 80034a2:	d00a      	beq.n	80034ba <memmove+0x26>
 80034a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034a8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80034ac:	e7f8      	b.n	80034a0 <memmove+0xc>
 80034ae:	4283      	cmp	r3, r0
 80034b0:	d9f5      	bls.n	800349e <memmove+0xa>
 80034b2:	1881      	adds	r1, r0, r2
 80034b4:	1ad2      	subs	r2, r2, r3
 80034b6:	42d3      	cmn	r3, r2
 80034b8:	d100      	bne.n	80034bc <memmove+0x28>
 80034ba:	bd10      	pop	{r4, pc}
 80034bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034c0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80034c4:	e7f7      	b.n	80034b6 <memmove+0x22>

080034c6 <memset>:
 80034c6:	4603      	mov	r3, r0
 80034c8:	4402      	add	r2, r0
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d100      	bne.n	80034d0 <memset+0xa>
 80034ce:	4770      	bx	lr
 80034d0:	f803 1b01 	strb.w	r1, [r3], #1
 80034d4:	e7f9      	b.n	80034ca <memset+0x4>
	...

080034d8 <iprintf>:
 80034d8:	b40f      	push	{r0, r1, r2, r3}
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <iprintf+0x2c>)
 80034dc:	b513      	push	{r0, r1, r4, lr}
 80034de:	681c      	ldr	r4, [r3, #0]
 80034e0:	b124      	cbz	r4, 80034ec <iprintf+0x14>
 80034e2:	69a3      	ldr	r3, [r4, #24]
 80034e4:	b913      	cbnz	r3, 80034ec <iprintf+0x14>
 80034e6:	4620      	mov	r0, r4
 80034e8:	f000 fad0 	bl	8003a8c <__sinit>
 80034ec:	ab05      	add	r3, sp, #20
 80034ee:	9a04      	ldr	r2, [sp, #16]
 80034f0:	68a1      	ldr	r1, [r4, #8]
 80034f2:	4620      	mov	r0, r4
 80034f4:	9301      	str	r3, [sp, #4]
 80034f6:	f000 fc8d 	bl	8003e14 <_vfiprintf_r>
 80034fa:	b002      	add	sp, #8
 80034fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003500:	b004      	add	sp, #16
 8003502:	4770      	bx	lr
 8003504:	2000031c 	.word	0x2000031c

08003508 <_puts_r>:
 8003508:	b570      	push	{r4, r5, r6, lr}
 800350a:	460e      	mov	r6, r1
 800350c:	4605      	mov	r5, r0
 800350e:	b118      	cbz	r0, 8003518 <_puts_r+0x10>
 8003510:	6983      	ldr	r3, [r0, #24]
 8003512:	b90b      	cbnz	r3, 8003518 <_puts_r+0x10>
 8003514:	f000 faba 	bl	8003a8c <__sinit>
 8003518:	69ab      	ldr	r3, [r5, #24]
 800351a:	68ac      	ldr	r4, [r5, #8]
 800351c:	b913      	cbnz	r3, 8003524 <_puts_r+0x1c>
 800351e:	4628      	mov	r0, r5
 8003520:	f000 fab4 	bl	8003a8c <__sinit>
 8003524:	4b23      	ldr	r3, [pc, #140]	; (80035b4 <_puts_r+0xac>)
 8003526:	429c      	cmp	r4, r3
 8003528:	d117      	bne.n	800355a <_puts_r+0x52>
 800352a:	686c      	ldr	r4, [r5, #4]
 800352c:	89a3      	ldrh	r3, [r4, #12]
 800352e:	071b      	lsls	r3, r3, #28
 8003530:	d51d      	bpl.n	800356e <_puts_r+0x66>
 8003532:	6923      	ldr	r3, [r4, #16]
 8003534:	b1db      	cbz	r3, 800356e <_puts_r+0x66>
 8003536:	3e01      	subs	r6, #1
 8003538:	68a3      	ldr	r3, [r4, #8]
 800353a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800353e:	3b01      	subs	r3, #1
 8003540:	60a3      	str	r3, [r4, #8]
 8003542:	b9e9      	cbnz	r1, 8003580 <_puts_r+0x78>
 8003544:	2b00      	cmp	r3, #0
 8003546:	da2e      	bge.n	80035a6 <_puts_r+0x9e>
 8003548:	4622      	mov	r2, r4
 800354a:	210a      	movs	r1, #10
 800354c:	4628      	mov	r0, r5
 800354e:	f000 f8ed 	bl	800372c <__swbuf_r>
 8003552:	3001      	adds	r0, #1
 8003554:	d011      	beq.n	800357a <_puts_r+0x72>
 8003556:	200a      	movs	r0, #10
 8003558:	e011      	b.n	800357e <_puts_r+0x76>
 800355a:	4b17      	ldr	r3, [pc, #92]	; (80035b8 <_puts_r+0xb0>)
 800355c:	429c      	cmp	r4, r3
 800355e:	d101      	bne.n	8003564 <_puts_r+0x5c>
 8003560:	68ac      	ldr	r4, [r5, #8]
 8003562:	e7e3      	b.n	800352c <_puts_r+0x24>
 8003564:	4b15      	ldr	r3, [pc, #84]	; (80035bc <_puts_r+0xb4>)
 8003566:	429c      	cmp	r4, r3
 8003568:	bf08      	it	eq
 800356a:	68ec      	ldreq	r4, [r5, #12]
 800356c:	e7de      	b.n	800352c <_puts_r+0x24>
 800356e:	4621      	mov	r1, r4
 8003570:	4628      	mov	r0, r5
 8003572:	f000 f92d 	bl	80037d0 <__swsetup_r>
 8003576:	2800      	cmp	r0, #0
 8003578:	d0dd      	beq.n	8003536 <_puts_r+0x2e>
 800357a:	f04f 30ff 	mov.w	r0, #4294967295
 800357e:	bd70      	pop	{r4, r5, r6, pc}
 8003580:	2b00      	cmp	r3, #0
 8003582:	da04      	bge.n	800358e <_puts_r+0x86>
 8003584:	69a2      	ldr	r2, [r4, #24]
 8003586:	429a      	cmp	r2, r3
 8003588:	dc06      	bgt.n	8003598 <_puts_r+0x90>
 800358a:	290a      	cmp	r1, #10
 800358c:	d004      	beq.n	8003598 <_puts_r+0x90>
 800358e:	6823      	ldr	r3, [r4, #0]
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	6022      	str	r2, [r4, #0]
 8003594:	7019      	strb	r1, [r3, #0]
 8003596:	e7cf      	b.n	8003538 <_puts_r+0x30>
 8003598:	4622      	mov	r2, r4
 800359a:	4628      	mov	r0, r5
 800359c:	f000 f8c6 	bl	800372c <__swbuf_r>
 80035a0:	3001      	adds	r0, #1
 80035a2:	d1c9      	bne.n	8003538 <_puts_r+0x30>
 80035a4:	e7e9      	b.n	800357a <_puts_r+0x72>
 80035a6:	200a      	movs	r0, #10
 80035a8:	6823      	ldr	r3, [r4, #0]
 80035aa:	1c5a      	adds	r2, r3, #1
 80035ac:	6022      	str	r2, [r4, #0]
 80035ae:	7018      	strb	r0, [r3, #0]
 80035b0:	e7e5      	b.n	800357e <_puts_r+0x76>
 80035b2:	bf00      	nop
 80035b4:	08004574 	.word	0x08004574
 80035b8:	08004594 	.word	0x08004594
 80035bc:	08004554 	.word	0x08004554

080035c0 <puts>:
 80035c0:	4b02      	ldr	r3, [pc, #8]	; (80035cc <puts+0xc>)
 80035c2:	4601      	mov	r1, r0
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	f7ff bf9f 	b.w	8003508 <_puts_r>
 80035ca:	bf00      	nop
 80035cc:	2000031c 	.word	0x2000031c

080035d0 <setvbuf>:
 80035d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80035d4:	461d      	mov	r5, r3
 80035d6:	4b51      	ldr	r3, [pc, #324]	; (800371c <setvbuf+0x14c>)
 80035d8:	4604      	mov	r4, r0
 80035da:	681e      	ldr	r6, [r3, #0]
 80035dc:	460f      	mov	r7, r1
 80035de:	4690      	mov	r8, r2
 80035e0:	b126      	cbz	r6, 80035ec <setvbuf+0x1c>
 80035e2:	69b3      	ldr	r3, [r6, #24]
 80035e4:	b913      	cbnz	r3, 80035ec <setvbuf+0x1c>
 80035e6:	4630      	mov	r0, r6
 80035e8:	f000 fa50 	bl	8003a8c <__sinit>
 80035ec:	4b4c      	ldr	r3, [pc, #304]	; (8003720 <setvbuf+0x150>)
 80035ee:	429c      	cmp	r4, r3
 80035f0:	d152      	bne.n	8003698 <setvbuf+0xc8>
 80035f2:	6874      	ldr	r4, [r6, #4]
 80035f4:	f1b8 0f02 	cmp.w	r8, #2
 80035f8:	d006      	beq.n	8003608 <setvbuf+0x38>
 80035fa:	f1b8 0f01 	cmp.w	r8, #1
 80035fe:	f200 8089 	bhi.w	8003714 <setvbuf+0x144>
 8003602:	2d00      	cmp	r5, #0
 8003604:	f2c0 8086 	blt.w	8003714 <setvbuf+0x144>
 8003608:	4621      	mov	r1, r4
 800360a:	4630      	mov	r0, r6
 800360c:	f000 f9d4 	bl	80039b8 <_fflush_r>
 8003610:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003612:	b141      	cbz	r1, 8003626 <setvbuf+0x56>
 8003614:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003618:	4299      	cmp	r1, r3
 800361a:	d002      	beq.n	8003622 <setvbuf+0x52>
 800361c:	4630      	mov	r0, r6
 800361e:	f000 fb2b 	bl	8003c78 <_free_r>
 8003622:	2300      	movs	r3, #0
 8003624:	6363      	str	r3, [r4, #52]	; 0x34
 8003626:	2300      	movs	r3, #0
 8003628:	61a3      	str	r3, [r4, #24]
 800362a:	6063      	str	r3, [r4, #4]
 800362c:	89a3      	ldrh	r3, [r4, #12]
 800362e:	061b      	lsls	r3, r3, #24
 8003630:	d503      	bpl.n	800363a <setvbuf+0x6a>
 8003632:	6921      	ldr	r1, [r4, #16]
 8003634:	4630      	mov	r0, r6
 8003636:	f000 fb1f 	bl	8003c78 <_free_r>
 800363a:	89a3      	ldrh	r3, [r4, #12]
 800363c:	f1b8 0f02 	cmp.w	r8, #2
 8003640:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003644:	f023 0303 	bic.w	r3, r3, #3
 8003648:	81a3      	strh	r3, [r4, #12]
 800364a:	d05d      	beq.n	8003708 <setvbuf+0x138>
 800364c:	ab01      	add	r3, sp, #4
 800364e:	466a      	mov	r2, sp
 8003650:	4621      	mov	r1, r4
 8003652:	4630      	mov	r0, r6
 8003654:	f000 faa4 	bl	8003ba0 <__swhatbuf_r>
 8003658:	89a3      	ldrh	r3, [r4, #12]
 800365a:	4318      	orrs	r0, r3
 800365c:	81a0      	strh	r0, [r4, #12]
 800365e:	bb2d      	cbnz	r5, 80036ac <setvbuf+0xdc>
 8003660:	9d00      	ldr	r5, [sp, #0]
 8003662:	4628      	mov	r0, r5
 8003664:	f000 fb00 	bl	8003c68 <malloc>
 8003668:	4607      	mov	r7, r0
 800366a:	2800      	cmp	r0, #0
 800366c:	d14e      	bne.n	800370c <setvbuf+0x13c>
 800366e:	f8dd 9000 	ldr.w	r9, [sp]
 8003672:	45a9      	cmp	r9, r5
 8003674:	d13c      	bne.n	80036f0 <setvbuf+0x120>
 8003676:	f04f 30ff 	mov.w	r0, #4294967295
 800367a:	89a3      	ldrh	r3, [r4, #12]
 800367c:	f043 0302 	orr.w	r3, r3, #2
 8003680:	81a3      	strh	r3, [r4, #12]
 8003682:	2300      	movs	r3, #0
 8003684:	60a3      	str	r3, [r4, #8]
 8003686:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800368a:	6023      	str	r3, [r4, #0]
 800368c:	6123      	str	r3, [r4, #16]
 800368e:	2301      	movs	r3, #1
 8003690:	6163      	str	r3, [r4, #20]
 8003692:	b003      	add	sp, #12
 8003694:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003698:	4b22      	ldr	r3, [pc, #136]	; (8003724 <setvbuf+0x154>)
 800369a:	429c      	cmp	r4, r3
 800369c:	d101      	bne.n	80036a2 <setvbuf+0xd2>
 800369e:	68b4      	ldr	r4, [r6, #8]
 80036a0:	e7a8      	b.n	80035f4 <setvbuf+0x24>
 80036a2:	4b21      	ldr	r3, [pc, #132]	; (8003728 <setvbuf+0x158>)
 80036a4:	429c      	cmp	r4, r3
 80036a6:	bf08      	it	eq
 80036a8:	68f4      	ldreq	r4, [r6, #12]
 80036aa:	e7a3      	b.n	80035f4 <setvbuf+0x24>
 80036ac:	2f00      	cmp	r7, #0
 80036ae:	d0d8      	beq.n	8003662 <setvbuf+0x92>
 80036b0:	69b3      	ldr	r3, [r6, #24]
 80036b2:	b913      	cbnz	r3, 80036ba <setvbuf+0xea>
 80036b4:	4630      	mov	r0, r6
 80036b6:	f000 f9e9 	bl	8003a8c <__sinit>
 80036ba:	f1b8 0f01 	cmp.w	r8, #1
 80036be:	bf08      	it	eq
 80036c0:	89a3      	ldrheq	r3, [r4, #12]
 80036c2:	6027      	str	r7, [r4, #0]
 80036c4:	bf04      	itt	eq
 80036c6:	f043 0301 	orreq.w	r3, r3, #1
 80036ca:	81a3      	strheq	r3, [r4, #12]
 80036cc:	89a3      	ldrh	r3, [r4, #12]
 80036ce:	e9c4 7504 	strd	r7, r5, [r4, #16]
 80036d2:	f013 0008 	ands.w	r0, r3, #8
 80036d6:	d01b      	beq.n	8003710 <setvbuf+0x140>
 80036d8:	f013 0001 	ands.w	r0, r3, #1
 80036dc:	f04f 0300 	mov.w	r3, #0
 80036e0:	bf1f      	itttt	ne
 80036e2:	426d      	negne	r5, r5
 80036e4:	60a3      	strne	r3, [r4, #8]
 80036e6:	61a5      	strne	r5, [r4, #24]
 80036e8:	4618      	movne	r0, r3
 80036ea:	bf08      	it	eq
 80036ec:	60a5      	streq	r5, [r4, #8]
 80036ee:	e7d0      	b.n	8003692 <setvbuf+0xc2>
 80036f0:	4648      	mov	r0, r9
 80036f2:	f000 fab9 	bl	8003c68 <malloc>
 80036f6:	4607      	mov	r7, r0
 80036f8:	2800      	cmp	r0, #0
 80036fa:	d0bc      	beq.n	8003676 <setvbuf+0xa6>
 80036fc:	89a3      	ldrh	r3, [r4, #12]
 80036fe:	464d      	mov	r5, r9
 8003700:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003704:	81a3      	strh	r3, [r4, #12]
 8003706:	e7d3      	b.n	80036b0 <setvbuf+0xe0>
 8003708:	2000      	movs	r0, #0
 800370a:	e7b6      	b.n	800367a <setvbuf+0xaa>
 800370c:	46a9      	mov	r9, r5
 800370e:	e7f5      	b.n	80036fc <setvbuf+0x12c>
 8003710:	60a0      	str	r0, [r4, #8]
 8003712:	e7be      	b.n	8003692 <setvbuf+0xc2>
 8003714:	f04f 30ff 	mov.w	r0, #4294967295
 8003718:	e7bb      	b.n	8003692 <setvbuf+0xc2>
 800371a:	bf00      	nop
 800371c:	2000031c 	.word	0x2000031c
 8003720:	08004574 	.word	0x08004574
 8003724:	08004594 	.word	0x08004594
 8003728:	08004554 	.word	0x08004554

0800372c <__swbuf_r>:
 800372c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800372e:	460e      	mov	r6, r1
 8003730:	4614      	mov	r4, r2
 8003732:	4605      	mov	r5, r0
 8003734:	b118      	cbz	r0, 800373e <__swbuf_r+0x12>
 8003736:	6983      	ldr	r3, [r0, #24]
 8003738:	b90b      	cbnz	r3, 800373e <__swbuf_r+0x12>
 800373a:	f000 f9a7 	bl	8003a8c <__sinit>
 800373e:	4b21      	ldr	r3, [pc, #132]	; (80037c4 <__swbuf_r+0x98>)
 8003740:	429c      	cmp	r4, r3
 8003742:	d12a      	bne.n	800379a <__swbuf_r+0x6e>
 8003744:	686c      	ldr	r4, [r5, #4]
 8003746:	69a3      	ldr	r3, [r4, #24]
 8003748:	60a3      	str	r3, [r4, #8]
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	071a      	lsls	r2, r3, #28
 800374e:	d52e      	bpl.n	80037ae <__swbuf_r+0x82>
 8003750:	6923      	ldr	r3, [r4, #16]
 8003752:	b363      	cbz	r3, 80037ae <__swbuf_r+0x82>
 8003754:	6923      	ldr	r3, [r4, #16]
 8003756:	6820      	ldr	r0, [r4, #0]
 8003758:	b2f6      	uxtb	r6, r6
 800375a:	1ac0      	subs	r0, r0, r3
 800375c:	6963      	ldr	r3, [r4, #20]
 800375e:	4637      	mov	r7, r6
 8003760:	4283      	cmp	r3, r0
 8003762:	dc04      	bgt.n	800376e <__swbuf_r+0x42>
 8003764:	4621      	mov	r1, r4
 8003766:	4628      	mov	r0, r5
 8003768:	f000 f926 	bl	80039b8 <_fflush_r>
 800376c:	bb28      	cbnz	r0, 80037ba <__swbuf_r+0x8e>
 800376e:	68a3      	ldr	r3, [r4, #8]
 8003770:	3001      	adds	r0, #1
 8003772:	3b01      	subs	r3, #1
 8003774:	60a3      	str	r3, [r4, #8]
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	1c5a      	adds	r2, r3, #1
 800377a:	6022      	str	r2, [r4, #0]
 800377c:	701e      	strb	r6, [r3, #0]
 800377e:	6963      	ldr	r3, [r4, #20]
 8003780:	4283      	cmp	r3, r0
 8003782:	d004      	beq.n	800378e <__swbuf_r+0x62>
 8003784:	89a3      	ldrh	r3, [r4, #12]
 8003786:	07db      	lsls	r3, r3, #31
 8003788:	d519      	bpl.n	80037be <__swbuf_r+0x92>
 800378a:	2e0a      	cmp	r6, #10
 800378c:	d117      	bne.n	80037be <__swbuf_r+0x92>
 800378e:	4621      	mov	r1, r4
 8003790:	4628      	mov	r0, r5
 8003792:	f000 f911 	bl	80039b8 <_fflush_r>
 8003796:	b190      	cbz	r0, 80037be <__swbuf_r+0x92>
 8003798:	e00f      	b.n	80037ba <__swbuf_r+0x8e>
 800379a:	4b0b      	ldr	r3, [pc, #44]	; (80037c8 <__swbuf_r+0x9c>)
 800379c:	429c      	cmp	r4, r3
 800379e:	d101      	bne.n	80037a4 <__swbuf_r+0x78>
 80037a0:	68ac      	ldr	r4, [r5, #8]
 80037a2:	e7d0      	b.n	8003746 <__swbuf_r+0x1a>
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <__swbuf_r+0xa0>)
 80037a6:	429c      	cmp	r4, r3
 80037a8:	bf08      	it	eq
 80037aa:	68ec      	ldreq	r4, [r5, #12]
 80037ac:	e7cb      	b.n	8003746 <__swbuf_r+0x1a>
 80037ae:	4621      	mov	r1, r4
 80037b0:	4628      	mov	r0, r5
 80037b2:	f000 f80d 	bl	80037d0 <__swsetup_r>
 80037b6:	2800      	cmp	r0, #0
 80037b8:	d0cc      	beq.n	8003754 <__swbuf_r+0x28>
 80037ba:	f04f 37ff 	mov.w	r7, #4294967295
 80037be:	4638      	mov	r0, r7
 80037c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037c2:	bf00      	nop
 80037c4:	08004574 	.word	0x08004574
 80037c8:	08004594 	.word	0x08004594
 80037cc:	08004554 	.word	0x08004554

080037d0 <__swsetup_r>:
 80037d0:	4b32      	ldr	r3, [pc, #200]	; (800389c <__swsetup_r+0xcc>)
 80037d2:	b570      	push	{r4, r5, r6, lr}
 80037d4:	681d      	ldr	r5, [r3, #0]
 80037d6:	4606      	mov	r6, r0
 80037d8:	460c      	mov	r4, r1
 80037da:	b125      	cbz	r5, 80037e6 <__swsetup_r+0x16>
 80037dc:	69ab      	ldr	r3, [r5, #24]
 80037de:	b913      	cbnz	r3, 80037e6 <__swsetup_r+0x16>
 80037e0:	4628      	mov	r0, r5
 80037e2:	f000 f953 	bl	8003a8c <__sinit>
 80037e6:	4b2e      	ldr	r3, [pc, #184]	; (80038a0 <__swsetup_r+0xd0>)
 80037e8:	429c      	cmp	r4, r3
 80037ea:	d10f      	bne.n	800380c <__swsetup_r+0x3c>
 80037ec:	686c      	ldr	r4, [r5, #4]
 80037ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	0715      	lsls	r5, r2, #28
 80037f6:	d42c      	bmi.n	8003852 <__swsetup_r+0x82>
 80037f8:	06d0      	lsls	r0, r2, #27
 80037fa:	d411      	bmi.n	8003820 <__swsetup_r+0x50>
 80037fc:	2209      	movs	r2, #9
 80037fe:	6032      	str	r2, [r6, #0]
 8003800:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003804:	81a3      	strh	r3, [r4, #12]
 8003806:	f04f 30ff 	mov.w	r0, #4294967295
 800380a:	e03e      	b.n	800388a <__swsetup_r+0xba>
 800380c:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <__swsetup_r+0xd4>)
 800380e:	429c      	cmp	r4, r3
 8003810:	d101      	bne.n	8003816 <__swsetup_r+0x46>
 8003812:	68ac      	ldr	r4, [r5, #8]
 8003814:	e7eb      	b.n	80037ee <__swsetup_r+0x1e>
 8003816:	4b24      	ldr	r3, [pc, #144]	; (80038a8 <__swsetup_r+0xd8>)
 8003818:	429c      	cmp	r4, r3
 800381a:	bf08      	it	eq
 800381c:	68ec      	ldreq	r4, [r5, #12]
 800381e:	e7e6      	b.n	80037ee <__swsetup_r+0x1e>
 8003820:	0751      	lsls	r1, r2, #29
 8003822:	d512      	bpl.n	800384a <__swsetup_r+0x7a>
 8003824:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003826:	b141      	cbz	r1, 800383a <__swsetup_r+0x6a>
 8003828:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800382c:	4299      	cmp	r1, r3
 800382e:	d002      	beq.n	8003836 <__swsetup_r+0x66>
 8003830:	4630      	mov	r0, r6
 8003832:	f000 fa21 	bl	8003c78 <_free_r>
 8003836:	2300      	movs	r3, #0
 8003838:	6363      	str	r3, [r4, #52]	; 0x34
 800383a:	89a3      	ldrh	r3, [r4, #12]
 800383c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003840:	81a3      	strh	r3, [r4, #12]
 8003842:	2300      	movs	r3, #0
 8003844:	6063      	str	r3, [r4, #4]
 8003846:	6923      	ldr	r3, [r4, #16]
 8003848:	6023      	str	r3, [r4, #0]
 800384a:	89a3      	ldrh	r3, [r4, #12]
 800384c:	f043 0308 	orr.w	r3, r3, #8
 8003850:	81a3      	strh	r3, [r4, #12]
 8003852:	6923      	ldr	r3, [r4, #16]
 8003854:	b94b      	cbnz	r3, 800386a <__swsetup_r+0x9a>
 8003856:	89a3      	ldrh	r3, [r4, #12]
 8003858:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800385c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003860:	d003      	beq.n	800386a <__swsetup_r+0x9a>
 8003862:	4621      	mov	r1, r4
 8003864:	4630      	mov	r0, r6
 8003866:	f000 f9bf 	bl	8003be8 <__smakebuf_r>
 800386a:	89a2      	ldrh	r2, [r4, #12]
 800386c:	f012 0301 	ands.w	r3, r2, #1
 8003870:	d00c      	beq.n	800388c <__swsetup_r+0xbc>
 8003872:	2300      	movs	r3, #0
 8003874:	60a3      	str	r3, [r4, #8]
 8003876:	6963      	ldr	r3, [r4, #20]
 8003878:	425b      	negs	r3, r3
 800387a:	61a3      	str	r3, [r4, #24]
 800387c:	6923      	ldr	r3, [r4, #16]
 800387e:	b953      	cbnz	r3, 8003896 <__swsetup_r+0xc6>
 8003880:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003884:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003888:	d1ba      	bne.n	8003800 <__swsetup_r+0x30>
 800388a:	bd70      	pop	{r4, r5, r6, pc}
 800388c:	0792      	lsls	r2, r2, #30
 800388e:	bf58      	it	pl
 8003890:	6963      	ldrpl	r3, [r4, #20]
 8003892:	60a3      	str	r3, [r4, #8]
 8003894:	e7f2      	b.n	800387c <__swsetup_r+0xac>
 8003896:	2000      	movs	r0, #0
 8003898:	e7f7      	b.n	800388a <__swsetup_r+0xba>
 800389a:	bf00      	nop
 800389c:	2000031c 	.word	0x2000031c
 80038a0:	08004574 	.word	0x08004574
 80038a4:	08004594 	.word	0x08004594
 80038a8:	08004554 	.word	0x08004554

080038ac <__sflush_r>:
 80038ac:	898a      	ldrh	r2, [r1, #12]
 80038ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038b2:	4605      	mov	r5, r0
 80038b4:	0710      	lsls	r0, r2, #28
 80038b6:	460c      	mov	r4, r1
 80038b8:	d458      	bmi.n	800396c <__sflush_r+0xc0>
 80038ba:	684b      	ldr	r3, [r1, #4]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	dc05      	bgt.n	80038cc <__sflush_r+0x20>
 80038c0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	dc02      	bgt.n	80038cc <__sflush_r+0x20>
 80038c6:	2000      	movs	r0, #0
 80038c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038ce:	2e00      	cmp	r6, #0
 80038d0:	d0f9      	beq.n	80038c6 <__sflush_r+0x1a>
 80038d2:	2300      	movs	r3, #0
 80038d4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80038d8:	682f      	ldr	r7, [r5, #0]
 80038da:	6a21      	ldr	r1, [r4, #32]
 80038dc:	602b      	str	r3, [r5, #0]
 80038de:	d032      	beq.n	8003946 <__sflush_r+0x9a>
 80038e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80038e2:	89a3      	ldrh	r3, [r4, #12]
 80038e4:	075a      	lsls	r2, r3, #29
 80038e6:	d505      	bpl.n	80038f4 <__sflush_r+0x48>
 80038e8:	6863      	ldr	r3, [r4, #4]
 80038ea:	1ac0      	subs	r0, r0, r3
 80038ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80038ee:	b10b      	cbz	r3, 80038f4 <__sflush_r+0x48>
 80038f0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80038f2:	1ac0      	subs	r0, r0, r3
 80038f4:	2300      	movs	r3, #0
 80038f6:	4602      	mov	r2, r0
 80038f8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80038fa:	6a21      	ldr	r1, [r4, #32]
 80038fc:	4628      	mov	r0, r5
 80038fe:	47b0      	blx	r6
 8003900:	1c43      	adds	r3, r0, #1
 8003902:	89a3      	ldrh	r3, [r4, #12]
 8003904:	d106      	bne.n	8003914 <__sflush_r+0x68>
 8003906:	6829      	ldr	r1, [r5, #0]
 8003908:	291d      	cmp	r1, #29
 800390a:	d848      	bhi.n	800399e <__sflush_r+0xf2>
 800390c:	4a29      	ldr	r2, [pc, #164]	; (80039b4 <__sflush_r+0x108>)
 800390e:	40ca      	lsrs	r2, r1
 8003910:	07d6      	lsls	r6, r2, #31
 8003912:	d544      	bpl.n	800399e <__sflush_r+0xf2>
 8003914:	2200      	movs	r2, #0
 8003916:	6062      	str	r2, [r4, #4]
 8003918:	6922      	ldr	r2, [r4, #16]
 800391a:	04d9      	lsls	r1, r3, #19
 800391c:	6022      	str	r2, [r4, #0]
 800391e:	d504      	bpl.n	800392a <__sflush_r+0x7e>
 8003920:	1c42      	adds	r2, r0, #1
 8003922:	d101      	bne.n	8003928 <__sflush_r+0x7c>
 8003924:	682b      	ldr	r3, [r5, #0]
 8003926:	b903      	cbnz	r3, 800392a <__sflush_r+0x7e>
 8003928:	6560      	str	r0, [r4, #84]	; 0x54
 800392a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800392c:	602f      	str	r7, [r5, #0]
 800392e:	2900      	cmp	r1, #0
 8003930:	d0c9      	beq.n	80038c6 <__sflush_r+0x1a>
 8003932:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003936:	4299      	cmp	r1, r3
 8003938:	d002      	beq.n	8003940 <__sflush_r+0x94>
 800393a:	4628      	mov	r0, r5
 800393c:	f000 f99c 	bl	8003c78 <_free_r>
 8003940:	2000      	movs	r0, #0
 8003942:	6360      	str	r0, [r4, #52]	; 0x34
 8003944:	e7c0      	b.n	80038c8 <__sflush_r+0x1c>
 8003946:	2301      	movs	r3, #1
 8003948:	4628      	mov	r0, r5
 800394a:	47b0      	blx	r6
 800394c:	1c41      	adds	r1, r0, #1
 800394e:	d1c8      	bne.n	80038e2 <__sflush_r+0x36>
 8003950:	682b      	ldr	r3, [r5, #0]
 8003952:	2b00      	cmp	r3, #0
 8003954:	d0c5      	beq.n	80038e2 <__sflush_r+0x36>
 8003956:	2b1d      	cmp	r3, #29
 8003958:	d001      	beq.n	800395e <__sflush_r+0xb2>
 800395a:	2b16      	cmp	r3, #22
 800395c:	d101      	bne.n	8003962 <__sflush_r+0xb6>
 800395e:	602f      	str	r7, [r5, #0]
 8003960:	e7b1      	b.n	80038c6 <__sflush_r+0x1a>
 8003962:	89a3      	ldrh	r3, [r4, #12]
 8003964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003968:	81a3      	strh	r3, [r4, #12]
 800396a:	e7ad      	b.n	80038c8 <__sflush_r+0x1c>
 800396c:	690f      	ldr	r7, [r1, #16]
 800396e:	2f00      	cmp	r7, #0
 8003970:	d0a9      	beq.n	80038c6 <__sflush_r+0x1a>
 8003972:	0793      	lsls	r3, r2, #30
 8003974:	bf18      	it	ne
 8003976:	2300      	movne	r3, #0
 8003978:	680e      	ldr	r6, [r1, #0]
 800397a:	bf08      	it	eq
 800397c:	694b      	ldreq	r3, [r1, #20]
 800397e:	eba6 0807 	sub.w	r8, r6, r7
 8003982:	600f      	str	r7, [r1, #0]
 8003984:	608b      	str	r3, [r1, #8]
 8003986:	f1b8 0f00 	cmp.w	r8, #0
 800398a:	dd9c      	ble.n	80038c6 <__sflush_r+0x1a>
 800398c:	4643      	mov	r3, r8
 800398e:	463a      	mov	r2, r7
 8003990:	6a21      	ldr	r1, [r4, #32]
 8003992:	4628      	mov	r0, r5
 8003994:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003996:	47b0      	blx	r6
 8003998:	2800      	cmp	r0, #0
 800399a:	dc06      	bgt.n	80039aa <__sflush_r+0xfe>
 800399c:	89a3      	ldrh	r3, [r4, #12]
 800399e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80039a2:	81a3      	strh	r3, [r4, #12]
 80039a4:	f04f 30ff 	mov.w	r0, #4294967295
 80039a8:	e78e      	b.n	80038c8 <__sflush_r+0x1c>
 80039aa:	4407      	add	r7, r0
 80039ac:	eba8 0800 	sub.w	r8, r8, r0
 80039b0:	e7e9      	b.n	8003986 <__sflush_r+0xda>
 80039b2:	bf00      	nop
 80039b4:	20400001 	.word	0x20400001

080039b8 <_fflush_r>:
 80039b8:	b538      	push	{r3, r4, r5, lr}
 80039ba:	690b      	ldr	r3, [r1, #16]
 80039bc:	4605      	mov	r5, r0
 80039be:	460c      	mov	r4, r1
 80039c0:	b1db      	cbz	r3, 80039fa <_fflush_r+0x42>
 80039c2:	b118      	cbz	r0, 80039cc <_fflush_r+0x14>
 80039c4:	6983      	ldr	r3, [r0, #24]
 80039c6:	b90b      	cbnz	r3, 80039cc <_fflush_r+0x14>
 80039c8:	f000 f860 	bl	8003a8c <__sinit>
 80039cc:	4b0c      	ldr	r3, [pc, #48]	; (8003a00 <_fflush_r+0x48>)
 80039ce:	429c      	cmp	r4, r3
 80039d0:	d109      	bne.n	80039e6 <_fflush_r+0x2e>
 80039d2:	686c      	ldr	r4, [r5, #4]
 80039d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d8:	b17b      	cbz	r3, 80039fa <_fflush_r+0x42>
 80039da:	4621      	mov	r1, r4
 80039dc:	4628      	mov	r0, r5
 80039de:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80039e2:	f7ff bf63 	b.w	80038ac <__sflush_r>
 80039e6:	4b07      	ldr	r3, [pc, #28]	; (8003a04 <_fflush_r+0x4c>)
 80039e8:	429c      	cmp	r4, r3
 80039ea:	d101      	bne.n	80039f0 <_fflush_r+0x38>
 80039ec:	68ac      	ldr	r4, [r5, #8]
 80039ee:	e7f1      	b.n	80039d4 <_fflush_r+0x1c>
 80039f0:	4b05      	ldr	r3, [pc, #20]	; (8003a08 <_fflush_r+0x50>)
 80039f2:	429c      	cmp	r4, r3
 80039f4:	bf08      	it	eq
 80039f6:	68ec      	ldreq	r4, [r5, #12]
 80039f8:	e7ec      	b.n	80039d4 <_fflush_r+0x1c>
 80039fa:	2000      	movs	r0, #0
 80039fc:	bd38      	pop	{r3, r4, r5, pc}
 80039fe:	bf00      	nop
 8003a00:	08004574 	.word	0x08004574
 8003a04:	08004594 	.word	0x08004594
 8003a08:	08004554 	.word	0x08004554

08003a0c <std>:
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	b510      	push	{r4, lr}
 8003a10:	4604      	mov	r4, r0
 8003a12:	e9c0 3300 	strd	r3, r3, [r0]
 8003a16:	6083      	str	r3, [r0, #8]
 8003a18:	8181      	strh	r1, [r0, #12]
 8003a1a:	6643      	str	r3, [r0, #100]	; 0x64
 8003a1c:	81c2      	strh	r2, [r0, #14]
 8003a1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003a22:	6183      	str	r3, [r0, #24]
 8003a24:	4619      	mov	r1, r3
 8003a26:	2208      	movs	r2, #8
 8003a28:	305c      	adds	r0, #92	; 0x5c
 8003a2a:	f7ff fd4c 	bl	80034c6 <memset>
 8003a2e:	4b05      	ldr	r3, [pc, #20]	; (8003a44 <std+0x38>)
 8003a30:	6224      	str	r4, [r4, #32]
 8003a32:	6263      	str	r3, [r4, #36]	; 0x24
 8003a34:	4b04      	ldr	r3, [pc, #16]	; (8003a48 <std+0x3c>)
 8003a36:	62a3      	str	r3, [r4, #40]	; 0x28
 8003a38:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <std+0x40>)
 8003a3a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003a3c:	4b04      	ldr	r3, [pc, #16]	; (8003a50 <std+0x44>)
 8003a3e:	6323      	str	r3, [r4, #48]	; 0x30
 8003a40:	bd10      	pop	{r4, pc}
 8003a42:	bf00      	nop
 8003a44:	08004371 	.word	0x08004371
 8003a48:	08004393 	.word	0x08004393
 8003a4c:	080043cb 	.word	0x080043cb
 8003a50:	080043ef 	.word	0x080043ef

08003a54 <_cleanup_r>:
 8003a54:	4901      	ldr	r1, [pc, #4]	; (8003a5c <_cleanup_r+0x8>)
 8003a56:	f000 b885 	b.w	8003b64 <_fwalk_reent>
 8003a5a:	bf00      	nop
 8003a5c:	080039b9 	.word	0x080039b9

08003a60 <__sfmoreglue>:
 8003a60:	b570      	push	{r4, r5, r6, lr}
 8003a62:	2568      	movs	r5, #104	; 0x68
 8003a64:	1e4a      	subs	r2, r1, #1
 8003a66:	4355      	muls	r5, r2
 8003a68:	460e      	mov	r6, r1
 8003a6a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003a6e:	f000 f94f 	bl	8003d10 <_malloc_r>
 8003a72:	4604      	mov	r4, r0
 8003a74:	b140      	cbz	r0, 8003a88 <__sfmoreglue+0x28>
 8003a76:	2100      	movs	r1, #0
 8003a78:	e9c0 1600 	strd	r1, r6, [r0]
 8003a7c:	300c      	adds	r0, #12
 8003a7e:	60a0      	str	r0, [r4, #8]
 8003a80:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003a84:	f7ff fd1f 	bl	80034c6 <memset>
 8003a88:	4620      	mov	r0, r4
 8003a8a:	bd70      	pop	{r4, r5, r6, pc}

08003a8c <__sinit>:
 8003a8c:	6983      	ldr	r3, [r0, #24]
 8003a8e:	b510      	push	{r4, lr}
 8003a90:	4604      	mov	r4, r0
 8003a92:	bb33      	cbnz	r3, 8003ae2 <__sinit+0x56>
 8003a94:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003a98:	6503      	str	r3, [r0, #80]	; 0x50
 8003a9a:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <__sinit+0x58>)
 8003a9c:	4a12      	ldr	r2, [pc, #72]	; (8003ae8 <__sinit+0x5c>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	6282      	str	r2, [r0, #40]	; 0x28
 8003aa2:	4298      	cmp	r0, r3
 8003aa4:	bf04      	itt	eq
 8003aa6:	2301      	moveq	r3, #1
 8003aa8:	6183      	streq	r3, [r0, #24]
 8003aaa:	f000 f81f 	bl	8003aec <__sfp>
 8003aae:	6060      	str	r0, [r4, #4]
 8003ab0:	4620      	mov	r0, r4
 8003ab2:	f000 f81b 	bl	8003aec <__sfp>
 8003ab6:	60a0      	str	r0, [r4, #8]
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f000 f817 	bl	8003aec <__sfp>
 8003abe:	2200      	movs	r2, #0
 8003ac0:	60e0      	str	r0, [r4, #12]
 8003ac2:	2104      	movs	r1, #4
 8003ac4:	6860      	ldr	r0, [r4, #4]
 8003ac6:	f7ff ffa1 	bl	8003a0c <std>
 8003aca:	2201      	movs	r2, #1
 8003acc:	2109      	movs	r1, #9
 8003ace:	68a0      	ldr	r0, [r4, #8]
 8003ad0:	f7ff ff9c 	bl	8003a0c <std>
 8003ad4:	2202      	movs	r2, #2
 8003ad6:	2112      	movs	r1, #18
 8003ad8:	68e0      	ldr	r0, [r4, #12]
 8003ada:	f7ff ff97 	bl	8003a0c <std>
 8003ade:	2301      	movs	r3, #1
 8003ae0:	61a3      	str	r3, [r4, #24]
 8003ae2:	bd10      	pop	{r4, pc}
 8003ae4:	08004550 	.word	0x08004550
 8003ae8:	08003a55 	.word	0x08003a55

08003aec <__sfp>:
 8003aec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aee:	4b1b      	ldr	r3, [pc, #108]	; (8003b5c <__sfp+0x70>)
 8003af0:	4607      	mov	r7, r0
 8003af2:	681e      	ldr	r6, [r3, #0]
 8003af4:	69b3      	ldr	r3, [r6, #24]
 8003af6:	b913      	cbnz	r3, 8003afe <__sfp+0x12>
 8003af8:	4630      	mov	r0, r6
 8003afa:	f7ff ffc7 	bl	8003a8c <__sinit>
 8003afe:	3648      	adds	r6, #72	; 0x48
 8003b00:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003b04:	3b01      	subs	r3, #1
 8003b06:	d503      	bpl.n	8003b10 <__sfp+0x24>
 8003b08:	6833      	ldr	r3, [r6, #0]
 8003b0a:	b133      	cbz	r3, 8003b1a <__sfp+0x2e>
 8003b0c:	6836      	ldr	r6, [r6, #0]
 8003b0e:	e7f7      	b.n	8003b00 <__sfp+0x14>
 8003b10:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003b14:	b16d      	cbz	r5, 8003b32 <__sfp+0x46>
 8003b16:	3468      	adds	r4, #104	; 0x68
 8003b18:	e7f4      	b.n	8003b04 <__sfp+0x18>
 8003b1a:	2104      	movs	r1, #4
 8003b1c:	4638      	mov	r0, r7
 8003b1e:	f7ff ff9f 	bl	8003a60 <__sfmoreglue>
 8003b22:	6030      	str	r0, [r6, #0]
 8003b24:	2800      	cmp	r0, #0
 8003b26:	d1f1      	bne.n	8003b0c <__sfp+0x20>
 8003b28:	230c      	movs	r3, #12
 8003b2a:	4604      	mov	r4, r0
 8003b2c:	603b      	str	r3, [r7, #0]
 8003b2e:	4620      	mov	r0, r4
 8003b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b32:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <__sfp+0x74>)
 8003b34:	6665      	str	r5, [r4, #100]	; 0x64
 8003b36:	e9c4 5500 	strd	r5, r5, [r4]
 8003b3a:	60a5      	str	r5, [r4, #8]
 8003b3c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003b40:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003b44:	2208      	movs	r2, #8
 8003b46:	4629      	mov	r1, r5
 8003b48:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003b4c:	f7ff fcbb 	bl	80034c6 <memset>
 8003b50:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003b54:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003b58:	e7e9      	b.n	8003b2e <__sfp+0x42>
 8003b5a:	bf00      	nop
 8003b5c:	08004550 	.word	0x08004550
 8003b60:	ffff0001 	.word	0xffff0001

08003b64 <_fwalk_reent>:
 8003b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b68:	4680      	mov	r8, r0
 8003b6a:	4689      	mov	r9, r1
 8003b6c:	2600      	movs	r6, #0
 8003b6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003b72:	b914      	cbnz	r4, 8003b7a <_fwalk_reent+0x16>
 8003b74:	4630      	mov	r0, r6
 8003b76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003b7a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003b7e:	3f01      	subs	r7, #1
 8003b80:	d501      	bpl.n	8003b86 <_fwalk_reent+0x22>
 8003b82:	6824      	ldr	r4, [r4, #0]
 8003b84:	e7f5      	b.n	8003b72 <_fwalk_reent+0xe>
 8003b86:	89ab      	ldrh	r3, [r5, #12]
 8003b88:	2b01      	cmp	r3, #1
 8003b8a:	d907      	bls.n	8003b9c <_fwalk_reent+0x38>
 8003b8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003b90:	3301      	adds	r3, #1
 8003b92:	d003      	beq.n	8003b9c <_fwalk_reent+0x38>
 8003b94:	4629      	mov	r1, r5
 8003b96:	4640      	mov	r0, r8
 8003b98:	47c8      	blx	r9
 8003b9a:	4306      	orrs	r6, r0
 8003b9c:	3568      	adds	r5, #104	; 0x68
 8003b9e:	e7ee      	b.n	8003b7e <_fwalk_reent+0x1a>

08003ba0 <__swhatbuf_r>:
 8003ba0:	b570      	push	{r4, r5, r6, lr}
 8003ba2:	460e      	mov	r6, r1
 8003ba4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ba8:	b096      	sub	sp, #88	; 0x58
 8003baa:	2900      	cmp	r1, #0
 8003bac:	4614      	mov	r4, r2
 8003bae:	461d      	mov	r5, r3
 8003bb0:	da07      	bge.n	8003bc2 <__swhatbuf_r+0x22>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	602b      	str	r3, [r5, #0]
 8003bb6:	89b3      	ldrh	r3, [r6, #12]
 8003bb8:	061a      	lsls	r2, r3, #24
 8003bba:	d410      	bmi.n	8003bde <__swhatbuf_r+0x3e>
 8003bbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003bc0:	e00e      	b.n	8003be0 <__swhatbuf_r+0x40>
 8003bc2:	466a      	mov	r2, sp
 8003bc4:	f000 fc3a 	bl	800443c <_fstat_r>
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	dbf2      	blt.n	8003bb2 <__swhatbuf_r+0x12>
 8003bcc:	9a01      	ldr	r2, [sp, #4]
 8003bce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003bd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003bd6:	425a      	negs	r2, r3
 8003bd8:	415a      	adcs	r2, r3
 8003bda:	602a      	str	r2, [r5, #0]
 8003bdc:	e7ee      	b.n	8003bbc <__swhatbuf_r+0x1c>
 8003bde:	2340      	movs	r3, #64	; 0x40
 8003be0:	2000      	movs	r0, #0
 8003be2:	6023      	str	r3, [r4, #0]
 8003be4:	b016      	add	sp, #88	; 0x58
 8003be6:	bd70      	pop	{r4, r5, r6, pc}

08003be8 <__smakebuf_r>:
 8003be8:	898b      	ldrh	r3, [r1, #12]
 8003bea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003bec:	079d      	lsls	r5, r3, #30
 8003bee:	4606      	mov	r6, r0
 8003bf0:	460c      	mov	r4, r1
 8003bf2:	d507      	bpl.n	8003c04 <__smakebuf_r+0x1c>
 8003bf4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003bf8:	6023      	str	r3, [r4, #0]
 8003bfa:	6123      	str	r3, [r4, #16]
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	6163      	str	r3, [r4, #20]
 8003c00:	b002      	add	sp, #8
 8003c02:	bd70      	pop	{r4, r5, r6, pc}
 8003c04:	ab01      	add	r3, sp, #4
 8003c06:	466a      	mov	r2, sp
 8003c08:	f7ff ffca 	bl	8003ba0 <__swhatbuf_r>
 8003c0c:	9900      	ldr	r1, [sp, #0]
 8003c0e:	4605      	mov	r5, r0
 8003c10:	4630      	mov	r0, r6
 8003c12:	f000 f87d 	bl	8003d10 <_malloc_r>
 8003c16:	b948      	cbnz	r0, 8003c2c <__smakebuf_r+0x44>
 8003c18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c1c:	059a      	lsls	r2, r3, #22
 8003c1e:	d4ef      	bmi.n	8003c00 <__smakebuf_r+0x18>
 8003c20:	f023 0303 	bic.w	r3, r3, #3
 8003c24:	f043 0302 	orr.w	r3, r3, #2
 8003c28:	81a3      	strh	r3, [r4, #12]
 8003c2a:	e7e3      	b.n	8003bf4 <__smakebuf_r+0xc>
 8003c2c:	4b0d      	ldr	r3, [pc, #52]	; (8003c64 <__smakebuf_r+0x7c>)
 8003c2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003c30:	89a3      	ldrh	r3, [r4, #12]
 8003c32:	6020      	str	r0, [r4, #0]
 8003c34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c38:	81a3      	strh	r3, [r4, #12]
 8003c3a:	9b00      	ldr	r3, [sp, #0]
 8003c3c:	6120      	str	r0, [r4, #16]
 8003c3e:	6163      	str	r3, [r4, #20]
 8003c40:	9b01      	ldr	r3, [sp, #4]
 8003c42:	b15b      	cbz	r3, 8003c5c <__smakebuf_r+0x74>
 8003c44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c48:	4630      	mov	r0, r6
 8003c4a:	f000 fc09 	bl	8004460 <_isatty_r>
 8003c4e:	b128      	cbz	r0, 8003c5c <__smakebuf_r+0x74>
 8003c50:	89a3      	ldrh	r3, [r4, #12]
 8003c52:	f023 0303 	bic.w	r3, r3, #3
 8003c56:	f043 0301 	orr.w	r3, r3, #1
 8003c5a:	81a3      	strh	r3, [r4, #12]
 8003c5c:	89a3      	ldrh	r3, [r4, #12]
 8003c5e:	431d      	orrs	r5, r3
 8003c60:	81a5      	strh	r5, [r4, #12]
 8003c62:	e7cd      	b.n	8003c00 <__smakebuf_r+0x18>
 8003c64:	08003a55 	.word	0x08003a55

08003c68 <malloc>:
 8003c68:	4b02      	ldr	r3, [pc, #8]	; (8003c74 <malloc+0xc>)
 8003c6a:	4601      	mov	r1, r0
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	f000 b84f 	b.w	8003d10 <_malloc_r>
 8003c72:	bf00      	nop
 8003c74:	2000031c 	.word	0x2000031c

08003c78 <_free_r>:
 8003c78:	b538      	push	{r3, r4, r5, lr}
 8003c7a:	4605      	mov	r5, r0
 8003c7c:	2900      	cmp	r1, #0
 8003c7e:	d043      	beq.n	8003d08 <_free_r+0x90>
 8003c80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003c84:	1f0c      	subs	r4, r1, #4
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	bfb8      	it	lt
 8003c8a:	18e4      	addlt	r4, r4, r3
 8003c8c:	f000 fc18 	bl	80044c0 <__malloc_lock>
 8003c90:	4a1e      	ldr	r2, [pc, #120]	; (8003d0c <_free_r+0x94>)
 8003c92:	6813      	ldr	r3, [r2, #0]
 8003c94:	4610      	mov	r0, r2
 8003c96:	b933      	cbnz	r3, 8003ca6 <_free_r+0x2e>
 8003c98:	6063      	str	r3, [r4, #4]
 8003c9a:	6014      	str	r4, [r2, #0]
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ca2:	f000 bc0e 	b.w	80044c2 <__malloc_unlock>
 8003ca6:	42a3      	cmp	r3, r4
 8003ca8:	d90b      	bls.n	8003cc2 <_free_r+0x4a>
 8003caa:	6821      	ldr	r1, [r4, #0]
 8003cac:	1862      	adds	r2, r4, r1
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	bf01      	itttt	eq
 8003cb2:	681a      	ldreq	r2, [r3, #0]
 8003cb4:	685b      	ldreq	r3, [r3, #4]
 8003cb6:	1852      	addeq	r2, r2, r1
 8003cb8:	6022      	streq	r2, [r4, #0]
 8003cba:	6063      	str	r3, [r4, #4]
 8003cbc:	6004      	str	r4, [r0, #0]
 8003cbe:	e7ed      	b.n	8003c9c <_free_r+0x24>
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	685a      	ldr	r2, [r3, #4]
 8003cc4:	b10a      	cbz	r2, 8003cca <_free_r+0x52>
 8003cc6:	42a2      	cmp	r2, r4
 8003cc8:	d9fa      	bls.n	8003cc0 <_free_r+0x48>
 8003cca:	6819      	ldr	r1, [r3, #0]
 8003ccc:	1858      	adds	r0, r3, r1
 8003cce:	42a0      	cmp	r0, r4
 8003cd0:	d10b      	bne.n	8003cea <_free_r+0x72>
 8003cd2:	6820      	ldr	r0, [r4, #0]
 8003cd4:	4401      	add	r1, r0
 8003cd6:	1858      	adds	r0, r3, r1
 8003cd8:	4282      	cmp	r2, r0
 8003cda:	6019      	str	r1, [r3, #0]
 8003cdc:	d1de      	bne.n	8003c9c <_free_r+0x24>
 8003cde:	6810      	ldr	r0, [r2, #0]
 8003ce0:	6852      	ldr	r2, [r2, #4]
 8003ce2:	4401      	add	r1, r0
 8003ce4:	6019      	str	r1, [r3, #0]
 8003ce6:	605a      	str	r2, [r3, #4]
 8003ce8:	e7d8      	b.n	8003c9c <_free_r+0x24>
 8003cea:	d902      	bls.n	8003cf2 <_free_r+0x7a>
 8003cec:	230c      	movs	r3, #12
 8003cee:	602b      	str	r3, [r5, #0]
 8003cf0:	e7d4      	b.n	8003c9c <_free_r+0x24>
 8003cf2:	6820      	ldr	r0, [r4, #0]
 8003cf4:	1821      	adds	r1, r4, r0
 8003cf6:	428a      	cmp	r2, r1
 8003cf8:	bf01      	itttt	eq
 8003cfa:	6811      	ldreq	r1, [r2, #0]
 8003cfc:	6852      	ldreq	r2, [r2, #4]
 8003cfe:	1809      	addeq	r1, r1, r0
 8003d00:	6021      	streq	r1, [r4, #0]
 8003d02:	6062      	str	r2, [r4, #4]
 8003d04:	605c      	str	r4, [r3, #4]
 8003d06:	e7c9      	b.n	8003c9c <_free_r+0x24>
 8003d08:	bd38      	pop	{r3, r4, r5, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200003c0 	.word	0x200003c0

08003d10 <_malloc_r>:
 8003d10:	b570      	push	{r4, r5, r6, lr}
 8003d12:	1ccd      	adds	r5, r1, #3
 8003d14:	f025 0503 	bic.w	r5, r5, #3
 8003d18:	3508      	adds	r5, #8
 8003d1a:	2d0c      	cmp	r5, #12
 8003d1c:	bf38      	it	cc
 8003d1e:	250c      	movcc	r5, #12
 8003d20:	2d00      	cmp	r5, #0
 8003d22:	4606      	mov	r6, r0
 8003d24:	db01      	blt.n	8003d2a <_malloc_r+0x1a>
 8003d26:	42a9      	cmp	r1, r5
 8003d28:	d903      	bls.n	8003d32 <_malloc_r+0x22>
 8003d2a:	230c      	movs	r3, #12
 8003d2c:	6033      	str	r3, [r6, #0]
 8003d2e:	2000      	movs	r0, #0
 8003d30:	bd70      	pop	{r4, r5, r6, pc}
 8003d32:	f000 fbc5 	bl	80044c0 <__malloc_lock>
 8003d36:	4a21      	ldr	r2, [pc, #132]	; (8003dbc <_malloc_r+0xac>)
 8003d38:	6814      	ldr	r4, [r2, #0]
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	b991      	cbnz	r1, 8003d64 <_malloc_r+0x54>
 8003d3e:	4c20      	ldr	r4, [pc, #128]	; (8003dc0 <_malloc_r+0xb0>)
 8003d40:	6823      	ldr	r3, [r4, #0]
 8003d42:	b91b      	cbnz	r3, 8003d4c <_malloc_r+0x3c>
 8003d44:	4630      	mov	r0, r6
 8003d46:	f000 fb03 	bl	8004350 <_sbrk_r>
 8003d4a:	6020      	str	r0, [r4, #0]
 8003d4c:	4629      	mov	r1, r5
 8003d4e:	4630      	mov	r0, r6
 8003d50:	f000 fafe 	bl	8004350 <_sbrk_r>
 8003d54:	1c43      	adds	r3, r0, #1
 8003d56:	d124      	bne.n	8003da2 <_malloc_r+0x92>
 8003d58:	230c      	movs	r3, #12
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	6033      	str	r3, [r6, #0]
 8003d5e:	f000 fbb0 	bl	80044c2 <__malloc_unlock>
 8003d62:	e7e4      	b.n	8003d2e <_malloc_r+0x1e>
 8003d64:	680b      	ldr	r3, [r1, #0]
 8003d66:	1b5b      	subs	r3, r3, r5
 8003d68:	d418      	bmi.n	8003d9c <_malloc_r+0x8c>
 8003d6a:	2b0b      	cmp	r3, #11
 8003d6c:	d90f      	bls.n	8003d8e <_malloc_r+0x7e>
 8003d6e:	600b      	str	r3, [r1, #0]
 8003d70:	18cc      	adds	r4, r1, r3
 8003d72:	50cd      	str	r5, [r1, r3]
 8003d74:	4630      	mov	r0, r6
 8003d76:	f000 fba4 	bl	80044c2 <__malloc_unlock>
 8003d7a:	f104 000b 	add.w	r0, r4, #11
 8003d7e:	1d23      	adds	r3, r4, #4
 8003d80:	f020 0007 	bic.w	r0, r0, #7
 8003d84:	1ac3      	subs	r3, r0, r3
 8003d86:	d0d3      	beq.n	8003d30 <_malloc_r+0x20>
 8003d88:	425a      	negs	r2, r3
 8003d8a:	50e2      	str	r2, [r4, r3]
 8003d8c:	e7d0      	b.n	8003d30 <_malloc_r+0x20>
 8003d8e:	684b      	ldr	r3, [r1, #4]
 8003d90:	428c      	cmp	r4, r1
 8003d92:	bf16      	itet	ne
 8003d94:	6063      	strne	r3, [r4, #4]
 8003d96:	6013      	streq	r3, [r2, #0]
 8003d98:	460c      	movne	r4, r1
 8003d9a:	e7eb      	b.n	8003d74 <_malloc_r+0x64>
 8003d9c:	460c      	mov	r4, r1
 8003d9e:	6849      	ldr	r1, [r1, #4]
 8003da0:	e7cc      	b.n	8003d3c <_malloc_r+0x2c>
 8003da2:	1cc4      	adds	r4, r0, #3
 8003da4:	f024 0403 	bic.w	r4, r4, #3
 8003da8:	42a0      	cmp	r0, r4
 8003daa:	d005      	beq.n	8003db8 <_malloc_r+0xa8>
 8003dac:	1a21      	subs	r1, r4, r0
 8003dae:	4630      	mov	r0, r6
 8003db0:	f000 face 	bl	8004350 <_sbrk_r>
 8003db4:	3001      	adds	r0, #1
 8003db6:	d0cf      	beq.n	8003d58 <_malloc_r+0x48>
 8003db8:	6025      	str	r5, [r4, #0]
 8003dba:	e7db      	b.n	8003d74 <_malloc_r+0x64>
 8003dbc:	200003c0 	.word	0x200003c0
 8003dc0:	200003c4 	.word	0x200003c4

08003dc4 <__sfputc_r>:
 8003dc4:	6893      	ldr	r3, [r2, #8]
 8003dc6:	b410      	push	{r4}
 8003dc8:	3b01      	subs	r3, #1
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	6093      	str	r3, [r2, #8]
 8003dce:	da07      	bge.n	8003de0 <__sfputc_r+0x1c>
 8003dd0:	6994      	ldr	r4, [r2, #24]
 8003dd2:	42a3      	cmp	r3, r4
 8003dd4:	db01      	blt.n	8003dda <__sfputc_r+0x16>
 8003dd6:	290a      	cmp	r1, #10
 8003dd8:	d102      	bne.n	8003de0 <__sfputc_r+0x1c>
 8003dda:	bc10      	pop	{r4}
 8003ddc:	f7ff bca6 	b.w	800372c <__swbuf_r>
 8003de0:	6813      	ldr	r3, [r2, #0]
 8003de2:	1c58      	adds	r0, r3, #1
 8003de4:	6010      	str	r0, [r2, #0]
 8003de6:	7019      	strb	r1, [r3, #0]
 8003de8:	4608      	mov	r0, r1
 8003dea:	bc10      	pop	{r4}
 8003dec:	4770      	bx	lr

08003dee <__sfputs_r>:
 8003dee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003df0:	4606      	mov	r6, r0
 8003df2:	460f      	mov	r7, r1
 8003df4:	4614      	mov	r4, r2
 8003df6:	18d5      	adds	r5, r2, r3
 8003df8:	42ac      	cmp	r4, r5
 8003dfa:	d101      	bne.n	8003e00 <__sfputs_r+0x12>
 8003dfc:	2000      	movs	r0, #0
 8003dfe:	e007      	b.n	8003e10 <__sfputs_r+0x22>
 8003e00:	463a      	mov	r2, r7
 8003e02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e06:	4630      	mov	r0, r6
 8003e08:	f7ff ffdc 	bl	8003dc4 <__sfputc_r>
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d1f3      	bne.n	8003df8 <__sfputs_r+0xa>
 8003e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003e14 <_vfiprintf_r>:
 8003e14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e18:	460c      	mov	r4, r1
 8003e1a:	b09d      	sub	sp, #116	; 0x74
 8003e1c:	4617      	mov	r7, r2
 8003e1e:	461d      	mov	r5, r3
 8003e20:	4606      	mov	r6, r0
 8003e22:	b118      	cbz	r0, 8003e2c <_vfiprintf_r+0x18>
 8003e24:	6983      	ldr	r3, [r0, #24]
 8003e26:	b90b      	cbnz	r3, 8003e2c <_vfiprintf_r+0x18>
 8003e28:	f7ff fe30 	bl	8003a8c <__sinit>
 8003e2c:	4b7c      	ldr	r3, [pc, #496]	; (8004020 <_vfiprintf_r+0x20c>)
 8003e2e:	429c      	cmp	r4, r3
 8003e30:	d158      	bne.n	8003ee4 <_vfiprintf_r+0xd0>
 8003e32:	6874      	ldr	r4, [r6, #4]
 8003e34:	89a3      	ldrh	r3, [r4, #12]
 8003e36:	0718      	lsls	r0, r3, #28
 8003e38:	d55e      	bpl.n	8003ef8 <_vfiprintf_r+0xe4>
 8003e3a:	6923      	ldr	r3, [r4, #16]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d05b      	beq.n	8003ef8 <_vfiprintf_r+0xe4>
 8003e40:	2300      	movs	r3, #0
 8003e42:	9309      	str	r3, [sp, #36]	; 0x24
 8003e44:	2320      	movs	r3, #32
 8003e46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003e4a:	2330      	movs	r3, #48	; 0x30
 8003e4c:	f04f 0b01 	mov.w	fp, #1
 8003e50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003e54:	9503      	str	r5, [sp, #12]
 8003e56:	46b8      	mov	r8, r7
 8003e58:	4645      	mov	r5, r8
 8003e5a:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003e5e:	b10b      	cbz	r3, 8003e64 <_vfiprintf_r+0x50>
 8003e60:	2b25      	cmp	r3, #37	; 0x25
 8003e62:	d154      	bne.n	8003f0e <_vfiprintf_r+0xfa>
 8003e64:	ebb8 0a07 	subs.w	sl, r8, r7
 8003e68:	d00b      	beq.n	8003e82 <_vfiprintf_r+0x6e>
 8003e6a:	4653      	mov	r3, sl
 8003e6c:	463a      	mov	r2, r7
 8003e6e:	4621      	mov	r1, r4
 8003e70:	4630      	mov	r0, r6
 8003e72:	f7ff ffbc 	bl	8003dee <__sfputs_r>
 8003e76:	3001      	adds	r0, #1
 8003e78:	f000 80c2 	beq.w	8004000 <_vfiprintf_r+0x1ec>
 8003e7c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003e7e:	4453      	add	r3, sl
 8003e80:	9309      	str	r3, [sp, #36]	; 0x24
 8003e82:	f898 3000 	ldrb.w	r3, [r8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 80ba 	beq.w	8004000 <_vfiprintf_r+0x1ec>
 8003e8c:	2300      	movs	r3, #0
 8003e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e96:	9304      	str	r3, [sp, #16]
 8003e98:	9307      	str	r3, [sp, #28]
 8003e9a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003e9e:	931a      	str	r3, [sp, #104]	; 0x68
 8003ea0:	46a8      	mov	r8, r5
 8003ea2:	2205      	movs	r2, #5
 8003ea4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003ea8:	485e      	ldr	r0, [pc, #376]	; (8004024 <_vfiprintf_r+0x210>)
 8003eaa:	f000 fafb 	bl	80044a4 <memchr>
 8003eae:	9b04      	ldr	r3, [sp, #16]
 8003eb0:	bb78      	cbnz	r0, 8003f12 <_vfiprintf_r+0xfe>
 8003eb2:	06d9      	lsls	r1, r3, #27
 8003eb4:	bf44      	itt	mi
 8003eb6:	2220      	movmi	r2, #32
 8003eb8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ebc:	071a      	lsls	r2, r3, #28
 8003ebe:	bf44      	itt	mi
 8003ec0:	222b      	movmi	r2, #43	; 0x2b
 8003ec2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ec6:	782a      	ldrb	r2, [r5, #0]
 8003ec8:	2a2a      	cmp	r2, #42	; 0x2a
 8003eca:	d02a      	beq.n	8003f22 <_vfiprintf_r+0x10e>
 8003ecc:	46a8      	mov	r8, r5
 8003ece:	2000      	movs	r0, #0
 8003ed0:	250a      	movs	r5, #10
 8003ed2:	9a07      	ldr	r2, [sp, #28]
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003eda:	3b30      	subs	r3, #48	; 0x30
 8003edc:	2b09      	cmp	r3, #9
 8003ede:	d969      	bls.n	8003fb4 <_vfiprintf_r+0x1a0>
 8003ee0:	b360      	cbz	r0, 8003f3c <_vfiprintf_r+0x128>
 8003ee2:	e024      	b.n	8003f2e <_vfiprintf_r+0x11a>
 8003ee4:	4b50      	ldr	r3, [pc, #320]	; (8004028 <_vfiprintf_r+0x214>)
 8003ee6:	429c      	cmp	r4, r3
 8003ee8:	d101      	bne.n	8003eee <_vfiprintf_r+0xda>
 8003eea:	68b4      	ldr	r4, [r6, #8]
 8003eec:	e7a2      	b.n	8003e34 <_vfiprintf_r+0x20>
 8003eee:	4b4f      	ldr	r3, [pc, #316]	; (800402c <_vfiprintf_r+0x218>)
 8003ef0:	429c      	cmp	r4, r3
 8003ef2:	bf08      	it	eq
 8003ef4:	68f4      	ldreq	r4, [r6, #12]
 8003ef6:	e79d      	b.n	8003e34 <_vfiprintf_r+0x20>
 8003ef8:	4621      	mov	r1, r4
 8003efa:	4630      	mov	r0, r6
 8003efc:	f7ff fc68 	bl	80037d0 <__swsetup_r>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	d09d      	beq.n	8003e40 <_vfiprintf_r+0x2c>
 8003f04:	f04f 30ff 	mov.w	r0, #4294967295
 8003f08:	b01d      	add	sp, #116	; 0x74
 8003f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f0e:	46a8      	mov	r8, r5
 8003f10:	e7a2      	b.n	8003e58 <_vfiprintf_r+0x44>
 8003f12:	4a44      	ldr	r2, [pc, #272]	; (8004024 <_vfiprintf_r+0x210>)
 8003f14:	4645      	mov	r5, r8
 8003f16:	1a80      	subs	r0, r0, r2
 8003f18:	fa0b f000 	lsl.w	r0, fp, r0
 8003f1c:	4318      	orrs	r0, r3
 8003f1e:	9004      	str	r0, [sp, #16]
 8003f20:	e7be      	b.n	8003ea0 <_vfiprintf_r+0x8c>
 8003f22:	9a03      	ldr	r2, [sp, #12]
 8003f24:	1d11      	adds	r1, r2, #4
 8003f26:	6812      	ldr	r2, [r2, #0]
 8003f28:	9103      	str	r1, [sp, #12]
 8003f2a:	2a00      	cmp	r2, #0
 8003f2c:	db01      	blt.n	8003f32 <_vfiprintf_r+0x11e>
 8003f2e:	9207      	str	r2, [sp, #28]
 8003f30:	e004      	b.n	8003f3c <_vfiprintf_r+0x128>
 8003f32:	4252      	negs	r2, r2
 8003f34:	f043 0302 	orr.w	r3, r3, #2
 8003f38:	9207      	str	r2, [sp, #28]
 8003f3a:	9304      	str	r3, [sp, #16]
 8003f3c:	f898 3000 	ldrb.w	r3, [r8]
 8003f40:	2b2e      	cmp	r3, #46	; 0x2e
 8003f42:	d10e      	bne.n	8003f62 <_vfiprintf_r+0x14e>
 8003f44:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003f48:	2b2a      	cmp	r3, #42	; 0x2a
 8003f4a:	d138      	bne.n	8003fbe <_vfiprintf_r+0x1aa>
 8003f4c:	9b03      	ldr	r3, [sp, #12]
 8003f4e:	f108 0802 	add.w	r8, r8, #2
 8003f52:	1d1a      	adds	r2, r3, #4
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	9203      	str	r2, [sp, #12]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	bfb8      	it	lt
 8003f5c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003f60:	9305      	str	r3, [sp, #20]
 8003f62:	4d33      	ldr	r5, [pc, #204]	; (8004030 <_vfiprintf_r+0x21c>)
 8003f64:	2203      	movs	r2, #3
 8003f66:	f898 1000 	ldrb.w	r1, [r8]
 8003f6a:	4628      	mov	r0, r5
 8003f6c:	f000 fa9a 	bl	80044a4 <memchr>
 8003f70:	b140      	cbz	r0, 8003f84 <_vfiprintf_r+0x170>
 8003f72:	2340      	movs	r3, #64	; 0x40
 8003f74:	1b40      	subs	r0, r0, r5
 8003f76:	fa03 f000 	lsl.w	r0, r3, r0
 8003f7a:	9b04      	ldr	r3, [sp, #16]
 8003f7c:	f108 0801 	add.w	r8, r8, #1
 8003f80:	4303      	orrs	r3, r0
 8003f82:	9304      	str	r3, [sp, #16]
 8003f84:	f898 1000 	ldrb.w	r1, [r8]
 8003f88:	2206      	movs	r2, #6
 8003f8a:	482a      	ldr	r0, [pc, #168]	; (8004034 <_vfiprintf_r+0x220>)
 8003f8c:	f108 0701 	add.w	r7, r8, #1
 8003f90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003f94:	f000 fa86 	bl	80044a4 <memchr>
 8003f98:	2800      	cmp	r0, #0
 8003f9a:	d037      	beq.n	800400c <_vfiprintf_r+0x1f8>
 8003f9c:	4b26      	ldr	r3, [pc, #152]	; (8004038 <_vfiprintf_r+0x224>)
 8003f9e:	bb1b      	cbnz	r3, 8003fe8 <_vfiprintf_r+0x1d4>
 8003fa0:	9b03      	ldr	r3, [sp, #12]
 8003fa2:	3307      	adds	r3, #7
 8003fa4:	f023 0307 	bic.w	r3, r3, #7
 8003fa8:	3308      	adds	r3, #8
 8003faa:	9303      	str	r3, [sp, #12]
 8003fac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003fae:	444b      	add	r3, r9
 8003fb0:	9309      	str	r3, [sp, #36]	; 0x24
 8003fb2:	e750      	b.n	8003e56 <_vfiprintf_r+0x42>
 8003fb4:	fb05 3202 	mla	r2, r5, r2, r3
 8003fb8:	2001      	movs	r0, #1
 8003fba:	4688      	mov	r8, r1
 8003fbc:	e78a      	b.n	8003ed4 <_vfiprintf_r+0xc0>
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	250a      	movs	r5, #10
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	f108 0801 	add.w	r8, r8, #1
 8003fc8:	9305      	str	r3, [sp, #20]
 8003fca:	4640      	mov	r0, r8
 8003fcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003fd0:	3a30      	subs	r2, #48	; 0x30
 8003fd2:	2a09      	cmp	r2, #9
 8003fd4:	d903      	bls.n	8003fde <_vfiprintf_r+0x1ca>
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d0c3      	beq.n	8003f62 <_vfiprintf_r+0x14e>
 8003fda:	9105      	str	r1, [sp, #20]
 8003fdc:	e7c1      	b.n	8003f62 <_vfiprintf_r+0x14e>
 8003fde:	fb05 2101 	mla	r1, r5, r1, r2
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	4680      	mov	r8, r0
 8003fe6:	e7f0      	b.n	8003fca <_vfiprintf_r+0x1b6>
 8003fe8:	ab03      	add	r3, sp, #12
 8003fea:	9300      	str	r3, [sp, #0]
 8003fec:	4622      	mov	r2, r4
 8003fee:	4b13      	ldr	r3, [pc, #76]	; (800403c <_vfiprintf_r+0x228>)
 8003ff0:	a904      	add	r1, sp, #16
 8003ff2:	4630      	mov	r0, r6
 8003ff4:	f3af 8000 	nop.w
 8003ff8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003ffc:	4681      	mov	r9, r0
 8003ffe:	d1d5      	bne.n	8003fac <_vfiprintf_r+0x198>
 8004000:	89a3      	ldrh	r3, [r4, #12]
 8004002:	065b      	lsls	r3, r3, #25
 8004004:	f53f af7e 	bmi.w	8003f04 <_vfiprintf_r+0xf0>
 8004008:	9809      	ldr	r0, [sp, #36]	; 0x24
 800400a:	e77d      	b.n	8003f08 <_vfiprintf_r+0xf4>
 800400c:	ab03      	add	r3, sp, #12
 800400e:	9300      	str	r3, [sp, #0]
 8004010:	4622      	mov	r2, r4
 8004012:	4b0a      	ldr	r3, [pc, #40]	; (800403c <_vfiprintf_r+0x228>)
 8004014:	a904      	add	r1, sp, #16
 8004016:	4630      	mov	r0, r6
 8004018:	f000 f888 	bl	800412c <_printf_i>
 800401c:	e7ec      	b.n	8003ff8 <_vfiprintf_r+0x1e4>
 800401e:	bf00      	nop
 8004020:	08004574 	.word	0x08004574
 8004024:	080045b4 	.word	0x080045b4
 8004028:	08004594 	.word	0x08004594
 800402c:	08004554 	.word	0x08004554
 8004030:	080045ba 	.word	0x080045ba
 8004034:	080045be 	.word	0x080045be
 8004038:	00000000 	.word	0x00000000
 800403c:	08003def 	.word	0x08003def

08004040 <_printf_common>:
 8004040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004044:	4691      	mov	r9, r2
 8004046:	461f      	mov	r7, r3
 8004048:	688a      	ldr	r2, [r1, #8]
 800404a:	690b      	ldr	r3, [r1, #16]
 800404c:	4606      	mov	r6, r0
 800404e:	4293      	cmp	r3, r2
 8004050:	bfb8      	it	lt
 8004052:	4613      	movlt	r3, r2
 8004054:	f8c9 3000 	str.w	r3, [r9]
 8004058:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800405c:	460c      	mov	r4, r1
 800405e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004062:	b112      	cbz	r2, 800406a <_printf_common+0x2a>
 8004064:	3301      	adds	r3, #1
 8004066:	f8c9 3000 	str.w	r3, [r9]
 800406a:	6823      	ldr	r3, [r4, #0]
 800406c:	0699      	lsls	r1, r3, #26
 800406e:	bf42      	ittt	mi
 8004070:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004074:	3302      	addmi	r3, #2
 8004076:	f8c9 3000 	strmi.w	r3, [r9]
 800407a:	6825      	ldr	r5, [r4, #0]
 800407c:	f015 0506 	ands.w	r5, r5, #6
 8004080:	d107      	bne.n	8004092 <_printf_common+0x52>
 8004082:	f104 0a19 	add.w	sl, r4, #25
 8004086:	68e3      	ldr	r3, [r4, #12]
 8004088:	f8d9 2000 	ldr.w	r2, [r9]
 800408c:	1a9b      	subs	r3, r3, r2
 800408e:	42ab      	cmp	r3, r5
 8004090:	dc29      	bgt.n	80040e6 <_printf_common+0xa6>
 8004092:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004096:	6822      	ldr	r2, [r4, #0]
 8004098:	3300      	adds	r3, #0
 800409a:	bf18      	it	ne
 800409c:	2301      	movne	r3, #1
 800409e:	0692      	lsls	r2, r2, #26
 80040a0:	d42e      	bmi.n	8004100 <_printf_common+0xc0>
 80040a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80040a6:	4639      	mov	r1, r7
 80040a8:	4630      	mov	r0, r6
 80040aa:	47c0      	blx	r8
 80040ac:	3001      	adds	r0, #1
 80040ae:	d021      	beq.n	80040f4 <_printf_common+0xb4>
 80040b0:	6823      	ldr	r3, [r4, #0]
 80040b2:	68e5      	ldr	r5, [r4, #12]
 80040b4:	f003 0306 	and.w	r3, r3, #6
 80040b8:	2b04      	cmp	r3, #4
 80040ba:	bf18      	it	ne
 80040bc:	2500      	movne	r5, #0
 80040be:	f8d9 2000 	ldr.w	r2, [r9]
 80040c2:	f04f 0900 	mov.w	r9, #0
 80040c6:	bf08      	it	eq
 80040c8:	1aad      	subeq	r5, r5, r2
 80040ca:	68a3      	ldr	r3, [r4, #8]
 80040cc:	6922      	ldr	r2, [r4, #16]
 80040ce:	bf08      	it	eq
 80040d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80040d4:	4293      	cmp	r3, r2
 80040d6:	bfc4      	itt	gt
 80040d8:	1a9b      	subgt	r3, r3, r2
 80040da:	18ed      	addgt	r5, r5, r3
 80040dc:	341a      	adds	r4, #26
 80040de:	454d      	cmp	r5, r9
 80040e0:	d11a      	bne.n	8004118 <_printf_common+0xd8>
 80040e2:	2000      	movs	r0, #0
 80040e4:	e008      	b.n	80040f8 <_printf_common+0xb8>
 80040e6:	2301      	movs	r3, #1
 80040e8:	4652      	mov	r2, sl
 80040ea:	4639      	mov	r1, r7
 80040ec:	4630      	mov	r0, r6
 80040ee:	47c0      	blx	r8
 80040f0:	3001      	adds	r0, #1
 80040f2:	d103      	bne.n	80040fc <_printf_common+0xbc>
 80040f4:	f04f 30ff 	mov.w	r0, #4294967295
 80040f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040fc:	3501      	adds	r5, #1
 80040fe:	e7c2      	b.n	8004086 <_printf_common+0x46>
 8004100:	2030      	movs	r0, #48	; 0x30
 8004102:	18e1      	adds	r1, r4, r3
 8004104:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004108:	1c5a      	adds	r2, r3, #1
 800410a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800410e:	4422      	add	r2, r4
 8004110:	3302      	adds	r3, #2
 8004112:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004116:	e7c4      	b.n	80040a2 <_printf_common+0x62>
 8004118:	2301      	movs	r3, #1
 800411a:	4622      	mov	r2, r4
 800411c:	4639      	mov	r1, r7
 800411e:	4630      	mov	r0, r6
 8004120:	47c0      	blx	r8
 8004122:	3001      	adds	r0, #1
 8004124:	d0e6      	beq.n	80040f4 <_printf_common+0xb4>
 8004126:	f109 0901 	add.w	r9, r9, #1
 800412a:	e7d8      	b.n	80040de <_printf_common+0x9e>

0800412c <_printf_i>:
 800412c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004130:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004134:	460c      	mov	r4, r1
 8004136:	7e09      	ldrb	r1, [r1, #24]
 8004138:	b085      	sub	sp, #20
 800413a:	296e      	cmp	r1, #110	; 0x6e
 800413c:	4617      	mov	r7, r2
 800413e:	4606      	mov	r6, r0
 8004140:	4698      	mov	r8, r3
 8004142:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004144:	f000 80b3 	beq.w	80042ae <_printf_i+0x182>
 8004148:	d822      	bhi.n	8004190 <_printf_i+0x64>
 800414a:	2963      	cmp	r1, #99	; 0x63
 800414c:	d036      	beq.n	80041bc <_printf_i+0x90>
 800414e:	d80a      	bhi.n	8004166 <_printf_i+0x3a>
 8004150:	2900      	cmp	r1, #0
 8004152:	f000 80b9 	beq.w	80042c8 <_printf_i+0x19c>
 8004156:	2958      	cmp	r1, #88	; 0x58
 8004158:	f000 8083 	beq.w	8004262 <_printf_i+0x136>
 800415c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004160:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004164:	e032      	b.n	80041cc <_printf_i+0xa0>
 8004166:	2964      	cmp	r1, #100	; 0x64
 8004168:	d001      	beq.n	800416e <_printf_i+0x42>
 800416a:	2969      	cmp	r1, #105	; 0x69
 800416c:	d1f6      	bne.n	800415c <_printf_i+0x30>
 800416e:	6820      	ldr	r0, [r4, #0]
 8004170:	6813      	ldr	r3, [r2, #0]
 8004172:	0605      	lsls	r5, r0, #24
 8004174:	f103 0104 	add.w	r1, r3, #4
 8004178:	d52a      	bpl.n	80041d0 <_printf_i+0xa4>
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6011      	str	r1, [r2, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	da03      	bge.n	800418a <_printf_i+0x5e>
 8004182:	222d      	movs	r2, #45	; 0x2d
 8004184:	425b      	negs	r3, r3
 8004186:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800418a:	486f      	ldr	r0, [pc, #444]	; (8004348 <_printf_i+0x21c>)
 800418c:	220a      	movs	r2, #10
 800418e:	e039      	b.n	8004204 <_printf_i+0xd8>
 8004190:	2973      	cmp	r1, #115	; 0x73
 8004192:	f000 809d 	beq.w	80042d0 <_printf_i+0x1a4>
 8004196:	d808      	bhi.n	80041aa <_printf_i+0x7e>
 8004198:	296f      	cmp	r1, #111	; 0x6f
 800419a:	d020      	beq.n	80041de <_printf_i+0xb2>
 800419c:	2970      	cmp	r1, #112	; 0x70
 800419e:	d1dd      	bne.n	800415c <_printf_i+0x30>
 80041a0:	6823      	ldr	r3, [r4, #0]
 80041a2:	f043 0320 	orr.w	r3, r3, #32
 80041a6:	6023      	str	r3, [r4, #0]
 80041a8:	e003      	b.n	80041b2 <_printf_i+0x86>
 80041aa:	2975      	cmp	r1, #117	; 0x75
 80041ac:	d017      	beq.n	80041de <_printf_i+0xb2>
 80041ae:	2978      	cmp	r1, #120	; 0x78
 80041b0:	d1d4      	bne.n	800415c <_printf_i+0x30>
 80041b2:	2378      	movs	r3, #120	; 0x78
 80041b4:	4865      	ldr	r0, [pc, #404]	; (800434c <_printf_i+0x220>)
 80041b6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80041ba:	e055      	b.n	8004268 <_printf_i+0x13c>
 80041bc:	6813      	ldr	r3, [r2, #0]
 80041be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80041c2:	1d19      	adds	r1, r3, #4
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6011      	str	r1, [r2, #0]
 80041c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80041cc:	2301      	movs	r3, #1
 80041ce:	e08c      	b.n	80042ea <_printf_i+0x1be>
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80041d6:	6011      	str	r1, [r2, #0]
 80041d8:	bf18      	it	ne
 80041da:	b21b      	sxthne	r3, r3
 80041dc:	e7cf      	b.n	800417e <_printf_i+0x52>
 80041de:	6813      	ldr	r3, [r2, #0]
 80041e0:	6825      	ldr	r5, [r4, #0]
 80041e2:	1d18      	adds	r0, r3, #4
 80041e4:	6010      	str	r0, [r2, #0]
 80041e6:	0628      	lsls	r0, r5, #24
 80041e8:	d501      	bpl.n	80041ee <_printf_i+0xc2>
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	e002      	b.n	80041f4 <_printf_i+0xc8>
 80041ee:	0668      	lsls	r0, r5, #25
 80041f0:	d5fb      	bpl.n	80041ea <_printf_i+0xbe>
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	296f      	cmp	r1, #111	; 0x6f
 80041f6:	bf14      	ite	ne
 80041f8:	220a      	movne	r2, #10
 80041fa:	2208      	moveq	r2, #8
 80041fc:	4852      	ldr	r0, [pc, #328]	; (8004348 <_printf_i+0x21c>)
 80041fe:	2100      	movs	r1, #0
 8004200:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004204:	6865      	ldr	r5, [r4, #4]
 8004206:	2d00      	cmp	r5, #0
 8004208:	60a5      	str	r5, [r4, #8]
 800420a:	f2c0 8095 	blt.w	8004338 <_printf_i+0x20c>
 800420e:	6821      	ldr	r1, [r4, #0]
 8004210:	f021 0104 	bic.w	r1, r1, #4
 8004214:	6021      	str	r1, [r4, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d13d      	bne.n	8004296 <_printf_i+0x16a>
 800421a:	2d00      	cmp	r5, #0
 800421c:	f040 808e 	bne.w	800433c <_printf_i+0x210>
 8004220:	4665      	mov	r5, ip
 8004222:	2a08      	cmp	r2, #8
 8004224:	d10b      	bne.n	800423e <_printf_i+0x112>
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	07db      	lsls	r3, r3, #31
 800422a:	d508      	bpl.n	800423e <_printf_i+0x112>
 800422c:	6923      	ldr	r3, [r4, #16]
 800422e:	6862      	ldr	r2, [r4, #4]
 8004230:	429a      	cmp	r2, r3
 8004232:	bfde      	ittt	le
 8004234:	2330      	movle	r3, #48	; 0x30
 8004236:	f805 3c01 	strble.w	r3, [r5, #-1]
 800423a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800423e:	ebac 0305 	sub.w	r3, ip, r5
 8004242:	6123      	str	r3, [r4, #16]
 8004244:	f8cd 8000 	str.w	r8, [sp]
 8004248:	463b      	mov	r3, r7
 800424a:	aa03      	add	r2, sp, #12
 800424c:	4621      	mov	r1, r4
 800424e:	4630      	mov	r0, r6
 8004250:	f7ff fef6 	bl	8004040 <_printf_common>
 8004254:	3001      	adds	r0, #1
 8004256:	d14d      	bne.n	80042f4 <_printf_i+0x1c8>
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	b005      	add	sp, #20
 800425e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004262:	4839      	ldr	r0, [pc, #228]	; (8004348 <_printf_i+0x21c>)
 8004264:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004268:	6813      	ldr	r3, [r2, #0]
 800426a:	6821      	ldr	r1, [r4, #0]
 800426c:	1d1d      	adds	r5, r3, #4
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	6015      	str	r5, [r2, #0]
 8004272:	060a      	lsls	r2, r1, #24
 8004274:	d50b      	bpl.n	800428e <_printf_i+0x162>
 8004276:	07ca      	lsls	r2, r1, #31
 8004278:	bf44      	itt	mi
 800427a:	f041 0120 	orrmi.w	r1, r1, #32
 800427e:	6021      	strmi	r1, [r4, #0]
 8004280:	b91b      	cbnz	r3, 800428a <_printf_i+0x15e>
 8004282:	6822      	ldr	r2, [r4, #0]
 8004284:	f022 0220 	bic.w	r2, r2, #32
 8004288:	6022      	str	r2, [r4, #0]
 800428a:	2210      	movs	r2, #16
 800428c:	e7b7      	b.n	80041fe <_printf_i+0xd2>
 800428e:	064d      	lsls	r5, r1, #25
 8004290:	bf48      	it	mi
 8004292:	b29b      	uxthmi	r3, r3
 8004294:	e7ef      	b.n	8004276 <_printf_i+0x14a>
 8004296:	4665      	mov	r5, ip
 8004298:	fbb3 f1f2 	udiv	r1, r3, r2
 800429c:	fb02 3311 	mls	r3, r2, r1, r3
 80042a0:	5cc3      	ldrb	r3, [r0, r3]
 80042a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80042a6:	460b      	mov	r3, r1
 80042a8:	2900      	cmp	r1, #0
 80042aa:	d1f5      	bne.n	8004298 <_printf_i+0x16c>
 80042ac:	e7b9      	b.n	8004222 <_printf_i+0xf6>
 80042ae:	6813      	ldr	r3, [r2, #0]
 80042b0:	6825      	ldr	r5, [r4, #0]
 80042b2:	1d18      	adds	r0, r3, #4
 80042b4:	6961      	ldr	r1, [r4, #20]
 80042b6:	6010      	str	r0, [r2, #0]
 80042b8:	0628      	lsls	r0, r5, #24
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	d501      	bpl.n	80042c2 <_printf_i+0x196>
 80042be:	6019      	str	r1, [r3, #0]
 80042c0:	e002      	b.n	80042c8 <_printf_i+0x19c>
 80042c2:	066a      	lsls	r2, r5, #25
 80042c4:	d5fb      	bpl.n	80042be <_printf_i+0x192>
 80042c6:	8019      	strh	r1, [r3, #0]
 80042c8:	2300      	movs	r3, #0
 80042ca:	4665      	mov	r5, ip
 80042cc:	6123      	str	r3, [r4, #16]
 80042ce:	e7b9      	b.n	8004244 <_printf_i+0x118>
 80042d0:	6813      	ldr	r3, [r2, #0]
 80042d2:	1d19      	adds	r1, r3, #4
 80042d4:	6011      	str	r1, [r2, #0]
 80042d6:	681d      	ldr	r5, [r3, #0]
 80042d8:	6862      	ldr	r2, [r4, #4]
 80042da:	2100      	movs	r1, #0
 80042dc:	4628      	mov	r0, r5
 80042de:	f000 f8e1 	bl	80044a4 <memchr>
 80042e2:	b108      	cbz	r0, 80042e8 <_printf_i+0x1bc>
 80042e4:	1b40      	subs	r0, r0, r5
 80042e6:	6060      	str	r0, [r4, #4]
 80042e8:	6863      	ldr	r3, [r4, #4]
 80042ea:	6123      	str	r3, [r4, #16]
 80042ec:	2300      	movs	r3, #0
 80042ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042f2:	e7a7      	b.n	8004244 <_printf_i+0x118>
 80042f4:	6923      	ldr	r3, [r4, #16]
 80042f6:	462a      	mov	r2, r5
 80042f8:	4639      	mov	r1, r7
 80042fa:	4630      	mov	r0, r6
 80042fc:	47c0      	blx	r8
 80042fe:	3001      	adds	r0, #1
 8004300:	d0aa      	beq.n	8004258 <_printf_i+0x12c>
 8004302:	6823      	ldr	r3, [r4, #0]
 8004304:	079b      	lsls	r3, r3, #30
 8004306:	d413      	bmi.n	8004330 <_printf_i+0x204>
 8004308:	68e0      	ldr	r0, [r4, #12]
 800430a:	9b03      	ldr	r3, [sp, #12]
 800430c:	4298      	cmp	r0, r3
 800430e:	bfb8      	it	lt
 8004310:	4618      	movlt	r0, r3
 8004312:	e7a3      	b.n	800425c <_printf_i+0x130>
 8004314:	2301      	movs	r3, #1
 8004316:	464a      	mov	r2, r9
 8004318:	4639      	mov	r1, r7
 800431a:	4630      	mov	r0, r6
 800431c:	47c0      	blx	r8
 800431e:	3001      	adds	r0, #1
 8004320:	d09a      	beq.n	8004258 <_printf_i+0x12c>
 8004322:	3501      	adds	r5, #1
 8004324:	68e3      	ldr	r3, [r4, #12]
 8004326:	9a03      	ldr	r2, [sp, #12]
 8004328:	1a9b      	subs	r3, r3, r2
 800432a:	42ab      	cmp	r3, r5
 800432c:	dcf2      	bgt.n	8004314 <_printf_i+0x1e8>
 800432e:	e7eb      	b.n	8004308 <_printf_i+0x1dc>
 8004330:	2500      	movs	r5, #0
 8004332:	f104 0919 	add.w	r9, r4, #25
 8004336:	e7f5      	b.n	8004324 <_printf_i+0x1f8>
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1ac      	bne.n	8004296 <_printf_i+0x16a>
 800433c:	7803      	ldrb	r3, [r0, #0]
 800433e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004342:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004346:	e76c      	b.n	8004222 <_printf_i+0xf6>
 8004348:	080045c5 	.word	0x080045c5
 800434c:	080045d6 	.word	0x080045d6

08004350 <_sbrk_r>:
 8004350:	b538      	push	{r3, r4, r5, lr}
 8004352:	2300      	movs	r3, #0
 8004354:	4c05      	ldr	r4, [pc, #20]	; (800436c <_sbrk_r+0x1c>)
 8004356:	4605      	mov	r5, r0
 8004358:	4608      	mov	r0, r1
 800435a:	6023      	str	r3, [r4, #0]
 800435c:	f7fc fc30 	bl	8000bc0 <_sbrk>
 8004360:	1c43      	adds	r3, r0, #1
 8004362:	d102      	bne.n	800436a <_sbrk_r+0x1a>
 8004364:	6823      	ldr	r3, [r4, #0]
 8004366:	b103      	cbz	r3, 800436a <_sbrk_r+0x1a>
 8004368:	602b      	str	r3, [r5, #0]
 800436a:	bd38      	pop	{r3, r4, r5, pc}
 800436c:	200004c8 	.word	0x200004c8

08004370 <__sread>:
 8004370:	b510      	push	{r4, lr}
 8004372:	460c      	mov	r4, r1
 8004374:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004378:	f000 f8a4 	bl	80044c4 <_read_r>
 800437c:	2800      	cmp	r0, #0
 800437e:	bfab      	itete	ge
 8004380:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004382:	89a3      	ldrhlt	r3, [r4, #12]
 8004384:	181b      	addge	r3, r3, r0
 8004386:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800438a:	bfac      	ite	ge
 800438c:	6563      	strge	r3, [r4, #84]	; 0x54
 800438e:	81a3      	strhlt	r3, [r4, #12]
 8004390:	bd10      	pop	{r4, pc}

08004392 <__swrite>:
 8004392:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004396:	461f      	mov	r7, r3
 8004398:	898b      	ldrh	r3, [r1, #12]
 800439a:	4605      	mov	r5, r0
 800439c:	05db      	lsls	r3, r3, #23
 800439e:	460c      	mov	r4, r1
 80043a0:	4616      	mov	r6, r2
 80043a2:	d505      	bpl.n	80043b0 <__swrite+0x1e>
 80043a4:	2302      	movs	r3, #2
 80043a6:	2200      	movs	r2, #0
 80043a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ac:	f000 f868 	bl	8004480 <_lseek_r>
 80043b0:	89a3      	ldrh	r3, [r4, #12]
 80043b2:	4632      	mov	r2, r6
 80043b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80043b8:	81a3      	strh	r3, [r4, #12]
 80043ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043be:	463b      	mov	r3, r7
 80043c0:	4628      	mov	r0, r5
 80043c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043c6:	f000 b817 	b.w	80043f8 <_write_r>

080043ca <__sseek>:
 80043ca:	b510      	push	{r4, lr}
 80043cc:	460c      	mov	r4, r1
 80043ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d2:	f000 f855 	bl	8004480 <_lseek_r>
 80043d6:	1c43      	adds	r3, r0, #1
 80043d8:	89a3      	ldrh	r3, [r4, #12]
 80043da:	bf15      	itete	ne
 80043dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80043de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80043e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80043e6:	81a3      	strheq	r3, [r4, #12]
 80043e8:	bf18      	it	ne
 80043ea:	81a3      	strhne	r3, [r4, #12]
 80043ec:	bd10      	pop	{r4, pc}

080043ee <__sclose>:
 80043ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f2:	f000 b813 	b.w	800441c <_close_r>
	...

080043f8 <_write_r>:
 80043f8:	b538      	push	{r3, r4, r5, lr}
 80043fa:	4605      	mov	r5, r0
 80043fc:	4608      	mov	r0, r1
 80043fe:	4611      	mov	r1, r2
 8004400:	2200      	movs	r2, #0
 8004402:	4c05      	ldr	r4, [pc, #20]	; (8004418 <_write_r+0x20>)
 8004404:	6022      	str	r2, [r4, #0]
 8004406:	461a      	mov	r2, r3
 8004408:	f7fb fed8 	bl	80001bc <_write>
 800440c:	1c43      	adds	r3, r0, #1
 800440e:	d102      	bne.n	8004416 <_write_r+0x1e>
 8004410:	6823      	ldr	r3, [r4, #0]
 8004412:	b103      	cbz	r3, 8004416 <_write_r+0x1e>
 8004414:	602b      	str	r3, [r5, #0]
 8004416:	bd38      	pop	{r3, r4, r5, pc}
 8004418:	200004c8 	.word	0x200004c8

0800441c <_close_r>:
 800441c:	b538      	push	{r3, r4, r5, lr}
 800441e:	2300      	movs	r3, #0
 8004420:	4c05      	ldr	r4, [pc, #20]	; (8004438 <_close_r+0x1c>)
 8004422:	4605      	mov	r5, r0
 8004424:	4608      	mov	r0, r1
 8004426:	6023      	str	r3, [r4, #0]
 8004428:	f7fb fef2 	bl	8000210 <_close>
 800442c:	1c43      	adds	r3, r0, #1
 800442e:	d102      	bne.n	8004436 <_close_r+0x1a>
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	b103      	cbz	r3, 8004436 <_close_r+0x1a>
 8004434:	602b      	str	r3, [r5, #0]
 8004436:	bd38      	pop	{r3, r4, r5, pc}
 8004438:	200004c8 	.word	0x200004c8

0800443c <_fstat_r>:
 800443c:	b538      	push	{r3, r4, r5, lr}
 800443e:	2300      	movs	r3, #0
 8004440:	4c06      	ldr	r4, [pc, #24]	; (800445c <_fstat_r+0x20>)
 8004442:	4605      	mov	r5, r0
 8004444:	4608      	mov	r0, r1
 8004446:	4611      	mov	r1, r2
 8004448:	6023      	str	r3, [r4, #0]
 800444a:	f7fb ff31 	bl	80002b0 <_fstat>
 800444e:	1c43      	adds	r3, r0, #1
 8004450:	d102      	bne.n	8004458 <_fstat_r+0x1c>
 8004452:	6823      	ldr	r3, [r4, #0]
 8004454:	b103      	cbz	r3, 8004458 <_fstat_r+0x1c>
 8004456:	602b      	str	r3, [r5, #0]
 8004458:	bd38      	pop	{r3, r4, r5, pc}
 800445a:	bf00      	nop
 800445c:	200004c8 	.word	0x200004c8

08004460 <_isatty_r>:
 8004460:	b538      	push	{r3, r4, r5, lr}
 8004462:	2300      	movs	r3, #0
 8004464:	4c05      	ldr	r4, [pc, #20]	; (800447c <_isatty_r+0x1c>)
 8004466:	4605      	mov	r5, r0
 8004468:	4608      	mov	r0, r1
 800446a:	6023      	str	r3, [r4, #0]
 800446c:	f7fb fe90 	bl	8000190 <_isatty>
 8004470:	1c43      	adds	r3, r0, #1
 8004472:	d102      	bne.n	800447a <_isatty_r+0x1a>
 8004474:	6823      	ldr	r3, [r4, #0]
 8004476:	b103      	cbz	r3, 800447a <_isatty_r+0x1a>
 8004478:	602b      	str	r3, [r5, #0]
 800447a:	bd38      	pop	{r3, r4, r5, pc}
 800447c:	200004c8 	.word	0x200004c8

08004480 <_lseek_r>:
 8004480:	b538      	push	{r3, r4, r5, lr}
 8004482:	4605      	mov	r5, r0
 8004484:	4608      	mov	r0, r1
 8004486:	4611      	mov	r1, r2
 8004488:	2200      	movs	r2, #0
 800448a:	4c05      	ldr	r4, [pc, #20]	; (80044a0 <_lseek_r+0x20>)
 800448c:	6022      	str	r2, [r4, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	f7fb fed5 	bl	800023e <_lseek>
 8004494:	1c43      	adds	r3, r0, #1
 8004496:	d102      	bne.n	800449e <_lseek_r+0x1e>
 8004498:	6823      	ldr	r3, [r4, #0]
 800449a:	b103      	cbz	r3, 800449e <_lseek_r+0x1e>
 800449c:	602b      	str	r3, [r5, #0]
 800449e:	bd38      	pop	{r3, r4, r5, pc}
 80044a0:	200004c8 	.word	0x200004c8

080044a4 <memchr>:
 80044a4:	b510      	push	{r4, lr}
 80044a6:	b2c9      	uxtb	r1, r1
 80044a8:	4402      	add	r2, r0
 80044aa:	4290      	cmp	r0, r2
 80044ac:	4603      	mov	r3, r0
 80044ae:	d101      	bne.n	80044b4 <memchr+0x10>
 80044b0:	2300      	movs	r3, #0
 80044b2:	e003      	b.n	80044bc <memchr+0x18>
 80044b4:	781c      	ldrb	r4, [r3, #0]
 80044b6:	3001      	adds	r0, #1
 80044b8:	428c      	cmp	r4, r1
 80044ba:	d1f6      	bne.n	80044aa <memchr+0x6>
 80044bc:	4618      	mov	r0, r3
 80044be:	bd10      	pop	{r4, pc}

080044c0 <__malloc_lock>:
 80044c0:	4770      	bx	lr

080044c2 <__malloc_unlock>:
 80044c2:	4770      	bx	lr

080044c4 <_read_r>:
 80044c4:	b538      	push	{r3, r4, r5, lr}
 80044c6:	4605      	mov	r5, r0
 80044c8:	4608      	mov	r0, r1
 80044ca:	4611      	mov	r1, r2
 80044cc:	2200      	movs	r2, #0
 80044ce:	4c05      	ldr	r4, [pc, #20]	; (80044e4 <_read_r+0x20>)
 80044d0:	6022      	str	r2, [r4, #0]
 80044d2:	461a      	mov	r2, r3
 80044d4:	f7fb fec4 	bl	8000260 <_read>
 80044d8:	1c43      	adds	r3, r0, #1
 80044da:	d102      	bne.n	80044e2 <_read_r+0x1e>
 80044dc:	6823      	ldr	r3, [r4, #0]
 80044de:	b103      	cbz	r3, 80044e2 <_read_r+0x1e>
 80044e0:	602b      	str	r3, [r5, #0]
 80044e2:	bd38      	pop	{r3, r4, r5, pc}
 80044e4:	200004c8 	.word	0x200004c8

080044e8 <_init>:
 80044e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044ea:	bf00      	nop
 80044ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044ee:	bc08      	pop	{r3}
 80044f0:	469e      	mov	lr, r3
 80044f2:	4770      	bx	lr

080044f4 <_fini>:
 80044f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80044f6:	bf00      	nop
 80044f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80044fa:	bc08      	pop	{r3}
 80044fc:	469e      	mov	lr, r3
 80044fe:	4770      	bx	lr
