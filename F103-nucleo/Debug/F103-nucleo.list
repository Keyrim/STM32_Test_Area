
F103-nucleo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000435c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08004468  08004468  00014468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004538  08004538  00020380  2**0
                  CONTENTS
  4 .ARM          00000000  08004538  08004538  00020380  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004538  08004538  00020380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004538  08004538  00014538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800453c  0800453c  0001453c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  08004540  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  20000380  080048c0  00020380  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000554  080048c0  00020554  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001366d  00000000  00000000  000203a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d94  00000000  00000000  00033a16  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001080  00000000  00000000  000367b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f10  00000000  00000000  00037830  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a95b  00000000  00000000  00038740  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00010b54  00000000  00000000  0005309b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e693  00000000  00000000  00063bef  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f2282  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a5c  00000000  00000000  000f2300  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000380 	.word	0x20000380
 8000128:	00000000 	.word	0x00000000
 800012c:	08004450 	.word	0x08004450

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000384 	.word	0x20000384
 8000148:	08004450 	.word	0x08004450

0800014c <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart2 ;

void DEBUG_init(void){
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	RetargetInit(&huart2);
 8000150:	4802      	ldr	r0, [pc, #8]	; (800015c <DEBUG_init+0x10>)
 8000152:	f000 f805 	bl	8000160 <RetargetInit>
}
 8000156:	bf00      	nop
 8000158:	bd80      	pop	{r7, pc}
 800015a:	bf00      	nop
 800015c:	2000050c 	.word	0x2000050c

08000160 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8000160:	b580      	push	{r7, lr}
 8000162:	b082      	sub	sp, #8
 8000164:	af00      	add	r7, sp, #0
 8000166:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000168:	4a07      	ldr	r2, [pc, #28]	; (8000188 <RetargetInit+0x28>)
 800016a:	687b      	ldr	r3, [r7, #4]
 800016c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800016e:	4b07      	ldr	r3, [pc, #28]	; (800018c <RetargetInit+0x2c>)
 8000170:	681b      	ldr	r3, [r3, #0]
 8000172:	6898      	ldr	r0, [r3, #8]
 8000174:	2300      	movs	r3, #0
 8000176:	2202      	movs	r2, #2
 8000178:	2100      	movs	r1, #0
 800017a:	f003 f9dd 	bl	8003538 <setvbuf>
}
 800017e:	bf00      	nop
 8000180:	3708      	adds	r7, #8
 8000182:	46bd      	mov	sp, r7
 8000184:	bd80      	pop	{r7, pc}
 8000186:	bf00      	nop
 8000188:	200003c8 	.word	0x200003c8
 800018c:	2000031c 	.word	0x2000031c

08000190 <_isatty>:

int _isatty(int fd) {
 8000190:	b580      	push	{r7, lr}
 8000192:	b082      	sub	sp, #8
 8000194:	af00      	add	r7, sp, #0
 8000196:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000198:	687b      	ldr	r3, [r7, #4]
 800019a:	2b00      	cmp	r3, #0
 800019c:	db04      	blt.n	80001a8 <_isatty+0x18>
 800019e:	687b      	ldr	r3, [r7, #4]
 80001a0:	2b02      	cmp	r3, #2
 80001a2:	dc01      	bgt.n	80001a8 <_isatty+0x18>
    return 1;
 80001a4:	2301      	movs	r3, #1
 80001a6:	e005      	b.n	80001b4 <_isatty+0x24>

  errno = EBADF;
 80001a8:	f003 f962 	bl	8003470 <__errno>
 80001ac:	4602      	mov	r2, r0
 80001ae:	2309      	movs	r3, #9
 80001b0:	6013      	str	r3, [r2, #0]
  return 0;
 80001b2:	2300      	movs	r3, #0
}
 80001b4:	4618      	mov	r0, r3
 80001b6:	3708      	adds	r7, #8
 80001b8:	46bd      	mov	sp, r7
 80001ba:	bd80      	pop	{r7, pc}

080001bc <_write>:

int _write(int fd, char* ptr, int len) {
 80001bc:	b580      	push	{r7, lr}
 80001be:	b086      	sub	sp, #24
 80001c0:	af00      	add	r7, sp, #0
 80001c2:	60f8      	str	r0, [r7, #12]
 80001c4:	60b9      	str	r1, [r7, #8]
 80001c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80001c8:	68fb      	ldr	r3, [r7, #12]
 80001ca:	2b01      	cmp	r3, #1
 80001cc:	d002      	beq.n	80001d4 <_write+0x18>
 80001ce:	68fb      	ldr	r3, [r7, #12]
 80001d0:	2b02      	cmp	r3, #2
 80001d2:	d110      	bne.n	80001f6 <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 80001d4:	4b0d      	ldr	r3, [pc, #52]	; (800020c <_write+0x50>)
 80001d6:	6818      	ldr	r0, [r3, #0]
 80001d8:	687b      	ldr	r3, [r7, #4]
 80001da:	b29a      	uxth	r2, r3
 80001dc:	2364      	movs	r3, #100	; 0x64
 80001de:	68b9      	ldr	r1, [r7, #8]
 80001e0:	f002 fc95 	bl	8002b0e <HAL_UART_Transmit>
 80001e4:	4603      	mov	r3, r0
 80001e6:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80001e8:	7dfb      	ldrb	r3, [r7, #23]
 80001ea:	2b00      	cmp	r3, #0
 80001ec:	d101      	bne.n	80001f2 <_write+0x36>
      return len;
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	e008      	b.n	8000204 <_write+0x48>
    else
      return EIO;
 80001f2:	2305      	movs	r3, #5
 80001f4:	e006      	b.n	8000204 <_write+0x48>
  }
  errno = EBADF;
 80001f6:	f003 f93b 	bl	8003470 <__errno>
 80001fa:	4602      	mov	r2, r0
 80001fc:	2309      	movs	r3, #9
 80001fe:	6013      	str	r3, [r2, #0]
  return -1;
 8000200:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000204:	4618      	mov	r0, r3
 8000206:	3718      	adds	r7, #24
 8000208:	46bd      	mov	sp, r7
 800020a:	bd80      	pop	{r7, pc}
 800020c:	200003c8 	.word	0x200003c8

08000210 <_close>:

int _close(int fd) {
 8000210:	b580      	push	{r7, lr}
 8000212:	b082      	sub	sp, #8
 8000214:	af00      	add	r7, sp, #0
 8000216:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000218:	687b      	ldr	r3, [r7, #4]
 800021a:	2b00      	cmp	r3, #0
 800021c:	db04      	blt.n	8000228 <_close+0x18>
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	2b02      	cmp	r3, #2
 8000222:	dc01      	bgt.n	8000228 <_close+0x18>
    return 0;
 8000224:	2300      	movs	r3, #0
 8000226:	e006      	b.n	8000236 <_close+0x26>

  errno = EBADF;
 8000228:	f003 f922 	bl	8003470 <__errno>
 800022c:	4602      	mov	r2, r0
 800022e:	2309      	movs	r3, #9
 8000230:	6013      	str	r3, [r2, #0]
  return -1;
 8000232:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000236:	4618      	mov	r0, r3
 8000238:	3708      	adds	r7, #8
 800023a:	46bd      	mov	sp, r7
 800023c:	bd80      	pop	{r7, pc}

0800023e <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800023e:	b580      	push	{r7, lr}
 8000240:	b084      	sub	sp, #16
 8000242:	af00      	add	r7, sp, #0
 8000244:	60f8      	str	r0, [r7, #12]
 8000246:	60b9      	str	r1, [r7, #8]
 8000248:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800024a:	f003 f911 	bl	8003470 <__errno>
 800024e:	4602      	mov	r2, r0
 8000250:	2309      	movs	r3, #9
 8000252:	6013      	str	r3, [r2, #0]
  return -1;
 8000254:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000258:	4618      	mov	r0, r3
 800025a:	3710      	adds	r7, #16
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <_read>:

int _read(int fd, char* ptr, int len) {
 8000260:	b580      	push	{r7, lr}
 8000262:	b086      	sub	sp, #24
 8000264:	af00      	add	r7, sp, #0
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	60b9      	str	r1, [r7, #8]
 800026a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800026c:	68fb      	ldr	r3, [r7, #12]
 800026e:	2b00      	cmp	r3, #0
 8000270:	d110      	bne.n	8000294 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <_read+0x4c>)
 8000274:	6818      	ldr	r0, [r3, #0]
 8000276:	f04f 33ff 	mov.w	r3, #4294967295
 800027a:	2201      	movs	r2, #1
 800027c:	68b9      	ldr	r1, [r7, #8]
 800027e:	f002 fcd8 	bl	8002c32 <HAL_UART_Receive>
 8000282:	4603      	mov	r3, r0
 8000284:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000286:	7dfb      	ldrb	r3, [r7, #23]
 8000288:	2b00      	cmp	r3, #0
 800028a:	d101      	bne.n	8000290 <_read+0x30>
      return 1;
 800028c:	2301      	movs	r3, #1
 800028e:	e008      	b.n	80002a2 <_read+0x42>
    else
      return EIO;
 8000290:	2305      	movs	r3, #5
 8000292:	e006      	b.n	80002a2 <_read+0x42>
  }
  errno = EBADF;
 8000294:	f003 f8ec 	bl	8003470 <__errno>
 8000298:	4602      	mov	r2, r0
 800029a:	2309      	movs	r3, #9
 800029c:	6013      	str	r3, [r2, #0]
  return -1;
 800029e:	f04f 33ff 	mov.w	r3, #4294967295
}
 80002a2:	4618      	mov	r0, r3
 80002a4:	3718      	adds	r7, #24
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	200003c8 	.word	0x200003c8

080002b0 <_fstat>:

int _fstat(int fd, struct stat* st) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
 80002b8:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80002ba:	687b      	ldr	r3, [r7, #4]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db08      	blt.n	80002d2 <_fstat+0x22>
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b02      	cmp	r3, #2
 80002c4:	dc05      	bgt.n	80002d2 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80002c6:	683b      	ldr	r3, [r7, #0]
 80002c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80002cc:	605a      	str	r2, [r3, #4]
    return 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	e005      	b.n	80002de <_fstat+0x2e>
  }

  errno = EBADF;
 80002d2:	f003 f8cd 	bl	8003470 <__errno>
 80002d6:	4602      	mov	r2, r0
 80002d8:	2309      	movs	r3, #9
 80002da:	6013      	str	r3, [r2, #0]
  return 0;
 80002dc:	2300      	movs	r3, #0
}
 80002de:	4618      	mov	r0, r3
 80002e0:	3708      	adds	r7, #8
 80002e2:	46bd      	mov	sp, r7
 80002e4:	bd80      	pop	{r7, pc}
	...

080002e8 <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b082      	sub	sp, #8
 80002ec:	af00      	add	r7, sp, #0
 80002ee:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 80002f0:	4a05      	ldr	r2, [pc, #20]	; (8000308 <SCHEDULER_init+0x20>)
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 80002f6:	f7ff ff29 	bl	800014c <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 80002fa:	6878      	ldr	r0, [r7, #4]
 80002fc:	f000 fa02 	bl	8000704 <tasks_init>
}
 8000300:	bf00      	nop
 8000302:	3708      	adds	r7, #8
 8000304:	46bd      	mov	sp, r7
 8000306:	bd80      	pop	{r7, pc}
 8000308:	200003b0 	.word	0x200003b0

0800030c <SCHEDULER_run>:

void SCHEDULER_run(void){
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 8000312:	f000 fa49 	bl	80007a8 <TIME_us>
 8000316:	6078      	str	r0, [r7, #4]
	task_t * task = get_first_task();
 8000318:	f000 f856 	bl	80003c8 <get_first_task>
 800031c:	6038      	str	r0, [r7, #0]

	while(task_queu_position < task_queu_size && task != NULL){
 800031e:	e015      	b.n	800034c <SCHEDULER_run+0x40>

		//TODO : Tâches par évennement
		if(task->static_priority != PRIORITY_REAL_TIME)
 8000320:	683b      	ldr	r3, [r7, #0]
 8000322:	f993 3000 	ldrsb.w	r3, [r3]
 8000326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800032a:	d00c      	beq.n	8000346 <SCHEDULER_run+0x3a>
			if(current_time_us >= task->it_last_execution_us + task->it_desired_period_us)
 800032c:	683b      	ldr	r3, [r7, #0]
 800032e:	69da      	ldr	r2, [r3, #28]
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4413      	add	r3, r2
 8000336:	687a      	ldr	r2, [r7, #4]
 8000338:	429a      	cmp	r2, r3
 800033a:	d304      	bcc.n	8000346 <SCHEDULER_run+0x3a>
					current_time_us = task_process_it(task, current_time_us);
 800033c:	6879      	ldr	r1, [r7, #4]
 800033e:	6838      	ldr	r0, [r7, #0]
 8000340:	f000 f866 	bl	8000410 <task_process_it>
 8000344:	6078      	str	r0, [r7, #4]

		task = get_next_task();
 8000346:	f000 f84f 	bl	80003e8 <get_next_task>
 800034a:	6038      	str	r0, [r7, #0]
	while(task_queu_position < task_queu_size && task != NULL){
 800034c:	4b06      	ldr	r3, [pc, #24]	; (8000368 <SCHEDULER_run+0x5c>)
 800034e:	681a      	ldr	r2, [r3, #0]
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <SCHEDULER_run+0x60>)
 8000352:	681b      	ldr	r3, [r3, #0]
 8000354:	429a      	cmp	r2, r3
 8000356:	d202      	bcs.n	800035e <SCHEDULER_run+0x52>
 8000358:	683b      	ldr	r3, [r7, #0]
 800035a:	2b00      	cmp	r3, #0
 800035c:	d1e0      	bne.n	8000320 <SCHEDULER_run+0x14>
	}
}
 800035e:	bf00      	nop
 8000360:	3708      	adds	r7, #8
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	200003ac 	.word	0x200003ac
 800036c:	200003a8 	.word	0x200003a8

08000370 <SCHEDULER_get_cpu_load>:

uint32_t SCHEDULER_get_cpu_load(void){
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
	uint32_t load_pourcentage = 0 ;
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
	for(uint32_t t = 0; t < task_queu_size; t++)
 800037a:	2300      	movs	r3, #0
 800037c:	603b      	str	r3, [r7, #0]
 800037e:	e014      	b.n	80003aa <SCHEDULER_get_cpu_load+0x3a>
		load_pourcentage += task_queu[t]->it_duration_us * 100 / task_queu[t]->it_desired_period_us ;
 8000380:	4a0f      	ldr	r2, [pc, #60]	; (80003c0 <SCHEDULER_get_cpu_load+0x50>)
 8000382:	683b      	ldr	r3, [r7, #0]
 8000384:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000388:	68db      	ldr	r3, [r3, #12]
 800038a:	2264      	movs	r2, #100	; 0x64
 800038c:	fb02 f203 	mul.w	r2, r2, r3
 8000390:	490b      	ldr	r1, [pc, #44]	; (80003c0 <SCHEDULER_get_cpu_load+0x50>)
 8000392:	683b      	ldr	r3, [r7, #0]
 8000394:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000398:	695b      	ldr	r3, [r3, #20]
 800039a:	fbb2 f3f3 	udiv	r3, r2, r3
 800039e:	687a      	ldr	r2, [r7, #4]
 80003a0:	4413      	add	r3, r2
 80003a2:	607b      	str	r3, [r7, #4]
	for(uint32_t t = 0; t < task_queu_size; t++)
 80003a4:	683b      	ldr	r3, [r7, #0]
 80003a6:	3301      	adds	r3, #1
 80003a8:	603b      	str	r3, [r7, #0]
 80003aa:	4b06      	ldr	r3, [pc, #24]	; (80003c4 <SCHEDULER_get_cpu_load+0x54>)
 80003ac:	681b      	ldr	r3, [r3, #0]
 80003ae:	683a      	ldr	r2, [r7, #0]
 80003b0:	429a      	cmp	r2, r3
 80003b2:	d3e5      	bcc.n	8000380 <SCHEDULER_get_cpu_load+0x10>
	return load_pourcentage ;
 80003b4:	687b      	ldr	r3, [r7, #4]
}
 80003b6:	4618      	mov	r0, r3
 80003b8:	370c      	adds	r7, #12
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bc80      	pop	{r7}
 80003be:	4770      	bx	lr
 80003c0:	2000039c 	.word	0x2000039c
 80003c4:	200003a8 	.word	0x200003a8

080003c8 <get_first_task>:

static task_t * get_first_task(void){
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 80003cc:	4b04      	ldr	r3, [pc, #16]	; (80003e0 <get_first_task+0x18>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 80003d2:	4b04      	ldr	r3, [pc, #16]	; (80003e4 <get_first_task+0x1c>)
 80003d4:	681b      	ldr	r3, [r3, #0]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	46bd      	mov	sp, r7
 80003da:	bc80      	pop	{r7}
 80003dc:	4770      	bx	lr
 80003de:	bf00      	nop
 80003e0:	200003ac 	.word	0x200003ac
 80003e4:	2000039c 	.word	0x2000039c

080003e8 <get_next_task>:

static task_t * get_next_task(void){
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 80003ec:	4b06      	ldr	r3, [pc, #24]	; (8000408 <get_next_task+0x20>)
 80003ee:	681b      	ldr	r3, [r3, #0]
 80003f0:	3301      	adds	r3, #1
 80003f2:	4a05      	ldr	r2, [pc, #20]	; (8000408 <get_next_task+0x20>)
 80003f4:	6013      	str	r3, [r2, #0]
 80003f6:	4b04      	ldr	r3, [pc, #16]	; (8000408 <get_next_task+0x20>)
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	4a04      	ldr	r2, [pc, #16]	; (800040c <get_next_task+0x24>)
 80003fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8000400:	4618      	mov	r0, r3
 8000402:	46bd      	mov	sp, r7
 8000404:	bc80      	pop	{r7}
 8000406:	4770      	bx	lr
 8000408:	200003ac 	.word	0x200003ac
 800040c:	2000039c 	.word	0x2000039c

08000410 <task_process_it>:

static uint32_t task_process_it(task_t * task, uint32_t current_time_us){
 8000410:	b580      	push	{r7, lr}
 8000412:	b082      	sub	sp, #8
 8000414:	af00      	add	r7, sp, #0
 8000416:	6078      	str	r0, [r7, #4]
 8000418:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->it == NULL)
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	689b      	ldr	r3, [r3, #8]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d101      	bne.n	8000426 <task_process_it+0x16>
		return current_time_us ;
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	e08c      	b.n	8000540 <task_process_it+0x130>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->it_real_period_us_average_sum -= task->it_real_period_us_average_array[task->it_average_index];
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8000432:	687b      	ldr	r3, [r7, #4]
 8000434:	310c      	adds	r1, #12
 8000436:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800043a:	1ad2      	subs	r2, r2, r3
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	task->it_real_period_us_average_array[task->it_average_index] = current_time_us - task->it_last_execution_us ;
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	69db      	ldr	r3, [r3, #28]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 800044c:	6839      	ldr	r1, [r7, #0]
 800044e:	1ac9      	subs	r1, r1, r3
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	320c      	adds	r2, #12
 8000454:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->it_real_period_us_average_sum += task->it_real_period_us_average_array[task->it_average_index] ;
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	310c      	adds	r1, #12
 8000468:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800046c:	441a      	add	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	task->it_real_period_us = task->it_real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8000474:	687b      	ldr	r3, [r7, #4]
 8000476:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800047a:	4a33      	ldr	r2, [pc, #204]	; (8000548 <task_process_it+0x138>)
 800047c:	fba2 2303 	umull	r2, r3, r2, r3
 8000480:	091a      	lsrs	r2, r3, #4
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	619a      	str	r2, [r3, #24]

	task->it_last_execution_us = current_time_us ;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	683a      	ldr	r2, [r7, #0]
 800048a:	61da      	str	r2, [r3, #28]
	task->it(current_time_us);
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	689b      	ldr	r3, [r3, #8]
 8000490:	6838      	ldr	r0, [r7, #0]
 8000492:	4798      	blx	r3
	current_time_us = TIME_us();
 8000494:	f000 f988 	bl	80007a8 <TIME_us>
 8000498:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->it_duration_us_average_sum -= task->it_duration_us_average_array[task->it_average_index];
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004a6:	6879      	ldr	r1, [r7, #4]
 80004a8:	3320      	adds	r3, #32
 80004aa:	009b      	lsls	r3, r3, #2
 80004ac:	440b      	add	r3, r1
 80004ae:	685b      	ldr	r3, [r3, #4]
 80004b0:	1ad2      	subs	r2, r2, r3
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	task->it_duration_us_average_array[task->it_average_index] = current_time_us - task->it_last_execution_us ;
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	69da      	ldr	r2, [r3, #28]
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004c2:	6839      	ldr	r1, [r7, #0]
 80004c4:	1a8a      	subs	r2, r1, r2
 80004c6:	6879      	ldr	r1, [r7, #4]
 80004c8:	3320      	adds	r3, #32
 80004ca:	009b      	lsls	r3, r3, #2
 80004cc:	440b      	add	r3, r1
 80004ce:	605a      	str	r2, [r3, #4]
	task->it_duration_us_worst = MAX(task->it_duration_us_average_array[task->it_average_index] , task->it_duration_us_worst);
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	691a      	ldr	r2, [r3, #16]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004da:	6879      	ldr	r1, [r7, #4]
 80004dc:	3320      	adds	r3, #32
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	440b      	add	r3, r1
 80004e2:	685b      	ldr	r3, [r3, #4]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	bf38      	it	cc
 80004e8:	461a      	movcc	r2, r3
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	611a      	str	r2, [r3, #16]
	task->it_duration_us_average_sum += task->it_duration_us_average_array[task->it_average_index];
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80004fa:	6879      	ldr	r1, [r7, #4]
 80004fc:	3320      	adds	r3, #32
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	440b      	add	r3, r1
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	441a      	add	r2, r3
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	task->it_duration_us = task->it_duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8000512:	4a0d      	ldr	r2, [pc, #52]	; (8000548 <task_process_it+0x138>)
 8000514:	fba2 2303 	umull	r2, r3, r2, r3
 8000518:	091a      	lsrs	r2, r3, #4
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	60da      	str	r2, [r3, #12]

	if(++task->it_average_index == TASK_STAT_AVERAGE_OVER)
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000524:	1c5a      	adds	r2, r3, #1
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000532:	2b14      	cmp	r3, #20
 8000534:	d103      	bne.n	800053e <task_process_it+0x12e>
		task->it_average_index = 0 ;
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	2200      	movs	r2, #0
 800053a:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	return current_time_us ;
 800053e:	683b      	ldr	r3, [r7, #0]
}
 8000540:	4618      	mov	r0, r3
 8000542:	3708      	adds	r7, #8
 8000544:	46bd      	mov	sp, r7
 8000546:	bd80      	pop	{r7, pc}
 8000548:	cccccccd 	.word	0xcccccccd

0800054c <SCHEDULER_enable_task>:
	return current_time_us ;
}


//Activation ou d�sactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	6039      	str	r1, [r7, #0]
 8000556:	71fb      	strb	r3, [r7, #7]
	if(enable && id < TASK_COUNT)
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	2b00      	cmp	r3, #0
 800055c:	d00b      	beq.n	8000576 <SCHEDULER_enable_task+0x2a>
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b01      	cmp	r3, #1
 8000562:	d808      	bhi.n	8000576 <SCHEDULER_enable_task+0x2a>
		queu_add(TASK_get_task(id));
 8000564:	79fb      	ldrb	r3, [r7, #7]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 f90a 	bl	8000780 <TASK_get_task>
 800056c:	4603      	mov	r3, r0
 800056e:	4618      	mov	r0, r3
 8000570:	f000 f830 	bl	80005d4 <queu_add>
 8000574:	e007      	b.n	8000586 <SCHEDULER_enable_task+0x3a>
	else
		queu_remove(TASK_get_task(id));
 8000576:	79fb      	ldrb	r3, [r7, #7]
 8000578:	4618      	mov	r0, r3
 800057a:	f000 f901 	bl	8000780 <TASK_get_task>
 800057e:	4603      	mov	r3, r0
 8000580:	4618      	mov	r0, r3
 8000582:	f000 f87f 	bl	8000684 <queu_remove>
}
 8000586:	bf00      	nop
 8000588:	3708      	adds	r7, #8
 800058a:	46bd      	mov	sp, r7
 800058c:	bd80      	pop	{r7, pc}
	...

08000590 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 8000590:	b480      	push	{r7}
 8000592:	b085      	sub	sp, #20
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	for(uint32_t t = 0; t < task_queu_size; t++)
 8000598:	2300      	movs	r3, #0
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	e00b      	b.n	80005b6 <queu_contains+0x26>
		if(task_queu[t] == task)
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <queu_contains+0x3c>)
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005a6:	687a      	ldr	r2, [r7, #4]
 80005a8:	429a      	cmp	r2, r3
 80005aa:	d101      	bne.n	80005b0 <queu_contains+0x20>
			return TRUE ;
 80005ac:	2301      	movs	r3, #1
 80005ae:	e008      	b.n	80005c2 <queu_contains+0x32>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	3301      	adds	r3, #1
 80005b4:	60fb      	str	r3, [r7, #12]
 80005b6:	4b06      	ldr	r3, [pc, #24]	; (80005d0 <queu_contains+0x40>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	68fa      	ldr	r2, [r7, #12]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d3ee      	bcc.n	800059e <queu_contains+0xe>
	return FALSE ;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	3714      	adds	r7, #20
 80005c6:	46bd      	mov	sp, r7
 80005c8:	bc80      	pop	{r7}
 80005ca:	4770      	bx	lr
 80005cc:	2000039c 	.word	0x2000039c
 80005d0:	200003a8 	.word	0x200003a8

080005d4 <queu_add>:

static bool_e queu_add(task_t * task){
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if(queu_contains(task) || task_queu_size >= TASK_COUNT)
 80005dc:	6878      	ldr	r0, [r7, #4]
 80005de:	f7ff ffd7 	bl	8000590 <queu_contains>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d103      	bne.n	80005f0 <queu_add+0x1c>
 80005e8:	4b24      	ldr	r3, [pc, #144]	; (800067c <queu_add+0xa8>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d901      	bls.n	80005f4 <queu_add+0x20>
		return FALSE ;
 80005f0:	2300      	movs	r3, #0
 80005f2:	e03e      	b.n	8000672 <queu_add+0x9e>


	uint32_t t = 0 ;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 80005f8:	e037      	b.n	800066a <queu_add+0x96>
	{
		if(task_queu[t] == NULL || task->static_priority > task_queu[t]->static_priority){
 80005fa:	4a21      	ldr	r2, [pc, #132]	; (8000680 <queu_add+0xac>)
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00a      	beq.n	800061c <queu_add+0x48>
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	f993 2000 	ldrsb.w	r2, [r3]
 800060c:	491c      	ldr	r1, [pc, #112]	; (8000680 <queu_add+0xac>)
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000614:	f993 3000 	ldrsb.w	r3, [r3]
 8000618:	429a      	cmp	r2, r3
 800061a:	dd23      	ble.n	8000664 <queu_add+0x90>
			if(task_queu[t] != NULL)
 800061c:	4a18      	ldr	r2, [pc, #96]	; (8000680 <queu_add+0xac>)
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000624:	2b00      	cmp	r3, #0
 8000626:	d011      	beq.n	800064c <queu_add+0x78>
				memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size +1 - t));
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	3301      	adds	r3, #1
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4a14      	ldr	r2, [pc, #80]	; (8000680 <queu_add+0xac>)
 8000630:	1898      	adds	r0, r3, r2
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	009b      	lsls	r3, r3, #2
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <queu_add+0xac>)
 8000638:	1899      	adds	r1, r3, r2
 800063a:	4b10      	ldr	r3, [pc, #64]	; (800067c <queu_add+0xa8>)
 800063c:	681a      	ldr	r2, [r3, #0]
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	1ad3      	subs	r3, r2, r3
 8000642:	3301      	adds	r3, #1
 8000644:	009b      	lsls	r3, r3, #2
 8000646:	461a      	mov	r2, r3
 8000648:	f002 ff3c 	bl	80034c4 <memmove>
			task_queu[t] = task ;
 800064c:	490c      	ldr	r1, [pc, #48]	; (8000680 <queu_add+0xac>)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	687a      	ldr	r2, [r7, #4]
 8000652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8000656:	4b09      	ldr	r3, [pc, #36]	; (800067c <queu_add+0xa8>)
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	3301      	adds	r3, #1
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <queu_add+0xa8>)
 800065e:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8000660:	2301      	movs	r3, #1
 8000662:	e006      	b.n	8000672 <queu_add+0x9e>
		}
		t++;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	3301      	adds	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	2b01      	cmp	r3, #1
 800066e:	d9c4      	bls.n	80005fa <queu_add+0x26>
	}
	return FALSE ;
 8000670:	2300      	movs	r3, #0
}
 8000672:	4618      	mov	r0, r3
 8000674:	3710      	adds	r7, #16
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	200003a8 	.word	0x200003a8
 8000680:	2000039c 	.word	0x2000039c

08000684 <queu_remove>:

static bool_e queu_remove(task_t * task){
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task))
 800068c:	6878      	ldr	r0, [r7, #4]
 800068e:	f7ff ff7f 	bl	8000590 <queu_contains>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d101      	bne.n	800069c <queu_remove+0x18>
		return FALSE ;
 8000698:	2300      	movs	r3, #0
 800069a:	e02a      	b.n	80006f2 <queu_remove+0x6e>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 800069c:	2300      	movs	r3, #0
 800069e:	60fb      	str	r3, [r7, #12]
 80006a0:	e021      	b.n	80006e6 <queu_remove+0x62>
		if(task == task_queu[t]){
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <queu_remove+0x78>)
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006aa:	687a      	ldr	r2, [r7, #4]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	d117      	bne.n	80006e0 <queu_remove+0x5c>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	009b      	lsls	r3, r3, #2
 80006b4:	4a11      	ldr	r2, [pc, #68]	; (80006fc <queu_remove+0x78>)
 80006b6:	1898      	adds	r0, r3, r2
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	3301      	adds	r3, #1
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	4a0f      	ldr	r2, [pc, #60]	; (80006fc <queu_remove+0x78>)
 80006c0:	1899      	adds	r1, r3, r2
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <queu_remove+0x7c>)
 80006c4:	681a      	ldr	r2, [r3, #0]
 80006c6:	68fb      	ldr	r3, [r7, #12]
 80006c8:	1ad3      	subs	r3, r2, r3
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	461a      	mov	r2, r3
 80006ce:	f002 fef9 	bl	80034c4 <memmove>
			task_queu_size -- ;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <queu_remove+0x7c>)
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	3b01      	subs	r3, #1
 80006d8:	4a09      	ldr	r2, [pc, #36]	; (8000700 <queu_remove+0x7c>)
 80006da:	6013      	str	r3, [r2, #0]
			return TRUE ;
 80006dc:	2301      	movs	r3, #1
 80006de:	e008      	b.n	80006f2 <queu_remove+0x6e>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	3301      	adds	r3, #1
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <queu_remove+0x7c>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	68fa      	ldr	r2, [r7, #12]
 80006ec:	429a      	cmp	r2, r3
 80006ee:	d3d8      	bcc.n	80006a2 <queu_remove+0x1e>
		}
	}
	return FALSE ;
 80006f0:	2300      	movs	r3, #0
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	3710      	adds	r7, #16
 80006f6:	46bd      	mov	sp, r7
 80006f8:	bd80      	pop	{r7, pc}
 80006fa:	bf00      	nop
 80006fc:	2000039c 	.word	0x2000039c
 8000700:	200003a8 	.word	0x200003a8

08000704 <tasks_init>:
#include "task.h"
#include "../scheduler/scheduler.h"

static system_t * sys;

void tasks_init(system_t * sys_){
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 800070c:	4a07      	ldr	r2, [pc, #28]	; (800072c <tasks_init+0x28>)
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_LED, TRUE);
 8000712:	2101      	movs	r1, #1
 8000714:	2001      	movs	r0, #1
 8000716:	f7ff ff19 	bl	800054c <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_PRINTF, TRUE);
 800071a:	2101      	movs	r1, #1
 800071c:	2000      	movs	r0, #0
 800071e:	f7ff ff15 	bl	800054c <SCHEDULER_enable_task>

}
 8000722:	bf00      	nop
 8000724:	3708      	adds	r7, #8
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	200003b4 	.word	0x200003b4

08000730 <task_main_print_f>:

void task_main_print_f(uint32_t current_time_us){
 8000730:	b590      	push	{r4, r7, lr}
 8000732:	b083      	sub	sp, #12
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
	printf("%lu\t%lu\n", TASK_get_task(TASK_PRINTF)->it_duration_us, SCHEDULER_get_cpu_load());
 8000738:	2000      	movs	r0, #0
 800073a:	f000 f821 	bl	8000780 <TASK_get_task>
 800073e:	4603      	mov	r3, r0
 8000740:	68dc      	ldr	r4, [r3, #12]
 8000742:	f7ff fe15 	bl	8000370 <SCHEDULER_get_cpu_load>
 8000746:	4603      	mov	r3, r0
 8000748:	461a      	mov	r2, r3
 800074a:	4621      	mov	r1, r4
 800074c:	4803      	ldr	r0, [pc, #12]	; (800075c <task_main_print_f+0x2c>)
 800074e:	f002 fedb 	bl	8003508 <iprintf>
}
 8000752:	bf00      	nop
 8000754:	370c      	adds	r7, #12
 8000756:	46bd      	mov	sp, r7
 8000758:	bd90      	pop	{r4, r7, pc}
 800075a:	bf00      	nop
 800075c:	08004468 	.word	0x08004468

08000760 <task_main_led>:


void task_main_led(uint32_t current_time_us){
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
	LED_SEQUENCE_play(&sys->led, current_time_us);
 8000768:	4b04      	ldr	r3, [pc, #16]	; (800077c <task_main_led+0x1c>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	6879      	ldr	r1, [r7, #4]
 800076e:	4618      	mov	r0, r3
 8000770:	f002 fe2a 	bl	80033c8 <LED_SEQUENCE_play>
}
 8000774:	bf00      	nop
 8000776:	3708      	adds	r7, #8
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	200003b4 	.word	0x200003b4

08000780 <TASK_get_task>:
task_t tasks [TASK_COUNT] ={
		[TASK_PRINTF] = 		DEFINE_TASK(TASK_PRINTF, 			PRIORITY_HIGH, 			task_main_print_f, 			PERIOD_US_FROM_HERTZ(5000)),
		[TASK_LED] = 			DEFINE_TASK(TASK_LED, 				PRIORITY_LOW,	 		task_main_led, 				PERIOD_US_FROM_HERTZ(10))
};

task_t * TASK_get_task(task_ids_t id){
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	4603      	mov	r3, r0
 8000788:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 800078a:	79fb      	ldrb	r3, [r7, #7]
 800078c:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000790:	fb02 f303 	mul.w	r3, r2, r3
 8000794:	4a03      	ldr	r2, [pc, #12]	; (80007a4 <TASK_get_task+0x24>)
 8000796:	4413      	add	r3, r2
}
 8000798:	4618      	mov	r0, r3
 800079a:	370c      	adds	r7, #12
 800079c:	46bd      	mov	sp, r7
 800079e:	bc80      	pop	{r7}
 80007a0:	4770      	bx	lr
 80007a2:	bf00      	nop
 80007a4:	20000000 	.word	0x20000000

080007a8 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ae:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 64;
 80007b0:	f000 fc12 	bl	8000fd8 <HAL_GetTick>
 80007b4:	4603      	mov	r3, r0
 80007b6:	3301      	adds	r3, #1
 80007b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007bc:	fb02 f203 	mul.w	r2, r2, r3
 80007c0:	4b0b      	ldr	r3, [pc, #44]	; (80007f0 <TIME_us+0x48>)
 80007c2:	689b      	ldr	r3, [r3, #8]
 80007c4:	099b      	lsrs	r3, r3, #6
 80007c6:	1ad3      	subs	r3, r2, r3
 80007c8:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 80007ca:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s ait pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us >= t_us)
 80007cc:	4b09      	ldr	r3, [pc, #36]	; (80007f4 <TIME_us+0x4c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	687a      	ldr	r2, [r7, #4]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d803      	bhi.n	80007de <TIME_us+0x36>
		t_us += 1000;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 80007dc:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 80007de:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <TIME_us+0x4c>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	6013      	str	r3, [r2, #0]

	return t_us;
 80007e4:	687b      	ldr	r3, [r7, #4]
}
 80007e6:	4618      	mov	r0, r3
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	e000e010 	.word	0xe000e010
 80007f4:	200003b8 	.word	0x200003b8

080007f8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b082      	sub	sp, #8
 80007fc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_DMA_Init+0x48>)
 8000800:	695b      	ldr	r3, [r3, #20]
 8000802:	4a0f      	ldr	r2, [pc, #60]	; (8000840 <MX_DMA_Init+0x48>)
 8000804:	f043 0301 	orr.w	r3, r3, #1
 8000808:	6153      	str	r3, [r2, #20]
 800080a:	4b0d      	ldr	r3, [pc, #52]	; (8000840 <MX_DMA_Init+0x48>)
 800080c:	695b      	ldr	r3, [r3, #20]
 800080e:	f003 0301 	and.w	r3, r3, #1
 8000812:	607b      	str	r3, [r7, #4]
 8000814:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000816:	2200      	movs	r2, #0
 8000818:	2100      	movs	r1, #0
 800081a:	2010      	movs	r0, #16
 800081c:	f000 fcbd 	bl	800119a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000820:	2010      	movs	r0, #16
 8000822:	f000 fcd6 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	2011      	movs	r0, #17
 800082c:	f000 fcb5 	bl	800119a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000830:	2011      	movs	r0, #17
 8000832:	f000 fcce 	bl	80011d2 <HAL_NVIC_EnableIRQ>

}
 8000836:	bf00      	nop
 8000838:	3708      	adds	r7, #8
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40021000 	.word	0x40021000

08000844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b088      	sub	sp, #32
 8000848:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084a:	f107 0310 	add.w	r3, r7, #16
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
 8000856:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <MX_GPIO_Init+0xa4>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	4a22      	ldr	r2, [pc, #136]	; (80008e8 <MX_GPIO_Init+0xa4>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6193      	str	r3, [r2, #24]
 8000864:	4b20      	ldr	r3, [pc, #128]	; (80008e8 <MX_GPIO_Init+0xa4>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0310 	and.w	r3, r3, #16
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000870:	4b1d      	ldr	r3, [pc, #116]	; (80008e8 <MX_GPIO_Init+0xa4>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	4a1c      	ldr	r2, [pc, #112]	; (80008e8 <MX_GPIO_Init+0xa4>)
 8000876:	f043 0304 	orr.w	r3, r3, #4
 800087a:	6193      	str	r3, [r2, #24]
 800087c:	4b1a      	ldr	r3, [pc, #104]	; (80008e8 <MX_GPIO_Init+0xa4>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	f003 0304 	and.w	r3, r3, #4
 8000884:	60bb      	str	r3, [r7, #8]
 8000886:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000888:	4b17      	ldr	r3, [pc, #92]	; (80008e8 <MX_GPIO_Init+0xa4>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	4a16      	ldr	r2, [pc, #88]	; (80008e8 <MX_GPIO_Init+0xa4>)
 800088e:	f043 0308 	orr.w	r3, r3, #8
 8000892:	6193      	str	r3, [r2, #24]
 8000894:	4b14      	ldr	r3, [pc, #80]	; (80008e8 <MX_GPIO_Init+0xa4>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	f003 0308 	and.w	r3, r3, #8
 800089c:	607b      	str	r3, [r7, #4]
 800089e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MPU_VCC_GPIO_Port, MPU_VCC_Pin, GPIO_PIN_RESET);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2120      	movs	r1, #32
 80008a4:	4811      	ldr	r0, [pc, #68]	; (80008ec <MX_GPIO_Init+0xa8>)
 80008a6:	f000 ffdf 	bl	8001868 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80008aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008b0:	2300      	movs	r3, #0
 80008b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b4:	2300      	movs	r3, #0
 80008b6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	4619      	mov	r1, r3
 80008be:	480c      	ldr	r0, [pc, #48]	; (80008f0 <MX_GPIO_Init+0xac>)
 80008c0:	f000 fe78 	bl	80015b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MPU_VCC_Pin;
 80008c4:	2320      	movs	r3, #32
 80008c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008c8:	2301      	movs	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008cc:	2300      	movs	r3, #0
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d0:	2302      	movs	r3, #2
 80008d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(MPU_VCC_GPIO_Port, &GPIO_InitStruct);
 80008d4:	f107 0310 	add.w	r3, r7, #16
 80008d8:	4619      	mov	r1, r3
 80008da:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_GPIO_Init+0xa8>)
 80008dc:	f000 fe6a 	bl	80015b4 <HAL_GPIO_Init>

}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40021000 	.word	0x40021000
 80008ec:	40010800 	.word	0x40010800
 80008f0:	40011000 	.word	0x40011000

080008f4 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_tx;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 80008f8:	4b12      	ldr	r3, [pc, #72]	; (8000944 <MX_I2C1_Init+0x50>)
 80008fa:	4a13      	ldr	r2, [pc, #76]	; (8000948 <MX_I2C1_Init+0x54>)
 80008fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008fe:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_I2C1_Init+0x50>)
 8000900:	4a12      	ldr	r2, [pc, #72]	; (800094c <MX_I2C1_Init+0x58>)
 8000902:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000904:	4b0f      	ldr	r3, [pc, #60]	; (8000944 <MX_I2C1_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_I2C1_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_I2C1_Init+0x50>)
 8000912:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000916:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000918:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <MX_I2C1_Init+0x50>)
 800091a:	2200      	movs	r2, #0
 800091c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_I2C1_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000924:	4b07      	ldr	r3, [pc, #28]	; (8000944 <MX_I2C1_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800092a:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_I2C1_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000930:	4804      	ldr	r0, [pc, #16]	; (8000944 <MX_I2C1_Init+0x50>)
 8000932:	f000 ffb1 	bl	8001898 <HAL_I2C_Init>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800093c:	f000 f915 	bl	8000b6a <Error_Handler>
  }

}
 8000940:	bf00      	nop
 8000942:	bd80      	pop	{r7, pc}
 8000944:	20000410 	.word	0x20000410
 8000948:	40005400 	.word	0x40005400
 800094c:	000186a0 	.word	0x000186a0

08000950 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b088      	sub	sp, #32
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	2200      	movs	r2, #0
 800095e:	601a      	str	r2, [r3, #0]
 8000960:	605a      	str	r2, [r3, #4]
 8000962:	609a      	str	r2, [r3, #8]
 8000964:	60da      	str	r2, [r3, #12]
  if(i2cHandle->Instance==I2C1)
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	4a3b      	ldr	r2, [pc, #236]	; (8000a58 <HAL_I2C_MspInit+0x108>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d16f      	bne.n	8000a50 <HAL_I2C_MspInit+0x100>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000970:	4b3a      	ldr	r3, [pc, #232]	; (8000a5c <HAL_I2C_MspInit+0x10c>)
 8000972:	699b      	ldr	r3, [r3, #24]
 8000974:	4a39      	ldr	r2, [pc, #228]	; (8000a5c <HAL_I2C_MspInit+0x10c>)
 8000976:	f043 0308 	orr.w	r3, r3, #8
 800097a:	6193      	str	r3, [r2, #24]
 800097c:	4b37      	ldr	r3, [pc, #220]	; (8000a5c <HAL_I2C_MspInit+0x10c>)
 800097e:	699b      	ldr	r3, [r3, #24]
 8000980:	f003 0308 	and.w	r3, r3, #8
 8000984:	60fb      	str	r3, [r7, #12]
 8000986:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000988:	23c0      	movs	r3, #192	; 0xc0
 800098a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098c:	2312      	movs	r3, #18
 800098e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000990:	2303      	movs	r3, #3
 8000992:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	4619      	mov	r1, r3
 800099a:	4831      	ldr	r0, [pc, #196]	; (8000a60 <HAL_I2C_MspInit+0x110>)
 800099c:	f000 fe0a 	bl	80015b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009a0:	4b2e      	ldr	r3, [pc, #184]	; (8000a5c <HAL_I2C_MspInit+0x10c>)
 80009a2:	69db      	ldr	r3, [r3, #28]
 80009a4:	4a2d      	ldr	r2, [pc, #180]	; (8000a5c <HAL_I2C_MspInit+0x10c>)
 80009a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009aa:	61d3      	str	r3, [r2, #28]
 80009ac:	4b2b      	ldr	r3, [pc, #172]	; (8000a5c <HAL_I2C_MspInit+0x10c>)
 80009ae:	69db      	ldr	r3, [r3, #28]
 80009b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 DMA Init */
    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel6;
 80009b8:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <HAL_I2C_MspInit+0x114>)
 80009ba:	4a2b      	ldr	r2, [pc, #172]	; (8000a68 <HAL_I2C_MspInit+0x118>)
 80009bc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80009be:	4b29      	ldr	r3, [pc, #164]	; (8000a64 <HAL_I2C_MspInit+0x114>)
 80009c0:	2210      	movs	r2, #16
 80009c2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80009c4:	4b27      	ldr	r3, [pc, #156]	; (8000a64 <HAL_I2C_MspInit+0x114>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <HAL_I2C_MspInit+0x114>)
 80009cc:	2280      	movs	r2, #128	; 0x80
 80009ce:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80009d0:	4b24      	ldr	r3, [pc, #144]	; (8000a64 <HAL_I2C_MspInit+0x114>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <HAL_I2C_MspInit+0x114>)
 80009d8:	2200      	movs	r2, #0
 80009da:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80009dc:	4b21      	ldr	r3, [pc, #132]	; (8000a64 <HAL_I2C_MspInit+0x114>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80009e2:	4b20      	ldr	r3, [pc, #128]	; (8000a64 <HAL_I2C_MspInit+0x114>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80009e8:	481e      	ldr	r0, [pc, #120]	; (8000a64 <HAL_I2C_MspInit+0x114>)
 80009ea:	f000 fc0d 	bl	8001208 <HAL_DMA_Init>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <HAL_I2C_MspInit+0xa8>
    {
      Error_Handler();
 80009f4:	f000 f8b9 	bl	8000b6a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	4a1a      	ldr	r2, [pc, #104]	; (8000a64 <HAL_I2C_MspInit+0x114>)
 80009fc:	635a      	str	r2, [r3, #52]	; 0x34
 80009fe:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_I2C_MspInit+0x114>)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	6253      	str	r3, [r2, #36]	; 0x24

    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel7;
 8000a04:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <HAL_I2C_MspInit+0x11c>)
 8000a06:	4a1a      	ldr	r2, [pc, #104]	; (8000a70 <HAL_I2C_MspInit+0x120>)
 8000a08:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a0a:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <HAL_I2C_MspInit+0x11c>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a10:	4b16      	ldr	r3, [pc, #88]	; (8000a6c <HAL_I2C_MspInit+0x11c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a16:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <HAL_I2C_MspInit+0x11c>)
 8000a18:	2280      	movs	r2, #128	; 0x80
 8000a1a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000a1c:	4b13      	ldr	r3, [pc, #76]	; (8000a6c <HAL_I2C_MspInit+0x11c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000a22:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <HAL_I2C_MspInit+0x11c>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000a28:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_I2C_MspInit+0x11c>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a2e:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <HAL_I2C_MspInit+0x11c>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000a34:	480d      	ldr	r0, [pc, #52]	; (8000a6c <HAL_I2C_MspInit+0x11c>)
 8000a36:	f000 fbe7 	bl	8001208 <HAL_DMA_Init>
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d001      	beq.n	8000a44 <HAL_I2C_MspInit+0xf4>
    {
      Error_Handler();
 8000a40:	f000 f893 	bl	8000b6a <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	4a09      	ldr	r2, [pc, #36]	; (8000a6c <HAL_I2C_MspInit+0x11c>)
 8000a48:	639a      	str	r2, [r3, #56]	; 0x38
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_I2C_MspInit+0x11c>)
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	6253      	str	r3, [r2, #36]	; 0x24

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000a50:	bf00      	nop
 8000a52:	3720      	adds	r7, #32
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40005400 	.word	0x40005400
 8000a5c:	40021000 	.word	0x40021000
 8000a60:	40010c00 	.word	0x40010c00
 8000a64:	200003cc 	.word	0x200003cc
 8000a68:	4002006c 	.word	0x4002006c
 8000a6c:	20000464 	.word	0x20000464
 8000a70:	40020080 	.word	0x40020080

08000a74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b084      	sub	sp, #16
 8000a78:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a7a:	f000 fa55 	bl	8000f28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a7e:	f000 f821 	bl	8000ac4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a82:	f7ff fedf 	bl	8000844 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a86:	f7ff feb7 	bl	80007f8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000a8a:	f000 f9ab 	bl	8000de4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000a8e:	f000 f933 	bl	8000cf8 <MX_TIM1_Init>
  MX_I2C1_Init();
 8000a92:	f7ff ff2f 	bl	80008f4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //Init des modules : on fait le lien entre les modules et les structures hal
  LED_SEQUENCE_init(&sys.led, MPU_VCC_GPIO_Port, MPU_VCC_Pin, SEQUENCE_LED_9, 200, 12, FALSE);
 8000a96:	2300      	movs	r3, #0
 8000a98:	9302      	str	r3, [sp, #8]
 8000a9a:	230c      	movs	r3, #12
 8000a9c:	9301      	str	r3, [sp, #4]
 8000a9e:	23c8      	movs	r3, #200	; 0xc8
 8000aa0:	9300      	str	r3, [sp, #0]
 8000aa2:	f640 73ff 	movw	r3, #4095	; 0xfff
 8000aa6:	2220      	movs	r2, #32
 8000aa8:	4904      	ldr	r1, [pc, #16]	; (8000abc <main+0x48>)
 8000aaa:	4805      	ldr	r0, [pc, #20]	; (8000ac0 <main+0x4c>)
 8000aac:	f002 fc62 	bl	8003374 <LED_SEQUENCE_init>


  SCHEDULER_init(&sys);
 8000ab0:	4803      	ldr	r0, [pc, #12]	; (8000ac0 <main+0x4c>)
 8000ab2:	f7ff fc19 	bl	80002e8 <SCHEDULER_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  SCHEDULER_run();
 8000ab6:	f7ff fc29 	bl	800030c <SCHEDULER_run>
 8000aba:	e7fc      	b.n	8000ab6 <main+0x42>
 8000abc:	40010800 	.word	0x40010800
 8000ac0:	200004a8 	.word	0x200004a8

08000ac4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b090      	sub	sp, #64	; 0x40
 8000ac8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aca:	f107 0318 	add.w	r3, r7, #24
 8000ace:	2228      	movs	r2, #40	; 0x28
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 fd0f 	bl	80034f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aea:	2301      	movs	r3, #1
 8000aec:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000aee:	2310      	movs	r3, #16
 8000af0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af2:	2302      	movs	r3, #2
 8000af4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000af6:	2300      	movs	r3, #0
 8000af8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000afa:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000afe:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	f107 0318 	add.w	r3, r7, #24
 8000b04:	4618      	mov	r0, r3
 8000b06:	f000 ffff 	bl	8001b08 <HAL_RCC_OscConfig>
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	d001      	beq.n	8000b14 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000b10:	f000 f82b 	bl	8000b6a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b14:	230f      	movs	r3, #15
 8000b16:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b24:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2a:	1d3b      	adds	r3, r7, #4
 8000b2c:	2102      	movs	r1, #2
 8000b2e:	4618      	mov	r0, r3
 8000b30:	f001 fa6a 	bl	8002008 <HAL_RCC_ClockConfig>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000b3a:	f000 f816 	bl	8000b6a <Error_Handler>
  }
}
 8000b3e:	bf00      	nop
 8000b40:	3740      	adds	r7, #64	; 0x40
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}

08000b46 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8000b46:	b480      	push	{r7}
 8000b48:	b083      	sub	sp, #12
 8000b4a:	af00      	add	r7, sp, #0
 8000b4c:	6078      	str	r0, [r7, #4]
	UNUSED(huart);


}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bc80      	pop	{r7}
 8000b56:	4770      	bx	lr

08000b58 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b083      	sub	sp, #12
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
	UNUSED(htim);
}
 8000b60:	bf00      	nop
 8000b62:	370c      	adds	r7, #12
 8000b64:	46bd      	mov	sp, r7
 8000b66:	bc80      	pop	{r7}
 8000b68:	4770      	bx	lr

08000b6a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bc80      	pop	{r7}
 8000b74:	4770      	bx	lr
	...

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b085      	sub	sp, #20
 8000b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b7e:	4b15      	ldr	r3, [pc, #84]	; (8000bd4 <HAL_MspInit+0x5c>)
 8000b80:	699b      	ldr	r3, [r3, #24]
 8000b82:	4a14      	ldr	r2, [pc, #80]	; (8000bd4 <HAL_MspInit+0x5c>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6193      	str	r3, [r2, #24]
 8000b8a:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <HAL_MspInit+0x5c>)
 8000b8c:	699b      	ldr	r3, [r3, #24]
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <HAL_MspInit+0x5c>)
 8000b98:	69db      	ldr	r3, [r3, #28]
 8000b9a:	4a0e      	ldr	r2, [pc, #56]	; (8000bd4 <HAL_MspInit+0x5c>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ba0:	61d3      	str	r3, [r2, #28]
 8000ba2:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <HAL_MspInit+0x5c>)
 8000ba4:	69db      	ldr	r3, [r3, #28]
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000baa:	607b      	str	r3, [r7, #4]
 8000bac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000bae:	4b0a      	ldr	r3, [pc, #40]	; (8000bd8 <HAL_MspInit+0x60>)
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	60fb      	str	r3, [r7, #12]
 8000bb4:	68fb      	ldr	r3, [r7, #12]
 8000bb6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000bba:	60fb      	str	r3, [r7, #12]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4a04      	ldr	r2, [pc, #16]	; (8000bd8 <HAL_MspInit+0x60>)
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bca:	bf00      	nop
 8000bcc:	3714      	adds	r7, #20
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bc80      	pop	{r7}
 8000bd2:	4770      	bx	lr
 8000bd4:	40021000 	.word	0x40021000
 8000bd8:	40010000 	.word	0x40010000

08000bdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bc80      	pop	{r7}
 8000be6:	4770      	bx	lr

08000be8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bec:	e7fe      	b.n	8000bec <HardFault_Handler+0x4>

08000bee <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bee:	b480      	push	{r7}
 8000bf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf2:	e7fe      	b.n	8000bf2 <MemManage_Handler+0x4>

08000bf4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <BusFault_Handler+0x4>

08000bfa <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <UsageFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bc80      	pop	{r7}
 8000c0a:	4770      	bx	lr

08000c0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bc80      	pop	{r7}
 8000c16:	4770      	bx	lr

08000c18 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bc80      	pop	{r7}
 8000c22:	4770      	bx	lr

08000c24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c28:	f000 f9c4 	bl	8000fb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8000c34:	4802      	ldr	r0, [pc, #8]	; (8000c40 <DMA1_Channel6_IRQHandler+0x10>)
 8000c36:	f000 fbb7 	bl	80013a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	200003cc 	.word	0x200003cc

08000c44 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8000c48:	4802      	ldr	r0, [pc, #8]	; (8000c54 <DMA1_Channel7_IRQHandler+0x10>)
 8000c4a:	f000 fbad 	bl	80013a8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000464 	.word	0x20000464

08000c58 <TIM1_UP_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt.
  */
void TIM1_UP_IRQHandler(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_IRQn 0 */

  /* USER CODE END TIM1_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000c5c:	4802      	ldr	r0, [pc, #8]	; (8000c68 <TIM1_UP_IRQHandler+0x10>)
 8000c5e:	f001 fbbe 	bl	80023de <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_IRQn 1 */

  /* USER CODE END TIM1_UP_IRQn 1 */
}
 8000c62:	bf00      	nop
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200004c4 	.word	0x200004c4

08000c6c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c70:	4802      	ldr	r0, [pc, #8]	; (8000c7c <USART2_IRQHandler+0x10>)
 8000c72:	f002 f87d 	bl	8002d70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	2000050c 	.word	0x2000050c

08000c80 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b086      	sub	sp, #24
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c88:	4a14      	ldr	r2, [pc, #80]	; (8000cdc <_sbrk+0x5c>)
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <_sbrk+0x60>)
 8000c8c:	1ad3      	subs	r3, r2, r3
 8000c8e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c94:	4b13      	ldr	r3, [pc, #76]	; (8000ce4 <_sbrk+0x64>)
 8000c96:	681b      	ldr	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d102      	bne.n	8000ca2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c9c:	4b11      	ldr	r3, [pc, #68]	; (8000ce4 <_sbrk+0x64>)
 8000c9e:	4a12      	ldr	r2, [pc, #72]	; (8000ce8 <_sbrk+0x68>)
 8000ca0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ca2:	4b10      	ldr	r3, [pc, #64]	; (8000ce4 <_sbrk+0x64>)
 8000ca4:	681a      	ldr	r2, [r3, #0]
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	4413      	add	r3, r2
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	d207      	bcs.n	8000cc0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cb0:	f002 fbde 	bl	8003470 <__errno>
 8000cb4:	4602      	mov	r2, r0
 8000cb6:	230c      	movs	r3, #12
 8000cb8:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cba:	f04f 33ff 	mov.w	r3, #4294967295
 8000cbe:	e009      	b.n	8000cd4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cc0:	4b08      	ldr	r3, [pc, #32]	; (8000ce4 <_sbrk+0x64>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cc6:	4b07      	ldr	r3, [pc, #28]	; (8000ce4 <_sbrk+0x64>)
 8000cc8:	681a      	ldr	r2, [r3, #0]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	4413      	add	r3, r2
 8000cce:	4a05      	ldr	r2, [pc, #20]	; (8000ce4 <_sbrk+0x64>)
 8000cd0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cd2:	68fb      	ldr	r3, [r7, #12]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	3718      	adds	r7, #24
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20005000 	.word	0x20005000
 8000ce0:	00000400 	.word	0x00000400
 8000ce4:	200003bc 	.word	0x200003bc
 8000ce8:	20000558 	.word	0x20000558

08000cec <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cf0:	bf00      	nop
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bc80      	pop	{r7}
 8000cf6:	4770      	bx	lr

08000cf8 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cfe:	f107 0308 	add.w	r3, r7, #8
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d0c:	463b      	mov	r3, r7
 8000d0e:	2200      	movs	r2, #0
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	605a      	str	r2, [r3, #4]

  htim1.Instance = TIM1;
 8000d14:	4b1e      	ldr	r3, [pc, #120]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d16:	4a1f      	ldr	r2, [pc, #124]	; (8000d94 <MX_TIM1_Init+0x9c>)
 8000d18:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8000d1a:	4b1d      	ldr	r3, [pc, #116]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d1c:	223f      	movs	r2, #63	; 0x3f
 8000d1e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d20:	4b1b      	ldr	r3, [pc, #108]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 999;
 8000d26:	4b1a      	ldr	r3, [pc, #104]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d28:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d2c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d34:	4b16      	ldr	r3, [pc, #88]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d3c:	2280      	movs	r2, #128	; 0x80
 8000d3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d40:	4813      	ldr	r0, [pc, #76]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d42:	f001 fafd 	bl	8002340 <HAL_TIM_Base_Init>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000d4c:	f7ff ff0d 	bl	8000b6a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d56:	f107 0308 	add.w	r3, r7, #8
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	480c      	ldr	r0, [pc, #48]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d5e:	f001 fc46 	bl	80025ee <HAL_TIM_ConfigClockSource>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d001      	beq.n	8000d6c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000d68:	f7ff feff 	bl	8000b6a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d70:	2300      	movs	r3, #0
 8000d72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d74:	463b      	mov	r3, r7
 8000d76:	4619      	mov	r1, r3
 8000d78:	4805      	ldr	r0, [pc, #20]	; (8000d90 <MX_TIM1_Init+0x98>)
 8000d7a:	f001 fe0b 	bl	8002994 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000d84:	f7ff fef1 	bl	8000b6a <Error_Handler>
  }

}
 8000d88:	bf00      	nop
 8000d8a:	3718      	adds	r7, #24
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	200004c4 	.word	0x200004c4
 8000d94:	40012c00 	.word	0x40012c00

08000d98 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a0d      	ldr	r2, [pc, #52]	; (8000ddc <HAL_TIM_Base_MspInit+0x44>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d113      	bne.n	8000dd2 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_TIM_Base_MspInit+0x48>)
 8000dac:	699b      	ldr	r3, [r3, #24]
 8000dae:	4a0c      	ldr	r2, [pc, #48]	; (8000de0 <HAL_TIM_Base_MspInit+0x48>)
 8000db0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000db4:	6193      	str	r3, [r2, #24]
 8000db6:	4b0a      	ldr	r3, [pc, #40]	; (8000de0 <HAL_TIM_Base_MspInit+0x48>)
 8000db8:	699b      	ldr	r3, [r3, #24]
 8000dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_IRQn, 0, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	2019      	movs	r0, #25
 8000dc8:	f000 f9e7 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_IRQn);
 8000dcc:	2019      	movs	r0, #25
 8000dce:	f000 fa00 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	40012c00 	.word	0x40012c00
 8000de0:	40021000 	.word	0x40021000

08000de4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 8000de8:	4b11      	ldr	r3, [pc, #68]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dea:	4a12      	ldr	r2, [pc, #72]	; (8000e34 <MX_USART2_UART_Init+0x50>)
 8000dec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 230400;
 8000dee:	4b10      	ldr	r3, [pc, #64]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df0:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 8000df4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000df6:	4b0e      	ldr	r3, [pc, #56]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dfc:	4b0c      	ldr	r3, [pc, #48]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e02:	4b0b      	ldr	r3, [pc, #44]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e08:	4b09      	ldr	r3, [pc, #36]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e0e:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e1a:	4805      	ldr	r0, [pc, #20]	; (8000e30 <MX_USART2_UART_Init+0x4c>)
 8000e1c:	f001 fe2a 	bl	8002a74 <HAL_UART_Init>
 8000e20:	4603      	mov	r3, r0
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000e26:	f7ff fea0 	bl	8000b6a <Error_Handler>
  }

}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	2000050c 	.word	0x2000050c
 8000e34:	40004400 	.word	0x40004400

08000e38 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b088      	sub	sp, #32
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e40:	f107 0310 	add.w	r3, r7, #16
 8000e44:	2200      	movs	r2, #0
 8000e46:	601a      	str	r2, [r3, #0]
 8000e48:	605a      	str	r2, [r3, #4]
 8000e4a:	609a      	str	r2, [r3, #8]
 8000e4c:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART2)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <HAL_UART_MspInit+0x98>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d137      	bne.n	8000ec8 <HAL_UART_MspInit+0x90>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e58:	4b1e      	ldr	r3, [pc, #120]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e5a:	69db      	ldr	r3, [r3, #28]
 8000e5c:	4a1d      	ldr	r2, [pc, #116]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e62:	61d3      	str	r3, [r2, #28]
 8000e64:	4b1b      	ldr	r3, [pc, #108]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e66:	69db      	ldr	r3, [r3, #28]
 8000e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6c:	60fb      	str	r3, [r7, #12]
 8000e6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e70:	4b18      	ldr	r3, [pc, #96]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e72:	699b      	ldr	r3, [r3, #24]
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e76:	f043 0304 	orr.w	r3, r3, #4
 8000e7a:	6193      	str	r3, [r2, #24]
 8000e7c:	4b15      	ldr	r3, [pc, #84]	; (8000ed4 <HAL_UART_MspInit+0x9c>)
 8000e7e:	699b      	ldr	r3, [r3, #24]
 8000e80:	f003 0304 	and.w	r3, r3, #4
 8000e84:	60bb      	str	r3, [r7, #8]
 8000e86:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e88:	2304      	movs	r3, #4
 8000e8a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000e90:	2303      	movs	r3, #3
 8000e92:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e94:	f107 0310 	add.w	r3, r7, #16
 8000e98:	4619      	mov	r1, r3
 8000e9a:	480f      	ldr	r0, [pc, #60]	; (8000ed8 <HAL_UART_MspInit+0xa0>)
 8000e9c:	f000 fb8a 	bl	80015b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000ea0:	2308      	movs	r3, #8
 8000ea2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eac:	f107 0310 	add.w	r3, r7, #16
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <HAL_UART_MspInit+0xa0>)
 8000eb4:	f000 fb7e 	bl	80015b4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	2100      	movs	r1, #0
 8000ebc:	2026      	movs	r0, #38	; 0x26
 8000ebe:	f000 f96c 	bl	800119a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ec2:	2026      	movs	r0, #38	; 0x26
 8000ec4:	f000 f985 	bl	80011d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000ec8:	bf00      	nop
 8000eca:	3720      	adds	r7, #32
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40004400 	.word	0x40004400
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40010800 	.word	0x40010800

08000edc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000edc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000ede:	e003      	b.n	8000ee8 <LoopCopyDataInit>

08000ee0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000ee0:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000ee2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ee4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ee6:	3104      	adds	r1, #4

08000ee8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ee8:	480a      	ldr	r0, [pc, #40]	; (8000f14 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000eea:	4b0b      	ldr	r3, [pc, #44]	; (8000f18 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000eec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000ef0:	d3f6      	bcc.n	8000ee0 <CopyDataInit>
  ldr r2, =_sbss
 8000ef2:	4a0a      	ldr	r2, [pc, #40]	; (8000f1c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000ef4:	e002      	b.n	8000efc <LoopFillZerobss>

08000ef6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000ef6:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000ef8:	f842 3b04 	str.w	r3, [r2], #4

08000efc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000efc:	4b08      	ldr	r3, [pc, #32]	; (8000f20 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000efe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f00:	d3f9      	bcc.n	8000ef6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000f02:	f7ff fef3 	bl	8000cec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f06:	f002 fab9 	bl	800347c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f0a:	f7ff fdb3 	bl	8000a74 <main>
  bx lr
 8000f0e:	4770      	bx	lr
  ldr r3, =_sidata
 8000f10:	08004540 	.word	0x08004540
  ldr r0, =_sdata
 8000f14:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f18:	20000380 	.word	0x20000380
  ldr r2, =_sbss
 8000f1c:	20000380 	.word	0x20000380
  ldr r3, = _ebss
 8000f20:	20000554 	.word	0x20000554

08000f24 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f24:	e7fe      	b.n	8000f24 <ADC1_2_IRQHandler>
	...

08000f28 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f2c:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_Init+0x28>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a07      	ldr	r2, [pc, #28]	; (8000f50 <HAL_Init+0x28>)
 8000f32:	f043 0310 	orr.w	r3, r3, #16
 8000f36:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f38:	2003      	movs	r0, #3
 8000f3a:	f000 f923 	bl	8001184 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f3e:	2000      	movs	r0, #0
 8000f40:	f000 f808 	bl	8000f54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f44:	f7ff fe18 	bl	8000b78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f48:	2300      	movs	r3, #0
}
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40022000 	.word	0x40022000

08000f54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b082      	sub	sp, #8
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_InitTick+0x54>)
 8000f5e:	681a      	ldr	r2, [r3, #0]
 8000f60:	4b12      	ldr	r3, [pc, #72]	; (8000fac <HAL_InitTick+0x58>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 f93b 	bl	80011ee <HAL_SYSTICK_Config>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	e00e      	b.n	8000fa0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	2b0f      	cmp	r3, #15
 8000f86:	d80a      	bhi.n	8000f9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f90:	f000 f903 	bl	800119a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f94:	4a06      	ldr	r2, [pc, #24]	; (8000fb0 <HAL_InitTick+0x5c>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	e000      	b.n	8000fa0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f9e:	2301      	movs	r3, #1
}
 8000fa0:	4618      	mov	r0, r3
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000310 	.word	0x20000310
 8000fac:	20000318 	.word	0x20000318
 8000fb0:	20000314 	.word	0x20000314

08000fb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <HAL_IncTick+0x1c>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a03      	ldr	r2, [pc, #12]	; (8000fd4 <HAL_IncTick+0x20>)
 8000fc6:	6013      	str	r3, [r2, #0]
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	20000318 	.word	0x20000318
 8000fd4:	2000054c 	.word	0x2000054c

08000fd8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
  return uwTick;
 8000fdc:	4b02      	ldr	r3, [pc, #8]	; (8000fe8 <HAL_GetTick+0x10>)
 8000fde:	681b      	ldr	r3, [r3, #0]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bc80      	pop	{r7}
 8000fe6:	4770      	bx	lr
 8000fe8:	2000054c 	.word	0x2000054c

08000fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b085      	sub	sp, #20
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	f003 0307 	and.w	r3, r3, #7
 8000ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ffc:	4b0c      	ldr	r3, [pc, #48]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001008:	4013      	ands	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001014:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001018:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800101c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101e:	4a04      	ldr	r2, [pc, #16]	; (8001030 <__NVIC_SetPriorityGrouping+0x44>)
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	60d3      	str	r3, [r2, #12]
}
 8001024:	bf00      	nop
 8001026:	3714      	adds	r7, #20
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001038:	4b04      	ldr	r3, [pc, #16]	; (800104c <__NVIC_GetPriorityGrouping+0x18>)
 800103a:	68db      	ldr	r3, [r3, #12]
 800103c:	0a1b      	lsrs	r3, r3, #8
 800103e:	f003 0307 	and.w	r3, r3, #7
}
 8001042:	4618      	mov	r0, r3
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr
 800104a:	bf00      	nop
 800104c:	e000ed00 	.word	0xe000ed00

08001050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	4603      	mov	r3, r0
 8001058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800105a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105e:	2b00      	cmp	r3, #0
 8001060:	db0b      	blt.n	800107a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001062:	79fb      	ldrb	r3, [r7, #7]
 8001064:	f003 021f 	and.w	r2, r3, #31
 8001068:	4906      	ldr	r1, [pc, #24]	; (8001084 <__NVIC_EnableIRQ+0x34>)
 800106a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106e:	095b      	lsrs	r3, r3, #5
 8001070:	2001      	movs	r0, #1
 8001072:	fa00 f202 	lsl.w	r2, r0, r2
 8001076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bc80      	pop	{r7}
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	bc80      	pop	{r7}
 800113e:	4770      	bx	lr

08001140 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001150:	d301      	bcc.n	8001156 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001152:	2301      	movs	r3, #1
 8001154:	e00f      	b.n	8001176 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <SysTick_Config+0x40>)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	3b01      	subs	r3, #1
 800115c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800115e:	210f      	movs	r1, #15
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f7ff ff90 	bl	8001088 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <SysTick_Config+0x40>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800116e:	4b04      	ldr	r3, [pc, #16]	; (8001180 <SysTick_Config+0x40>)
 8001170:	2207      	movs	r2, #7
 8001172:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001174:	2300      	movs	r3, #0
}
 8001176:	4618      	mov	r0, r3
 8001178:	3708      	adds	r7, #8
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	e000e010 	.word	0xe000e010

08001184 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f7ff ff2d 	bl	8000fec <__NVIC_SetPriorityGrouping>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800119a:	b580      	push	{r7, lr}
 800119c:	b086      	sub	sp, #24
 800119e:	af00      	add	r7, sp, #0
 80011a0:	4603      	mov	r3, r0
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	607a      	str	r2, [r7, #4]
 80011a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011ac:	f7ff ff42 	bl	8001034 <__NVIC_GetPriorityGrouping>
 80011b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	68b9      	ldr	r1, [r7, #8]
 80011b6:	6978      	ldr	r0, [r7, #20]
 80011b8:	f7ff ff90 	bl	80010dc <NVIC_EncodePriority>
 80011bc:	4602      	mov	r2, r0
 80011be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011c2:	4611      	mov	r1, r2
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff ff5f 	bl	8001088 <__NVIC_SetPriority>
}
 80011ca:	bf00      	nop
 80011cc:	3718      	adds	r7, #24
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}

080011d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011d2:	b580      	push	{r7, lr}
 80011d4:	b082      	sub	sp, #8
 80011d6:	af00      	add	r7, sp, #0
 80011d8:	4603      	mov	r3, r0
 80011da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	4618      	mov	r0, r3
 80011e2:	f7ff ff35 	bl	8001050 <__NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011f6:	6878      	ldr	r0, [r7, #4]
 80011f8:	f7ff ffa2 	bl	8001140 <SysTick_Config>
 80011fc:	4603      	mov	r3, r0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	3708      	adds	r7, #8
 8001202:	46bd      	mov	sp, r7
 8001204:	bd80      	pop	{r7, pc}
	...

08001208 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001208:	b480      	push	{r7}
 800120a:	b085      	sub	sp, #20
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001210:	2300      	movs	r3, #0
 8001212:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2b00      	cmp	r3, #0
 8001218:	d101      	bne.n	800121e <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 800121a:	2301      	movs	r3, #1
 800121c:	e043      	b.n	80012a6 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	461a      	mov	r2, r3
 8001224:	4b22      	ldr	r3, [pc, #136]	; (80012b0 <HAL_DMA_Init+0xa8>)
 8001226:	4413      	add	r3, r2
 8001228:	4a22      	ldr	r2, [pc, #136]	; (80012b4 <HAL_DMA_Init+0xac>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	091b      	lsrs	r3, r3, #4
 8001230:	009a      	lsls	r2, r3, #2
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	4a1f      	ldr	r2, [pc, #124]	; (80012b8 <HAL_DMA_Init+0xb0>)
 800123a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2202      	movs	r2, #2
 8001240:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001252:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8001256:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001260:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	68db      	ldr	r3, [r3, #12]
 8001266:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800126c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001278:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	69db      	ldr	r3, [r3, #28]
 800127e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001280:	68fa      	ldr	r2, [r7, #12]
 8001282:	4313      	orrs	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	68fa      	ldr	r2, [r7, #12]
 800128c:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2200      	movs	r2, #0
 8001292:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2201      	movs	r2, #1
 8001298:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2200      	movs	r2, #0
 80012a0:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80012a4:	2300      	movs	r3, #0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3714      	adds	r7, #20
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bc80      	pop	{r7}
 80012ae:	4770      	bx	lr
 80012b0:	bffdfff8 	.word	0xbffdfff8
 80012b4:	cccccccd 	.word	0xcccccccd
 80012b8:	40020000 	.word	0x40020000

080012bc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012c4:	2300      	movs	r3, #0
 80012c6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80012ce:	2b02      	cmp	r3, #2
 80012d0:	d005      	beq.n	80012de <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2204      	movs	r2, #4
 80012d6:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80012d8:	2301      	movs	r3, #1
 80012da:	73fb      	strb	r3, [r7, #15]
 80012dc:	e051      	b.n	8001382 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 020e 	bic.w	r2, r2, #14
 80012ec:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 0201 	bic.w	r2, r2, #1
 80012fc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a22      	ldr	r2, [pc, #136]	; (800138c <HAL_DMA_Abort_IT+0xd0>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d029      	beq.n	800135c <HAL_DMA_Abort_IT+0xa0>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a20      	ldr	r2, [pc, #128]	; (8001390 <HAL_DMA_Abort_IT+0xd4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d022      	beq.n	8001358 <HAL_DMA_Abort_IT+0x9c>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a1f      	ldr	r2, [pc, #124]	; (8001394 <HAL_DMA_Abort_IT+0xd8>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d01a      	beq.n	8001352 <HAL_DMA_Abort_IT+0x96>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	4a1d      	ldr	r2, [pc, #116]	; (8001398 <HAL_DMA_Abort_IT+0xdc>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d012      	beq.n	800134c <HAL_DMA_Abort_IT+0x90>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	4a1c      	ldr	r2, [pc, #112]	; (800139c <HAL_DMA_Abort_IT+0xe0>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d00a      	beq.n	8001346 <HAL_DMA_Abort_IT+0x8a>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a1a      	ldr	r2, [pc, #104]	; (80013a0 <HAL_DMA_Abort_IT+0xe4>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d102      	bne.n	8001340 <HAL_DMA_Abort_IT+0x84>
 800133a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800133e:	e00e      	b.n	800135e <HAL_DMA_Abort_IT+0xa2>
 8001340:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001344:	e00b      	b.n	800135e <HAL_DMA_Abort_IT+0xa2>
 8001346:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800134a:	e008      	b.n	800135e <HAL_DMA_Abort_IT+0xa2>
 800134c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001350:	e005      	b.n	800135e <HAL_DMA_Abort_IT+0xa2>
 8001352:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001356:	e002      	b.n	800135e <HAL_DMA_Abort_IT+0xa2>
 8001358:	2310      	movs	r3, #16
 800135a:	e000      	b.n	800135e <HAL_DMA_Abort_IT+0xa2>
 800135c:	2301      	movs	r3, #1
 800135e:	4a11      	ldr	r2, [pc, #68]	; (80013a4 <HAL_DMA_Abort_IT+0xe8>)
 8001360:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	2201      	movs	r2, #1
 8001366:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	4798      	blx	r3
    } 
  }
  return status;
 8001382:	7bfb      	ldrb	r3, [r7, #15]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3710      	adds	r7, #16
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40020008 	.word	0x40020008
 8001390:	4002001c 	.word	0x4002001c
 8001394:	40020030 	.word	0x40020030
 8001398:	40020044 	.word	0x40020044
 800139c:	40020058 	.word	0x40020058
 80013a0:	4002006c 	.word	0x4002006c
 80013a4:	40020000 	.word	0x40020000

080013a8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	2204      	movs	r2, #4
 80013c6:	409a      	lsls	r2, r3
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	4013      	ands	r3, r2
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d04f      	beq.n	8001470 <HAL_DMA_IRQHandler+0xc8>
 80013d0:	68bb      	ldr	r3, [r7, #8]
 80013d2:	f003 0304 	and.w	r3, r3, #4
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d04a      	beq.n	8001470 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0320 	and.w	r3, r3, #32
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d107      	bne.n	80013f8 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	681a      	ldr	r2, [r3, #0]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	f022 0204 	bic.w	r2, r2, #4
 80013f6:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	4a66      	ldr	r2, [pc, #408]	; (8001598 <HAL_DMA_IRQHandler+0x1f0>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d029      	beq.n	8001456 <HAL_DMA_IRQHandler+0xae>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4a65      	ldr	r2, [pc, #404]	; (800159c <HAL_DMA_IRQHandler+0x1f4>)
 8001408:	4293      	cmp	r3, r2
 800140a:	d022      	beq.n	8001452 <HAL_DMA_IRQHandler+0xaa>
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a63      	ldr	r2, [pc, #396]	; (80015a0 <HAL_DMA_IRQHandler+0x1f8>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d01a      	beq.n	800144c <HAL_DMA_IRQHandler+0xa4>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a62      	ldr	r2, [pc, #392]	; (80015a4 <HAL_DMA_IRQHandler+0x1fc>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d012      	beq.n	8001446 <HAL_DMA_IRQHandler+0x9e>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a60      	ldr	r2, [pc, #384]	; (80015a8 <HAL_DMA_IRQHandler+0x200>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d00a      	beq.n	8001440 <HAL_DMA_IRQHandler+0x98>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a5f      	ldr	r2, [pc, #380]	; (80015ac <HAL_DMA_IRQHandler+0x204>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d102      	bne.n	800143a <HAL_DMA_IRQHandler+0x92>
 8001434:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001438:	e00e      	b.n	8001458 <HAL_DMA_IRQHandler+0xb0>
 800143a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800143e:	e00b      	b.n	8001458 <HAL_DMA_IRQHandler+0xb0>
 8001440:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8001444:	e008      	b.n	8001458 <HAL_DMA_IRQHandler+0xb0>
 8001446:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800144a:	e005      	b.n	8001458 <HAL_DMA_IRQHandler+0xb0>
 800144c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001450:	e002      	b.n	8001458 <HAL_DMA_IRQHandler+0xb0>
 8001452:	2340      	movs	r3, #64	; 0x40
 8001454:	e000      	b.n	8001458 <HAL_DMA_IRQHandler+0xb0>
 8001456:	2304      	movs	r3, #4
 8001458:	4a55      	ldr	r2, [pc, #340]	; (80015b0 <HAL_DMA_IRQHandler+0x208>)
 800145a:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	2b00      	cmp	r3, #0
 8001462:	f000 8094 	beq.w	800158e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 800146e:	e08e      	b.n	800158e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001474:	2202      	movs	r2, #2
 8001476:	409a      	lsls	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4013      	ands	r3, r2
 800147c:	2b00      	cmp	r3, #0
 800147e:	d056      	beq.n	800152e <HAL_DMA_IRQHandler+0x186>
 8001480:	68bb      	ldr	r3, [r7, #8]
 8001482:	f003 0302 	and.w	r3, r3, #2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d051      	beq.n	800152e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0320 	and.w	r3, r3, #32
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10b      	bne.n	80014b0 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f022 020a 	bic.w	r2, r2, #10
 80014a6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2201      	movs	r2, #1
 80014ac:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a38      	ldr	r2, [pc, #224]	; (8001598 <HAL_DMA_IRQHandler+0x1f0>)
 80014b6:	4293      	cmp	r3, r2
 80014b8:	d029      	beq.n	800150e <HAL_DMA_IRQHandler+0x166>
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a37      	ldr	r2, [pc, #220]	; (800159c <HAL_DMA_IRQHandler+0x1f4>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	d022      	beq.n	800150a <HAL_DMA_IRQHandler+0x162>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4a35      	ldr	r2, [pc, #212]	; (80015a0 <HAL_DMA_IRQHandler+0x1f8>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d01a      	beq.n	8001504 <HAL_DMA_IRQHandler+0x15c>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	4a34      	ldr	r2, [pc, #208]	; (80015a4 <HAL_DMA_IRQHandler+0x1fc>)
 80014d4:	4293      	cmp	r3, r2
 80014d6:	d012      	beq.n	80014fe <HAL_DMA_IRQHandler+0x156>
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a32      	ldr	r2, [pc, #200]	; (80015a8 <HAL_DMA_IRQHandler+0x200>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d00a      	beq.n	80014f8 <HAL_DMA_IRQHandler+0x150>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	4a31      	ldr	r2, [pc, #196]	; (80015ac <HAL_DMA_IRQHandler+0x204>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d102      	bne.n	80014f2 <HAL_DMA_IRQHandler+0x14a>
 80014ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014f0:	e00e      	b.n	8001510 <HAL_DMA_IRQHandler+0x168>
 80014f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014f6:	e00b      	b.n	8001510 <HAL_DMA_IRQHandler+0x168>
 80014f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014fc:	e008      	b.n	8001510 <HAL_DMA_IRQHandler+0x168>
 80014fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001502:	e005      	b.n	8001510 <HAL_DMA_IRQHandler+0x168>
 8001504:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001508:	e002      	b.n	8001510 <HAL_DMA_IRQHandler+0x168>
 800150a:	2320      	movs	r3, #32
 800150c:	e000      	b.n	8001510 <HAL_DMA_IRQHandler+0x168>
 800150e:	2302      	movs	r3, #2
 8001510:	4a27      	ldr	r2, [pc, #156]	; (80015b0 <HAL_DMA_IRQHandler+0x208>)
 8001512:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2200      	movs	r2, #0
 8001518:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001520:	2b00      	cmp	r3, #0
 8001522:	d034      	beq.n	800158e <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800152c:	e02f      	b.n	800158e <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001532:	2208      	movs	r2, #8
 8001534:	409a      	lsls	r2, r3
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d028      	beq.n	8001590 <HAL_DMA_IRQHandler+0x1e8>
 800153e:	68bb      	ldr	r3, [r7, #8]
 8001540:	f003 0308 	and.w	r3, r3, #8
 8001544:	2b00      	cmp	r3, #0
 8001546:	d023      	beq.n	8001590 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f022 020e 	bic.w	r2, r2, #14
 8001556:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001560:	2101      	movs	r1, #1
 8001562:	fa01 f202 	lsl.w	r2, r1, r2
 8001566:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2201      	movs	r2, #1
 8001572:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2200      	movs	r2, #0
 800157a:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001582:	2b00      	cmp	r3, #0
 8001584:	d004      	beq.n	8001590 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158a:	6878      	ldr	r0, [r7, #4]
 800158c:	4798      	blx	r3
    }
  }
  return;
 800158e:	bf00      	nop
 8001590:	bf00      	nop
}
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40020008 	.word	0x40020008
 800159c:	4002001c 	.word	0x4002001c
 80015a0:	40020030 	.word	0x40020030
 80015a4:	40020044 	.word	0x40020044
 80015a8:	40020058 	.word	0x40020058
 80015ac:	4002006c 	.word	0x4002006c
 80015b0:	40020000 	.word	0x40020000

080015b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b08b      	sub	sp, #44	; 0x2c
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
 80015bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015be:	2300      	movs	r3, #0
 80015c0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80015c2:	2300      	movs	r3, #0
 80015c4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015c6:	e127      	b.n	8001818 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80015c8:	2201      	movs	r2, #1
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	69fa      	ldr	r2, [r7, #28]
 80015d8:	4013      	ands	r3, r2
 80015da:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	69fb      	ldr	r3, [r7, #28]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	f040 8116 	bne.w	8001812 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	685b      	ldr	r3, [r3, #4]
 80015ea:	2b12      	cmp	r3, #18
 80015ec:	d034      	beq.n	8001658 <HAL_GPIO_Init+0xa4>
 80015ee:	2b12      	cmp	r3, #18
 80015f0:	d80d      	bhi.n	800160e <HAL_GPIO_Init+0x5a>
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d02b      	beq.n	800164e <HAL_GPIO_Init+0x9a>
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d804      	bhi.n	8001604 <HAL_GPIO_Init+0x50>
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d031      	beq.n	8001662 <HAL_GPIO_Init+0xae>
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d01c      	beq.n	800163c <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001602:	e048      	b.n	8001696 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001604:	2b03      	cmp	r3, #3
 8001606:	d043      	beq.n	8001690 <HAL_GPIO_Init+0xdc>
 8001608:	2b11      	cmp	r3, #17
 800160a:	d01b      	beq.n	8001644 <HAL_GPIO_Init+0x90>
          break;
 800160c:	e043      	b.n	8001696 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800160e:	4a89      	ldr	r2, [pc, #548]	; (8001834 <HAL_GPIO_Init+0x280>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d026      	beq.n	8001662 <HAL_GPIO_Init+0xae>
 8001614:	4a87      	ldr	r2, [pc, #540]	; (8001834 <HAL_GPIO_Init+0x280>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d806      	bhi.n	8001628 <HAL_GPIO_Init+0x74>
 800161a:	4a87      	ldr	r2, [pc, #540]	; (8001838 <HAL_GPIO_Init+0x284>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d020      	beq.n	8001662 <HAL_GPIO_Init+0xae>
 8001620:	4a86      	ldr	r2, [pc, #536]	; (800183c <HAL_GPIO_Init+0x288>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d01d      	beq.n	8001662 <HAL_GPIO_Init+0xae>
          break;
 8001626:	e036      	b.n	8001696 <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001628:	4a85      	ldr	r2, [pc, #532]	; (8001840 <HAL_GPIO_Init+0x28c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d019      	beq.n	8001662 <HAL_GPIO_Init+0xae>
 800162e:	4a85      	ldr	r2, [pc, #532]	; (8001844 <HAL_GPIO_Init+0x290>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d016      	beq.n	8001662 <HAL_GPIO_Init+0xae>
 8001634:	4a84      	ldr	r2, [pc, #528]	; (8001848 <HAL_GPIO_Init+0x294>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d013      	beq.n	8001662 <HAL_GPIO_Init+0xae>
          break;
 800163a:	e02c      	b.n	8001696 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	623b      	str	r3, [r7, #32]
          break;
 8001642:	e028      	b.n	8001696 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	3304      	adds	r3, #4
 800164a:	623b      	str	r3, [r7, #32]
          break;
 800164c:	e023      	b.n	8001696 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	68db      	ldr	r3, [r3, #12]
 8001652:	3308      	adds	r3, #8
 8001654:	623b      	str	r3, [r7, #32]
          break;
 8001656:	e01e      	b.n	8001696 <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	68db      	ldr	r3, [r3, #12]
 800165c:	330c      	adds	r3, #12
 800165e:	623b      	str	r3, [r7, #32]
          break;
 8001660:	e019      	b.n	8001696 <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d102      	bne.n	8001670 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800166a:	2304      	movs	r3, #4
 800166c:	623b      	str	r3, [r7, #32]
          break;
 800166e:	e012      	b.n	8001696 <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	689b      	ldr	r3, [r3, #8]
 8001674:	2b01      	cmp	r3, #1
 8001676:	d105      	bne.n	8001684 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001678:	2308      	movs	r3, #8
 800167a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	69fa      	ldr	r2, [r7, #28]
 8001680:	611a      	str	r2, [r3, #16]
          break;
 8001682:	e008      	b.n	8001696 <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001684:	2308      	movs	r3, #8
 8001686:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69fa      	ldr	r2, [r7, #28]
 800168c:	615a      	str	r2, [r3, #20]
          break;
 800168e:	e002      	b.n	8001696 <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
          break;
 8001694:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2bff      	cmp	r3, #255	; 0xff
 800169a:	d801      	bhi.n	80016a0 <HAL_GPIO_Init+0xec>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	e001      	b.n	80016a4 <HAL_GPIO_Init+0xf0>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	3304      	adds	r3, #4
 80016a4:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80016a6:	69bb      	ldr	r3, [r7, #24]
 80016a8:	2bff      	cmp	r3, #255	; 0xff
 80016aa:	d802      	bhi.n	80016b2 <HAL_GPIO_Init+0xfe>
 80016ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ae:	009b      	lsls	r3, r3, #2
 80016b0:	e002      	b.n	80016b8 <HAL_GPIO_Init+0x104>
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	3b08      	subs	r3, #8
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	210f      	movs	r1, #15
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43db      	mvns	r3, r3
 80016c8:	401a      	ands	r2, r3
 80016ca:	6a39      	ldr	r1, [r7, #32]
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	fa01 f303 	lsl.w	r3, r1, r3
 80016d2:	431a      	orrs	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 8096 	beq.w	8001812 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80016e6:	4b59      	ldr	r3, [pc, #356]	; (800184c <HAL_GPIO_Init+0x298>)
 80016e8:	699b      	ldr	r3, [r3, #24]
 80016ea:	4a58      	ldr	r2, [pc, #352]	; (800184c <HAL_GPIO_Init+0x298>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6193      	str	r3, [r2, #24]
 80016f2:	4b56      	ldr	r3, [pc, #344]	; (800184c <HAL_GPIO_Init+0x298>)
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	60bb      	str	r3, [r7, #8]
 80016fc:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016fe:	4a54      	ldr	r2, [pc, #336]	; (8001850 <HAL_GPIO_Init+0x29c>)
 8001700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001702:	089b      	lsrs	r3, r3, #2
 8001704:	3302      	adds	r3, #2
 8001706:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800170a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800170c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800170e:	f003 0303 	and.w	r3, r3, #3
 8001712:	009b      	lsls	r3, r3, #2
 8001714:	220f      	movs	r2, #15
 8001716:	fa02 f303 	lsl.w	r3, r2, r3
 800171a:	43db      	mvns	r3, r3
 800171c:	68fa      	ldr	r2, [r7, #12]
 800171e:	4013      	ands	r3, r2
 8001720:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a4b      	ldr	r2, [pc, #300]	; (8001854 <HAL_GPIO_Init+0x2a0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d013      	beq.n	8001752 <HAL_GPIO_Init+0x19e>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a4a      	ldr	r2, [pc, #296]	; (8001858 <HAL_GPIO_Init+0x2a4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d00d      	beq.n	800174e <HAL_GPIO_Init+0x19a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a49      	ldr	r2, [pc, #292]	; (800185c <HAL_GPIO_Init+0x2a8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d007      	beq.n	800174a <HAL_GPIO_Init+0x196>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a48      	ldr	r2, [pc, #288]	; (8001860 <HAL_GPIO_Init+0x2ac>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d101      	bne.n	8001746 <HAL_GPIO_Init+0x192>
 8001742:	2303      	movs	r3, #3
 8001744:	e006      	b.n	8001754 <HAL_GPIO_Init+0x1a0>
 8001746:	2304      	movs	r3, #4
 8001748:	e004      	b.n	8001754 <HAL_GPIO_Init+0x1a0>
 800174a:	2302      	movs	r3, #2
 800174c:	e002      	b.n	8001754 <HAL_GPIO_Init+0x1a0>
 800174e:	2301      	movs	r3, #1
 8001750:	e000      	b.n	8001754 <HAL_GPIO_Init+0x1a0>
 8001752:	2300      	movs	r3, #0
 8001754:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001756:	f002 0203 	and.w	r2, r2, #3
 800175a:	0092      	lsls	r2, r2, #2
 800175c:	4093      	lsls	r3, r2
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001764:	493a      	ldr	r1, [pc, #232]	; (8001850 <HAL_GPIO_Init+0x29c>)
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	089b      	lsrs	r3, r3, #2
 800176a:	3302      	adds	r3, #2
 800176c:	68fa      	ldr	r2, [r7, #12]
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d006      	beq.n	800178c <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800177e:	4b39      	ldr	r3, [pc, #228]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	4938      	ldr	r1, [pc, #224]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 8001784:	69bb      	ldr	r3, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	600b      	str	r3, [r1, #0]
 800178a:	e006      	b.n	800179a <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800178c:	4b35      	ldr	r3, [pc, #212]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	69bb      	ldr	r3, [r7, #24]
 8001792:	43db      	mvns	r3, r3
 8001794:	4933      	ldr	r1, [pc, #204]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 8001796:	4013      	ands	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685b      	ldr	r3, [r3, #4]
 800179e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d006      	beq.n	80017b4 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80017a6:	4b2f      	ldr	r3, [pc, #188]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 80017a8:	685a      	ldr	r2, [r3, #4]
 80017aa:	492e      	ldr	r1, [pc, #184]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
 80017b2:	e006      	b.n	80017c2 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80017b4:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 80017b6:	685a      	ldr	r2, [r3, #4]
 80017b8:	69bb      	ldr	r3, [r7, #24]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4929      	ldr	r1, [pc, #164]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 80017be:	4013      	ands	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d006      	beq.n	80017dc <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80017ce:	4b25      	ldr	r3, [pc, #148]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 80017d0:	689a      	ldr	r2, [r3, #8]
 80017d2:	4924      	ldr	r1, [pc, #144]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	608b      	str	r3, [r1, #8]
 80017da:	e006      	b.n	80017ea <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80017dc:	4b21      	ldr	r3, [pc, #132]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 80017de:	689a      	ldr	r2, [r3, #8]
 80017e0:	69bb      	ldr	r3, [r7, #24]
 80017e2:	43db      	mvns	r3, r3
 80017e4:	491f      	ldr	r1, [pc, #124]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 80017e6:	4013      	ands	r3, r2
 80017e8:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d006      	beq.n	8001804 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80017f6:	4b1b      	ldr	r3, [pc, #108]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 80017f8:	68da      	ldr	r2, [r3, #12]
 80017fa:	491a      	ldr	r1, [pc, #104]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 80017fc:	69bb      	ldr	r3, [r7, #24]
 80017fe:	4313      	orrs	r3, r2
 8001800:	60cb      	str	r3, [r1, #12]
 8001802:	e006      	b.n	8001812 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001804:	4b17      	ldr	r3, [pc, #92]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 8001806:	68da      	ldr	r2, [r3, #12]
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	43db      	mvns	r3, r3
 800180c:	4915      	ldr	r1, [pc, #84]	; (8001864 <HAL_GPIO_Init+0x2b0>)
 800180e:	4013      	ands	r3, r2
 8001810:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001814:	3301      	adds	r3, #1
 8001816:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681a      	ldr	r2, [r3, #0]
 800181c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181e:	fa22 f303 	lsr.w	r3, r2, r3
 8001822:	2b00      	cmp	r3, #0
 8001824:	f47f aed0 	bne.w	80015c8 <HAL_GPIO_Init+0x14>
  }
}
 8001828:	bf00      	nop
 800182a:	372c      	adds	r7, #44	; 0x2c
 800182c:	46bd      	mov	sp, r7
 800182e:	bc80      	pop	{r7}
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	10210000 	.word	0x10210000
 8001838:	10110000 	.word	0x10110000
 800183c:	10120000 	.word	0x10120000
 8001840:	10310000 	.word	0x10310000
 8001844:	10320000 	.word	0x10320000
 8001848:	10220000 	.word	0x10220000
 800184c:	40021000 	.word	0x40021000
 8001850:	40010000 	.word	0x40010000
 8001854:	40010800 	.word	0x40010800
 8001858:	40010c00 	.word	0x40010c00
 800185c:	40011000 	.word	0x40011000
 8001860:	40011400 	.word	0x40011400
 8001864:	40010400 	.word	0x40010400

08001868 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001868:	b480      	push	{r7}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	6078      	str	r0, [r7, #4]
 8001870:	460b      	mov	r3, r1
 8001872:	807b      	strh	r3, [r7, #2]
 8001874:	4613      	mov	r3, r2
 8001876:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001878:	787b      	ldrb	r3, [r7, #1]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d003      	beq.n	8001886 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800187e:	887a      	ldrh	r2, [r7, #2]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001884:	e003      	b.n	800188e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001886:	887b      	ldrh	r3, [r7, #2]
 8001888:	041a      	lsls	r2, r3, #16
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	611a      	str	r2, [r3, #16]
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e11f      	b.n	8001aea <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d106      	bne.n	80018c4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff f846 	bl	8000950 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2224      	movs	r2, #36	; 0x24
 80018c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f022 0201 	bic.w	r2, r2, #1
 80018da:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ea:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018fa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018fc:	f000 fcda 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 8001900:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	4a7b      	ldr	r2, [pc, #492]	; (8001af4 <HAL_I2C_Init+0x25c>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d807      	bhi.n	800191c <HAL_I2C_Init+0x84>
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4a7a      	ldr	r2, [pc, #488]	; (8001af8 <HAL_I2C_Init+0x260>)
 8001910:	4293      	cmp	r3, r2
 8001912:	bf94      	ite	ls
 8001914:	2301      	movls	r3, #1
 8001916:	2300      	movhi	r3, #0
 8001918:	b2db      	uxtb	r3, r3
 800191a:	e006      	b.n	800192a <HAL_I2C_Init+0x92>
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4a77      	ldr	r2, [pc, #476]	; (8001afc <HAL_I2C_Init+0x264>)
 8001920:	4293      	cmp	r3, r2
 8001922:	bf94      	ite	ls
 8001924:	2301      	movls	r3, #1
 8001926:	2300      	movhi	r3, #0
 8001928:	b2db      	uxtb	r3, r3
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e0db      	b.n	8001aea <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	4a72      	ldr	r2, [pc, #456]	; (8001b00 <HAL_I2C_Init+0x268>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0c9b      	lsrs	r3, r3, #18
 800193c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	68ba      	ldr	r2, [r7, #8]
 800194e:	430a      	orrs	r2, r1
 8001950:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	4a64      	ldr	r2, [pc, #400]	; (8001af4 <HAL_I2C_Init+0x25c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d802      	bhi.n	800196c <HAL_I2C_Init+0xd4>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	3301      	adds	r3, #1
 800196a:	e009      	b.n	8001980 <HAL_I2C_Init+0xe8>
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001972:	fb02 f303 	mul.w	r3, r2, r3
 8001976:	4a63      	ldr	r2, [pc, #396]	; (8001b04 <HAL_I2C_Init+0x26c>)
 8001978:	fba2 2303 	umull	r2, r3, r2, r3
 800197c:	099b      	lsrs	r3, r3, #6
 800197e:	3301      	adds	r3, #1
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	430b      	orrs	r3, r1
 8001986:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	69db      	ldr	r3, [r3, #28]
 800198e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001992:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4956      	ldr	r1, [pc, #344]	; (8001af4 <HAL_I2C_Init+0x25c>)
 800199c:	428b      	cmp	r3, r1
 800199e:	d80d      	bhi.n	80019bc <HAL_I2C_Init+0x124>
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	1e59      	subs	r1, r3, #1
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	685b      	ldr	r3, [r3, #4]
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80019ae:	3301      	adds	r3, #1
 80019b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019b4:	2b04      	cmp	r3, #4
 80019b6:	bf38      	it	cc
 80019b8:	2304      	movcc	r3, #4
 80019ba:	e04f      	b.n	8001a5c <HAL_I2C_Init+0x1c4>
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d111      	bne.n	80019e8 <HAL_I2C_Init+0x150>
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	1e58      	subs	r0, r3, #1
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6859      	ldr	r1, [r3, #4]
 80019cc:	460b      	mov	r3, r1
 80019ce:	005b      	lsls	r3, r3, #1
 80019d0:	440b      	add	r3, r1
 80019d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019dc:	2b00      	cmp	r3, #0
 80019de:	bf0c      	ite	eq
 80019e0:	2301      	moveq	r3, #1
 80019e2:	2300      	movne	r3, #0
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	e012      	b.n	8001a0e <HAL_I2C_Init+0x176>
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	1e58      	subs	r0, r3, #1
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	6859      	ldr	r1, [r3, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	440b      	add	r3, r1
 80019f6:	0099      	lsls	r1, r3, #2
 80019f8:	440b      	add	r3, r1
 80019fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80019fe:	3301      	adds	r3, #1
 8001a00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	bf0c      	ite	eq
 8001a08:	2301      	moveq	r3, #1
 8001a0a:	2300      	movne	r3, #0
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <HAL_I2C_Init+0x17e>
 8001a12:	2301      	movs	r3, #1
 8001a14:	e022      	b.n	8001a5c <HAL_I2C_Init+0x1c4>
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	689b      	ldr	r3, [r3, #8]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d10e      	bne.n	8001a3c <HAL_I2C_Init+0x1a4>
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	1e58      	subs	r0, r3, #1
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6859      	ldr	r1, [r3, #4]
 8001a26:	460b      	mov	r3, r1
 8001a28:	005b      	lsls	r3, r3, #1
 8001a2a:	440b      	add	r3, r1
 8001a2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a30:	3301      	adds	r3, #1
 8001a32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001a3a:	e00f      	b.n	8001a5c <HAL_I2C_Init+0x1c4>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	1e58      	subs	r0, r3, #1
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6859      	ldr	r1, [r3, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	440b      	add	r3, r1
 8001a4a:	0099      	lsls	r1, r3, #2
 8001a4c:	440b      	add	r3, r1
 8001a4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a52:	3301      	adds	r3, #1
 8001a54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a5c:	6879      	ldr	r1, [r7, #4]
 8001a5e:	6809      	ldr	r1, [r1, #0]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	69da      	ldr	r2, [r3, #28]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6a1b      	ldr	r3, [r3, #32]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	6911      	ldr	r1, [r2, #16]
 8001a92:	687a      	ldr	r2, [r7, #4]
 8001a94:	68d2      	ldr	r2, [r2, #12]
 8001a96:	4311      	orrs	r1, r2
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	430b      	orrs	r3, r1
 8001a9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	699b      	ldr	r3, [r3, #24]
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f042 0201 	orr.w	r2, r2, #1
 8001aca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	2200      	movs	r2, #0
 8001ade:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	3710      	adds	r7, #16
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	000186a0 	.word	0x000186a0
 8001af8:	001e847f 	.word	0x001e847f
 8001afc:	003d08ff 	.word	0x003d08ff
 8001b00:	431bde83 	.word	0x431bde83
 8001b04:	10624dd3 	.word	0x10624dd3

08001b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b086      	sub	sp, #24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d101      	bne.n	8001b1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e26c      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	f000 8087 	beq.w	8001c36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001b28:	4b92      	ldr	r3, [pc, #584]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f003 030c 	and.w	r3, r3, #12
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d00c      	beq.n	8001b4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b34:	4b8f      	ldr	r3, [pc, #572]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	f003 030c 	and.w	r3, r3, #12
 8001b3c:	2b08      	cmp	r3, #8
 8001b3e:	d112      	bne.n	8001b66 <HAL_RCC_OscConfig+0x5e>
 8001b40:	4b8c      	ldr	r3, [pc, #560]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b4c:	d10b      	bne.n	8001b66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b4e:	4b89      	ldr	r3, [pc, #548]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d06c      	beq.n	8001c34 <HAL_RCC_OscConfig+0x12c>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d168      	bne.n	8001c34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e246      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b6e:	d106      	bne.n	8001b7e <HAL_RCC_OscConfig+0x76>
 8001b70:	4b80      	ldr	r3, [pc, #512]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a7f      	ldr	r2, [pc, #508]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e02e      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d10c      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x98>
 8001b86:	4b7b      	ldr	r3, [pc, #492]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4a7a      	ldr	r2, [pc, #488]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b90:	6013      	str	r3, [r2, #0]
 8001b92:	4b78      	ldr	r3, [pc, #480]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a77      	ldr	r2, [pc, #476]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001b98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	e01d      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001ba8:	d10c      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xbc>
 8001baa:	4b72      	ldr	r3, [pc, #456]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	4a71      	ldr	r2, [pc, #452]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb4:	6013      	str	r3, [r2, #0]
 8001bb6:	4b6f      	ldr	r3, [pc, #444]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a6e      	ldr	r2, [pc, #440]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	e00b      	b.n	8001bdc <HAL_RCC_OscConfig+0xd4>
 8001bc4:	4b6b      	ldr	r3, [pc, #428]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a6a      	ldr	r2, [pc, #424]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bce:	6013      	str	r3, [r2, #0]
 8001bd0:	4b68      	ldr	r3, [pc, #416]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a67      	ldr	r2, [pc, #412]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d013      	beq.n	8001c0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be4:	f7ff f9f8 	bl	8000fd8 <HAL_GetTick>
 8001be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bea:	e008      	b.n	8001bfe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bec:	f7ff f9f4 	bl	8000fd8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	2b64      	cmp	r3, #100	; 0x64
 8001bf8:	d901      	bls.n	8001bfe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001bfa:	2303      	movs	r3, #3
 8001bfc:	e1fa      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001bfe:	4b5d      	ldr	r3, [pc, #372]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f0      	beq.n	8001bec <HAL_RCC_OscConfig+0xe4>
 8001c0a:	e014      	b.n	8001c36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c0c:	f7ff f9e4 	bl	8000fd8 <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c14:	f7ff f9e0 	bl	8000fd8 <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b64      	cmp	r3, #100	; 0x64
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e1e6      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001c26:	4b53      	ldr	r3, [pc, #332]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1f0      	bne.n	8001c14 <HAL_RCC_OscConfig+0x10c>
 8001c32:	e000      	b.n	8001c36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 0302 	and.w	r3, r3, #2
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d063      	beq.n	8001d0a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001c42:	4b4c      	ldr	r3, [pc, #304]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00b      	beq.n	8001c66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001c4e:	4b49      	ldr	r3, [pc, #292]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b08      	cmp	r3, #8
 8001c58:	d11c      	bne.n	8001c94 <HAL_RCC_OscConfig+0x18c>
 8001c5a:	4b46      	ldr	r3, [pc, #280]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d116      	bne.n	8001c94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c66:	4b43      	ldr	r3, [pc, #268]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0302 	and.w	r3, r3, #2
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d005      	beq.n	8001c7e <HAL_RCC_OscConfig+0x176>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	691b      	ldr	r3, [r3, #16]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d001      	beq.n	8001c7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e1ba      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c7e:	4b3d      	ldr	r3, [pc, #244]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	695b      	ldr	r3, [r3, #20]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4939      	ldr	r1, [pc, #228]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001c92:	e03a      	b.n	8001d0a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d020      	beq.n	8001cde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c9c:	4b36      	ldr	r3, [pc, #216]	; (8001d78 <HAL_RCC_OscConfig+0x270>)
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff f999 	bl	8000fd8 <HAL_GetTick>
 8001ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ca8:	e008      	b.n	8001cbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001caa:	f7ff f995 	bl	8000fd8 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	2b02      	cmp	r3, #2
 8001cb6:	d901      	bls.n	8001cbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001cb8:	2303      	movs	r3, #3
 8001cba:	e19b      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cbc:	4b2d      	ldr	r3, [pc, #180]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d0f0      	beq.n	8001caa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc8:	4b2a      	ldr	r3, [pc, #168]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	695b      	ldr	r3, [r3, #20]
 8001cd4:	00db      	lsls	r3, r3, #3
 8001cd6:	4927      	ldr	r1, [pc, #156]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	600b      	str	r3, [r1, #0]
 8001cdc:	e015      	b.n	8001d0a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cde:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <HAL_RCC_OscConfig+0x270>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ce4:	f7ff f978 	bl	8000fd8 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cec:	f7ff f974 	bl	8000fd8 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e17a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001cfe:	4b1d      	ldr	r3, [pc, #116]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0302 	and.w	r3, r3, #2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1f0      	bne.n	8001cec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0308 	and.w	r3, r3, #8
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d03a      	beq.n	8001d8c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	699b      	ldr	r3, [r3, #24]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d019      	beq.n	8001d52 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d1e:	4b17      	ldr	r3, [pc, #92]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001d20:	2201      	movs	r2, #1
 8001d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d24:	f7ff f958 	bl	8000fd8 <HAL_GetTick>
 8001d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d2a:	e008      	b.n	8001d3e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d2c:	f7ff f954 	bl	8000fd8 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	2b02      	cmp	r3, #2
 8001d38:	d901      	bls.n	8001d3e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001d3a:	2303      	movs	r3, #3
 8001d3c:	e15a      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_RCC_OscConfig+0x26c>)
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f0      	beq.n	8001d2c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001d4a:	2001      	movs	r0, #1
 8001d4c:	f000 fada 	bl	8002304 <RCC_Delay>
 8001d50:	e01c      	b.n	8001d8c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d52:	4b0a      	ldr	r3, [pc, #40]	; (8001d7c <HAL_RCC_OscConfig+0x274>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d58:	f7ff f93e 	bl	8000fd8 <HAL_GetTick>
 8001d5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d5e:	e00f      	b.n	8001d80 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d60:	f7ff f93a 	bl	8000fd8 <HAL_GetTick>
 8001d64:	4602      	mov	r2, r0
 8001d66:	693b      	ldr	r3, [r7, #16]
 8001d68:	1ad3      	subs	r3, r2, r3
 8001d6a:	2b02      	cmp	r3, #2
 8001d6c:	d908      	bls.n	8001d80 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e140      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
 8001d72:	bf00      	nop
 8001d74:	40021000 	.word	0x40021000
 8001d78:	42420000 	.word	0x42420000
 8001d7c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001d80:	4b9e      	ldr	r3, [pc, #632]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d84:	f003 0302 	and.w	r3, r3, #2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e9      	bne.n	8001d60 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0304 	and.w	r3, r3, #4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 80a6 	beq.w	8001ee6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d9e:	4b97      	ldr	r3, [pc, #604]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001da0:	69db      	ldr	r3, [r3, #28]
 8001da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d10d      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001daa:	4b94      	ldr	r3, [pc, #592]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001dac:	69db      	ldr	r3, [r3, #28]
 8001dae:	4a93      	ldr	r2, [pc, #588]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001db4:	61d3      	str	r3, [r2, #28]
 8001db6:	4b91      	ldr	r3, [pc, #580]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dbe:	60bb      	str	r3, [r7, #8]
 8001dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dc6:	4b8e      	ldr	r3, [pc, #568]	; (8002000 <HAL_RCC_OscConfig+0x4f8>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d118      	bne.n	8001e04 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd2:	4b8b      	ldr	r3, [pc, #556]	; (8002000 <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a8a      	ldr	r2, [pc, #552]	; (8002000 <HAL_RCC_OscConfig+0x4f8>)
 8001dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001dde:	f7ff f8fb 	bl	8000fd8 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001de6:	f7ff f8f7 	bl	8000fd8 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b64      	cmp	r3, #100	; 0x64
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0fd      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001df8:	4b81      	ldr	r3, [pc, #516]	; (8002000 <HAL_RCC_OscConfig+0x4f8>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0f0      	beq.n	8001de6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d106      	bne.n	8001e1a <HAL_RCC_OscConfig+0x312>
 8001e0c:	4b7b      	ldr	r3, [pc, #492]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	6a1b      	ldr	r3, [r3, #32]
 8001e10:	4a7a      	ldr	r2, [pc, #488]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	6213      	str	r3, [r2, #32]
 8001e18:	e02d      	b.n	8001e76 <HAL_RCC_OscConfig+0x36e>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	68db      	ldr	r3, [r3, #12]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d10c      	bne.n	8001e3c <HAL_RCC_OscConfig+0x334>
 8001e22:	4b76      	ldr	r3, [pc, #472]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	4a75      	ldr	r2, [pc, #468]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e28:	f023 0301 	bic.w	r3, r3, #1
 8001e2c:	6213      	str	r3, [r2, #32]
 8001e2e:	4b73      	ldr	r3, [pc, #460]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	6a1b      	ldr	r3, [r3, #32]
 8001e32:	4a72      	ldr	r2, [pc, #456]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e34:	f023 0304 	bic.w	r3, r3, #4
 8001e38:	6213      	str	r3, [r2, #32]
 8001e3a:	e01c      	b.n	8001e76 <HAL_RCC_OscConfig+0x36e>
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	2b05      	cmp	r3, #5
 8001e42:	d10c      	bne.n	8001e5e <HAL_RCC_OscConfig+0x356>
 8001e44:	4b6d      	ldr	r3, [pc, #436]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	4a6c      	ldr	r2, [pc, #432]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e4a:	f043 0304 	orr.w	r3, r3, #4
 8001e4e:	6213      	str	r3, [r2, #32]
 8001e50:	4b6a      	ldr	r3, [pc, #424]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	4a69      	ldr	r2, [pc, #420]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e56:	f043 0301 	orr.w	r3, r3, #1
 8001e5a:	6213      	str	r3, [r2, #32]
 8001e5c:	e00b      	b.n	8001e76 <HAL_RCC_OscConfig+0x36e>
 8001e5e:	4b67      	ldr	r3, [pc, #412]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e60:	6a1b      	ldr	r3, [r3, #32]
 8001e62:	4a66      	ldr	r2, [pc, #408]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e64:	f023 0301 	bic.w	r3, r3, #1
 8001e68:	6213      	str	r3, [r2, #32]
 8001e6a:	4b64      	ldr	r3, [pc, #400]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e6c:	6a1b      	ldr	r3, [r3, #32]
 8001e6e:	4a63      	ldr	r2, [pc, #396]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e70:	f023 0304 	bic.w	r3, r3, #4
 8001e74:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	68db      	ldr	r3, [r3, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d015      	beq.n	8001eaa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e7e:	f7ff f8ab 	bl	8000fd8 <HAL_GetTick>
 8001e82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e84:	e00a      	b.n	8001e9c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e86:	f7ff f8a7 	bl	8000fd8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e0ab      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001e9c:	4b57      	ldr	r3, [pc, #348]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d0ee      	beq.n	8001e86 <HAL_RCC_OscConfig+0x37e>
 8001ea8:	e014      	b.n	8001ed4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001eaa:	f7ff f895 	bl	8000fd8 <HAL_GetTick>
 8001eae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001eb0:	e00a      	b.n	8001ec8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001eb2:	f7ff f891 	bl	8000fd8 <HAL_GetTick>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	1ad3      	subs	r3, r2, r3
 8001ebc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d901      	bls.n	8001ec8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	e095      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ec8:	4b4c      	ldr	r3, [pc, #304]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	f003 0302 	and.w	r3, r3, #2
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1ee      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001ed4:	7dfb      	ldrb	r3, [r7, #23]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d105      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eda:	4b48      	ldr	r3, [pc, #288]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001edc:	69db      	ldr	r3, [r3, #28]
 8001ede:	4a47      	ldr	r2, [pc, #284]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001ee0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	69db      	ldr	r3, [r3, #28]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	f000 8081 	beq.w	8001ff2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ef0:	4b42      	ldr	r3, [pc, #264]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 030c 	and.w	r3, r3, #12
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d061      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	69db      	ldr	r3, [r3, #28]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d146      	bne.n	8001f92 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f04:	4b3f      	ldr	r3, [pc, #252]	; (8002004 <HAL_RCC_OscConfig+0x4fc>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0a:	f7ff f865 	bl	8000fd8 <HAL_GetTick>
 8001f0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f10:	e008      	b.n	8001f24 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f12:	f7ff f861 	bl	8000fd8 <HAL_GetTick>
 8001f16:	4602      	mov	r2, r0
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	1ad3      	subs	r3, r2, r3
 8001f1c:	2b02      	cmp	r3, #2
 8001f1e:	d901      	bls.n	8001f24 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e067      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f24:	4b35      	ldr	r3, [pc, #212]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d1f0      	bne.n	8001f12 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a1b      	ldr	r3, [r3, #32]
 8001f34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f38:	d108      	bne.n	8001f4c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001f3a:	4b30      	ldr	r3, [pc, #192]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	492d      	ldr	r1, [pc, #180]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f4c:	4b2b      	ldr	r3, [pc, #172]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6a19      	ldr	r1, [r3, #32]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f5c:	430b      	orrs	r3, r1
 8001f5e:	4927      	ldr	r1, [pc, #156]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f60:	4313      	orrs	r3, r2
 8001f62:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f64:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_RCC_OscConfig+0x4fc>)
 8001f66:	2201      	movs	r2, #1
 8001f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f6a:	f7ff f835 	bl	8000fd8 <HAL_GetTick>
 8001f6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f70:	e008      	b.n	8001f84 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f72:	f7ff f831 	bl	8000fd8 <HAL_GetTick>
 8001f76:	4602      	mov	r2, r0
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	1ad3      	subs	r3, r2, r3
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d901      	bls.n	8001f84 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001f80:	2303      	movs	r3, #3
 8001f82:	e037      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f84:	4b1d      	ldr	r3, [pc, #116]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d0f0      	beq.n	8001f72 <HAL_RCC_OscConfig+0x46a>
 8001f90:	e02f      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f92:	4b1c      	ldr	r3, [pc, #112]	; (8002004 <HAL_RCC_OscConfig+0x4fc>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7ff f81e 	bl	8000fd8 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fa0:	f7ff f81a 	bl	8000fd8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e020      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001fb2:	4b12      	ldr	r3, [pc, #72]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x498>
 8001fbe:	e018      	b.n	8001ff2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	69db      	ldr	r3, [r3, #28]
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d101      	bne.n	8001fcc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	e013      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_RCC_OscConfig+0x4f4>)
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d106      	bne.n	8001fee <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40007000 	.word	0x40007000
 8002004:	42420060 	.word	0x42420060

08002008 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d101      	bne.n	800201c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002018:	2301      	movs	r3, #1
 800201a:	e0d0      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800201c:	4b6a      	ldr	r3, [pc, #424]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 0307 	and.w	r3, r3, #7
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d910      	bls.n	800204c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202a:	4b67      	ldr	r3, [pc, #412]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f023 0207 	bic.w	r2, r3, #7
 8002032:	4965      	ldr	r1, [pc, #404]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203a:	4b63      	ldr	r3, [pc, #396]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0307 	and.w	r3, r3, #7
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	429a      	cmp	r2, r3
 8002046:	d001      	beq.n	800204c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e0b8      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0302 	and.w	r3, r3, #2
 8002054:	2b00      	cmp	r3, #0
 8002056:	d020      	beq.n	800209a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0304 	and.w	r3, r3, #4
 8002060:	2b00      	cmp	r3, #0
 8002062:	d005      	beq.n	8002070 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002064:	4b59      	ldr	r3, [pc, #356]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	4a58      	ldr	r2, [pc, #352]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800206a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800206e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0308 	and.w	r3, r3, #8
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800207c:	4b53      	ldr	r3, [pc, #332]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	4a52      	ldr	r2, [pc, #328]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002082:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002086:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002088:	4b50      	ldr	r3, [pc, #320]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	494d      	ldr	r1, [pc, #308]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002096:	4313      	orrs	r3, r2
 8002098:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d040      	beq.n	8002128 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	2b01      	cmp	r3, #1
 80020ac:	d107      	bne.n	80020be <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	4b47      	ldr	r3, [pc, #284]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d115      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e07f      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d107      	bne.n	80020d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80020c6:	4b41      	ldr	r3, [pc, #260]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d109      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
 80020d4:	e073      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020d6:	4b3d      	ldr	r3, [pc, #244]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e06b      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020e6:	4b39      	ldr	r3, [pc, #228]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f023 0203 	bic.w	r2, r3, #3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	4936      	ldr	r1, [pc, #216]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	4313      	orrs	r3, r2
 80020f6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020f8:	f7fe ff6e 	bl	8000fd8 <HAL_GetTick>
 80020fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002100:	f7fe ff6a 	bl	8000fd8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	; 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e053      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002116:	4b2d      	ldr	r3, [pc, #180]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	f003 020c 	and.w	r2, r3, #12
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	009b      	lsls	r3, r3, #2
 8002124:	429a      	cmp	r2, r3
 8002126:	d1eb      	bne.n	8002100 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002128:	4b27      	ldr	r3, [pc, #156]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	683a      	ldr	r2, [r7, #0]
 8002132:	429a      	cmp	r2, r3
 8002134:	d210      	bcs.n	8002158 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f023 0207 	bic.w	r2, r3, #7
 800213e:	4922      	ldr	r1, [pc, #136]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	4313      	orrs	r3, r2
 8002144:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002146:	4b20      	ldr	r3, [pc, #128]	; (80021c8 <HAL_RCC_ClockConfig+0x1c0>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	429a      	cmp	r2, r3
 8002152:	d001      	beq.n	8002158 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002154:	2301      	movs	r3, #1
 8002156:	e032      	b.n	80021be <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	d008      	beq.n	8002176 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002164:	4b19      	ldr	r3, [pc, #100]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	4916      	ldr	r1, [pc, #88]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002172:	4313      	orrs	r3, r2
 8002174:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0308 	and.w	r3, r3, #8
 800217e:	2b00      	cmp	r3, #0
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002182:	4b12      	ldr	r3, [pc, #72]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	691b      	ldr	r3, [r3, #16]
 800218e:	00db      	lsls	r3, r3, #3
 8002190:	490e      	ldr	r1, [pc, #56]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	4313      	orrs	r3, r2
 8002194:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002196:	f000 f821 	bl	80021dc <HAL_RCC_GetSysClockFreq>
 800219a:	4601      	mov	r1, r0
 800219c:	4b0b      	ldr	r3, [pc, #44]	; (80021cc <HAL_RCC_ClockConfig+0x1c4>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	f003 030f 	and.w	r3, r3, #15
 80021a6:	4a0a      	ldr	r2, [pc, #40]	; (80021d0 <HAL_RCC_ClockConfig+0x1c8>)
 80021a8:	5cd3      	ldrb	r3, [r2, r3]
 80021aa:	fa21 f303 	lsr.w	r3, r1, r3
 80021ae:	4a09      	ldr	r2, [pc, #36]	; (80021d4 <HAL_RCC_ClockConfig+0x1cc>)
 80021b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80021b2:	4b09      	ldr	r3, [pc, #36]	; (80021d8 <HAL_RCC_ClockConfig+0x1d0>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7fe fecc 	bl	8000f54 <HAL_InitTick>

  return HAL_OK;
 80021bc:	2300      	movs	r3, #0
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3710      	adds	r7, #16
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40022000 	.word	0x40022000
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08004488 	.word	0x08004488
 80021d4:	20000310 	.word	0x20000310
 80021d8:	20000314 	.word	0x20000314

080021dc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021dc:	b490      	push	{r4, r7}
 80021de:	b08a      	sub	sp, #40	; 0x28
 80021e0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80021e2:	4b2a      	ldr	r3, [pc, #168]	; (800228c <HAL_RCC_GetSysClockFreq+0xb0>)
 80021e4:	1d3c      	adds	r4, r7, #4
 80021e6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80021e8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80021ec:	4b28      	ldr	r3, [pc, #160]	; (8002290 <HAL_RCC_GetSysClockFreq+0xb4>)
 80021ee:	881b      	ldrh	r3, [r3, #0]
 80021f0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	2300      	movs	r3, #0
 80021f8:	61bb      	str	r3, [r7, #24]
 80021fa:	2300      	movs	r3, #0
 80021fc:	627b      	str	r3, [r7, #36]	; 0x24
 80021fe:	2300      	movs	r3, #0
 8002200:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002206:	4b23      	ldr	r3, [pc, #140]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	f003 030c 	and.w	r3, r3, #12
 8002212:	2b04      	cmp	r3, #4
 8002214:	d002      	beq.n	800221c <HAL_RCC_GetSysClockFreq+0x40>
 8002216:	2b08      	cmp	r3, #8
 8002218:	d003      	beq.n	8002222 <HAL_RCC_GetSysClockFreq+0x46>
 800221a:	e02d      	b.n	8002278 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800221c:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_RCC_GetSysClockFreq+0xbc>)
 800221e:	623b      	str	r3, [r7, #32]
      break;
 8002220:	e02d      	b.n	800227e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	0c9b      	lsrs	r3, r3, #18
 8002226:	f003 030f 	and.w	r3, r3, #15
 800222a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800222e:	4413      	add	r3, r2
 8002230:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002234:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d013      	beq.n	8002268 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002240:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002242:	685b      	ldr	r3, [r3, #4]
 8002244:	0c5b      	lsrs	r3, r3, #17
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800224e:	4413      	add	r3, r2
 8002250:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002254:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	4a0f      	ldr	r2, [pc, #60]	; (8002298 <HAL_RCC_GetSysClockFreq+0xbc>)
 800225a:	fb02 f203 	mul.w	r2, r2, r3
 800225e:	69bb      	ldr	r3, [r7, #24]
 8002260:	fbb2 f3f3 	udiv	r3, r2, r3
 8002264:	627b      	str	r3, [r7, #36]	; 0x24
 8002266:	e004      	b.n	8002272 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002268:	697b      	ldr	r3, [r7, #20]
 800226a:	4a0c      	ldr	r2, [pc, #48]	; (800229c <HAL_RCC_GetSysClockFreq+0xc0>)
 800226c:	fb02 f303 	mul.w	r3, r2, r3
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002274:	623b      	str	r3, [r7, #32]
      break;
 8002276:	e002      	b.n	800227e <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002278:	4b07      	ldr	r3, [pc, #28]	; (8002298 <HAL_RCC_GetSysClockFreq+0xbc>)
 800227a:	623b      	str	r3, [r7, #32]
      break;
 800227c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800227e:	6a3b      	ldr	r3, [r7, #32]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3728      	adds	r7, #40	; 0x28
 8002284:	46bd      	mov	sp, r7
 8002286:	bc90      	pop	{r4, r7}
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	08004474 	.word	0x08004474
 8002290:	08004484 	.word	0x08004484
 8002294:	40021000 	.word	0x40021000
 8002298:	007a1200 	.word	0x007a1200
 800229c:	003d0900 	.word	0x003d0900

080022a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022a4:	4b02      	ldr	r3, [pc, #8]	; (80022b0 <HAL_RCC_GetHCLKFreq+0x10>)
 80022a6:	681b      	ldr	r3, [r3, #0]
}
 80022a8:	4618      	mov	r0, r3
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bc80      	pop	{r7}
 80022ae:	4770      	bx	lr
 80022b0:	20000310 	.word	0x20000310

080022b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80022b8:	f7ff fff2 	bl	80022a0 <HAL_RCC_GetHCLKFreq>
 80022bc:	4601      	mov	r1, r0
 80022be:	4b05      	ldr	r3, [pc, #20]	; (80022d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	0a1b      	lsrs	r3, r3, #8
 80022c4:	f003 0307 	and.w	r3, r3, #7
 80022c8:	4a03      	ldr	r2, [pc, #12]	; (80022d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80022ca:	5cd3      	ldrb	r3, [r2, r3]
 80022cc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	40021000 	.word	0x40021000
 80022d8:	08004498 	.word	0x08004498

080022dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80022e0:	f7ff ffde 	bl	80022a0 <HAL_RCC_GetHCLKFreq>
 80022e4:	4601      	mov	r1, r0
 80022e6:	4b05      	ldr	r3, [pc, #20]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	0adb      	lsrs	r3, r3, #11
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	4a03      	ldr	r2, [pc, #12]	; (8002300 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022f2:	5cd3      	ldrb	r3, [r2, r3]
 80022f4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000
 8002300:	08004498 	.word	0x08004498

08002304 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800230c:	4b0a      	ldr	r3, [pc, #40]	; (8002338 <RCC_Delay+0x34>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a0a      	ldr	r2, [pc, #40]	; (800233c <RCC_Delay+0x38>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	0a5b      	lsrs	r3, r3, #9
 8002318:	687a      	ldr	r2, [r7, #4]
 800231a:	fb02 f303 	mul.w	r3, r2, r3
 800231e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002320:	bf00      	nop
  }
  while (Delay --);
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	1e5a      	subs	r2, r3, #1
 8002326:	60fa      	str	r2, [r7, #12]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d1f9      	bne.n	8002320 <RCC_Delay+0x1c>
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr
 8002336:	bf00      	nop
 8002338:	20000310 	.word	0x20000310
 800233c:	10624dd3 	.word	0x10624dd3

08002340 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d101      	bne.n	8002352 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800234e:	2301      	movs	r3, #1
 8002350:	e041      	b.n	80023d6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002358:	b2db      	uxtb	r3, r3
 800235a:	2b00      	cmp	r3, #0
 800235c:	d106      	bne.n	800236c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002366:	6878      	ldr	r0, [r7, #4]
 8002368:	f7fe fd16 	bl	8000d98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2202      	movs	r2, #2
 8002370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	3304      	adds	r3, #4
 800237c:	4619      	mov	r1, r3
 800237e:	4610      	mov	r0, r2
 8002380:	f000 fa10 	bl	80027a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2201      	movs	r2, #1
 8002388:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2201      	movs	r2, #1
 8002398:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80023d4:	2300      	movs	r3, #0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b082      	sub	sp, #8
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d122      	bne.n	800243a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d11b      	bne.n	800243a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f06f 0202 	mvn.w	r2, #2
 800240a:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2201      	movs	r2, #1
 8002410:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	699b      	ldr	r3, [r3, #24]
 8002418:	f003 0303 	and.w	r3, r3, #3
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f000 f9a4 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 8002426:	e005      	b.n	8002434 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002428:	6878      	ldr	r0, [r7, #4]
 800242a:	f000 f997 	bl	800275c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800242e:	6878      	ldr	r0, [r7, #4]
 8002430:	f000 f9a6 	bl	8002780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2200      	movs	r2, #0
 8002438:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	f003 0304 	and.w	r3, r3, #4
 8002444:	2b04      	cmp	r3, #4
 8002446:	d122      	bne.n	800248e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	68db      	ldr	r3, [r3, #12]
 800244e:	f003 0304 	and.w	r3, r3, #4
 8002452:	2b04      	cmp	r3, #4
 8002454:	d11b      	bne.n	800248e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f06f 0204 	mvn.w	r2, #4
 800245e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2202      	movs	r2, #2
 8002464:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	699b      	ldr	r3, [r3, #24]
 800246c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 f97a 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 800247a:	e005      	b.n	8002488 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247c:	6878      	ldr	r0, [r7, #4]
 800247e:	f000 f96d 	bl	800275c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f000 f97c 	bl	8002780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2200      	movs	r2, #0
 800248c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f003 0308 	and.w	r3, r3, #8
 8002498:	2b08      	cmp	r3, #8
 800249a:	d122      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b08      	cmp	r3, #8
 80024a8:	d11b      	bne.n	80024e2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f06f 0208 	mvn.w	r2, #8
 80024b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2204      	movs	r2, #4
 80024b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	f003 0303 	and.w	r3, r3, #3
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d003      	beq.n	80024d0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f950 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 80024ce:	e005      	b.n	80024dc <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 f943 	bl	800275c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d6:	6878      	ldr	r0, [r7, #4]
 80024d8:	f000 f952 	bl	8002780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	691b      	ldr	r3, [r3, #16]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b10      	cmp	r3, #16
 80024ee:	d122      	bne.n	8002536 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	68db      	ldr	r3, [r3, #12]
 80024f6:	f003 0310 	and.w	r3, r3, #16
 80024fa:	2b10      	cmp	r3, #16
 80024fc:	d11b      	bne.n	8002536 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f06f 0210 	mvn.w	r2, #16
 8002506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2208      	movs	r2, #8
 800250c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002518:	2b00      	cmp	r3, #0
 800251a:	d003      	beq.n	8002524 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f926 	bl	800276e <HAL_TIM_IC_CaptureCallback>
 8002522:	e005      	b.n	8002530 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002524:	6878      	ldr	r0, [r7, #4]
 8002526:	f000 f919 	bl	800275c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f000 f928 	bl	8002780 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	2200      	movs	r2, #0
 8002534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f003 0301 	and.w	r3, r3, #1
 8002540:	2b01      	cmp	r3, #1
 8002542:	d10e      	bne.n	8002562 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	68db      	ldr	r3, [r3, #12]
 800254a:	f003 0301 	and.w	r3, r3, #1
 800254e:	2b01      	cmp	r3, #1
 8002550:	d107      	bne.n	8002562 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f06f 0201 	mvn.w	r2, #1
 800255a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800255c:	6878      	ldr	r0, [r7, #4]
 800255e:	f7fe fafb 	bl	8000b58 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d10e      	bne.n	800258e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257a:	2b80      	cmp	r3, #128	; 0x80
 800257c:	d107      	bne.n	800258e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002586:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 fa6a 	bl	8002a62 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002598:	2b40      	cmp	r3, #64	; 0x40
 800259a:	d10e      	bne.n	80025ba <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025a6:	2b40      	cmp	r3, #64	; 0x40
 80025a8:	d107      	bne.n	80025ba <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80025b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 f8ec 	bl	8002792 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	691b      	ldr	r3, [r3, #16]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b20      	cmp	r3, #32
 80025c6:	d10e      	bne.n	80025e6 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	f003 0320 	and.w	r3, r3, #32
 80025d2:	2b20      	cmp	r3, #32
 80025d4:	d107      	bne.n	80025e6 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f06f 0220 	mvn.w	r2, #32
 80025de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f000 fa35 	bl	8002a50 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025e6:	bf00      	nop
 80025e8:	3708      	adds	r7, #8
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}

080025ee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80025ee:	b580      	push	{r7, lr}
 80025f0:	b084      	sub	sp, #16
 80025f2:	af00      	add	r7, sp, #0
 80025f4:	6078      	str	r0, [r7, #4]
 80025f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025fe:	2b01      	cmp	r3, #1
 8002600:	d101      	bne.n	8002606 <HAL_TIM_ConfigClockSource+0x18>
 8002602:	2302      	movs	r3, #2
 8002604:	e0a6      	b.n	8002754 <HAL_TIM_ConfigClockSource+0x166>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2201      	movs	r2, #1
 800260a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2202      	movs	r2, #2
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	689b      	ldr	r3, [r3, #8]
 800261c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002624:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800262c:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	68fa      	ldr	r2, [r7, #12]
 8002634:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2b40      	cmp	r3, #64	; 0x40
 800263c:	d067      	beq.n	800270e <HAL_TIM_ConfigClockSource+0x120>
 800263e:	2b40      	cmp	r3, #64	; 0x40
 8002640:	d80b      	bhi.n	800265a <HAL_TIM_ConfigClockSource+0x6c>
 8002642:	2b10      	cmp	r3, #16
 8002644:	d073      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x140>
 8002646:	2b10      	cmp	r3, #16
 8002648:	d802      	bhi.n	8002650 <HAL_TIM_ConfigClockSource+0x62>
 800264a:	2b00      	cmp	r3, #0
 800264c:	d06f      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800264e:	e078      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002650:	2b20      	cmp	r3, #32
 8002652:	d06c      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x140>
 8002654:	2b30      	cmp	r3, #48	; 0x30
 8002656:	d06a      	beq.n	800272e <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002658:	e073      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800265a:	2b70      	cmp	r3, #112	; 0x70
 800265c:	d00d      	beq.n	800267a <HAL_TIM_ConfigClockSource+0x8c>
 800265e:	2b70      	cmp	r3, #112	; 0x70
 8002660:	d804      	bhi.n	800266c <HAL_TIM_ConfigClockSource+0x7e>
 8002662:	2b50      	cmp	r3, #80	; 0x50
 8002664:	d033      	beq.n	80026ce <HAL_TIM_ConfigClockSource+0xe0>
 8002666:	2b60      	cmp	r3, #96	; 0x60
 8002668:	d041      	beq.n	80026ee <HAL_TIM_ConfigClockSource+0x100>
      break;
 800266a:	e06a      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800266c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002670:	d066      	beq.n	8002740 <HAL_TIM_ConfigClockSource+0x152>
 8002672:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002676:	d017      	beq.n	80026a8 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002678:	e063      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6818      	ldr	r0, [r3, #0]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	685a      	ldr	r2, [r3, #4]
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f000 f964 	bl	8002956 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800269c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	609a      	str	r2, [r3, #8]
      break;
 80026a6:	e04c      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6818      	ldr	r0, [r3, #0]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	6899      	ldr	r1, [r3, #8]
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f000 f94d 	bl	8002956 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	689a      	ldr	r2, [r3, #8]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80026ca:	609a      	str	r2, [r3, #8]
      break;
 80026cc:	e039      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6818      	ldr	r0, [r3, #0]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	461a      	mov	r2, r3
 80026dc:	f000 f8c4 	bl	8002868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	2150      	movs	r1, #80	; 0x50
 80026e6:	4618      	mov	r0, r3
 80026e8:	f000 f91b 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 80026ec:	e029      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6818      	ldr	r0, [r3, #0]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	6859      	ldr	r1, [r3, #4]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	461a      	mov	r2, r3
 80026fc:	f000 f8e2 	bl	80028c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	2160      	movs	r1, #96	; 0x60
 8002706:	4618      	mov	r0, r3
 8002708:	f000 f90b 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 800270c:	e019      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6818      	ldr	r0, [r3, #0]
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	6859      	ldr	r1, [r3, #4]
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	461a      	mov	r2, r3
 800271c:	f000 f8a4 	bl	8002868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	2140      	movs	r1, #64	; 0x40
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f8fb 	bl	8002922 <TIM_ITRx_SetConfig>
      break;
 800272c:	e009      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681a      	ldr	r2, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4619      	mov	r1, r3
 8002738:	4610      	mov	r0, r2
 800273a:	f000 f8f2 	bl	8002922 <TIM_ITRx_SetConfig>
        break;
 800273e:	e000      	b.n	8002742 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8002740:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002752:	2300      	movs	r3, #0
}
 8002754:	4618      	mov	r0, r3
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}

0800275c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002764:	bf00      	nop
 8002766:	370c      	adds	r7, #12
 8002768:	46bd      	mov	sp, r7
 800276a:	bc80      	pop	{r7}
 800276c:	4770      	bx	lr

0800276e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	bc80      	pop	{r7}
 800277e:	4770      	bx	lr

08002780 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	bc80      	pop	{r7}
 8002790:	4770      	bx	lr

08002792 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002792:	b480      	push	{r7}
 8002794:	b083      	sub	sp, #12
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800279a:	bf00      	nop
 800279c:	370c      	adds	r7, #12
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027a4:	b480      	push	{r7}
 80027a6:	b085      	sub	sp, #20
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	4a29      	ldr	r2, [pc, #164]	; (800285c <TIM_Base_SetConfig+0xb8>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d00b      	beq.n	80027d4 <TIM_Base_SetConfig+0x30>
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c2:	d007      	beq.n	80027d4 <TIM_Base_SetConfig+0x30>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	4a26      	ldr	r2, [pc, #152]	; (8002860 <TIM_Base_SetConfig+0xbc>)
 80027c8:	4293      	cmp	r3, r2
 80027ca:	d003      	beq.n	80027d4 <TIM_Base_SetConfig+0x30>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	4a25      	ldr	r2, [pc, #148]	; (8002864 <TIM_Base_SetConfig+0xc0>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d108      	bne.n	80027e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	4313      	orrs	r3, r2
 80027e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a1c      	ldr	r2, [pc, #112]	; (800285c <TIM_Base_SetConfig+0xb8>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d00b      	beq.n	8002806 <TIM_Base_SetConfig+0x62>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f4:	d007      	beq.n	8002806 <TIM_Base_SetConfig+0x62>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <TIM_Base_SetConfig+0xbc>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d003      	beq.n	8002806 <TIM_Base_SetConfig+0x62>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a18      	ldr	r2, [pc, #96]	; (8002864 <TIM_Base_SetConfig+0xc0>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d108      	bne.n	8002818 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800280c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	68fa      	ldr	r2, [r7, #12]
 8002814:	4313      	orrs	r3, r2
 8002816:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	695b      	ldr	r3, [r3, #20]
 8002822:	4313      	orrs	r3, r2
 8002824:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	681a      	ldr	r2, [r3, #0]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	4a07      	ldr	r2, [pc, #28]	; (800285c <TIM_Base_SetConfig+0xb8>)
 8002840:	4293      	cmp	r3, r2
 8002842:	d103      	bne.n	800284c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002844:	683b      	ldr	r3, [r7, #0]
 8002846:	691a      	ldr	r2, [r3, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	615a      	str	r2, [r3, #20]
}
 8002852:	bf00      	nop
 8002854:	3714      	adds	r7, #20
 8002856:	46bd      	mov	sp, r7
 8002858:	bc80      	pop	{r7}
 800285a:	4770      	bx	lr
 800285c:	40012c00 	.word	0x40012c00
 8002860:	40000400 	.word	0x40000400
 8002864:	40000800 	.word	0x40000800

08002868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6a1b      	ldr	r3, [r3, #32]
 8002878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	6a1b      	ldr	r3, [r3, #32]
 800287e:	f023 0201 	bic.w	r2, r3, #1
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800288c:	693b      	ldr	r3, [r7, #16]
 800288e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	011b      	lsls	r3, r3, #4
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	4313      	orrs	r3, r2
 800289c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f023 030a 	bic.w	r3, r3, #10
 80028a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80028a6:	697a      	ldr	r2, [r7, #20]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	693a      	ldr	r2, [r7, #16]
 80028b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	621a      	str	r2, [r3, #32]
}
 80028ba:	bf00      	nop
 80028bc:	371c      	adds	r7, #28
 80028be:	46bd      	mov	sp, r7
 80028c0:	bc80      	pop	{r7}
 80028c2:	4770      	bx	lr

080028c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028c4:	b480      	push	{r7}
 80028c6:	b087      	sub	sp, #28
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	60f8      	str	r0, [r7, #12]
 80028cc:	60b9      	str	r1, [r7, #8]
 80028ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f023 0210 	bic.w	r2, r3, #16
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80028ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	031b      	lsls	r3, r3, #12
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	4313      	orrs	r3, r2
 80028f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002900:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	011b      	lsls	r3, r3, #4
 8002906:	693a      	ldr	r2, [r7, #16]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	697a      	ldr	r2, [r7, #20]
 8002910:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	621a      	str	r2, [r3, #32]
}
 8002918:	bf00      	nop
 800291a:	371c      	adds	r7, #28
 800291c:	46bd      	mov	sp, r7
 800291e:	bc80      	pop	{r7}
 8002920:	4770      	bx	lr

08002922 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002922:	b480      	push	{r7}
 8002924:	b085      	sub	sp, #20
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689b      	ldr	r3, [r3, #8]
 8002930:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002938:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800293a:	683a      	ldr	r2, [r7, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4313      	orrs	r3, r2
 8002940:	f043 0307 	orr.w	r3, r3, #7
 8002944:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	68fa      	ldr	r2, [r7, #12]
 800294a:	609a      	str	r2, [r3, #8]
}
 800294c:	bf00      	nop
 800294e:	3714      	adds	r7, #20
 8002950:	46bd      	mov	sp, r7
 8002952:	bc80      	pop	{r7}
 8002954:	4770      	bx	lr

08002956 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002956:	b480      	push	{r7}
 8002958:	b087      	sub	sp, #28
 800295a:	af00      	add	r7, sp, #0
 800295c:	60f8      	str	r0, [r7, #12]
 800295e:	60b9      	str	r1, [r7, #8]
 8002960:	607a      	str	r2, [r7, #4]
 8002962:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002970:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	021a      	lsls	r2, r3, #8
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	431a      	orrs	r2, r3
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	4313      	orrs	r3, r2
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	609a      	str	r2, [r3, #8]
}
 800298a:	bf00      	nop
 800298c:	371c      	adds	r7, #28
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr

08002994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002994:	b480      	push	{r7}
 8002996:	b085      	sub	sp, #20
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d101      	bne.n	80029ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80029a8:	2302      	movs	r3, #2
 80029aa:	e046      	b.n	8002a3a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	68fa      	ldr	r2, [r7, #12]
 80029da:	4313      	orrs	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a16      	ldr	r2, [pc, #88]	; (8002a44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d00e      	beq.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029f8:	d009      	beq.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a12      	ldr	r2, [pc, #72]	; (8002a48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d004      	beq.n	8002a0e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a10      	ldr	r2, [pc, #64]	; (8002a4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d10c      	bne.n	8002a28 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2200      	movs	r2, #0
 8002a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3714      	adds	r7, #20
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bc80      	pop	{r7}
 8002a42:	4770      	bx	lr
 8002a44:	40012c00 	.word	0x40012c00
 8002a48:	40000400 	.word	0x40000400
 8002a4c:	40000800 	.word	0x40000800

08002a50 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a50:	b480      	push	{r7}
 8002a52:	b083      	sub	sp, #12
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a58:	bf00      	nop
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bc80      	pop	{r7}
 8002a60:	4770      	bx	lr

08002a62 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a62:	b480      	push	{r7}
 8002a64:	b083      	sub	sp, #12
 8002a66:	af00      	add	r7, sp, #0
 8002a68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a6a:	bf00      	nop
 8002a6c:	370c      	adds	r7, #12
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e03f      	b.n	8002b06 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d106      	bne.n	8002aa0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a9a:	6878      	ldr	r0, [r7, #4]
 8002a9c:	f7fe f9cc 	bl	8000e38 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2224      	movs	r2, #36	; 0x24
 8002aa4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	68da      	ldr	r2, [r3, #12]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ab6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 fbcd 	bl	8003258 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002acc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	695a      	ldr	r2, [r3, #20]
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002adc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	68da      	ldr	r2, [r3, #12]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002aec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2200      	movs	r2, #0
 8002af2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2220      	movs	r2, #32
 8002af8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	3708      	adds	r7, #8
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bd80      	pop	{r7, pc}

08002b0e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b0e:	b580      	push	{r7, lr}
 8002b10:	b08a      	sub	sp, #40	; 0x28
 8002b12:	af02      	add	r7, sp, #8
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	603b      	str	r3, [r7, #0]
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	2b20      	cmp	r3, #32
 8002b2c:	d17c      	bne.n	8002c28 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d002      	beq.n	8002b3a <HAL_UART_Transmit+0x2c>
 8002b34:	88fb      	ldrh	r3, [r7, #6]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e075      	b.n	8002c2a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d101      	bne.n	8002b4c <HAL_UART_Transmit+0x3e>
 8002b48:	2302      	movs	r3, #2
 8002b4a:	e06e      	b.n	8002c2a <HAL_UART_Transmit+0x11c>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2201      	movs	r2, #1
 8002b50:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2200      	movs	r2, #0
 8002b58:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2221      	movs	r2, #33	; 0x21
 8002b5e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002b62:	f7fe fa39 	bl	8000fd8 <HAL_GetTick>
 8002b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	88fa      	ldrh	r2, [r7, #6]
 8002b6c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	88fa      	ldrh	r2, [r7, #6]
 8002b72:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7c:	d108      	bne.n	8002b90 <HAL_UART_Transmit+0x82>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	691b      	ldr	r3, [r3, #16]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d104      	bne.n	8002b90 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	61bb      	str	r3, [r7, #24]
 8002b8e:	e003      	b.n	8002b98 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002ba0:	e02a      	b.n	8002bf8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	9300      	str	r3, [sp, #0]
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	2200      	movs	r2, #0
 8002baa:	2180      	movs	r1, #128	; 0x80
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	f000 f9f1 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d001      	beq.n	8002bbc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	e036      	b.n	8002c2a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d10b      	bne.n	8002bda <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	881b      	ldrh	r3, [r3, #0]
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bd0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	3302      	adds	r3, #2
 8002bd6:	61bb      	str	r3, [r7, #24]
 8002bd8:	e007      	b.n	8002bea <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	781a      	ldrb	r2, [r3, #0]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002be4:	69fb      	ldr	r3, [r7, #28]
 8002be6:	3301      	adds	r3, #1
 8002be8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	b29a      	uxth	r2, r3
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002bfc:	b29b      	uxth	r3, r3
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1cf      	bne.n	8002ba2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2140      	movs	r1, #64	; 0x40
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f000 f9c1 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 8002c12:	4603      	mov	r3, r0
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d001      	beq.n	8002c1c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002c18:	2303      	movs	r3, #3
 8002c1a:	e006      	b.n	8002c2a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	2220      	movs	r2, #32
 8002c20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002c24:	2300      	movs	r3, #0
 8002c26:	e000      	b.n	8002c2a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002c28:	2302      	movs	r3, #2
  }
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3720      	adds	r7, #32
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}

08002c32 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c32:	b580      	push	{r7, lr}
 8002c34:	b08a      	sub	sp, #40	; 0x28
 8002c36:	af02      	add	r7, sp, #8
 8002c38:	60f8      	str	r0, [r7, #12]
 8002c3a:	60b9      	str	r1, [r7, #8]
 8002c3c:	603b      	str	r3, [r7, #0]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002c42:	2300      	movs	r3, #0
 8002c44:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	2b20      	cmp	r3, #32
 8002c50:	f040 8089 	bne.w	8002d66 <HAL_UART_Receive+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d002      	beq.n	8002c60 <HAL_UART_Receive+0x2e>
 8002c5a:	88fb      	ldrh	r3, [r7, #6]
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e081      	b.n	8002d68 <HAL_UART_Receive+0x136>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d101      	bne.n	8002c72 <HAL_UART_Receive+0x40>
 8002c6e:	2302      	movs	r3, #2
 8002c70:	e07a      	b.n	8002d68 <HAL_UART_Receive+0x136>
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	2201      	movs	r2, #1
 8002c76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	2222      	movs	r2, #34	; 0x22
 8002c84:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002c88:	f7fe f9a6 	bl	8000fd8 <HAL_GetTick>
 8002c8c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	88fa      	ldrh	r2, [r7, #6]
 8002c92:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	88fa      	ldrh	r2, [r7, #6]
 8002c98:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca2:	d108      	bne.n	8002cb6 <HAL_UART_Receive+0x84>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	691b      	ldr	r3, [r3, #16]
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d104      	bne.n	8002cb6 <HAL_UART_Receive+0x84>
    {
      pdata8bits  = NULL;
 8002cac:	2300      	movs	r3, #0
 8002cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	61bb      	str	r3, [r7, #24]
 8002cb4:	e003      	b.n	8002cbe <HAL_UART_Receive+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cba:	2300      	movs	r3, #0
 8002cbc:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002cc6:	e043      	b.n	8002d50 <HAL_UART_Receive+0x11e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	9300      	str	r3, [sp, #0]
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	2120      	movs	r1, #32
 8002cd2:	68f8      	ldr	r0, [r7, #12]
 8002cd4:	f000 f95e 	bl	8002f94 <UART_WaitOnFlagUntilTimeout>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_UART_Receive+0xb0>
      {
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e042      	b.n	8002d68 <HAL_UART_Receive+0x136>
      }
      if (pdata8bits == NULL)
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d10c      	bne.n	8002d02 <HAL_UART_Receive+0xd0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	b29b      	uxth	r3, r3
 8002cf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	3302      	adds	r3, #2
 8002cfe:	61bb      	str	r3, [r7, #24]
 8002d00:	e01f      	b.n	8002d42 <HAL_UART_Receive+0x110>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d0a:	d007      	beq.n	8002d1c <HAL_UART_Receive+0xea>
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d10a      	bne.n	8002d2a <HAL_UART_Receive+0xf8>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	691b      	ldr	r3, [r3, #16]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d106      	bne.n	8002d2a <HAL_UART_Receive+0xf8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	b2da      	uxtb	r2, r3
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	701a      	strb	r2, [r3, #0]
 8002d28:	e008      	b.n	8002d3c <HAL_UART_Receive+0x10a>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002d36:	b2da      	uxtb	r2, r3
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	3301      	adds	r3, #1
 8002d40:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	3b01      	subs	r3, #1
 8002d4a:	b29a      	uxth	r2, r3
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d1b6      	bne.n	8002cc8 <HAL_UART_Receive+0x96>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002d62:	2300      	movs	r3, #0
 8002d64:	e000      	b.n	8002d68 <HAL_UART_Receive+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002d66:	2302      	movs	r3, #2
  }
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}

08002d70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b088      	sub	sp, #32
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	695b      	ldr	r3, [r3, #20]
 8002d8e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	f003 030f 	and.w	r3, r3, #15
 8002d9e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10d      	bne.n	8002dc2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002da6:	69fb      	ldr	r3, [r7, #28]
 8002da8:	f003 0320 	and.w	r3, r3, #32
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d008      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x52>
 8002db0:	69bb      	ldr	r3, [r7, #24]
 8002db2:	f003 0320 	and.w	r3, r3, #32
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f000 f9cc 	bl	8003158 <UART_Receive_IT>
      return;
 8002dc0:	e0d1      	b.n	8002f66 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80b0 	beq.w	8002f2a <HAL_UART_IRQHandler+0x1ba>
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	f003 0301 	and.w	r3, r3, #1
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d105      	bne.n	8002de0 <HAL_UART_IRQHandler+0x70>
 8002dd4:	69bb      	ldr	r3, [r7, #24]
 8002dd6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	f000 80a5 	beq.w	8002f2a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d00a      	beq.n	8002e00 <HAL_UART_IRQHandler+0x90>
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df8:	f043 0201 	orr.w	r2, r3, #1
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f003 0304 	and.w	r3, r3, #4
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00a      	beq.n	8002e20 <HAL_UART_IRQHandler+0xb0>
 8002e0a:	697b      	ldr	r3, [r7, #20]
 8002e0c:	f003 0301 	and.w	r3, r3, #1
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d005      	beq.n	8002e20 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e18:	f043 0202 	orr.w	r2, r3, #2
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HAL_UART_IRQHandler+0xd0>
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f003 0301 	and.w	r3, r3, #1
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d005      	beq.n	8002e40 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e38:	f043 0204 	orr.w	r2, r3, #4
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0308 	and.w	r3, r3, #8
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00f      	beq.n	8002e6a <HAL_UART_IRQHandler+0xfa>
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	f003 0320 	and.w	r3, r3, #32
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d104      	bne.n	8002e5e <HAL_UART_IRQHandler+0xee>
 8002e54:	697b      	ldr	r3, [r7, #20]
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d005      	beq.n	8002e6a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e62:	f043 0208 	orr.w	r2, r3, #8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d078      	beq.n	8002f64 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	f003 0320 	and.w	r3, r3, #32
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d007      	beq.n	8002e8c <HAL_UART_IRQHandler+0x11c>
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	f003 0320 	and.w	r3, r3, #32
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002e86:	6878      	ldr	r0, [r7, #4]
 8002e88:	f000 f966 	bl	8003158 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bf14      	ite	ne
 8002e9a:	2301      	movne	r3, #1
 8002e9c:	2300      	moveq	r3, #0
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ea6:	f003 0308 	and.w	r3, r3, #8
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d102      	bne.n	8002eb4 <HAL_UART_IRQHandler+0x144>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d031      	beq.n	8002f18 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f000 f8b7 	bl	8003028 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d023      	beq.n	8002f10 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	695a      	ldr	r2, [r3, #20]
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002ed6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d013      	beq.n	8002f08 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee4:	4a21      	ldr	r2, [pc, #132]	; (8002f6c <HAL_UART_IRQHandler+0x1fc>)
 8002ee6:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fe f9e5 	bl	80012bc <HAL_DMA_Abort_IT>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d016      	beq.n	8002f26 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002f02:	4610      	mov	r0, r2
 8002f04:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f06:	e00e      	b.n	8002f26 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 f83a 	bl	8002f82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f0e:	e00a      	b.n	8002f26 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002f10:	6878      	ldr	r0, [r7, #4]
 8002f12:	f000 f836 	bl	8002f82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f16:	e006      	b.n	8002f26 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f832 	bl	8002f82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002f24:	e01e      	b.n	8002f64 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002f26:	bf00      	nop
    return;
 8002f28:	e01c      	b.n	8002f64 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d008      	beq.n	8002f46 <HAL_UART_IRQHandler+0x1d6>
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d003      	beq.n	8002f46 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002f3e:	6878      	ldr	r0, [r7, #4]
 8002f40:	f000 f8a3 	bl	800308a <UART_Transmit_IT>
    return;
 8002f44:	e00f      	b.n	8002f66 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d00a      	beq.n	8002f66 <HAL_UART_IRQHandler+0x1f6>
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d005      	beq.n	8002f66 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002f5a:	6878      	ldr	r0, [r7, #4]
 8002f5c:	f000 f8e4 	bl	8003128 <UART_EndTransmit_IT>
    return;
 8002f60:	bf00      	nop
 8002f62:	e000      	b.n	8002f66 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002f64:	bf00      	nop
  }
}
 8002f66:	3720      	adds	r7, #32
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	bd80      	pop	{r7, pc}
 8002f6c:	08003063 	.word	0x08003063

08002f70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f82:	b480      	push	{r7}
 8002f84:	b083      	sub	sp, #12
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f8a:	bf00      	nop
 8002f8c:	370c      	adds	r7, #12
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bc80      	pop	{r7}
 8002f92:	4770      	bx	lr

08002f94 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	60f8      	str	r0, [r7, #12]
 8002f9c:	60b9      	str	r1, [r7, #8]
 8002f9e:	603b      	str	r3, [r7, #0]
 8002fa0:	4613      	mov	r3, r2
 8002fa2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fa4:	e02c      	b.n	8003000 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fa6:	69bb      	ldr	r3, [r7, #24]
 8002fa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fac:	d028      	beq.n	8003000 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fb4:	f7fe f810 	bl	8000fd8 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	69ba      	ldr	r2, [r7, #24]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d21d      	bcs.n	8003000 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	68da      	ldr	r2, [r3, #12]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002fd2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	695a      	ldr	r2, [r3, #20]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f022 0201 	bic.w	r2, r2, #1
 8002fe2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2220      	movs	r2, #32
 8002ff0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e00f      	b.n	8003020 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4013      	ands	r3, r2
 800300a:	68ba      	ldr	r2, [r7, #8]
 800300c:	429a      	cmp	r2, r3
 800300e:	bf0c      	ite	eq
 8003010:	2301      	moveq	r3, #1
 8003012:	2300      	movne	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	461a      	mov	r2, r3
 8003018:	79fb      	ldrb	r3, [r7, #7]
 800301a:	429a      	cmp	r2, r3
 800301c:	d0c3      	beq.n	8002fa6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800301e:	2300      	movs	r3, #0
}
 8003020:	4618      	mov	r0, r3
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	bd80      	pop	{r7, pc}

08003028 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003028:	b480      	push	{r7}
 800302a:	b083      	sub	sp, #12
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800303e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	695a      	ldr	r2, [r3, #20]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f022 0201 	bic.w	r2, r2, #1
 800304e:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2220      	movs	r2, #32
 8003054:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003058:	bf00      	nop
 800305a:	370c      	adds	r7, #12
 800305c:	46bd      	mov	sp, r7
 800305e:	bc80      	pop	{r7}
 8003060:	4770      	bx	lr

08003062 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	b084      	sub	sp, #16
 8003066:	af00      	add	r7, sp, #0
 8003068:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800306e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2200      	movs	r2, #0
 8003074:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800307c:	68f8      	ldr	r0, [r7, #12]
 800307e:	f7ff ff80 	bl	8002f82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003082:	bf00      	nop
 8003084:	3710      	adds	r7, #16
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}

0800308a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800308a:	b480      	push	{r7}
 800308c:	b085      	sub	sp, #20
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b21      	cmp	r3, #33	; 0x21
 800309c:	d13e      	bne.n	800311c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a6:	d114      	bne.n	80030d2 <UART_Transmit_IT+0x48>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d110      	bne.n	80030d2 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	881b      	ldrh	r3, [r3, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6a1b      	ldr	r3, [r3, #32]
 80030ca:	1c9a      	adds	r2, r3, #2
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	621a      	str	r2, [r3, #32]
 80030d0:	e008      	b.n	80030e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	1c59      	adds	r1, r3, #1
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	6211      	str	r1, [r2, #32]
 80030dc:	781a      	ldrb	r2, [r3, #0]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030e8:	b29b      	uxth	r3, r3
 80030ea:	3b01      	subs	r3, #1
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	687a      	ldr	r2, [r7, #4]
 80030f0:	4619      	mov	r1, r3
 80030f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10f      	bne.n	8003118 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003106:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003116:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003118:	2300      	movs	r3, #0
 800311a:	e000      	b.n	800311e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800311c:	2302      	movs	r3, #2
  }
}
 800311e:	4618      	mov	r0, r3
 8003120:	3714      	adds	r7, #20
 8003122:	46bd      	mov	sp, r7
 8003124:	bc80      	pop	{r7}
 8003126:	4770      	bx	lr

08003128 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b082      	sub	sp, #8
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68da      	ldr	r2, [r3, #12]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800313e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2220      	movs	r2, #32
 8003144:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f7fd fcfc 	bl	8000b46 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800314e:	2300      	movs	r3, #0
}
 8003150:	4618      	mov	r0, r3
 8003152:	3708      	adds	r7, #8
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}

08003158 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003158:	b580      	push	{r7, lr}
 800315a:	b084      	sub	sp, #16
 800315c:	af00      	add	r7, sp, #0
 800315e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003166:	b2db      	uxtb	r3, r3
 8003168:	2b22      	cmp	r3, #34	; 0x22
 800316a:	d170      	bne.n	800324e <UART_Receive_IT+0xf6>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689b      	ldr	r3, [r3, #8]
 8003170:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003174:	d117      	bne.n	80031a6 <UART_Receive_IT+0x4e>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d113      	bne.n	80031a6 <UART_Receive_IT+0x4e>
    {
      pdata8bits  = NULL;
 800317e:	2300      	movs	r3, #0
 8003180:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003186:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	b29b      	uxth	r3, r3
 8003190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003194:	b29a      	uxth	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800319e:	1c9a      	adds	r2, r3, #2
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	629a      	str	r2, [r3, #40]	; 0x28
 80031a4:	e026      	b.n	80031f4 <UART_Receive_IT+0x9c>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031aa:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80031ac:	2300      	movs	r3, #0
 80031ae:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80031b8:	d007      	beq.n	80031ca <UART_Receive_IT+0x72>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	689b      	ldr	r3, [r3, #8]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d10a      	bne.n	80031d8 <UART_Receive_IT+0x80>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d106      	bne.n	80031d8 <UART_Receive_IT+0x80>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	b2da      	uxtb	r2, r3
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	701a      	strb	r2, [r3, #0]
 80031d6:	e008      	b.n	80031ea <UART_Receive_IT+0x92>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80031e4:	b2da      	uxtb	r2, r3
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	1c5a      	adds	r2, r3, #1
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80031f8:	b29b      	uxth	r3, r3
 80031fa:	3b01      	subs	r3, #1
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	4619      	mov	r1, r3
 8003202:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003204:	2b00      	cmp	r3, #0
 8003206:	d120      	bne.n	800324a <UART_Receive_IT+0xf2>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68da      	ldr	r2, [r3, #12]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f022 0220 	bic.w	r2, r2, #32
 8003216:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003226:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	695a      	ldr	r2, [r3, #20]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f022 0201 	bic.w	r2, r2, #1
 8003236:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2220      	movs	r2, #32
 800323c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003240:	6878      	ldr	r0, [r7, #4]
 8003242:	f7ff fe95 	bl	8002f70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003246:	2300      	movs	r3, #0
 8003248:	e002      	b.n	8003250 <UART_Receive_IT+0xf8>
    }
    return HAL_OK;
 800324a:	2300      	movs	r3, #0
 800324c:	e000      	b.n	8003250 <UART_Receive_IT+0xf8>
  }
  else
  {
    return HAL_BUSY;
 800324e:	2302      	movs	r3, #2
  }
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	691b      	ldr	r3, [r3, #16]
 8003266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	691b      	ldr	r3, [r3, #16]
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	4313      	orrs	r3, r2
 8003286:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	68db      	ldr	r3, [r3, #12]
 800328e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003292:	f023 030c 	bic.w	r3, r3, #12
 8003296:	687a      	ldr	r2, [r7, #4]
 8003298:	6812      	ldr	r2, [r2, #0]
 800329a:	68b9      	ldr	r1, [r7, #8]
 800329c:	430b      	orrs	r3, r1
 800329e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	695b      	ldr	r3, [r3, #20]
 80032a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	699a      	ldr	r2, [r3, #24]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	430a      	orrs	r2, r1
 80032b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a2c      	ldr	r2, [pc, #176]	; (800336c <UART_SetConfig+0x114>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d103      	bne.n	80032c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80032c0:	f7ff f80c 	bl	80022dc <HAL_RCC_GetPCLK2Freq>
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	e002      	b.n	80032ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7fe fff4 	bl	80022b4 <HAL_RCC_GetPCLK1Freq>
 80032cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80032ce:	68fa      	ldr	r2, [r7, #12]
 80032d0:	4613      	mov	r3, r2
 80032d2:	009b      	lsls	r3, r3, #2
 80032d4:	4413      	add	r3, r2
 80032d6:	009a      	lsls	r2, r3, #2
 80032d8:	441a      	add	r2, r3
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80032e4:	4a22      	ldr	r2, [pc, #136]	; (8003370 <UART_SetConfig+0x118>)
 80032e6:	fba2 2303 	umull	r2, r3, r2, r3
 80032ea:	095b      	lsrs	r3, r3, #5
 80032ec:	0119      	lsls	r1, r3, #4
 80032ee:	68fa      	ldr	r2, [r7, #12]
 80032f0:	4613      	mov	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4413      	add	r3, r2
 80032f6:	009a      	lsls	r2, r3, #2
 80032f8:	441a      	add	r2, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	fbb2 f2f3 	udiv	r2, r2, r3
 8003304:	4b1a      	ldr	r3, [pc, #104]	; (8003370 <UART_SetConfig+0x118>)
 8003306:	fba3 0302 	umull	r0, r3, r3, r2
 800330a:	095b      	lsrs	r3, r3, #5
 800330c:	2064      	movs	r0, #100	; 0x64
 800330e:	fb00 f303 	mul.w	r3, r0, r3
 8003312:	1ad3      	subs	r3, r2, r3
 8003314:	011b      	lsls	r3, r3, #4
 8003316:	3332      	adds	r3, #50	; 0x32
 8003318:	4a15      	ldr	r2, [pc, #84]	; (8003370 <UART_SetConfig+0x118>)
 800331a:	fba2 2303 	umull	r2, r3, r2, r3
 800331e:	095b      	lsrs	r3, r3, #5
 8003320:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003324:	4419      	add	r1, r3
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009a      	lsls	r2, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fbb2 f2f3 	udiv	r2, r2, r3
 800333c:	4b0c      	ldr	r3, [pc, #48]	; (8003370 <UART_SetConfig+0x118>)
 800333e:	fba3 0302 	umull	r0, r3, r3, r2
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	2064      	movs	r0, #100	; 0x64
 8003346:	fb00 f303 	mul.w	r3, r0, r3
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	011b      	lsls	r3, r3, #4
 800334e:	3332      	adds	r3, #50	; 0x32
 8003350:	4a07      	ldr	r2, [pc, #28]	; (8003370 <UART_SetConfig+0x118>)
 8003352:	fba2 2303 	umull	r2, r3, r2, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	f003 020f 	and.w	r2, r3, #15
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	440a      	add	r2, r1
 8003362:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003364:	bf00      	nop
 8003366:	3710      	adds	r7, #16
 8003368:	46bd      	mov	sp, r7
 800336a:	bd80      	pop	{r7, pc}
 800336c:	40013800 	.word	0x40013800
 8003370:	51eb851f 	.word	0x51eb851f

08003374 <LED_SEQUENCE_init>:

#include "../Inc/Sequence_led.h"


//On initialise les paramètres
void LED_SEQUENCE_init(sequence_led_t * seq_led, GPIO_TypeDef* gpio, uint16_t gpio_pin, int32_t init_seq, uint32_t periode, int8_t length_sequence, bool_e output_logic){
 8003374:	b480      	push	{r7}
 8003376:	b085      	sub	sp, #20
 8003378:	af00      	add	r7, sp, #0
 800337a:	60f8      	str	r0, [r7, #12]
 800337c:	60b9      	str	r1, [r7, #8]
 800337e:	603b      	str	r3, [r7, #0]
 8003380:	4613      	mov	r3, r2
 8003382:	80fb      	strh	r3, [r7, #6]
	//Init des varaibles
	seq_led->compteur = 0;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2200      	movs	r2, #0
 8003388:	741a      	strb	r2, [r3, #16]
	seq_led->gpio = gpio ;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	68ba      	ldr	r2, [r7, #8]
 800338e:	601a      	str	r2, [r3, #0]
	seq_led->gpio_pin = gpio_pin ;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	88fa      	ldrh	r2, [r7, #6]
 8003394:	809a      	strh	r2, [r3, #4]
	seq_led->length_sequence = length_sequence ;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	7f3a      	ldrb	r2, [r7, #28]
 800339a:	745a      	strb	r2, [r3, #17]
	seq_led->periode = periode ;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	69ba      	ldr	r2, [r7, #24]
 80033a0:	609a      	str	r2, [r3, #8]
	seq_led->output_logic = output_logic ;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6a3a      	ldr	r2, [r7, #32]
 80033a6:	619a      	str	r2, [r3, #24]
	if(seq_led->output_logic == 1)
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	699b      	ldr	r3, [r3, #24]
 80033ac:	2b01      	cmp	r3, #1
 80033ae:	d102      	bne.n	80033b6 <LED_SEQUENCE_init+0x42>
		//Si logique négative on inverse la séquence
		init_seq = ~init_seq ;
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	43db      	mvns	r3, r3
 80033b4:	603b      	str	r3, [r7, #0]
	seq_led->sequence = init_seq ;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	683a      	ldr	r2, [r7, #0]
 80033ba:	60da      	str	r2, [r3, #12]




}
 80033bc:	bf00      	nop
 80033be:	3714      	adds	r7, #20
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bc80      	pop	{r7}
 80033c4:	4770      	bx	lr
	...

080033c8 <LED_SEQUENCE_play>:
	seq_led->compteur = 0 ;
	seq_led->sequence = seq ;
}

//On change la sortie de la led en fonction de la séquence active
void LED_SEQUENCE_play(sequence_led_t * seq_led, uint32_t current_time_us){
 80033c8:	b480      	push	{r7}
 80033ca:	b085      	sub	sp, #20
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
 80033d0:	6039      	str	r1, [r7, #0]
	if(current_time_us / 1000 > seq_led->previous_time + seq_led->periode){
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	4a25      	ldr	r2, [pc, #148]	; (800346c <LED_SEQUENCE_play+0xa4>)
 80033d6:	fba2 2303 	umull	r2, r3, r2, r3
 80033da:	099a      	lsrs	r2, r3, #6
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6959      	ldr	r1, [r3, #20]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	440b      	add	r3, r1
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d93a      	bls.n	8003460 <LED_SEQUENCE_play+0x98>
		seq_led->previous_time += seq_led->periode ;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	695a      	ldr	r2, [r3, #20]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	441a      	add	r2, r3
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	615a      	str	r2, [r3, #20]
		//on récupère le niveau logique de la sortie
		bool_e output = ((seq_led->sequence) >> ((seq_led->length_sequence - seq_led->compteur) - 1)) & 1 ;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8003402:	4619      	mov	r1, r3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800340a:	1acb      	subs	r3, r1, r3
 800340c:	3b01      	subs	r3, #1
 800340e:	fa42 f303 	asr.w	r3, r2, r3
 8003412:	f003 0301 	and.w	r3, r3, #1
 8003416:	60fb      	str	r3, [r7, #12]
		//On update la sortie
		if(output)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <LED_SEQUENCE_play+0x62>
			seq_led->gpio->BSRR = seq_led->gpio_pin ;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	889a      	ldrh	r2, [r3, #4]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	611a      	str	r2, [r3, #16]
 8003428:	e006      	b.n	8003438 <LED_SEQUENCE_play+0x70>
		else
			seq_led->gpio->BSRR = (uint32_t)(seq_led->gpio_pin) << 16U ;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	889b      	ldrh	r3, [r3, #4]
 800342e:	461a      	mov	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0412      	lsls	r2, r2, #16
 8003436:	611a      	str	r2, [r3, #16]
		//on update le compteur
		seq_led->compteur ++ ;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	f993 3010 	ldrsb.w	r3, [r3, #16]
 800343e:	b2db      	uxtb	r3, r3
 8003440:	3301      	adds	r3, #1
 8003442:	b2db      	uxtb	r3, r3
 8003444:	b25a      	sxtb	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	741a      	strb	r2, [r3, #16]
		//TODO : verif l'init si length > 0
		if(seq_led->compteur == seq_led->length_sequence)
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	f993 2010 	ldrsb.w	r2, [r3, #16]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	f993 3011 	ldrsb.w	r3, [r3, #17]
 8003456:	429a      	cmp	r2, r3
 8003458:	d102      	bne.n	8003460 <LED_SEQUENCE_play+0x98>
			seq_led->compteur = 0 ;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	741a      	strb	r2, [r3, #16]
	}
}
 8003460:	bf00      	nop
 8003462:	3714      	adds	r7, #20
 8003464:	46bd      	mov	sp, r7
 8003466:	bc80      	pop	{r7}
 8003468:	4770      	bx	lr
 800346a:	bf00      	nop
 800346c:	10624dd3 	.word	0x10624dd3

08003470 <__errno>:
 8003470:	4b01      	ldr	r3, [pc, #4]	; (8003478 <__errno+0x8>)
 8003472:	6818      	ldr	r0, [r3, #0]
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop
 8003478:	2000031c 	.word	0x2000031c

0800347c <__libc_init_array>:
 800347c:	b570      	push	{r4, r5, r6, lr}
 800347e:	2500      	movs	r5, #0
 8003480:	4e0c      	ldr	r6, [pc, #48]	; (80034b4 <__libc_init_array+0x38>)
 8003482:	4c0d      	ldr	r4, [pc, #52]	; (80034b8 <__libc_init_array+0x3c>)
 8003484:	1ba4      	subs	r4, r4, r6
 8003486:	10a4      	asrs	r4, r4, #2
 8003488:	42a5      	cmp	r5, r4
 800348a:	d109      	bne.n	80034a0 <__libc_init_array+0x24>
 800348c:	f000 ffe0 	bl	8004450 <_init>
 8003490:	2500      	movs	r5, #0
 8003492:	4e0a      	ldr	r6, [pc, #40]	; (80034bc <__libc_init_array+0x40>)
 8003494:	4c0a      	ldr	r4, [pc, #40]	; (80034c0 <__libc_init_array+0x44>)
 8003496:	1ba4      	subs	r4, r4, r6
 8003498:	10a4      	asrs	r4, r4, #2
 800349a:	42a5      	cmp	r5, r4
 800349c:	d105      	bne.n	80034aa <__libc_init_array+0x2e>
 800349e:	bd70      	pop	{r4, r5, r6, pc}
 80034a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034a4:	4798      	blx	r3
 80034a6:	3501      	adds	r5, #1
 80034a8:	e7ee      	b.n	8003488 <__libc_init_array+0xc>
 80034aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80034ae:	4798      	blx	r3
 80034b0:	3501      	adds	r5, #1
 80034b2:	e7f2      	b.n	800349a <__libc_init_array+0x1e>
 80034b4:	08004538 	.word	0x08004538
 80034b8:	08004538 	.word	0x08004538
 80034bc:	08004538 	.word	0x08004538
 80034c0:	0800453c 	.word	0x0800453c

080034c4 <memmove>:
 80034c4:	4288      	cmp	r0, r1
 80034c6:	b510      	push	{r4, lr}
 80034c8:	eb01 0302 	add.w	r3, r1, r2
 80034cc:	d807      	bhi.n	80034de <memmove+0x1a>
 80034ce:	1e42      	subs	r2, r0, #1
 80034d0:	4299      	cmp	r1, r3
 80034d2:	d00a      	beq.n	80034ea <memmove+0x26>
 80034d4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80034d8:	f802 4f01 	strb.w	r4, [r2, #1]!
 80034dc:	e7f8      	b.n	80034d0 <memmove+0xc>
 80034de:	4283      	cmp	r3, r0
 80034e0:	d9f5      	bls.n	80034ce <memmove+0xa>
 80034e2:	1881      	adds	r1, r0, r2
 80034e4:	1ad2      	subs	r2, r2, r3
 80034e6:	42d3      	cmn	r3, r2
 80034e8:	d100      	bne.n	80034ec <memmove+0x28>
 80034ea:	bd10      	pop	{r4, pc}
 80034ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80034f0:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80034f4:	e7f7      	b.n	80034e6 <memmove+0x22>

080034f6 <memset>:
 80034f6:	4603      	mov	r3, r0
 80034f8:	4402      	add	r2, r0
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d100      	bne.n	8003500 <memset+0xa>
 80034fe:	4770      	bx	lr
 8003500:	f803 1b01 	strb.w	r1, [r3], #1
 8003504:	e7f9      	b.n	80034fa <memset+0x4>
	...

08003508 <iprintf>:
 8003508:	b40f      	push	{r0, r1, r2, r3}
 800350a:	4b0a      	ldr	r3, [pc, #40]	; (8003534 <iprintf+0x2c>)
 800350c:	b513      	push	{r0, r1, r4, lr}
 800350e:	681c      	ldr	r4, [r3, #0]
 8003510:	b124      	cbz	r4, 800351c <iprintf+0x14>
 8003512:	69a3      	ldr	r3, [r4, #24]
 8003514:	b913      	cbnz	r3, 800351c <iprintf+0x14>
 8003516:	4620      	mov	r0, r4
 8003518:	f000 f9ac 	bl	8003874 <__sinit>
 800351c:	ab05      	add	r3, sp, #20
 800351e:	9a04      	ldr	r2, [sp, #16]
 8003520:	68a1      	ldr	r1, [r4, #8]
 8003522:	4620      	mov	r0, r4
 8003524:	9301      	str	r3, [sp, #4]
 8003526:	f000 fb69 	bl	8003bfc <_vfiprintf_r>
 800352a:	b002      	add	sp, #8
 800352c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003530:	b004      	add	sp, #16
 8003532:	4770      	bx	lr
 8003534:	2000031c 	.word	0x2000031c

08003538 <setvbuf>:
 8003538:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800353c:	461d      	mov	r5, r3
 800353e:	4b51      	ldr	r3, [pc, #324]	; (8003684 <setvbuf+0x14c>)
 8003540:	4604      	mov	r4, r0
 8003542:	681e      	ldr	r6, [r3, #0]
 8003544:	460f      	mov	r7, r1
 8003546:	4690      	mov	r8, r2
 8003548:	b126      	cbz	r6, 8003554 <setvbuf+0x1c>
 800354a:	69b3      	ldr	r3, [r6, #24]
 800354c:	b913      	cbnz	r3, 8003554 <setvbuf+0x1c>
 800354e:	4630      	mov	r0, r6
 8003550:	f000 f990 	bl	8003874 <__sinit>
 8003554:	4b4c      	ldr	r3, [pc, #304]	; (8003688 <setvbuf+0x150>)
 8003556:	429c      	cmp	r4, r3
 8003558:	d152      	bne.n	8003600 <setvbuf+0xc8>
 800355a:	6874      	ldr	r4, [r6, #4]
 800355c:	f1b8 0f02 	cmp.w	r8, #2
 8003560:	d006      	beq.n	8003570 <setvbuf+0x38>
 8003562:	f1b8 0f01 	cmp.w	r8, #1
 8003566:	f200 8089 	bhi.w	800367c <setvbuf+0x144>
 800356a:	2d00      	cmp	r5, #0
 800356c:	f2c0 8086 	blt.w	800367c <setvbuf+0x144>
 8003570:	4621      	mov	r1, r4
 8003572:	4630      	mov	r0, r6
 8003574:	f000 f914 	bl	80037a0 <_fflush_r>
 8003578:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800357a:	b141      	cbz	r1, 800358e <setvbuf+0x56>
 800357c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003580:	4299      	cmp	r1, r3
 8003582:	d002      	beq.n	800358a <setvbuf+0x52>
 8003584:	4630      	mov	r0, r6
 8003586:	f000 fa6b 	bl	8003a60 <_free_r>
 800358a:	2300      	movs	r3, #0
 800358c:	6363      	str	r3, [r4, #52]	; 0x34
 800358e:	2300      	movs	r3, #0
 8003590:	61a3      	str	r3, [r4, #24]
 8003592:	6063      	str	r3, [r4, #4]
 8003594:	89a3      	ldrh	r3, [r4, #12]
 8003596:	061b      	lsls	r3, r3, #24
 8003598:	d503      	bpl.n	80035a2 <setvbuf+0x6a>
 800359a:	6921      	ldr	r1, [r4, #16]
 800359c:	4630      	mov	r0, r6
 800359e:	f000 fa5f 	bl	8003a60 <_free_r>
 80035a2:	89a3      	ldrh	r3, [r4, #12]
 80035a4:	f1b8 0f02 	cmp.w	r8, #2
 80035a8:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 80035ac:	f023 0303 	bic.w	r3, r3, #3
 80035b0:	81a3      	strh	r3, [r4, #12]
 80035b2:	d05d      	beq.n	8003670 <setvbuf+0x138>
 80035b4:	ab01      	add	r3, sp, #4
 80035b6:	466a      	mov	r2, sp
 80035b8:	4621      	mov	r1, r4
 80035ba:	4630      	mov	r0, r6
 80035bc:	f000 f9e4 	bl	8003988 <__swhatbuf_r>
 80035c0:	89a3      	ldrh	r3, [r4, #12]
 80035c2:	4318      	orrs	r0, r3
 80035c4:	81a0      	strh	r0, [r4, #12]
 80035c6:	bb2d      	cbnz	r5, 8003614 <setvbuf+0xdc>
 80035c8:	9d00      	ldr	r5, [sp, #0]
 80035ca:	4628      	mov	r0, r5
 80035cc:	f000 fa40 	bl	8003a50 <malloc>
 80035d0:	4607      	mov	r7, r0
 80035d2:	2800      	cmp	r0, #0
 80035d4:	d14e      	bne.n	8003674 <setvbuf+0x13c>
 80035d6:	f8dd 9000 	ldr.w	r9, [sp]
 80035da:	45a9      	cmp	r9, r5
 80035dc:	d13c      	bne.n	8003658 <setvbuf+0x120>
 80035de:	f04f 30ff 	mov.w	r0, #4294967295
 80035e2:	89a3      	ldrh	r3, [r4, #12]
 80035e4:	f043 0302 	orr.w	r3, r3, #2
 80035e8:	81a3      	strh	r3, [r4, #12]
 80035ea:	2300      	movs	r3, #0
 80035ec:	60a3      	str	r3, [r4, #8]
 80035ee:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80035f2:	6023      	str	r3, [r4, #0]
 80035f4:	6123      	str	r3, [r4, #16]
 80035f6:	2301      	movs	r3, #1
 80035f8:	6163      	str	r3, [r4, #20]
 80035fa:	b003      	add	sp, #12
 80035fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003600:	4b22      	ldr	r3, [pc, #136]	; (800368c <setvbuf+0x154>)
 8003602:	429c      	cmp	r4, r3
 8003604:	d101      	bne.n	800360a <setvbuf+0xd2>
 8003606:	68b4      	ldr	r4, [r6, #8]
 8003608:	e7a8      	b.n	800355c <setvbuf+0x24>
 800360a:	4b21      	ldr	r3, [pc, #132]	; (8003690 <setvbuf+0x158>)
 800360c:	429c      	cmp	r4, r3
 800360e:	bf08      	it	eq
 8003610:	68f4      	ldreq	r4, [r6, #12]
 8003612:	e7a3      	b.n	800355c <setvbuf+0x24>
 8003614:	2f00      	cmp	r7, #0
 8003616:	d0d8      	beq.n	80035ca <setvbuf+0x92>
 8003618:	69b3      	ldr	r3, [r6, #24]
 800361a:	b913      	cbnz	r3, 8003622 <setvbuf+0xea>
 800361c:	4630      	mov	r0, r6
 800361e:	f000 f929 	bl	8003874 <__sinit>
 8003622:	f1b8 0f01 	cmp.w	r8, #1
 8003626:	bf08      	it	eq
 8003628:	89a3      	ldrheq	r3, [r4, #12]
 800362a:	6027      	str	r7, [r4, #0]
 800362c:	bf04      	itt	eq
 800362e:	f043 0301 	orreq.w	r3, r3, #1
 8003632:	81a3      	strheq	r3, [r4, #12]
 8003634:	89a3      	ldrh	r3, [r4, #12]
 8003636:	e9c4 7504 	strd	r7, r5, [r4, #16]
 800363a:	f013 0008 	ands.w	r0, r3, #8
 800363e:	d01b      	beq.n	8003678 <setvbuf+0x140>
 8003640:	f013 0001 	ands.w	r0, r3, #1
 8003644:	f04f 0300 	mov.w	r3, #0
 8003648:	bf1f      	itttt	ne
 800364a:	426d      	negne	r5, r5
 800364c:	60a3      	strne	r3, [r4, #8]
 800364e:	61a5      	strne	r5, [r4, #24]
 8003650:	4618      	movne	r0, r3
 8003652:	bf08      	it	eq
 8003654:	60a5      	streq	r5, [r4, #8]
 8003656:	e7d0      	b.n	80035fa <setvbuf+0xc2>
 8003658:	4648      	mov	r0, r9
 800365a:	f000 f9f9 	bl	8003a50 <malloc>
 800365e:	4607      	mov	r7, r0
 8003660:	2800      	cmp	r0, #0
 8003662:	d0bc      	beq.n	80035de <setvbuf+0xa6>
 8003664:	89a3      	ldrh	r3, [r4, #12]
 8003666:	464d      	mov	r5, r9
 8003668:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800366c:	81a3      	strh	r3, [r4, #12]
 800366e:	e7d3      	b.n	8003618 <setvbuf+0xe0>
 8003670:	2000      	movs	r0, #0
 8003672:	e7b6      	b.n	80035e2 <setvbuf+0xaa>
 8003674:	46a9      	mov	r9, r5
 8003676:	e7f5      	b.n	8003664 <setvbuf+0x12c>
 8003678:	60a0      	str	r0, [r4, #8]
 800367a:	e7be      	b.n	80035fa <setvbuf+0xc2>
 800367c:	f04f 30ff 	mov.w	r0, #4294967295
 8003680:	e7bb      	b.n	80035fa <setvbuf+0xc2>
 8003682:	bf00      	nop
 8003684:	2000031c 	.word	0x2000031c
 8003688:	080044c4 	.word	0x080044c4
 800368c:	080044e4 	.word	0x080044e4
 8003690:	080044a4 	.word	0x080044a4

08003694 <__sflush_r>:
 8003694:	898a      	ldrh	r2, [r1, #12]
 8003696:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800369a:	4605      	mov	r5, r0
 800369c:	0710      	lsls	r0, r2, #28
 800369e:	460c      	mov	r4, r1
 80036a0:	d458      	bmi.n	8003754 <__sflush_r+0xc0>
 80036a2:	684b      	ldr	r3, [r1, #4]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	dc05      	bgt.n	80036b4 <__sflush_r+0x20>
 80036a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	dc02      	bgt.n	80036b4 <__sflush_r+0x20>
 80036ae:	2000      	movs	r0, #0
 80036b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80036b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036b6:	2e00      	cmp	r6, #0
 80036b8:	d0f9      	beq.n	80036ae <__sflush_r+0x1a>
 80036ba:	2300      	movs	r3, #0
 80036bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80036c0:	682f      	ldr	r7, [r5, #0]
 80036c2:	6a21      	ldr	r1, [r4, #32]
 80036c4:	602b      	str	r3, [r5, #0]
 80036c6:	d032      	beq.n	800372e <__sflush_r+0x9a>
 80036c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80036ca:	89a3      	ldrh	r3, [r4, #12]
 80036cc:	075a      	lsls	r2, r3, #29
 80036ce:	d505      	bpl.n	80036dc <__sflush_r+0x48>
 80036d0:	6863      	ldr	r3, [r4, #4]
 80036d2:	1ac0      	subs	r0, r0, r3
 80036d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80036d6:	b10b      	cbz	r3, 80036dc <__sflush_r+0x48>
 80036d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80036da:	1ac0      	subs	r0, r0, r3
 80036dc:	2300      	movs	r3, #0
 80036de:	4602      	mov	r2, r0
 80036e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80036e2:	6a21      	ldr	r1, [r4, #32]
 80036e4:	4628      	mov	r0, r5
 80036e6:	47b0      	blx	r6
 80036e8:	1c43      	adds	r3, r0, #1
 80036ea:	89a3      	ldrh	r3, [r4, #12]
 80036ec:	d106      	bne.n	80036fc <__sflush_r+0x68>
 80036ee:	6829      	ldr	r1, [r5, #0]
 80036f0:	291d      	cmp	r1, #29
 80036f2:	d848      	bhi.n	8003786 <__sflush_r+0xf2>
 80036f4:	4a29      	ldr	r2, [pc, #164]	; (800379c <__sflush_r+0x108>)
 80036f6:	40ca      	lsrs	r2, r1
 80036f8:	07d6      	lsls	r6, r2, #31
 80036fa:	d544      	bpl.n	8003786 <__sflush_r+0xf2>
 80036fc:	2200      	movs	r2, #0
 80036fe:	6062      	str	r2, [r4, #4]
 8003700:	6922      	ldr	r2, [r4, #16]
 8003702:	04d9      	lsls	r1, r3, #19
 8003704:	6022      	str	r2, [r4, #0]
 8003706:	d504      	bpl.n	8003712 <__sflush_r+0x7e>
 8003708:	1c42      	adds	r2, r0, #1
 800370a:	d101      	bne.n	8003710 <__sflush_r+0x7c>
 800370c:	682b      	ldr	r3, [r5, #0]
 800370e:	b903      	cbnz	r3, 8003712 <__sflush_r+0x7e>
 8003710:	6560      	str	r0, [r4, #84]	; 0x54
 8003712:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003714:	602f      	str	r7, [r5, #0]
 8003716:	2900      	cmp	r1, #0
 8003718:	d0c9      	beq.n	80036ae <__sflush_r+0x1a>
 800371a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800371e:	4299      	cmp	r1, r3
 8003720:	d002      	beq.n	8003728 <__sflush_r+0x94>
 8003722:	4628      	mov	r0, r5
 8003724:	f000 f99c 	bl	8003a60 <_free_r>
 8003728:	2000      	movs	r0, #0
 800372a:	6360      	str	r0, [r4, #52]	; 0x34
 800372c:	e7c0      	b.n	80036b0 <__sflush_r+0x1c>
 800372e:	2301      	movs	r3, #1
 8003730:	4628      	mov	r0, r5
 8003732:	47b0      	blx	r6
 8003734:	1c41      	adds	r1, r0, #1
 8003736:	d1c8      	bne.n	80036ca <__sflush_r+0x36>
 8003738:	682b      	ldr	r3, [r5, #0]
 800373a:	2b00      	cmp	r3, #0
 800373c:	d0c5      	beq.n	80036ca <__sflush_r+0x36>
 800373e:	2b1d      	cmp	r3, #29
 8003740:	d001      	beq.n	8003746 <__sflush_r+0xb2>
 8003742:	2b16      	cmp	r3, #22
 8003744:	d101      	bne.n	800374a <__sflush_r+0xb6>
 8003746:	602f      	str	r7, [r5, #0]
 8003748:	e7b1      	b.n	80036ae <__sflush_r+0x1a>
 800374a:	89a3      	ldrh	r3, [r4, #12]
 800374c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003750:	81a3      	strh	r3, [r4, #12]
 8003752:	e7ad      	b.n	80036b0 <__sflush_r+0x1c>
 8003754:	690f      	ldr	r7, [r1, #16]
 8003756:	2f00      	cmp	r7, #0
 8003758:	d0a9      	beq.n	80036ae <__sflush_r+0x1a>
 800375a:	0793      	lsls	r3, r2, #30
 800375c:	bf18      	it	ne
 800375e:	2300      	movne	r3, #0
 8003760:	680e      	ldr	r6, [r1, #0]
 8003762:	bf08      	it	eq
 8003764:	694b      	ldreq	r3, [r1, #20]
 8003766:	eba6 0807 	sub.w	r8, r6, r7
 800376a:	600f      	str	r7, [r1, #0]
 800376c:	608b      	str	r3, [r1, #8]
 800376e:	f1b8 0f00 	cmp.w	r8, #0
 8003772:	dd9c      	ble.n	80036ae <__sflush_r+0x1a>
 8003774:	4643      	mov	r3, r8
 8003776:	463a      	mov	r2, r7
 8003778:	6a21      	ldr	r1, [r4, #32]
 800377a:	4628      	mov	r0, r5
 800377c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800377e:	47b0      	blx	r6
 8003780:	2800      	cmp	r0, #0
 8003782:	dc06      	bgt.n	8003792 <__sflush_r+0xfe>
 8003784:	89a3      	ldrh	r3, [r4, #12]
 8003786:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800378a:	81a3      	strh	r3, [r4, #12]
 800378c:	f04f 30ff 	mov.w	r0, #4294967295
 8003790:	e78e      	b.n	80036b0 <__sflush_r+0x1c>
 8003792:	4407      	add	r7, r0
 8003794:	eba8 0800 	sub.w	r8, r8, r0
 8003798:	e7e9      	b.n	800376e <__sflush_r+0xda>
 800379a:	bf00      	nop
 800379c:	20400001 	.word	0x20400001

080037a0 <_fflush_r>:
 80037a0:	b538      	push	{r3, r4, r5, lr}
 80037a2:	690b      	ldr	r3, [r1, #16]
 80037a4:	4605      	mov	r5, r0
 80037a6:	460c      	mov	r4, r1
 80037a8:	b1db      	cbz	r3, 80037e2 <_fflush_r+0x42>
 80037aa:	b118      	cbz	r0, 80037b4 <_fflush_r+0x14>
 80037ac:	6983      	ldr	r3, [r0, #24]
 80037ae:	b90b      	cbnz	r3, 80037b4 <_fflush_r+0x14>
 80037b0:	f000 f860 	bl	8003874 <__sinit>
 80037b4:	4b0c      	ldr	r3, [pc, #48]	; (80037e8 <_fflush_r+0x48>)
 80037b6:	429c      	cmp	r4, r3
 80037b8:	d109      	bne.n	80037ce <_fflush_r+0x2e>
 80037ba:	686c      	ldr	r4, [r5, #4]
 80037bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80037c0:	b17b      	cbz	r3, 80037e2 <_fflush_r+0x42>
 80037c2:	4621      	mov	r1, r4
 80037c4:	4628      	mov	r0, r5
 80037c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80037ca:	f7ff bf63 	b.w	8003694 <__sflush_r>
 80037ce:	4b07      	ldr	r3, [pc, #28]	; (80037ec <_fflush_r+0x4c>)
 80037d0:	429c      	cmp	r4, r3
 80037d2:	d101      	bne.n	80037d8 <_fflush_r+0x38>
 80037d4:	68ac      	ldr	r4, [r5, #8]
 80037d6:	e7f1      	b.n	80037bc <_fflush_r+0x1c>
 80037d8:	4b05      	ldr	r3, [pc, #20]	; (80037f0 <_fflush_r+0x50>)
 80037da:	429c      	cmp	r4, r3
 80037dc:	bf08      	it	eq
 80037de:	68ec      	ldreq	r4, [r5, #12]
 80037e0:	e7ec      	b.n	80037bc <_fflush_r+0x1c>
 80037e2:	2000      	movs	r0, #0
 80037e4:	bd38      	pop	{r3, r4, r5, pc}
 80037e6:	bf00      	nop
 80037e8:	080044c4 	.word	0x080044c4
 80037ec:	080044e4 	.word	0x080044e4
 80037f0:	080044a4 	.word	0x080044a4

080037f4 <std>:
 80037f4:	2300      	movs	r3, #0
 80037f6:	b510      	push	{r4, lr}
 80037f8:	4604      	mov	r4, r0
 80037fa:	e9c0 3300 	strd	r3, r3, [r0]
 80037fe:	6083      	str	r3, [r0, #8]
 8003800:	8181      	strh	r1, [r0, #12]
 8003802:	6643      	str	r3, [r0, #100]	; 0x64
 8003804:	81c2      	strh	r2, [r0, #14]
 8003806:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800380a:	6183      	str	r3, [r0, #24]
 800380c:	4619      	mov	r1, r3
 800380e:	2208      	movs	r2, #8
 8003810:	305c      	adds	r0, #92	; 0x5c
 8003812:	f7ff fe70 	bl	80034f6 <memset>
 8003816:	4b05      	ldr	r3, [pc, #20]	; (800382c <std+0x38>)
 8003818:	6224      	str	r4, [r4, #32]
 800381a:	6263      	str	r3, [r4, #36]	; 0x24
 800381c:	4b04      	ldr	r3, [pc, #16]	; (8003830 <std+0x3c>)
 800381e:	62a3      	str	r3, [r4, #40]	; 0x28
 8003820:	4b04      	ldr	r3, [pc, #16]	; (8003834 <std+0x40>)
 8003822:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <std+0x44>)
 8003826:	6323      	str	r3, [r4, #48]	; 0x30
 8003828:	bd10      	pop	{r4, pc}
 800382a:	bf00      	nop
 800382c:	08004159 	.word	0x08004159
 8003830:	0800417b 	.word	0x0800417b
 8003834:	080041b3 	.word	0x080041b3
 8003838:	080041d7 	.word	0x080041d7

0800383c <_cleanup_r>:
 800383c:	4901      	ldr	r1, [pc, #4]	; (8003844 <_cleanup_r+0x8>)
 800383e:	f000 b885 	b.w	800394c <_fwalk_reent>
 8003842:	bf00      	nop
 8003844:	080037a1 	.word	0x080037a1

08003848 <__sfmoreglue>:
 8003848:	b570      	push	{r4, r5, r6, lr}
 800384a:	2568      	movs	r5, #104	; 0x68
 800384c:	1e4a      	subs	r2, r1, #1
 800384e:	4355      	muls	r5, r2
 8003850:	460e      	mov	r6, r1
 8003852:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003856:	f000 f94f 	bl	8003af8 <_malloc_r>
 800385a:	4604      	mov	r4, r0
 800385c:	b140      	cbz	r0, 8003870 <__sfmoreglue+0x28>
 800385e:	2100      	movs	r1, #0
 8003860:	e9c0 1600 	strd	r1, r6, [r0]
 8003864:	300c      	adds	r0, #12
 8003866:	60a0      	str	r0, [r4, #8]
 8003868:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800386c:	f7ff fe43 	bl	80034f6 <memset>
 8003870:	4620      	mov	r0, r4
 8003872:	bd70      	pop	{r4, r5, r6, pc}

08003874 <__sinit>:
 8003874:	6983      	ldr	r3, [r0, #24]
 8003876:	b510      	push	{r4, lr}
 8003878:	4604      	mov	r4, r0
 800387a:	bb33      	cbnz	r3, 80038ca <__sinit+0x56>
 800387c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003880:	6503      	str	r3, [r0, #80]	; 0x50
 8003882:	4b12      	ldr	r3, [pc, #72]	; (80038cc <__sinit+0x58>)
 8003884:	4a12      	ldr	r2, [pc, #72]	; (80038d0 <__sinit+0x5c>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6282      	str	r2, [r0, #40]	; 0x28
 800388a:	4298      	cmp	r0, r3
 800388c:	bf04      	itt	eq
 800388e:	2301      	moveq	r3, #1
 8003890:	6183      	streq	r3, [r0, #24]
 8003892:	f000 f81f 	bl	80038d4 <__sfp>
 8003896:	6060      	str	r0, [r4, #4]
 8003898:	4620      	mov	r0, r4
 800389a:	f000 f81b 	bl	80038d4 <__sfp>
 800389e:	60a0      	str	r0, [r4, #8]
 80038a0:	4620      	mov	r0, r4
 80038a2:	f000 f817 	bl	80038d4 <__sfp>
 80038a6:	2200      	movs	r2, #0
 80038a8:	60e0      	str	r0, [r4, #12]
 80038aa:	2104      	movs	r1, #4
 80038ac:	6860      	ldr	r0, [r4, #4]
 80038ae:	f7ff ffa1 	bl	80037f4 <std>
 80038b2:	2201      	movs	r2, #1
 80038b4:	2109      	movs	r1, #9
 80038b6:	68a0      	ldr	r0, [r4, #8]
 80038b8:	f7ff ff9c 	bl	80037f4 <std>
 80038bc:	2202      	movs	r2, #2
 80038be:	2112      	movs	r1, #18
 80038c0:	68e0      	ldr	r0, [r4, #12]
 80038c2:	f7ff ff97 	bl	80037f4 <std>
 80038c6:	2301      	movs	r3, #1
 80038c8:	61a3      	str	r3, [r4, #24]
 80038ca:	bd10      	pop	{r4, pc}
 80038cc:	080044a0 	.word	0x080044a0
 80038d0:	0800383d 	.word	0x0800383d

080038d4 <__sfp>:
 80038d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d6:	4b1b      	ldr	r3, [pc, #108]	; (8003944 <__sfp+0x70>)
 80038d8:	4607      	mov	r7, r0
 80038da:	681e      	ldr	r6, [r3, #0]
 80038dc:	69b3      	ldr	r3, [r6, #24]
 80038de:	b913      	cbnz	r3, 80038e6 <__sfp+0x12>
 80038e0:	4630      	mov	r0, r6
 80038e2:	f7ff ffc7 	bl	8003874 <__sinit>
 80038e6:	3648      	adds	r6, #72	; 0x48
 80038e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80038ec:	3b01      	subs	r3, #1
 80038ee:	d503      	bpl.n	80038f8 <__sfp+0x24>
 80038f0:	6833      	ldr	r3, [r6, #0]
 80038f2:	b133      	cbz	r3, 8003902 <__sfp+0x2e>
 80038f4:	6836      	ldr	r6, [r6, #0]
 80038f6:	e7f7      	b.n	80038e8 <__sfp+0x14>
 80038f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80038fc:	b16d      	cbz	r5, 800391a <__sfp+0x46>
 80038fe:	3468      	adds	r4, #104	; 0x68
 8003900:	e7f4      	b.n	80038ec <__sfp+0x18>
 8003902:	2104      	movs	r1, #4
 8003904:	4638      	mov	r0, r7
 8003906:	f7ff ff9f 	bl	8003848 <__sfmoreglue>
 800390a:	6030      	str	r0, [r6, #0]
 800390c:	2800      	cmp	r0, #0
 800390e:	d1f1      	bne.n	80038f4 <__sfp+0x20>
 8003910:	230c      	movs	r3, #12
 8003912:	4604      	mov	r4, r0
 8003914:	603b      	str	r3, [r7, #0]
 8003916:	4620      	mov	r0, r4
 8003918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800391a:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <__sfp+0x74>)
 800391c:	6665      	str	r5, [r4, #100]	; 0x64
 800391e:	e9c4 5500 	strd	r5, r5, [r4]
 8003922:	60a5      	str	r5, [r4, #8]
 8003924:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003928:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800392c:	2208      	movs	r2, #8
 800392e:	4629      	mov	r1, r5
 8003930:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003934:	f7ff fddf 	bl	80034f6 <memset>
 8003938:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800393c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003940:	e7e9      	b.n	8003916 <__sfp+0x42>
 8003942:	bf00      	nop
 8003944:	080044a0 	.word	0x080044a0
 8003948:	ffff0001 	.word	0xffff0001

0800394c <_fwalk_reent>:
 800394c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003950:	4680      	mov	r8, r0
 8003952:	4689      	mov	r9, r1
 8003954:	2600      	movs	r6, #0
 8003956:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800395a:	b914      	cbnz	r4, 8003962 <_fwalk_reent+0x16>
 800395c:	4630      	mov	r0, r6
 800395e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003962:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003966:	3f01      	subs	r7, #1
 8003968:	d501      	bpl.n	800396e <_fwalk_reent+0x22>
 800396a:	6824      	ldr	r4, [r4, #0]
 800396c:	e7f5      	b.n	800395a <_fwalk_reent+0xe>
 800396e:	89ab      	ldrh	r3, [r5, #12]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d907      	bls.n	8003984 <_fwalk_reent+0x38>
 8003974:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003978:	3301      	adds	r3, #1
 800397a:	d003      	beq.n	8003984 <_fwalk_reent+0x38>
 800397c:	4629      	mov	r1, r5
 800397e:	4640      	mov	r0, r8
 8003980:	47c8      	blx	r9
 8003982:	4306      	orrs	r6, r0
 8003984:	3568      	adds	r5, #104	; 0x68
 8003986:	e7ee      	b.n	8003966 <_fwalk_reent+0x1a>

08003988 <__swhatbuf_r>:
 8003988:	b570      	push	{r4, r5, r6, lr}
 800398a:	460e      	mov	r6, r1
 800398c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003990:	b096      	sub	sp, #88	; 0x58
 8003992:	2900      	cmp	r1, #0
 8003994:	4614      	mov	r4, r2
 8003996:	461d      	mov	r5, r3
 8003998:	da07      	bge.n	80039aa <__swhatbuf_r+0x22>
 800399a:	2300      	movs	r3, #0
 800399c:	602b      	str	r3, [r5, #0]
 800399e:	89b3      	ldrh	r3, [r6, #12]
 80039a0:	061a      	lsls	r2, r3, #24
 80039a2:	d410      	bmi.n	80039c6 <__swhatbuf_r+0x3e>
 80039a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80039a8:	e00e      	b.n	80039c8 <__swhatbuf_r+0x40>
 80039aa:	466a      	mov	r2, sp
 80039ac:	f000 fcfa 	bl	80043a4 <_fstat_r>
 80039b0:	2800      	cmp	r0, #0
 80039b2:	dbf2      	blt.n	800399a <__swhatbuf_r+0x12>
 80039b4:	9a01      	ldr	r2, [sp, #4]
 80039b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80039ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80039be:	425a      	negs	r2, r3
 80039c0:	415a      	adcs	r2, r3
 80039c2:	602a      	str	r2, [r5, #0]
 80039c4:	e7ee      	b.n	80039a4 <__swhatbuf_r+0x1c>
 80039c6:	2340      	movs	r3, #64	; 0x40
 80039c8:	2000      	movs	r0, #0
 80039ca:	6023      	str	r3, [r4, #0]
 80039cc:	b016      	add	sp, #88	; 0x58
 80039ce:	bd70      	pop	{r4, r5, r6, pc}

080039d0 <__smakebuf_r>:
 80039d0:	898b      	ldrh	r3, [r1, #12]
 80039d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80039d4:	079d      	lsls	r5, r3, #30
 80039d6:	4606      	mov	r6, r0
 80039d8:	460c      	mov	r4, r1
 80039da:	d507      	bpl.n	80039ec <__smakebuf_r+0x1c>
 80039dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039e0:	6023      	str	r3, [r4, #0]
 80039e2:	6123      	str	r3, [r4, #16]
 80039e4:	2301      	movs	r3, #1
 80039e6:	6163      	str	r3, [r4, #20]
 80039e8:	b002      	add	sp, #8
 80039ea:	bd70      	pop	{r4, r5, r6, pc}
 80039ec:	ab01      	add	r3, sp, #4
 80039ee:	466a      	mov	r2, sp
 80039f0:	f7ff ffca 	bl	8003988 <__swhatbuf_r>
 80039f4:	9900      	ldr	r1, [sp, #0]
 80039f6:	4605      	mov	r5, r0
 80039f8:	4630      	mov	r0, r6
 80039fa:	f000 f87d 	bl	8003af8 <_malloc_r>
 80039fe:	b948      	cbnz	r0, 8003a14 <__smakebuf_r+0x44>
 8003a00:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a04:	059a      	lsls	r2, r3, #22
 8003a06:	d4ef      	bmi.n	80039e8 <__smakebuf_r+0x18>
 8003a08:	f023 0303 	bic.w	r3, r3, #3
 8003a0c:	f043 0302 	orr.w	r3, r3, #2
 8003a10:	81a3      	strh	r3, [r4, #12]
 8003a12:	e7e3      	b.n	80039dc <__smakebuf_r+0xc>
 8003a14:	4b0d      	ldr	r3, [pc, #52]	; (8003a4c <__smakebuf_r+0x7c>)
 8003a16:	62b3      	str	r3, [r6, #40]	; 0x28
 8003a18:	89a3      	ldrh	r3, [r4, #12]
 8003a1a:	6020      	str	r0, [r4, #0]
 8003a1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a20:	81a3      	strh	r3, [r4, #12]
 8003a22:	9b00      	ldr	r3, [sp, #0]
 8003a24:	6120      	str	r0, [r4, #16]
 8003a26:	6163      	str	r3, [r4, #20]
 8003a28:	9b01      	ldr	r3, [sp, #4]
 8003a2a:	b15b      	cbz	r3, 8003a44 <__smakebuf_r+0x74>
 8003a2c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003a30:	4630      	mov	r0, r6
 8003a32:	f000 fcc9 	bl	80043c8 <_isatty_r>
 8003a36:	b128      	cbz	r0, 8003a44 <__smakebuf_r+0x74>
 8003a38:	89a3      	ldrh	r3, [r4, #12]
 8003a3a:	f023 0303 	bic.w	r3, r3, #3
 8003a3e:	f043 0301 	orr.w	r3, r3, #1
 8003a42:	81a3      	strh	r3, [r4, #12]
 8003a44:	89a3      	ldrh	r3, [r4, #12]
 8003a46:	431d      	orrs	r5, r3
 8003a48:	81a5      	strh	r5, [r4, #12]
 8003a4a:	e7cd      	b.n	80039e8 <__smakebuf_r+0x18>
 8003a4c:	0800383d 	.word	0x0800383d

08003a50 <malloc>:
 8003a50:	4b02      	ldr	r3, [pc, #8]	; (8003a5c <malloc+0xc>)
 8003a52:	4601      	mov	r1, r0
 8003a54:	6818      	ldr	r0, [r3, #0]
 8003a56:	f000 b84f 	b.w	8003af8 <_malloc_r>
 8003a5a:	bf00      	nop
 8003a5c:	2000031c 	.word	0x2000031c

08003a60 <_free_r>:
 8003a60:	b538      	push	{r3, r4, r5, lr}
 8003a62:	4605      	mov	r5, r0
 8003a64:	2900      	cmp	r1, #0
 8003a66:	d043      	beq.n	8003af0 <_free_r+0x90>
 8003a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a6c:	1f0c      	subs	r4, r1, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	bfb8      	it	lt
 8003a72:	18e4      	addlt	r4, r4, r3
 8003a74:	f000 fcd8 	bl	8004428 <__malloc_lock>
 8003a78:	4a1e      	ldr	r2, [pc, #120]	; (8003af4 <_free_r+0x94>)
 8003a7a:	6813      	ldr	r3, [r2, #0]
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	b933      	cbnz	r3, 8003a8e <_free_r+0x2e>
 8003a80:	6063      	str	r3, [r4, #4]
 8003a82:	6014      	str	r4, [r2, #0]
 8003a84:	4628      	mov	r0, r5
 8003a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a8a:	f000 bcce 	b.w	800442a <__malloc_unlock>
 8003a8e:	42a3      	cmp	r3, r4
 8003a90:	d90b      	bls.n	8003aaa <_free_r+0x4a>
 8003a92:	6821      	ldr	r1, [r4, #0]
 8003a94:	1862      	adds	r2, r4, r1
 8003a96:	4293      	cmp	r3, r2
 8003a98:	bf01      	itttt	eq
 8003a9a:	681a      	ldreq	r2, [r3, #0]
 8003a9c:	685b      	ldreq	r3, [r3, #4]
 8003a9e:	1852      	addeq	r2, r2, r1
 8003aa0:	6022      	streq	r2, [r4, #0]
 8003aa2:	6063      	str	r3, [r4, #4]
 8003aa4:	6004      	str	r4, [r0, #0]
 8003aa6:	e7ed      	b.n	8003a84 <_free_r+0x24>
 8003aa8:	4613      	mov	r3, r2
 8003aaa:	685a      	ldr	r2, [r3, #4]
 8003aac:	b10a      	cbz	r2, 8003ab2 <_free_r+0x52>
 8003aae:	42a2      	cmp	r2, r4
 8003ab0:	d9fa      	bls.n	8003aa8 <_free_r+0x48>
 8003ab2:	6819      	ldr	r1, [r3, #0]
 8003ab4:	1858      	adds	r0, r3, r1
 8003ab6:	42a0      	cmp	r0, r4
 8003ab8:	d10b      	bne.n	8003ad2 <_free_r+0x72>
 8003aba:	6820      	ldr	r0, [r4, #0]
 8003abc:	4401      	add	r1, r0
 8003abe:	1858      	adds	r0, r3, r1
 8003ac0:	4282      	cmp	r2, r0
 8003ac2:	6019      	str	r1, [r3, #0]
 8003ac4:	d1de      	bne.n	8003a84 <_free_r+0x24>
 8003ac6:	6810      	ldr	r0, [r2, #0]
 8003ac8:	6852      	ldr	r2, [r2, #4]
 8003aca:	4401      	add	r1, r0
 8003acc:	6019      	str	r1, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	e7d8      	b.n	8003a84 <_free_r+0x24>
 8003ad2:	d902      	bls.n	8003ada <_free_r+0x7a>
 8003ad4:	230c      	movs	r3, #12
 8003ad6:	602b      	str	r3, [r5, #0]
 8003ad8:	e7d4      	b.n	8003a84 <_free_r+0x24>
 8003ada:	6820      	ldr	r0, [r4, #0]
 8003adc:	1821      	adds	r1, r4, r0
 8003ade:	428a      	cmp	r2, r1
 8003ae0:	bf01      	itttt	eq
 8003ae2:	6811      	ldreq	r1, [r2, #0]
 8003ae4:	6852      	ldreq	r2, [r2, #4]
 8003ae6:	1809      	addeq	r1, r1, r0
 8003ae8:	6021      	streq	r1, [r4, #0]
 8003aea:	6062      	str	r2, [r4, #4]
 8003aec:	605c      	str	r4, [r3, #4]
 8003aee:	e7c9      	b.n	8003a84 <_free_r+0x24>
 8003af0:	bd38      	pop	{r3, r4, r5, pc}
 8003af2:	bf00      	nop
 8003af4:	200003c0 	.word	0x200003c0

08003af8 <_malloc_r>:
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	1ccd      	adds	r5, r1, #3
 8003afc:	f025 0503 	bic.w	r5, r5, #3
 8003b00:	3508      	adds	r5, #8
 8003b02:	2d0c      	cmp	r5, #12
 8003b04:	bf38      	it	cc
 8003b06:	250c      	movcc	r5, #12
 8003b08:	2d00      	cmp	r5, #0
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	db01      	blt.n	8003b12 <_malloc_r+0x1a>
 8003b0e:	42a9      	cmp	r1, r5
 8003b10:	d903      	bls.n	8003b1a <_malloc_r+0x22>
 8003b12:	230c      	movs	r3, #12
 8003b14:	6033      	str	r3, [r6, #0]
 8003b16:	2000      	movs	r0, #0
 8003b18:	bd70      	pop	{r4, r5, r6, pc}
 8003b1a:	f000 fc85 	bl	8004428 <__malloc_lock>
 8003b1e:	4a21      	ldr	r2, [pc, #132]	; (8003ba4 <_malloc_r+0xac>)
 8003b20:	6814      	ldr	r4, [r2, #0]
 8003b22:	4621      	mov	r1, r4
 8003b24:	b991      	cbnz	r1, 8003b4c <_malloc_r+0x54>
 8003b26:	4c20      	ldr	r4, [pc, #128]	; (8003ba8 <_malloc_r+0xb0>)
 8003b28:	6823      	ldr	r3, [r4, #0]
 8003b2a:	b91b      	cbnz	r3, 8003b34 <_malloc_r+0x3c>
 8003b2c:	4630      	mov	r0, r6
 8003b2e:	f000 fb03 	bl	8004138 <_sbrk_r>
 8003b32:	6020      	str	r0, [r4, #0]
 8003b34:	4629      	mov	r1, r5
 8003b36:	4630      	mov	r0, r6
 8003b38:	f000 fafe 	bl	8004138 <_sbrk_r>
 8003b3c:	1c43      	adds	r3, r0, #1
 8003b3e:	d124      	bne.n	8003b8a <_malloc_r+0x92>
 8003b40:	230c      	movs	r3, #12
 8003b42:	4630      	mov	r0, r6
 8003b44:	6033      	str	r3, [r6, #0]
 8003b46:	f000 fc70 	bl	800442a <__malloc_unlock>
 8003b4a:	e7e4      	b.n	8003b16 <_malloc_r+0x1e>
 8003b4c:	680b      	ldr	r3, [r1, #0]
 8003b4e:	1b5b      	subs	r3, r3, r5
 8003b50:	d418      	bmi.n	8003b84 <_malloc_r+0x8c>
 8003b52:	2b0b      	cmp	r3, #11
 8003b54:	d90f      	bls.n	8003b76 <_malloc_r+0x7e>
 8003b56:	600b      	str	r3, [r1, #0]
 8003b58:	18cc      	adds	r4, r1, r3
 8003b5a:	50cd      	str	r5, [r1, r3]
 8003b5c:	4630      	mov	r0, r6
 8003b5e:	f000 fc64 	bl	800442a <__malloc_unlock>
 8003b62:	f104 000b 	add.w	r0, r4, #11
 8003b66:	1d23      	adds	r3, r4, #4
 8003b68:	f020 0007 	bic.w	r0, r0, #7
 8003b6c:	1ac3      	subs	r3, r0, r3
 8003b6e:	d0d3      	beq.n	8003b18 <_malloc_r+0x20>
 8003b70:	425a      	negs	r2, r3
 8003b72:	50e2      	str	r2, [r4, r3]
 8003b74:	e7d0      	b.n	8003b18 <_malloc_r+0x20>
 8003b76:	684b      	ldr	r3, [r1, #4]
 8003b78:	428c      	cmp	r4, r1
 8003b7a:	bf16      	itet	ne
 8003b7c:	6063      	strne	r3, [r4, #4]
 8003b7e:	6013      	streq	r3, [r2, #0]
 8003b80:	460c      	movne	r4, r1
 8003b82:	e7eb      	b.n	8003b5c <_malloc_r+0x64>
 8003b84:	460c      	mov	r4, r1
 8003b86:	6849      	ldr	r1, [r1, #4]
 8003b88:	e7cc      	b.n	8003b24 <_malloc_r+0x2c>
 8003b8a:	1cc4      	adds	r4, r0, #3
 8003b8c:	f024 0403 	bic.w	r4, r4, #3
 8003b90:	42a0      	cmp	r0, r4
 8003b92:	d005      	beq.n	8003ba0 <_malloc_r+0xa8>
 8003b94:	1a21      	subs	r1, r4, r0
 8003b96:	4630      	mov	r0, r6
 8003b98:	f000 face 	bl	8004138 <_sbrk_r>
 8003b9c:	3001      	adds	r0, #1
 8003b9e:	d0cf      	beq.n	8003b40 <_malloc_r+0x48>
 8003ba0:	6025      	str	r5, [r4, #0]
 8003ba2:	e7db      	b.n	8003b5c <_malloc_r+0x64>
 8003ba4:	200003c0 	.word	0x200003c0
 8003ba8:	200003c4 	.word	0x200003c4

08003bac <__sfputc_r>:
 8003bac:	6893      	ldr	r3, [r2, #8]
 8003bae:	b410      	push	{r4}
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	6093      	str	r3, [r2, #8]
 8003bb6:	da07      	bge.n	8003bc8 <__sfputc_r+0x1c>
 8003bb8:	6994      	ldr	r4, [r2, #24]
 8003bba:	42a3      	cmp	r3, r4
 8003bbc:	db01      	blt.n	8003bc2 <__sfputc_r+0x16>
 8003bbe:	290a      	cmp	r1, #10
 8003bc0:	d102      	bne.n	8003bc8 <__sfputc_r+0x1c>
 8003bc2:	bc10      	pop	{r4}
 8003bc4:	f000 bb0c 	b.w	80041e0 <__swbuf_r>
 8003bc8:	6813      	ldr	r3, [r2, #0]
 8003bca:	1c58      	adds	r0, r3, #1
 8003bcc:	6010      	str	r0, [r2, #0]
 8003bce:	7019      	strb	r1, [r3, #0]
 8003bd0:	4608      	mov	r0, r1
 8003bd2:	bc10      	pop	{r4}
 8003bd4:	4770      	bx	lr

08003bd6 <__sfputs_r>:
 8003bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bd8:	4606      	mov	r6, r0
 8003bda:	460f      	mov	r7, r1
 8003bdc:	4614      	mov	r4, r2
 8003bde:	18d5      	adds	r5, r2, r3
 8003be0:	42ac      	cmp	r4, r5
 8003be2:	d101      	bne.n	8003be8 <__sfputs_r+0x12>
 8003be4:	2000      	movs	r0, #0
 8003be6:	e007      	b.n	8003bf8 <__sfputs_r+0x22>
 8003be8:	463a      	mov	r2, r7
 8003bea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003bee:	4630      	mov	r0, r6
 8003bf0:	f7ff ffdc 	bl	8003bac <__sfputc_r>
 8003bf4:	1c43      	adds	r3, r0, #1
 8003bf6:	d1f3      	bne.n	8003be0 <__sfputs_r+0xa>
 8003bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003bfc <_vfiprintf_r>:
 8003bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c00:	460c      	mov	r4, r1
 8003c02:	b09d      	sub	sp, #116	; 0x74
 8003c04:	4617      	mov	r7, r2
 8003c06:	461d      	mov	r5, r3
 8003c08:	4606      	mov	r6, r0
 8003c0a:	b118      	cbz	r0, 8003c14 <_vfiprintf_r+0x18>
 8003c0c:	6983      	ldr	r3, [r0, #24]
 8003c0e:	b90b      	cbnz	r3, 8003c14 <_vfiprintf_r+0x18>
 8003c10:	f7ff fe30 	bl	8003874 <__sinit>
 8003c14:	4b7c      	ldr	r3, [pc, #496]	; (8003e08 <_vfiprintf_r+0x20c>)
 8003c16:	429c      	cmp	r4, r3
 8003c18:	d158      	bne.n	8003ccc <_vfiprintf_r+0xd0>
 8003c1a:	6874      	ldr	r4, [r6, #4]
 8003c1c:	89a3      	ldrh	r3, [r4, #12]
 8003c1e:	0718      	lsls	r0, r3, #28
 8003c20:	d55e      	bpl.n	8003ce0 <_vfiprintf_r+0xe4>
 8003c22:	6923      	ldr	r3, [r4, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d05b      	beq.n	8003ce0 <_vfiprintf_r+0xe4>
 8003c28:	2300      	movs	r3, #0
 8003c2a:	9309      	str	r3, [sp, #36]	; 0x24
 8003c2c:	2320      	movs	r3, #32
 8003c2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8003c32:	2330      	movs	r3, #48	; 0x30
 8003c34:	f04f 0b01 	mov.w	fp, #1
 8003c38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003c3c:	9503      	str	r5, [sp, #12]
 8003c3e:	46b8      	mov	r8, r7
 8003c40:	4645      	mov	r5, r8
 8003c42:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003c46:	b10b      	cbz	r3, 8003c4c <_vfiprintf_r+0x50>
 8003c48:	2b25      	cmp	r3, #37	; 0x25
 8003c4a:	d154      	bne.n	8003cf6 <_vfiprintf_r+0xfa>
 8003c4c:	ebb8 0a07 	subs.w	sl, r8, r7
 8003c50:	d00b      	beq.n	8003c6a <_vfiprintf_r+0x6e>
 8003c52:	4653      	mov	r3, sl
 8003c54:	463a      	mov	r2, r7
 8003c56:	4621      	mov	r1, r4
 8003c58:	4630      	mov	r0, r6
 8003c5a:	f7ff ffbc 	bl	8003bd6 <__sfputs_r>
 8003c5e:	3001      	adds	r0, #1
 8003c60:	f000 80c2 	beq.w	8003de8 <_vfiprintf_r+0x1ec>
 8003c64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003c66:	4453      	add	r3, sl
 8003c68:	9309      	str	r3, [sp, #36]	; 0x24
 8003c6a:	f898 3000 	ldrb.w	r3, [r8]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	f000 80ba 	beq.w	8003de8 <_vfiprintf_r+0x1ec>
 8003c74:	2300      	movs	r3, #0
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003c7e:	9304      	str	r3, [sp, #16]
 8003c80:	9307      	str	r3, [sp, #28]
 8003c82:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003c86:	931a      	str	r3, [sp, #104]	; 0x68
 8003c88:	46a8      	mov	r8, r5
 8003c8a:	2205      	movs	r2, #5
 8003c8c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003c90:	485e      	ldr	r0, [pc, #376]	; (8003e0c <_vfiprintf_r+0x210>)
 8003c92:	f000 fbbb 	bl	800440c <memchr>
 8003c96:	9b04      	ldr	r3, [sp, #16]
 8003c98:	bb78      	cbnz	r0, 8003cfa <_vfiprintf_r+0xfe>
 8003c9a:	06d9      	lsls	r1, r3, #27
 8003c9c:	bf44      	itt	mi
 8003c9e:	2220      	movmi	r2, #32
 8003ca0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003ca4:	071a      	lsls	r2, r3, #28
 8003ca6:	bf44      	itt	mi
 8003ca8:	222b      	movmi	r2, #43	; 0x2b
 8003caa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003cae:	782a      	ldrb	r2, [r5, #0]
 8003cb0:	2a2a      	cmp	r2, #42	; 0x2a
 8003cb2:	d02a      	beq.n	8003d0a <_vfiprintf_r+0x10e>
 8003cb4:	46a8      	mov	r8, r5
 8003cb6:	2000      	movs	r0, #0
 8003cb8:	250a      	movs	r5, #10
 8003cba:	9a07      	ldr	r2, [sp, #28]
 8003cbc:	4641      	mov	r1, r8
 8003cbe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003cc2:	3b30      	subs	r3, #48	; 0x30
 8003cc4:	2b09      	cmp	r3, #9
 8003cc6:	d969      	bls.n	8003d9c <_vfiprintf_r+0x1a0>
 8003cc8:	b360      	cbz	r0, 8003d24 <_vfiprintf_r+0x128>
 8003cca:	e024      	b.n	8003d16 <_vfiprintf_r+0x11a>
 8003ccc:	4b50      	ldr	r3, [pc, #320]	; (8003e10 <_vfiprintf_r+0x214>)
 8003cce:	429c      	cmp	r4, r3
 8003cd0:	d101      	bne.n	8003cd6 <_vfiprintf_r+0xda>
 8003cd2:	68b4      	ldr	r4, [r6, #8]
 8003cd4:	e7a2      	b.n	8003c1c <_vfiprintf_r+0x20>
 8003cd6:	4b4f      	ldr	r3, [pc, #316]	; (8003e14 <_vfiprintf_r+0x218>)
 8003cd8:	429c      	cmp	r4, r3
 8003cda:	bf08      	it	eq
 8003cdc:	68f4      	ldreq	r4, [r6, #12]
 8003cde:	e79d      	b.n	8003c1c <_vfiprintf_r+0x20>
 8003ce0:	4621      	mov	r1, r4
 8003ce2:	4630      	mov	r0, r6
 8003ce4:	f000 fae0 	bl	80042a8 <__swsetup_r>
 8003ce8:	2800      	cmp	r0, #0
 8003cea:	d09d      	beq.n	8003c28 <_vfiprintf_r+0x2c>
 8003cec:	f04f 30ff 	mov.w	r0, #4294967295
 8003cf0:	b01d      	add	sp, #116	; 0x74
 8003cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003cf6:	46a8      	mov	r8, r5
 8003cf8:	e7a2      	b.n	8003c40 <_vfiprintf_r+0x44>
 8003cfa:	4a44      	ldr	r2, [pc, #272]	; (8003e0c <_vfiprintf_r+0x210>)
 8003cfc:	4645      	mov	r5, r8
 8003cfe:	1a80      	subs	r0, r0, r2
 8003d00:	fa0b f000 	lsl.w	r0, fp, r0
 8003d04:	4318      	orrs	r0, r3
 8003d06:	9004      	str	r0, [sp, #16]
 8003d08:	e7be      	b.n	8003c88 <_vfiprintf_r+0x8c>
 8003d0a:	9a03      	ldr	r2, [sp, #12]
 8003d0c:	1d11      	adds	r1, r2, #4
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	9103      	str	r1, [sp, #12]
 8003d12:	2a00      	cmp	r2, #0
 8003d14:	db01      	blt.n	8003d1a <_vfiprintf_r+0x11e>
 8003d16:	9207      	str	r2, [sp, #28]
 8003d18:	e004      	b.n	8003d24 <_vfiprintf_r+0x128>
 8003d1a:	4252      	negs	r2, r2
 8003d1c:	f043 0302 	orr.w	r3, r3, #2
 8003d20:	9207      	str	r2, [sp, #28]
 8003d22:	9304      	str	r3, [sp, #16]
 8003d24:	f898 3000 	ldrb.w	r3, [r8]
 8003d28:	2b2e      	cmp	r3, #46	; 0x2e
 8003d2a:	d10e      	bne.n	8003d4a <_vfiprintf_r+0x14e>
 8003d2c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003d30:	2b2a      	cmp	r3, #42	; 0x2a
 8003d32:	d138      	bne.n	8003da6 <_vfiprintf_r+0x1aa>
 8003d34:	9b03      	ldr	r3, [sp, #12]
 8003d36:	f108 0802 	add.w	r8, r8, #2
 8003d3a:	1d1a      	adds	r2, r3, #4
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	9203      	str	r2, [sp, #12]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	bfb8      	it	lt
 8003d44:	f04f 33ff 	movlt.w	r3, #4294967295
 8003d48:	9305      	str	r3, [sp, #20]
 8003d4a:	4d33      	ldr	r5, [pc, #204]	; (8003e18 <_vfiprintf_r+0x21c>)
 8003d4c:	2203      	movs	r2, #3
 8003d4e:	f898 1000 	ldrb.w	r1, [r8]
 8003d52:	4628      	mov	r0, r5
 8003d54:	f000 fb5a 	bl	800440c <memchr>
 8003d58:	b140      	cbz	r0, 8003d6c <_vfiprintf_r+0x170>
 8003d5a:	2340      	movs	r3, #64	; 0x40
 8003d5c:	1b40      	subs	r0, r0, r5
 8003d5e:	fa03 f000 	lsl.w	r0, r3, r0
 8003d62:	9b04      	ldr	r3, [sp, #16]
 8003d64:	f108 0801 	add.w	r8, r8, #1
 8003d68:	4303      	orrs	r3, r0
 8003d6a:	9304      	str	r3, [sp, #16]
 8003d6c:	f898 1000 	ldrb.w	r1, [r8]
 8003d70:	2206      	movs	r2, #6
 8003d72:	482a      	ldr	r0, [pc, #168]	; (8003e1c <_vfiprintf_r+0x220>)
 8003d74:	f108 0701 	add.w	r7, r8, #1
 8003d78:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003d7c:	f000 fb46 	bl	800440c <memchr>
 8003d80:	2800      	cmp	r0, #0
 8003d82:	d037      	beq.n	8003df4 <_vfiprintf_r+0x1f8>
 8003d84:	4b26      	ldr	r3, [pc, #152]	; (8003e20 <_vfiprintf_r+0x224>)
 8003d86:	bb1b      	cbnz	r3, 8003dd0 <_vfiprintf_r+0x1d4>
 8003d88:	9b03      	ldr	r3, [sp, #12]
 8003d8a:	3307      	adds	r3, #7
 8003d8c:	f023 0307 	bic.w	r3, r3, #7
 8003d90:	3308      	adds	r3, #8
 8003d92:	9303      	str	r3, [sp, #12]
 8003d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003d96:	444b      	add	r3, r9
 8003d98:	9309      	str	r3, [sp, #36]	; 0x24
 8003d9a:	e750      	b.n	8003c3e <_vfiprintf_r+0x42>
 8003d9c:	fb05 3202 	mla	r2, r5, r2, r3
 8003da0:	2001      	movs	r0, #1
 8003da2:	4688      	mov	r8, r1
 8003da4:	e78a      	b.n	8003cbc <_vfiprintf_r+0xc0>
 8003da6:	2300      	movs	r3, #0
 8003da8:	250a      	movs	r5, #10
 8003daa:	4619      	mov	r1, r3
 8003dac:	f108 0801 	add.w	r8, r8, #1
 8003db0:	9305      	str	r3, [sp, #20]
 8003db2:	4640      	mov	r0, r8
 8003db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003db8:	3a30      	subs	r2, #48	; 0x30
 8003dba:	2a09      	cmp	r2, #9
 8003dbc:	d903      	bls.n	8003dc6 <_vfiprintf_r+0x1ca>
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d0c3      	beq.n	8003d4a <_vfiprintf_r+0x14e>
 8003dc2:	9105      	str	r1, [sp, #20]
 8003dc4:	e7c1      	b.n	8003d4a <_vfiprintf_r+0x14e>
 8003dc6:	fb05 2101 	mla	r1, r5, r1, r2
 8003dca:	2301      	movs	r3, #1
 8003dcc:	4680      	mov	r8, r0
 8003dce:	e7f0      	b.n	8003db2 <_vfiprintf_r+0x1b6>
 8003dd0:	ab03      	add	r3, sp, #12
 8003dd2:	9300      	str	r3, [sp, #0]
 8003dd4:	4622      	mov	r2, r4
 8003dd6:	4b13      	ldr	r3, [pc, #76]	; (8003e24 <_vfiprintf_r+0x228>)
 8003dd8:	a904      	add	r1, sp, #16
 8003dda:	4630      	mov	r0, r6
 8003ddc:	f3af 8000 	nop.w
 8003de0:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003de4:	4681      	mov	r9, r0
 8003de6:	d1d5      	bne.n	8003d94 <_vfiprintf_r+0x198>
 8003de8:	89a3      	ldrh	r3, [r4, #12]
 8003dea:	065b      	lsls	r3, r3, #25
 8003dec:	f53f af7e 	bmi.w	8003cec <_vfiprintf_r+0xf0>
 8003df0:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003df2:	e77d      	b.n	8003cf0 <_vfiprintf_r+0xf4>
 8003df4:	ab03      	add	r3, sp, #12
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	4622      	mov	r2, r4
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <_vfiprintf_r+0x228>)
 8003dfc:	a904      	add	r1, sp, #16
 8003dfe:	4630      	mov	r0, r6
 8003e00:	f000 f888 	bl	8003f14 <_printf_i>
 8003e04:	e7ec      	b.n	8003de0 <_vfiprintf_r+0x1e4>
 8003e06:	bf00      	nop
 8003e08:	080044c4 	.word	0x080044c4
 8003e0c:	08004504 	.word	0x08004504
 8003e10:	080044e4 	.word	0x080044e4
 8003e14:	080044a4 	.word	0x080044a4
 8003e18:	0800450a 	.word	0x0800450a
 8003e1c:	0800450e 	.word	0x0800450e
 8003e20:	00000000 	.word	0x00000000
 8003e24:	08003bd7 	.word	0x08003bd7

08003e28 <_printf_common>:
 8003e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e2c:	4691      	mov	r9, r2
 8003e2e:	461f      	mov	r7, r3
 8003e30:	688a      	ldr	r2, [r1, #8]
 8003e32:	690b      	ldr	r3, [r1, #16]
 8003e34:	4606      	mov	r6, r0
 8003e36:	4293      	cmp	r3, r2
 8003e38:	bfb8      	it	lt
 8003e3a:	4613      	movlt	r3, r2
 8003e3c:	f8c9 3000 	str.w	r3, [r9]
 8003e40:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003e44:	460c      	mov	r4, r1
 8003e46:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003e4a:	b112      	cbz	r2, 8003e52 <_printf_common+0x2a>
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	f8c9 3000 	str.w	r3, [r9]
 8003e52:	6823      	ldr	r3, [r4, #0]
 8003e54:	0699      	lsls	r1, r3, #26
 8003e56:	bf42      	ittt	mi
 8003e58:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003e5c:	3302      	addmi	r3, #2
 8003e5e:	f8c9 3000 	strmi.w	r3, [r9]
 8003e62:	6825      	ldr	r5, [r4, #0]
 8003e64:	f015 0506 	ands.w	r5, r5, #6
 8003e68:	d107      	bne.n	8003e7a <_printf_common+0x52>
 8003e6a:	f104 0a19 	add.w	sl, r4, #25
 8003e6e:	68e3      	ldr	r3, [r4, #12]
 8003e70:	f8d9 2000 	ldr.w	r2, [r9]
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	42ab      	cmp	r3, r5
 8003e78:	dc29      	bgt.n	8003ece <_printf_common+0xa6>
 8003e7a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003e7e:	6822      	ldr	r2, [r4, #0]
 8003e80:	3300      	adds	r3, #0
 8003e82:	bf18      	it	ne
 8003e84:	2301      	movne	r3, #1
 8003e86:	0692      	lsls	r2, r2, #26
 8003e88:	d42e      	bmi.n	8003ee8 <_printf_common+0xc0>
 8003e8a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003e8e:	4639      	mov	r1, r7
 8003e90:	4630      	mov	r0, r6
 8003e92:	47c0      	blx	r8
 8003e94:	3001      	adds	r0, #1
 8003e96:	d021      	beq.n	8003edc <_printf_common+0xb4>
 8003e98:	6823      	ldr	r3, [r4, #0]
 8003e9a:	68e5      	ldr	r5, [r4, #12]
 8003e9c:	f003 0306 	and.w	r3, r3, #6
 8003ea0:	2b04      	cmp	r3, #4
 8003ea2:	bf18      	it	ne
 8003ea4:	2500      	movne	r5, #0
 8003ea6:	f8d9 2000 	ldr.w	r2, [r9]
 8003eaa:	f04f 0900 	mov.w	r9, #0
 8003eae:	bf08      	it	eq
 8003eb0:	1aad      	subeq	r5, r5, r2
 8003eb2:	68a3      	ldr	r3, [r4, #8]
 8003eb4:	6922      	ldr	r2, [r4, #16]
 8003eb6:	bf08      	it	eq
 8003eb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	bfc4      	itt	gt
 8003ec0:	1a9b      	subgt	r3, r3, r2
 8003ec2:	18ed      	addgt	r5, r5, r3
 8003ec4:	341a      	adds	r4, #26
 8003ec6:	454d      	cmp	r5, r9
 8003ec8:	d11a      	bne.n	8003f00 <_printf_common+0xd8>
 8003eca:	2000      	movs	r0, #0
 8003ecc:	e008      	b.n	8003ee0 <_printf_common+0xb8>
 8003ece:	2301      	movs	r3, #1
 8003ed0:	4652      	mov	r2, sl
 8003ed2:	4639      	mov	r1, r7
 8003ed4:	4630      	mov	r0, r6
 8003ed6:	47c0      	blx	r8
 8003ed8:	3001      	adds	r0, #1
 8003eda:	d103      	bne.n	8003ee4 <_printf_common+0xbc>
 8003edc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ee4:	3501      	adds	r5, #1
 8003ee6:	e7c2      	b.n	8003e6e <_printf_common+0x46>
 8003ee8:	2030      	movs	r0, #48	; 0x30
 8003eea:	18e1      	adds	r1, r4, r3
 8003eec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003ef6:	4422      	add	r2, r4
 8003ef8:	3302      	adds	r3, #2
 8003efa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003efe:	e7c4      	b.n	8003e8a <_printf_common+0x62>
 8003f00:	2301      	movs	r3, #1
 8003f02:	4622      	mov	r2, r4
 8003f04:	4639      	mov	r1, r7
 8003f06:	4630      	mov	r0, r6
 8003f08:	47c0      	blx	r8
 8003f0a:	3001      	adds	r0, #1
 8003f0c:	d0e6      	beq.n	8003edc <_printf_common+0xb4>
 8003f0e:	f109 0901 	add.w	r9, r9, #1
 8003f12:	e7d8      	b.n	8003ec6 <_printf_common+0x9e>

08003f14 <_printf_i>:
 8003f14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003f18:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003f1c:	460c      	mov	r4, r1
 8003f1e:	7e09      	ldrb	r1, [r1, #24]
 8003f20:	b085      	sub	sp, #20
 8003f22:	296e      	cmp	r1, #110	; 0x6e
 8003f24:	4617      	mov	r7, r2
 8003f26:	4606      	mov	r6, r0
 8003f28:	4698      	mov	r8, r3
 8003f2a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003f2c:	f000 80b3 	beq.w	8004096 <_printf_i+0x182>
 8003f30:	d822      	bhi.n	8003f78 <_printf_i+0x64>
 8003f32:	2963      	cmp	r1, #99	; 0x63
 8003f34:	d036      	beq.n	8003fa4 <_printf_i+0x90>
 8003f36:	d80a      	bhi.n	8003f4e <_printf_i+0x3a>
 8003f38:	2900      	cmp	r1, #0
 8003f3a:	f000 80b9 	beq.w	80040b0 <_printf_i+0x19c>
 8003f3e:	2958      	cmp	r1, #88	; 0x58
 8003f40:	f000 8083 	beq.w	800404a <_printf_i+0x136>
 8003f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003f48:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003f4c:	e032      	b.n	8003fb4 <_printf_i+0xa0>
 8003f4e:	2964      	cmp	r1, #100	; 0x64
 8003f50:	d001      	beq.n	8003f56 <_printf_i+0x42>
 8003f52:	2969      	cmp	r1, #105	; 0x69
 8003f54:	d1f6      	bne.n	8003f44 <_printf_i+0x30>
 8003f56:	6820      	ldr	r0, [r4, #0]
 8003f58:	6813      	ldr	r3, [r2, #0]
 8003f5a:	0605      	lsls	r5, r0, #24
 8003f5c:	f103 0104 	add.w	r1, r3, #4
 8003f60:	d52a      	bpl.n	8003fb8 <_printf_i+0xa4>
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6011      	str	r1, [r2, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	da03      	bge.n	8003f72 <_printf_i+0x5e>
 8003f6a:	222d      	movs	r2, #45	; 0x2d
 8003f6c:	425b      	negs	r3, r3
 8003f6e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003f72:	486f      	ldr	r0, [pc, #444]	; (8004130 <_printf_i+0x21c>)
 8003f74:	220a      	movs	r2, #10
 8003f76:	e039      	b.n	8003fec <_printf_i+0xd8>
 8003f78:	2973      	cmp	r1, #115	; 0x73
 8003f7a:	f000 809d 	beq.w	80040b8 <_printf_i+0x1a4>
 8003f7e:	d808      	bhi.n	8003f92 <_printf_i+0x7e>
 8003f80:	296f      	cmp	r1, #111	; 0x6f
 8003f82:	d020      	beq.n	8003fc6 <_printf_i+0xb2>
 8003f84:	2970      	cmp	r1, #112	; 0x70
 8003f86:	d1dd      	bne.n	8003f44 <_printf_i+0x30>
 8003f88:	6823      	ldr	r3, [r4, #0]
 8003f8a:	f043 0320 	orr.w	r3, r3, #32
 8003f8e:	6023      	str	r3, [r4, #0]
 8003f90:	e003      	b.n	8003f9a <_printf_i+0x86>
 8003f92:	2975      	cmp	r1, #117	; 0x75
 8003f94:	d017      	beq.n	8003fc6 <_printf_i+0xb2>
 8003f96:	2978      	cmp	r1, #120	; 0x78
 8003f98:	d1d4      	bne.n	8003f44 <_printf_i+0x30>
 8003f9a:	2378      	movs	r3, #120	; 0x78
 8003f9c:	4865      	ldr	r0, [pc, #404]	; (8004134 <_printf_i+0x220>)
 8003f9e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003fa2:	e055      	b.n	8004050 <_printf_i+0x13c>
 8003fa4:	6813      	ldr	r3, [r2, #0]
 8003fa6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003faa:	1d19      	adds	r1, r3, #4
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6011      	str	r1, [r2, #0]
 8003fb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e08c      	b.n	80040d2 <_printf_i+0x1be>
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003fbe:	6011      	str	r1, [r2, #0]
 8003fc0:	bf18      	it	ne
 8003fc2:	b21b      	sxthne	r3, r3
 8003fc4:	e7cf      	b.n	8003f66 <_printf_i+0x52>
 8003fc6:	6813      	ldr	r3, [r2, #0]
 8003fc8:	6825      	ldr	r5, [r4, #0]
 8003fca:	1d18      	adds	r0, r3, #4
 8003fcc:	6010      	str	r0, [r2, #0]
 8003fce:	0628      	lsls	r0, r5, #24
 8003fd0:	d501      	bpl.n	8003fd6 <_printf_i+0xc2>
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	e002      	b.n	8003fdc <_printf_i+0xc8>
 8003fd6:	0668      	lsls	r0, r5, #25
 8003fd8:	d5fb      	bpl.n	8003fd2 <_printf_i+0xbe>
 8003fda:	881b      	ldrh	r3, [r3, #0]
 8003fdc:	296f      	cmp	r1, #111	; 0x6f
 8003fde:	bf14      	ite	ne
 8003fe0:	220a      	movne	r2, #10
 8003fe2:	2208      	moveq	r2, #8
 8003fe4:	4852      	ldr	r0, [pc, #328]	; (8004130 <_printf_i+0x21c>)
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003fec:	6865      	ldr	r5, [r4, #4]
 8003fee:	2d00      	cmp	r5, #0
 8003ff0:	60a5      	str	r5, [r4, #8]
 8003ff2:	f2c0 8095 	blt.w	8004120 <_printf_i+0x20c>
 8003ff6:	6821      	ldr	r1, [r4, #0]
 8003ff8:	f021 0104 	bic.w	r1, r1, #4
 8003ffc:	6021      	str	r1, [r4, #0]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d13d      	bne.n	800407e <_printf_i+0x16a>
 8004002:	2d00      	cmp	r5, #0
 8004004:	f040 808e 	bne.w	8004124 <_printf_i+0x210>
 8004008:	4665      	mov	r5, ip
 800400a:	2a08      	cmp	r2, #8
 800400c:	d10b      	bne.n	8004026 <_printf_i+0x112>
 800400e:	6823      	ldr	r3, [r4, #0]
 8004010:	07db      	lsls	r3, r3, #31
 8004012:	d508      	bpl.n	8004026 <_printf_i+0x112>
 8004014:	6923      	ldr	r3, [r4, #16]
 8004016:	6862      	ldr	r2, [r4, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	bfde      	ittt	le
 800401c:	2330      	movle	r3, #48	; 0x30
 800401e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004022:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004026:	ebac 0305 	sub.w	r3, ip, r5
 800402a:	6123      	str	r3, [r4, #16]
 800402c:	f8cd 8000 	str.w	r8, [sp]
 8004030:	463b      	mov	r3, r7
 8004032:	aa03      	add	r2, sp, #12
 8004034:	4621      	mov	r1, r4
 8004036:	4630      	mov	r0, r6
 8004038:	f7ff fef6 	bl	8003e28 <_printf_common>
 800403c:	3001      	adds	r0, #1
 800403e:	d14d      	bne.n	80040dc <_printf_i+0x1c8>
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	b005      	add	sp, #20
 8004046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800404a:	4839      	ldr	r0, [pc, #228]	; (8004130 <_printf_i+0x21c>)
 800404c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004050:	6813      	ldr	r3, [r2, #0]
 8004052:	6821      	ldr	r1, [r4, #0]
 8004054:	1d1d      	adds	r5, r3, #4
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	6015      	str	r5, [r2, #0]
 800405a:	060a      	lsls	r2, r1, #24
 800405c:	d50b      	bpl.n	8004076 <_printf_i+0x162>
 800405e:	07ca      	lsls	r2, r1, #31
 8004060:	bf44      	itt	mi
 8004062:	f041 0120 	orrmi.w	r1, r1, #32
 8004066:	6021      	strmi	r1, [r4, #0]
 8004068:	b91b      	cbnz	r3, 8004072 <_printf_i+0x15e>
 800406a:	6822      	ldr	r2, [r4, #0]
 800406c:	f022 0220 	bic.w	r2, r2, #32
 8004070:	6022      	str	r2, [r4, #0]
 8004072:	2210      	movs	r2, #16
 8004074:	e7b7      	b.n	8003fe6 <_printf_i+0xd2>
 8004076:	064d      	lsls	r5, r1, #25
 8004078:	bf48      	it	mi
 800407a:	b29b      	uxthmi	r3, r3
 800407c:	e7ef      	b.n	800405e <_printf_i+0x14a>
 800407e:	4665      	mov	r5, ip
 8004080:	fbb3 f1f2 	udiv	r1, r3, r2
 8004084:	fb02 3311 	mls	r3, r2, r1, r3
 8004088:	5cc3      	ldrb	r3, [r0, r3]
 800408a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800408e:	460b      	mov	r3, r1
 8004090:	2900      	cmp	r1, #0
 8004092:	d1f5      	bne.n	8004080 <_printf_i+0x16c>
 8004094:	e7b9      	b.n	800400a <_printf_i+0xf6>
 8004096:	6813      	ldr	r3, [r2, #0]
 8004098:	6825      	ldr	r5, [r4, #0]
 800409a:	1d18      	adds	r0, r3, #4
 800409c:	6961      	ldr	r1, [r4, #20]
 800409e:	6010      	str	r0, [r2, #0]
 80040a0:	0628      	lsls	r0, r5, #24
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	d501      	bpl.n	80040aa <_printf_i+0x196>
 80040a6:	6019      	str	r1, [r3, #0]
 80040a8:	e002      	b.n	80040b0 <_printf_i+0x19c>
 80040aa:	066a      	lsls	r2, r5, #25
 80040ac:	d5fb      	bpl.n	80040a6 <_printf_i+0x192>
 80040ae:	8019      	strh	r1, [r3, #0]
 80040b0:	2300      	movs	r3, #0
 80040b2:	4665      	mov	r5, ip
 80040b4:	6123      	str	r3, [r4, #16]
 80040b6:	e7b9      	b.n	800402c <_printf_i+0x118>
 80040b8:	6813      	ldr	r3, [r2, #0]
 80040ba:	1d19      	adds	r1, r3, #4
 80040bc:	6011      	str	r1, [r2, #0]
 80040be:	681d      	ldr	r5, [r3, #0]
 80040c0:	6862      	ldr	r2, [r4, #4]
 80040c2:	2100      	movs	r1, #0
 80040c4:	4628      	mov	r0, r5
 80040c6:	f000 f9a1 	bl	800440c <memchr>
 80040ca:	b108      	cbz	r0, 80040d0 <_printf_i+0x1bc>
 80040cc:	1b40      	subs	r0, r0, r5
 80040ce:	6060      	str	r0, [r4, #4]
 80040d0:	6863      	ldr	r3, [r4, #4]
 80040d2:	6123      	str	r3, [r4, #16]
 80040d4:	2300      	movs	r3, #0
 80040d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80040da:	e7a7      	b.n	800402c <_printf_i+0x118>
 80040dc:	6923      	ldr	r3, [r4, #16]
 80040de:	462a      	mov	r2, r5
 80040e0:	4639      	mov	r1, r7
 80040e2:	4630      	mov	r0, r6
 80040e4:	47c0      	blx	r8
 80040e6:	3001      	adds	r0, #1
 80040e8:	d0aa      	beq.n	8004040 <_printf_i+0x12c>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	079b      	lsls	r3, r3, #30
 80040ee:	d413      	bmi.n	8004118 <_printf_i+0x204>
 80040f0:	68e0      	ldr	r0, [r4, #12]
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	4298      	cmp	r0, r3
 80040f6:	bfb8      	it	lt
 80040f8:	4618      	movlt	r0, r3
 80040fa:	e7a3      	b.n	8004044 <_printf_i+0x130>
 80040fc:	2301      	movs	r3, #1
 80040fe:	464a      	mov	r2, r9
 8004100:	4639      	mov	r1, r7
 8004102:	4630      	mov	r0, r6
 8004104:	47c0      	blx	r8
 8004106:	3001      	adds	r0, #1
 8004108:	d09a      	beq.n	8004040 <_printf_i+0x12c>
 800410a:	3501      	adds	r5, #1
 800410c:	68e3      	ldr	r3, [r4, #12]
 800410e:	9a03      	ldr	r2, [sp, #12]
 8004110:	1a9b      	subs	r3, r3, r2
 8004112:	42ab      	cmp	r3, r5
 8004114:	dcf2      	bgt.n	80040fc <_printf_i+0x1e8>
 8004116:	e7eb      	b.n	80040f0 <_printf_i+0x1dc>
 8004118:	2500      	movs	r5, #0
 800411a:	f104 0919 	add.w	r9, r4, #25
 800411e:	e7f5      	b.n	800410c <_printf_i+0x1f8>
 8004120:	2b00      	cmp	r3, #0
 8004122:	d1ac      	bne.n	800407e <_printf_i+0x16a>
 8004124:	7803      	ldrb	r3, [r0, #0]
 8004126:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800412a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800412e:	e76c      	b.n	800400a <_printf_i+0xf6>
 8004130:	08004515 	.word	0x08004515
 8004134:	08004526 	.word	0x08004526

08004138 <_sbrk_r>:
 8004138:	b538      	push	{r3, r4, r5, lr}
 800413a:	2300      	movs	r3, #0
 800413c:	4c05      	ldr	r4, [pc, #20]	; (8004154 <_sbrk_r+0x1c>)
 800413e:	4605      	mov	r5, r0
 8004140:	4608      	mov	r0, r1
 8004142:	6023      	str	r3, [r4, #0]
 8004144:	f7fc fd9c 	bl	8000c80 <_sbrk>
 8004148:	1c43      	adds	r3, r0, #1
 800414a:	d102      	bne.n	8004152 <_sbrk_r+0x1a>
 800414c:	6823      	ldr	r3, [r4, #0]
 800414e:	b103      	cbz	r3, 8004152 <_sbrk_r+0x1a>
 8004150:	602b      	str	r3, [r5, #0]
 8004152:	bd38      	pop	{r3, r4, r5, pc}
 8004154:	20000550 	.word	0x20000550

08004158 <__sread>:
 8004158:	b510      	push	{r4, lr}
 800415a:	460c      	mov	r4, r1
 800415c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004160:	f000 f964 	bl	800442c <_read_r>
 8004164:	2800      	cmp	r0, #0
 8004166:	bfab      	itete	ge
 8004168:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800416a:	89a3      	ldrhlt	r3, [r4, #12]
 800416c:	181b      	addge	r3, r3, r0
 800416e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004172:	bfac      	ite	ge
 8004174:	6563      	strge	r3, [r4, #84]	; 0x54
 8004176:	81a3      	strhlt	r3, [r4, #12]
 8004178:	bd10      	pop	{r4, pc}

0800417a <__swrite>:
 800417a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800417e:	461f      	mov	r7, r3
 8004180:	898b      	ldrh	r3, [r1, #12]
 8004182:	4605      	mov	r5, r0
 8004184:	05db      	lsls	r3, r3, #23
 8004186:	460c      	mov	r4, r1
 8004188:	4616      	mov	r6, r2
 800418a:	d505      	bpl.n	8004198 <__swrite+0x1e>
 800418c:	2302      	movs	r3, #2
 800418e:	2200      	movs	r2, #0
 8004190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004194:	f000 f928 	bl	80043e8 <_lseek_r>
 8004198:	89a3      	ldrh	r3, [r4, #12]
 800419a:	4632      	mov	r2, r6
 800419c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041a0:	81a3      	strh	r3, [r4, #12]
 80041a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041a6:	463b      	mov	r3, r7
 80041a8:	4628      	mov	r0, r5
 80041aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041ae:	f000 b869 	b.w	8004284 <_write_r>

080041b2 <__sseek>:
 80041b2:	b510      	push	{r4, lr}
 80041b4:	460c      	mov	r4, r1
 80041b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ba:	f000 f915 	bl	80043e8 <_lseek_r>
 80041be:	1c43      	adds	r3, r0, #1
 80041c0:	89a3      	ldrh	r3, [r4, #12]
 80041c2:	bf15      	itete	ne
 80041c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80041c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80041ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80041ce:	81a3      	strheq	r3, [r4, #12]
 80041d0:	bf18      	it	ne
 80041d2:	81a3      	strhne	r3, [r4, #12]
 80041d4:	bd10      	pop	{r4, pc}

080041d6 <__sclose>:
 80041d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041da:	f000 b8d3 	b.w	8004384 <_close_r>
	...

080041e0 <__swbuf_r>:
 80041e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e2:	460e      	mov	r6, r1
 80041e4:	4614      	mov	r4, r2
 80041e6:	4605      	mov	r5, r0
 80041e8:	b118      	cbz	r0, 80041f2 <__swbuf_r+0x12>
 80041ea:	6983      	ldr	r3, [r0, #24]
 80041ec:	b90b      	cbnz	r3, 80041f2 <__swbuf_r+0x12>
 80041ee:	f7ff fb41 	bl	8003874 <__sinit>
 80041f2:	4b21      	ldr	r3, [pc, #132]	; (8004278 <__swbuf_r+0x98>)
 80041f4:	429c      	cmp	r4, r3
 80041f6:	d12a      	bne.n	800424e <__swbuf_r+0x6e>
 80041f8:	686c      	ldr	r4, [r5, #4]
 80041fa:	69a3      	ldr	r3, [r4, #24]
 80041fc:	60a3      	str	r3, [r4, #8]
 80041fe:	89a3      	ldrh	r3, [r4, #12]
 8004200:	071a      	lsls	r2, r3, #28
 8004202:	d52e      	bpl.n	8004262 <__swbuf_r+0x82>
 8004204:	6923      	ldr	r3, [r4, #16]
 8004206:	b363      	cbz	r3, 8004262 <__swbuf_r+0x82>
 8004208:	6923      	ldr	r3, [r4, #16]
 800420a:	6820      	ldr	r0, [r4, #0]
 800420c:	b2f6      	uxtb	r6, r6
 800420e:	1ac0      	subs	r0, r0, r3
 8004210:	6963      	ldr	r3, [r4, #20]
 8004212:	4637      	mov	r7, r6
 8004214:	4283      	cmp	r3, r0
 8004216:	dc04      	bgt.n	8004222 <__swbuf_r+0x42>
 8004218:	4621      	mov	r1, r4
 800421a:	4628      	mov	r0, r5
 800421c:	f7ff fac0 	bl	80037a0 <_fflush_r>
 8004220:	bb28      	cbnz	r0, 800426e <__swbuf_r+0x8e>
 8004222:	68a3      	ldr	r3, [r4, #8]
 8004224:	3001      	adds	r0, #1
 8004226:	3b01      	subs	r3, #1
 8004228:	60a3      	str	r3, [r4, #8]
 800422a:	6823      	ldr	r3, [r4, #0]
 800422c:	1c5a      	adds	r2, r3, #1
 800422e:	6022      	str	r2, [r4, #0]
 8004230:	701e      	strb	r6, [r3, #0]
 8004232:	6963      	ldr	r3, [r4, #20]
 8004234:	4283      	cmp	r3, r0
 8004236:	d004      	beq.n	8004242 <__swbuf_r+0x62>
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	07db      	lsls	r3, r3, #31
 800423c:	d519      	bpl.n	8004272 <__swbuf_r+0x92>
 800423e:	2e0a      	cmp	r6, #10
 8004240:	d117      	bne.n	8004272 <__swbuf_r+0x92>
 8004242:	4621      	mov	r1, r4
 8004244:	4628      	mov	r0, r5
 8004246:	f7ff faab 	bl	80037a0 <_fflush_r>
 800424a:	b190      	cbz	r0, 8004272 <__swbuf_r+0x92>
 800424c:	e00f      	b.n	800426e <__swbuf_r+0x8e>
 800424e:	4b0b      	ldr	r3, [pc, #44]	; (800427c <__swbuf_r+0x9c>)
 8004250:	429c      	cmp	r4, r3
 8004252:	d101      	bne.n	8004258 <__swbuf_r+0x78>
 8004254:	68ac      	ldr	r4, [r5, #8]
 8004256:	e7d0      	b.n	80041fa <__swbuf_r+0x1a>
 8004258:	4b09      	ldr	r3, [pc, #36]	; (8004280 <__swbuf_r+0xa0>)
 800425a:	429c      	cmp	r4, r3
 800425c:	bf08      	it	eq
 800425e:	68ec      	ldreq	r4, [r5, #12]
 8004260:	e7cb      	b.n	80041fa <__swbuf_r+0x1a>
 8004262:	4621      	mov	r1, r4
 8004264:	4628      	mov	r0, r5
 8004266:	f000 f81f 	bl	80042a8 <__swsetup_r>
 800426a:	2800      	cmp	r0, #0
 800426c:	d0cc      	beq.n	8004208 <__swbuf_r+0x28>
 800426e:	f04f 37ff 	mov.w	r7, #4294967295
 8004272:	4638      	mov	r0, r7
 8004274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004276:	bf00      	nop
 8004278:	080044c4 	.word	0x080044c4
 800427c:	080044e4 	.word	0x080044e4
 8004280:	080044a4 	.word	0x080044a4

08004284 <_write_r>:
 8004284:	b538      	push	{r3, r4, r5, lr}
 8004286:	4605      	mov	r5, r0
 8004288:	4608      	mov	r0, r1
 800428a:	4611      	mov	r1, r2
 800428c:	2200      	movs	r2, #0
 800428e:	4c05      	ldr	r4, [pc, #20]	; (80042a4 <_write_r+0x20>)
 8004290:	6022      	str	r2, [r4, #0]
 8004292:	461a      	mov	r2, r3
 8004294:	f7fb ff92 	bl	80001bc <_write>
 8004298:	1c43      	adds	r3, r0, #1
 800429a:	d102      	bne.n	80042a2 <_write_r+0x1e>
 800429c:	6823      	ldr	r3, [r4, #0]
 800429e:	b103      	cbz	r3, 80042a2 <_write_r+0x1e>
 80042a0:	602b      	str	r3, [r5, #0]
 80042a2:	bd38      	pop	{r3, r4, r5, pc}
 80042a4:	20000550 	.word	0x20000550

080042a8 <__swsetup_r>:
 80042a8:	4b32      	ldr	r3, [pc, #200]	; (8004374 <__swsetup_r+0xcc>)
 80042aa:	b570      	push	{r4, r5, r6, lr}
 80042ac:	681d      	ldr	r5, [r3, #0]
 80042ae:	4606      	mov	r6, r0
 80042b0:	460c      	mov	r4, r1
 80042b2:	b125      	cbz	r5, 80042be <__swsetup_r+0x16>
 80042b4:	69ab      	ldr	r3, [r5, #24]
 80042b6:	b913      	cbnz	r3, 80042be <__swsetup_r+0x16>
 80042b8:	4628      	mov	r0, r5
 80042ba:	f7ff fadb 	bl	8003874 <__sinit>
 80042be:	4b2e      	ldr	r3, [pc, #184]	; (8004378 <__swsetup_r+0xd0>)
 80042c0:	429c      	cmp	r4, r3
 80042c2:	d10f      	bne.n	80042e4 <__swsetup_r+0x3c>
 80042c4:	686c      	ldr	r4, [r5, #4]
 80042c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	0715      	lsls	r5, r2, #28
 80042ce:	d42c      	bmi.n	800432a <__swsetup_r+0x82>
 80042d0:	06d0      	lsls	r0, r2, #27
 80042d2:	d411      	bmi.n	80042f8 <__swsetup_r+0x50>
 80042d4:	2209      	movs	r2, #9
 80042d6:	6032      	str	r2, [r6, #0]
 80042d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80042dc:	81a3      	strh	r3, [r4, #12]
 80042de:	f04f 30ff 	mov.w	r0, #4294967295
 80042e2:	e03e      	b.n	8004362 <__swsetup_r+0xba>
 80042e4:	4b25      	ldr	r3, [pc, #148]	; (800437c <__swsetup_r+0xd4>)
 80042e6:	429c      	cmp	r4, r3
 80042e8:	d101      	bne.n	80042ee <__swsetup_r+0x46>
 80042ea:	68ac      	ldr	r4, [r5, #8]
 80042ec:	e7eb      	b.n	80042c6 <__swsetup_r+0x1e>
 80042ee:	4b24      	ldr	r3, [pc, #144]	; (8004380 <__swsetup_r+0xd8>)
 80042f0:	429c      	cmp	r4, r3
 80042f2:	bf08      	it	eq
 80042f4:	68ec      	ldreq	r4, [r5, #12]
 80042f6:	e7e6      	b.n	80042c6 <__swsetup_r+0x1e>
 80042f8:	0751      	lsls	r1, r2, #29
 80042fa:	d512      	bpl.n	8004322 <__swsetup_r+0x7a>
 80042fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80042fe:	b141      	cbz	r1, 8004312 <__swsetup_r+0x6a>
 8004300:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004304:	4299      	cmp	r1, r3
 8004306:	d002      	beq.n	800430e <__swsetup_r+0x66>
 8004308:	4630      	mov	r0, r6
 800430a:	f7ff fba9 	bl	8003a60 <_free_r>
 800430e:	2300      	movs	r3, #0
 8004310:	6363      	str	r3, [r4, #52]	; 0x34
 8004312:	89a3      	ldrh	r3, [r4, #12]
 8004314:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004318:	81a3      	strh	r3, [r4, #12]
 800431a:	2300      	movs	r3, #0
 800431c:	6063      	str	r3, [r4, #4]
 800431e:	6923      	ldr	r3, [r4, #16]
 8004320:	6023      	str	r3, [r4, #0]
 8004322:	89a3      	ldrh	r3, [r4, #12]
 8004324:	f043 0308 	orr.w	r3, r3, #8
 8004328:	81a3      	strh	r3, [r4, #12]
 800432a:	6923      	ldr	r3, [r4, #16]
 800432c:	b94b      	cbnz	r3, 8004342 <__swsetup_r+0x9a>
 800432e:	89a3      	ldrh	r3, [r4, #12]
 8004330:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004334:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004338:	d003      	beq.n	8004342 <__swsetup_r+0x9a>
 800433a:	4621      	mov	r1, r4
 800433c:	4630      	mov	r0, r6
 800433e:	f7ff fb47 	bl	80039d0 <__smakebuf_r>
 8004342:	89a2      	ldrh	r2, [r4, #12]
 8004344:	f012 0301 	ands.w	r3, r2, #1
 8004348:	d00c      	beq.n	8004364 <__swsetup_r+0xbc>
 800434a:	2300      	movs	r3, #0
 800434c:	60a3      	str	r3, [r4, #8]
 800434e:	6963      	ldr	r3, [r4, #20]
 8004350:	425b      	negs	r3, r3
 8004352:	61a3      	str	r3, [r4, #24]
 8004354:	6923      	ldr	r3, [r4, #16]
 8004356:	b953      	cbnz	r3, 800436e <__swsetup_r+0xc6>
 8004358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800435c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004360:	d1ba      	bne.n	80042d8 <__swsetup_r+0x30>
 8004362:	bd70      	pop	{r4, r5, r6, pc}
 8004364:	0792      	lsls	r2, r2, #30
 8004366:	bf58      	it	pl
 8004368:	6963      	ldrpl	r3, [r4, #20]
 800436a:	60a3      	str	r3, [r4, #8]
 800436c:	e7f2      	b.n	8004354 <__swsetup_r+0xac>
 800436e:	2000      	movs	r0, #0
 8004370:	e7f7      	b.n	8004362 <__swsetup_r+0xba>
 8004372:	bf00      	nop
 8004374:	2000031c 	.word	0x2000031c
 8004378:	080044c4 	.word	0x080044c4
 800437c:	080044e4 	.word	0x080044e4
 8004380:	080044a4 	.word	0x080044a4

08004384 <_close_r>:
 8004384:	b538      	push	{r3, r4, r5, lr}
 8004386:	2300      	movs	r3, #0
 8004388:	4c05      	ldr	r4, [pc, #20]	; (80043a0 <_close_r+0x1c>)
 800438a:	4605      	mov	r5, r0
 800438c:	4608      	mov	r0, r1
 800438e:	6023      	str	r3, [r4, #0]
 8004390:	f7fb ff3e 	bl	8000210 <_close>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_close_r+0x1a>
 8004398:	6823      	ldr	r3, [r4, #0]
 800439a:	b103      	cbz	r3, 800439e <_close_r+0x1a>
 800439c:	602b      	str	r3, [r5, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	20000550 	.word	0x20000550

080043a4 <_fstat_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	2300      	movs	r3, #0
 80043a8:	4c06      	ldr	r4, [pc, #24]	; (80043c4 <_fstat_r+0x20>)
 80043aa:	4605      	mov	r5, r0
 80043ac:	4608      	mov	r0, r1
 80043ae:	4611      	mov	r1, r2
 80043b0:	6023      	str	r3, [r4, #0]
 80043b2:	f7fb ff7d 	bl	80002b0 <_fstat>
 80043b6:	1c43      	adds	r3, r0, #1
 80043b8:	d102      	bne.n	80043c0 <_fstat_r+0x1c>
 80043ba:	6823      	ldr	r3, [r4, #0]
 80043bc:	b103      	cbz	r3, 80043c0 <_fstat_r+0x1c>
 80043be:	602b      	str	r3, [r5, #0]
 80043c0:	bd38      	pop	{r3, r4, r5, pc}
 80043c2:	bf00      	nop
 80043c4:	20000550 	.word	0x20000550

080043c8 <_isatty_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	2300      	movs	r3, #0
 80043cc:	4c05      	ldr	r4, [pc, #20]	; (80043e4 <_isatty_r+0x1c>)
 80043ce:	4605      	mov	r5, r0
 80043d0:	4608      	mov	r0, r1
 80043d2:	6023      	str	r3, [r4, #0]
 80043d4:	f7fb fedc 	bl	8000190 <_isatty>
 80043d8:	1c43      	adds	r3, r0, #1
 80043da:	d102      	bne.n	80043e2 <_isatty_r+0x1a>
 80043dc:	6823      	ldr	r3, [r4, #0]
 80043de:	b103      	cbz	r3, 80043e2 <_isatty_r+0x1a>
 80043e0:	602b      	str	r3, [r5, #0]
 80043e2:	bd38      	pop	{r3, r4, r5, pc}
 80043e4:	20000550 	.word	0x20000550

080043e8 <_lseek_r>:
 80043e8:	b538      	push	{r3, r4, r5, lr}
 80043ea:	4605      	mov	r5, r0
 80043ec:	4608      	mov	r0, r1
 80043ee:	4611      	mov	r1, r2
 80043f0:	2200      	movs	r2, #0
 80043f2:	4c05      	ldr	r4, [pc, #20]	; (8004408 <_lseek_r+0x20>)
 80043f4:	6022      	str	r2, [r4, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f7fb ff21 	bl	800023e <_lseek>
 80043fc:	1c43      	adds	r3, r0, #1
 80043fe:	d102      	bne.n	8004406 <_lseek_r+0x1e>
 8004400:	6823      	ldr	r3, [r4, #0]
 8004402:	b103      	cbz	r3, 8004406 <_lseek_r+0x1e>
 8004404:	602b      	str	r3, [r5, #0]
 8004406:	bd38      	pop	{r3, r4, r5, pc}
 8004408:	20000550 	.word	0x20000550

0800440c <memchr>:
 800440c:	b510      	push	{r4, lr}
 800440e:	b2c9      	uxtb	r1, r1
 8004410:	4402      	add	r2, r0
 8004412:	4290      	cmp	r0, r2
 8004414:	4603      	mov	r3, r0
 8004416:	d101      	bne.n	800441c <memchr+0x10>
 8004418:	2300      	movs	r3, #0
 800441a:	e003      	b.n	8004424 <memchr+0x18>
 800441c:	781c      	ldrb	r4, [r3, #0]
 800441e:	3001      	adds	r0, #1
 8004420:	428c      	cmp	r4, r1
 8004422:	d1f6      	bne.n	8004412 <memchr+0x6>
 8004424:	4618      	mov	r0, r3
 8004426:	bd10      	pop	{r4, pc}

08004428 <__malloc_lock>:
 8004428:	4770      	bx	lr

0800442a <__malloc_unlock>:
 800442a:	4770      	bx	lr

0800442c <_read_r>:
 800442c:	b538      	push	{r3, r4, r5, lr}
 800442e:	4605      	mov	r5, r0
 8004430:	4608      	mov	r0, r1
 8004432:	4611      	mov	r1, r2
 8004434:	2200      	movs	r2, #0
 8004436:	4c05      	ldr	r4, [pc, #20]	; (800444c <_read_r+0x20>)
 8004438:	6022      	str	r2, [r4, #0]
 800443a:	461a      	mov	r2, r3
 800443c:	f7fb ff10 	bl	8000260 <_read>
 8004440:	1c43      	adds	r3, r0, #1
 8004442:	d102      	bne.n	800444a <_read_r+0x1e>
 8004444:	6823      	ldr	r3, [r4, #0]
 8004446:	b103      	cbz	r3, 800444a <_read_r+0x1e>
 8004448:	602b      	str	r3, [r5, #0]
 800444a:	bd38      	pop	{r3, r4, r5, pc}
 800444c:	20000550 	.word	0x20000550

08004450 <_init>:
 8004450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004452:	bf00      	nop
 8004454:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004456:	bc08      	pop	{r3}
 8004458:	469e      	mov	lr, r3
 800445a:	4770      	bx	lr

0800445c <_fini>:
 800445c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800445e:	bf00      	nop
 8004460:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004462:	bc08      	pop	{r3}
 8004464:	469e      	mov	lr, r3
 8004466:	4770      	bx	lr
