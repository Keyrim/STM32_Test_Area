
F407_discovery.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004694  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080048ec  080048ec  00020380  2**0
                  CONTENTS
  4 .ARM          00000008  080048ec  080048ec  000148ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080048f4  080048f4  00020380  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080048f4  080048f4  000148f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080048f8  080048f8  000148f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000380  20000000  080048fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  20000380  08004c7c  00020380  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000468  08004c7c  00020468  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020380  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001040f  00000000  00000000  000203b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025a6  00000000  00000000  000307bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a98  00000000  00000000  00032d68  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000968  00000000  00000000  00033800  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021424  00000000  00000000  00034168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000cb1d  00000000  00000000  0005558c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bbeb4  00000000  00000000  000620a9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011df5d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003088  00000000  00000000  0011dfd8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000380 	.word	0x20000380
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800480c 	.word	0x0800480c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000384 	.word	0x20000384
 80001cc:	0800480c 	.word	0x0800480c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b972 	b.w	800056c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	4688      	mov	r8, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14b      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4615      	mov	r5, r2
 80002b2:	d967      	bls.n	8000384 <__udivmoddi4+0xe4>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0720 	rsb	r7, r2, #32
 80002be:	fa01 f302 	lsl.w	r3, r1, r2
 80002c2:	fa20 f707 	lsr.w	r7, r0, r7
 80002c6:	4095      	lsls	r5, r2
 80002c8:	ea47 0803 	orr.w	r8, r7, r3
 80002cc:	4094      	lsls	r4, r2
 80002ce:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002d2:	0c23      	lsrs	r3, r4, #16
 80002d4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002d8:	fa1f fc85 	uxth.w	ip, r5
 80002dc:	fb0e 8817 	mls	r8, lr, r7, r8
 80002e0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e4:	fb07 f10c 	mul.w	r1, r7, ip
 80002e8:	4299      	cmp	r1, r3
 80002ea:	d909      	bls.n	8000300 <__udivmoddi4+0x60>
 80002ec:	18eb      	adds	r3, r5, r3
 80002ee:	f107 30ff 	add.w	r0, r7, #4294967295
 80002f2:	f080 811b 	bcs.w	800052c <__udivmoddi4+0x28c>
 80002f6:	4299      	cmp	r1, r3
 80002f8:	f240 8118 	bls.w	800052c <__udivmoddi4+0x28c>
 80002fc:	3f02      	subs	r7, #2
 80002fe:	442b      	add	r3, r5
 8000300:	1a5b      	subs	r3, r3, r1
 8000302:	b2a4      	uxth	r4, r4
 8000304:	fbb3 f0fe 	udiv	r0, r3, lr
 8000308:	fb0e 3310 	mls	r3, lr, r0, r3
 800030c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000310:	fb00 fc0c 	mul.w	ip, r0, ip
 8000314:	45a4      	cmp	ip, r4
 8000316:	d909      	bls.n	800032c <__udivmoddi4+0x8c>
 8000318:	192c      	adds	r4, r5, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	f080 8107 	bcs.w	8000530 <__udivmoddi4+0x290>
 8000322:	45a4      	cmp	ip, r4
 8000324:	f240 8104 	bls.w	8000530 <__udivmoddi4+0x290>
 8000328:	3802      	subs	r0, #2
 800032a:	442c      	add	r4, r5
 800032c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000330:	eba4 040c 	sub.w	r4, r4, ip
 8000334:	2700      	movs	r7, #0
 8000336:	b11e      	cbz	r6, 8000340 <__udivmoddi4+0xa0>
 8000338:	40d4      	lsrs	r4, r2
 800033a:	2300      	movs	r3, #0
 800033c:	e9c6 4300 	strd	r4, r3, [r6]
 8000340:	4639      	mov	r1, r7
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0xbe>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80eb 	beq.w	8000526 <__udivmoddi4+0x286>
 8000350:	2700      	movs	r7, #0
 8000352:	e9c6 0100 	strd	r0, r1, [r6]
 8000356:	4638      	mov	r0, r7
 8000358:	4639      	mov	r1, r7
 800035a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035e:	fab3 f783 	clz	r7, r3
 8000362:	2f00      	cmp	r7, #0
 8000364:	d147      	bne.n	80003f6 <__udivmoddi4+0x156>
 8000366:	428b      	cmp	r3, r1
 8000368:	d302      	bcc.n	8000370 <__udivmoddi4+0xd0>
 800036a:	4282      	cmp	r2, r0
 800036c:	f200 80fa 	bhi.w	8000564 <__udivmoddi4+0x2c4>
 8000370:	1a84      	subs	r4, r0, r2
 8000372:	eb61 0303 	sbc.w	r3, r1, r3
 8000376:	2001      	movs	r0, #1
 8000378:	4698      	mov	r8, r3
 800037a:	2e00      	cmp	r6, #0
 800037c:	d0e0      	beq.n	8000340 <__udivmoddi4+0xa0>
 800037e:	e9c6 4800 	strd	r4, r8, [r6]
 8000382:	e7dd      	b.n	8000340 <__udivmoddi4+0xa0>
 8000384:	b902      	cbnz	r2, 8000388 <__udivmoddi4+0xe8>
 8000386:	deff      	udf	#255	; 0xff
 8000388:	fab2 f282 	clz	r2, r2
 800038c:	2a00      	cmp	r2, #0
 800038e:	f040 808f 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000392:	1b49      	subs	r1, r1, r5
 8000394:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000398:	fa1f f885 	uxth.w	r8, r5
 800039c:	2701      	movs	r7, #1
 800039e:	fbb1 fcfe 	udiv	ip, r1, lr
 80003a2:	0c23      	lsrs	r3, r4, #16
 80003a4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003a8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ac:	fb08 f10c 	mul.w	r1, r8, ip
 80003b0:	4299      	cmp	r1, r3
 80003b2:	d907      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b4:	18eb      	adds	r3, r5, r3
 80003b6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4299      	cmp	r1, r3
 80003be:	f200 80cd 	bhi.w	800055c <__udivmoddi4+0x2bc>
 80003c2:	4684      	mov	ip, r0
 80003c4:	1a59      	subs	r1, r3, r1
 80003c6:	b2a3      	uxth	r3, r4
 80003c8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003cc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003d0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003d4:	fb08 f800 	mul.w	r8, r8, r0
 80003d8:	45a0      	cmp	r8, r4
 80003da:	d907      	bls.n	80003ec <__udivmoddi4+0x14c>
 80003dc:	192c      	adds	r4, r5, r4
 80003de:	f100 33ff 	add.w	r3, r0, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x14a>
 80003e4:	45a0      	cmp	r8, r4
 80003e6:	f200 80b6 	bhi.w	8000556 <__udivmoddi4+0x2b6>
 80003ea:	4618      	mov	r0, r3
 80003ec:	eba4 0408 	sub.w	r4, r4, r8
 80003f0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003f4:	e79f      	b.n	8000336 <__udivmoddi4+0x96>
 80003f6:	f1c7 0c20 	rsb	ip, r7, #32
 80003fa:	40bb      	lsls	r3, r7
 80003fc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000400:	ea4e 0e03 	orr.w	lr, lr, r3
 8000404:	fa01 f407 	lsl.w	r4, r1, r7
 8000408:	fa20 f50c 	lsr.w	r5, r0, ip
 800040c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000410:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000414:	4325      	orrs	r5, r4
 8000416:	fbb3 f9f8 	udiv	r9, r3, r8
 800041a:	0c2c      	lsrs	r4, r5, #16
 800041c:	fb08 3319 	mls	r3, r8, r9, r3
 8000420:	fa1f fa8e 	uxth.w	sl, lr
 8000424:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000428:	fb09 f40a 	mul.w	r4, r9, sl
 800042c:	429c      	cmp	r4, r3
 800042e:	fa02 f207 	lsl.w	r2, r2, r7
 8000432:	fa00 f107 	lsl.w	r1, r0, r7
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1e 0303 	adds.w	r3, lr, r3
 800043c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000440:	f080 8087 	bcs.w	8000552 <__udivmoddi4+0x2b2>
 8000444:	429c      	cmp	r4, r3
 8000446:	f240 8084 	bls.w	8000552 <__udivmoddi4+0x2b2>
 800044a:	f1a9 0902 	sub.w	r9, r9, #2
 800044e:	4473      	add	r3, lr
 8000450:	1b1b      	subs	r3, r3, r4
 8000452:	b2ad      	uxth	r5, r5
 8000454:	fbb3 f0f8 	udiv	r0, r3, r8
 8000458:	fb08 3310 	mls	r3, r8, r0, r3
 800045c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000460:	fb00 fa0a 	mul.w	sl, r0, sl
 8000464:	45a2      	cmp	sl, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1e 0404 	adds.w	r4, lr, r4
 800046c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000470:	d26b      	bcs.n	800054a <__udivmoddi4+0x2aa>
 8000472:	45a2      	cmp	sl, r4
 8000474:	d969      	bls.n	800054a <__udivmoddi4+0x2aa>
 8000476:	3802      	subs	r0, #2
 8000478:	4474      	add	r4, lr
 800047a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800047e:	fba0 8902 	umull	r8, r9, r0, r2
 8000482:	eba4 040a 	sub.w	r4, r4, sl
 8000486:	454c      	cmp	r4, r9
 8000488:	46c2      	mov	sl, r8
 800048a:	464b      	mov	r3, r9
 800048c:	d354      	bcc.n	8000538 <__udivmoddi4+0x298>
 800048e:	d051      	beq.n	8000534 <__udivmoddi4+0x294>
 8000490:	2e00      	cmp	r6, #0
 8000492:	d069      	beq.n	8000568 <__udivmoddi4+0x2c8>
 8000494:	ebb1 050a 	subs.w	r5, r1, sl
 8000498:	eb64 0403 	sbc.w	r4, r4, r3
 800049c:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004a0:	40fd      	lsrs	r5, r7
 80004a2:	40fc      	lsrs	r4, r7
 80004a4:	ea4c 0505 	orr.w	r5, ip, r5
 80004a8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ac:	2700      	movs	r7, #0
 80004ae:	e747      	b.n	8000340 <__udivmoddi4+0xa0>
 80004b0:	f1c2 0320 	rsb	r3, r2, #32
 80004b4:	fa20 f703 	lsr.w	r7, r0, r3
 80004b8:	4095      	lsls	r5, r2
 80004ba:	fa01 f002 	lsl.w	r0, r1, r2
 80004be:	fa21 f303 	lsr.w	r3, r1, r3
 80004c2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004c6:	4338      	orrs	r0, r7
 80004c8:	0c01      	lsrs	r1, r0, #16
 80004ca:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ce:	fa1f f885 	uxth.w	r8, r5
 80004d2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004d6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004da:	fb07 f308 	mul.w	r3, r7, r8
 80004de:	428b      	cmp	r3, r1
 80004e0:	fa04 f402 	lsl.w	r4, r4, r2
 80004e4:	d907      	bls.n	80004f6 <__udivmoddi4+0x256>
 80004e6:	1869      	adds	r1, r5, r1
 80004e8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004ec:	d22f      	bcs.n	800054e <__udivmoddi4+0x2ae>
 80004ee:	428b      	cmp	r3, r1
 80004f0:	d92d      	bls.n	800054e <__udivmoddi4+0x2ae>
 80004f2:	3f02      	subs	r7, #2
 80004f4:	4429      	add	r1, r5
 80004f6:	1acb      	subs	r3, r1, r3
 80004f8:	b281      	uxth	r1, r0
 80004fa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004fe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000502:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000506:	fb00 f308 	mul.w	r3, r0, r8
 800050a:	428b      	cmp	r3, r1
 800050c:	d907      	bls.n	800051e <__udivmoddi4+0x27e>
 800050e:	1869      	adds	r1, r5, r1
 8000510:	f100 3cff 	add.w	ip, r0, #4294967295
 8000514:	d217      	bcs.n	8000546 <__udivmoddi4+0x2a6>
 8000516:	428b      	cmp	r3, r1
 8000518:	d915      	bls.n	8000546 <__udivmoddi4+0x2a6>
 800051a:	3802      	subs	r0, #2
 800051c:	4429      	add	r1, r5
 800051e:	1ac9      	subs	r1, r1, r3
 8000520:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000524:	e73b      	b.n	800039e <__udivmoddi4+0xfe>
 8000526:	4637      	mov	r7, r6
 8000528:	4630      	mov	r0, r6
 800052a:	e709      	b.n	8000340 <__udivmoddi4+0xa0>
 800052c:	4607      	mov	r7, r0
 800052e:	e6e7      	b.n	8000300 <__udivmoddi4+0x60>
 8000530:	4618      	mov	r0, r3
 8000532:	e6fb      	b.n	800032c <__udivmoddi4+0x8c>
 8000534:	4541      	cmp	r1, r8
 8000536:	d2ab      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 8000538:	ebb8 0a02 	subs.w	sl, r8, r2
 800053c:	eb69 020e 	sbc.w	r2, r9, lr
 8000540:	3801      	subs	r0, #1
 8000542:	4613      	mov	r3, r2
 8000544:	e7a4      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000546:	4660      	mov	r0, ip
 8000548:	e7e9      	b.n	800051e <__udivmoddi4+0x27e>
 800054a:	4618      	mov	r0, r3
 800054c:	e795      	b.n	800047a <__udivmoddi4+0x1da>
 800054e:	4667      	mov	r7, ip
 8000550:	e7d1      	b.n	80004f6 <__udivmoddi4+0x256>
 8000552:	4681      	mov	r9, r0
 8000554:	e77c      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000556:	3802      	subs	r0, #2
 8000558:	442c      	add	r4, r5
 800055a:	e747      	b.n	80003ec <__udivmoddi4+0x14c>
 800055c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000560:	442b      	add	r3, r5
 8000562:	e72f      	b.n	80003c4 <__udivmoddi4+0x124>
 8000564:	4638      	mov	r0, r7
 8000566:	e708      	b.n	800037a <__udivmoddi4+0xda>
 8000568:	4637      	mov	r7, r6
 800056a:	e6e9      	b.n	8000340 <__udivmoddi4+0xa0>

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart1 ;

void DEBUG_init(void){
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
	RetargetInit(&huart1);
 8000574:	4803      	ldr	r0, [pc, #12]	; (8000584 <DEBUG_init+0x14>)
 8000576:	f000 f809 	bl	800058c <RetargetInit>
	printf("Debuger is init\n");
 800057a:	4803      	ldr	r0, [pc, #12]	; (8000588 <DEBUG_init+0x18>)
 800057c:	f003 f9bc 	bl	80038f8 <puts>
}
 8000580:	bf00      	nop
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000420 	.word	0x20000420
 8000588:	08004824 	.word	0x08004824

0800058c <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <RetargetInit+0x28>)
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800059a:	4b07      	ldr	r3, [pc, #28]	; (80005b8 <RetargetInit+0x2c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	6898      	ldr	r0, [r3, #8]
 80005a0:	2300      	movs	r3, #0
 80005a2:	2202      	movs	r2, #2
 80005a4:	2100      	movs	r1, #0
 80005a6:	f003 f9af 	bl	8003908 <setvbuf>
}
 80005aa:	bf00      	nop
 80005ac:	3708      	adds	r7, #8
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	200003c8 	.word	0x200003c8
 80005b8:	2000031c 	.word	0x2000031c

080005bc <_isatty>:

int _isatty(int fd) {
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	db04      	blt.n	80005d4 <_isatty+0x18>
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	2b02      	cmp	r3, #2
 80005ce:	dc01      	bgt.n	80005d4 <_isatty+0x18>
    return 1;
 80005d0:	2301      	movs	r3, #1
 80005d2:	e005      	b.n	80005e0 <_isatty+0x24>

  errno = EBADF;
 80005d4:	f003 f8d0 	bl	8003778 <__errno>
 80005d8:	4602      	mov	r2, r0
 80005da:	2309      	movs	r3, #9
 80005dc:	6013      	str	r3, [r2, #0]
  return 0;
 80005de:	2300      	movs	r3, #0
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <_write>:

int _write(int fd, char* ptr, int len) {
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b086      	sub	sp, #24
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	60f8      	str	r0, [r7, #12]
 80005f0:	60b9      	str	r1, [r7, #8]
 80005f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	2b01      	cmp	r3, #1
 80005f8:	d002      	beq.n	8000600 <_write+0x18>
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	2b02      	cmp	r3, #2
 80005fe:	d110      	bne.n	8000622 <_write+0x3a>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 8000600:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <_write+0x50>)
 8000602:	6818      	ldr	r0, [r3, #0]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	b29a      	uxth	r2, r3
 8000608:	2364      	movs	r3, #100	; 0x64
 800060a:	68b9      	ldr	r1, [r7, #8]
 800060c:	f002 fb2d 	bl	8002c6a <HAL_UART_Transmit>
 8000610:	4603      	mov	r3, r0
 8000612:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8000614:	7dfb      	ldrb	r3, [r7, #23]
 8000616:	2b00      	cmp	r3, #0
 8000618:	d101      	bne.n	800061e <_write+0x36>
      return len;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	e008      	b.n	8000630 <_write+0x48>
    else
      return EIO;
 800061e:	2305      	movs	r3, #5
 8000620:	e006      	b.n	8000630 <_write+0x48>
  }
  errno = EBADF;
 8000622:	f003 f8a9 	bl	8003778 <__errno>
 8000626:	4602      	mov	r2, r0
 8000628:	2309      	movs	r3, #9
 800062a:	6013      	str	r3, [r2, #0]
  return -1;
 800062c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	200003c8 	.word	0x200003c8

0800063c <_close>:

int _close(int fd) {
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	db04      	blt.n	8000654 <_close+0x18>
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b02      	cmp	r3, #2
 800064e:	dc01      	bgt.n	8000654 <_close+0x18>
    return 0;
 8000650:	2300      	movs	r3, #0
 8000652:	e006      	b.n	8000662 <_close+0x26>

  errno = EBADF;
 8000654:	f003 f890 	bl	8003778 <__errno>
 8000658:	4602      	mov	r2, r0
 800065a:	2309      	movs	r3, #9
 800065c:	6013      	str	r3, [r2, #0]
  return -1;
 800065e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000662:	4618      	mov	r0, r3
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}

0800066a <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800066a:	b580      	push	{r7, lr}
 800066c:	b084      	sub	sp, #16
 800066e:	af00      	add	r7, sp, #0
 8000670:	60f8      	str	r0, [r7, #12]
 8000672:	60b9      	str	r1, [r7, #8]
 8000674:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8000676:	f003 f87f 	bl	8003778 <__errno>
 800067a:	4602      	mov	r2, r0
 800067c:	2309      	movs	r3, #9
 800067e:	6013      	str	r3, [r2, #0]
  return -1;
 8000680:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000684:	4618      	mov	r0, r3
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <_read>:

int _read(int fd, char* ptr, int len) {
 800068c:	b580      	push	{r7, lr}
 800068e:	b086      	sub	sp, #24
 8000690:	af00      	add	r7, sp, #0
 8000692:	60f8      	str	r0, [r7, #12]
 8000694:	60b9      	str	r1, [r7, #8]
 8000696:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	2b00      	cmp	r3, #0
 800069c:	d110      	bne.n	80006c0 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <_read+0x4c>)
 80006a0:	6818      	ldr	r0, [r3, #0]
 80006a2:	f04f 33ff 	mov.w	r3, #4294967295
 80006a6:	2201      	movs	r2, #1
 80006a8:	68b9      	ldr	r1, [r7, #8]
 80006aa:	f002 fb77 	bl	8002d9c <HAL_UART_Receive>
 80006ae:	4603      	mov	r3, r0
 80006b0:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 80006b2:	7dfb      	ldrb	r3, [r7, #23]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d101      	bne.n	80006bc <_read+0x30>
      return 1;
 80006b8:	2301      	movs	r3, #1
 80006ba:	e008      	b.n	80006ce <_read+0x42>
    else
      return EIO;
 80006bc:	2305      	movs	r3, #5
 80006be:	e006      	b.n	80006ce <_read+0x42>
  }
  errno = EBADF;
 80006c0:	f003 f85a 	bl	8003778 <__errno>
 80006c4:	4602      	mov	r2, r0
 80006c6:	2309      	movs	r3, #9
 80006c8:	6013      	str	r3, [r2, #0]
  return -1;
 80006ca:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006ce:	4618      	mov	r0, r3
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	200003c8 	.word	0x200003c8

080006dc <_fstat>:

int _fstat(int fd, struct stat* st) {
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
 80006e4:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	db08      	blt.n	80006fe <_fstat+0x22>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	2b02      	cmp	r3, #2
 80006f0:	dc05      	bgt.n	80006fe <_fstat+0x22>
    st->st_mode = S_IFCHR;
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006f8:	605a      	str	r2, [r3, #4]
    return 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	e005      	b.n	800070a <_fstat+0x2e>
  }

  errno = EBADF;
 80006fe:	f003 f83b 	bl	8003778 <__errno>
 8000702:	4602      	mov	r2, r0
 8000704:	2309      	movs	r3, #9
 8000706:	6013      	str	r3, [r2, #0]
  return 0;
 8000708:	2300      	movs	r3, #0
}
 800070a:	4618      	mov	r0, r3
 800070c:	3708      	adds	r7, #8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
	//Mémorise l'emplacement données du système
	sys = sys_ ;
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <SCHEDULER_init+0x20>)
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	6013      	str	r3, [r2, #0]

	//Init du debug pour le printf
	DEBUG_init();
 8000722:	f7ff ff25 	bl	8000570 <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f000 f9f6 	bl	8000b18 <tasks_init>
}
 800072c:	bf00      	nop
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200003b0 	.word	0x200003b0

08000738 <SCHEDULER_run>:

void SCHEDULER_run(void){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	uint32_t current_time_us = TIME_us();
 800073e:	f000 fa33 	bl	8000ba8 <TIME_us>
 8000742:	6078      	str	r0, [r7, #4]
	task_t * task = get_first_task();
 8000744:	f000 f82a 	bl	800079c <get_first_task>
 8000748:	6038      	str	r0, [r7, #0]

	while(task_queu_position < task_queu_size && task != NULL){
 800074a:	e015      	b.n	8000778 <SCHEDULER_run+0x40>

		//TODO : Tâches par évennement
		if(task->static_priority != PRIORITY_REAL_TIME)
 800074c:	683b      	ldr	r3, [r7, #0]
 800074e:	f993 3000 	ldrsb.w	r3, [r3]
 8000752:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000756:	d00c      	beq.n	8000772 <SCHEDULER_run+0x3a>
			if(current_time_us >= task->it_last_execution_us + task->it_desired_period_us)
 8000758:	683b      	ldr	r3, [r7, #0]
 800075a:	69da      	ldr	r2, [r3, #28]
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	695b      	ldr	r3, [r3, #20]
 8000760:	4413      	add	r3, r2
 8000762:	687a      	ldr	r2, [r7, #4]
 8000764:	429a      	cmp	r2, r3
 8000766:	d304      	bcc.n	8000772 <SCHEDULER_run+0x3a>
					current_time_us = task_process_it(task, current_time_us);
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	6838      	ldr	r0, [r7, #0]
 800076c:	f000 f83c 	bl	80007e8 <task_process_it>
 8000770:	6078      	str	r0, [r7, #4]

		task = get_next_task();
 8000772:	f000 f823 	bl	80007bc <get_next_task>
 8000776:	6038      	str	r0, [r7, #0]
	while(task_queu_position < task_queu_size && task != NULL){
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <SCHEDULER_run+0x5c>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <SCHEDULER_run+0x60>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	429a      	cmp	r2, r3
 8000782:	d202      	bcs.n	800078a <SCHEDULER_run+0x52>
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d1e0      	bne.n	800074c <SCHEDULER_run+0x14>
	}
}
 800078a:	bf00      	nop
 800078c:	3708      	adds	r7, #8
 800078e:	46bd      	mov	sp, r7
 8000790:	bd80      	pop	{r7, pc}
 8000792:	bf00      	nop
 8000794:	200003ac 	.word	0x200003ac
 8000798:	200003a8 	.word	0x200003a8

0800079c <get_first_task>:
	for(uint32_t t = 0; t < task_queu_size; t++)
		load_pourcentage += task_queu[t]->it_duration_us * 100 / task_queu[t]->it_desired_period_us ;
	return load_pourcentage ;
}

static task_t * get_first_task(void){
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0
	task_queu_position = 0 ;
 80007a0:	4b04      	ldr	r3, [pc, #16]	; (80007b4 <get_first_task+0x18>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	601a      	str	r2, [r3, #0]
	return task_queu[0] ;
 80007a6:	4b04      	ldr	r3, [pc, #16]	; (80007b8 <get_first_task+0x1c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	46bd      	mov	sp, r7
 80007ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b2:	4770      	bx	lr
 80007b4:	200003ac 	.word	0x200003ac
 80007b8:	2000039c 	.word	0x2000039c

080007bc <get_next_task>:

static task_t * get_next_task(void){
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
	return task_queu[++task_queu_position];
 80007c0:	4b07      	ldr	r3, [pc, #28]	; (80007e0 <get_next_task+0x24>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	3301      	adds	r3, #1
 80007c6:	4a06      	ldr	r2, [pc, #24]	; (80007e0 <get_next_task+0x24>)
 80007c8:	6013      	str	r3, [r2, #0]
 80007ca:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <get_next_task+0x24>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <get_next_task+0x28>)
 80007d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 80007d4:	4618      	mov	r0, r3
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	200003ac 	.word	0x200003ac
 80007e4:	2000039c 	.word	0x2000039c

080007e8 <task_process_it>:

static uint32_t task_process_it(task_t * task, uint32_t current_time_us){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]

	//Si la tâche n'as pas de fonction associée on s'arrête
	if(task->it == NULL)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	689b      	ldr	r3, [r3, #8]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d101      	bne.n	80007fe <task_process_it+0x16>
		return current_time_us ;
 80007fa:	683b      	ldr	r3, [r7, #0]
 80007fc:	e0a7      	b.n	800094e <task_process_it+0x166>

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->it_real_period_us_average_sum -= task->it_real_period_us_average_array[task->it_average_index];
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	310c      	adds	r1, #12
 800080e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000812:	1ad2      	subs	r2, r2, r3
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	task->it_real_period_us_average_array[task->it_average_index] = current_time_us - task->it_last_execution_us ;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	69db      	ldr	r3, [r3, #28]
 800081e:	687a      	ldr	r2, [r7, #4]
 8000820:	f8d2 20d8 	ldr.w	r2, [r2, #216]	; 0xd8
 8000824:	6839      	ldr	r1, [r7, #0]
 8000826:	1ac9      	subs	r1, r1, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	320c      	adds	r2, #12
 800082c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	task->it_real_period_us_average_sum += task->it_real_period_us_average_array[task->it_average_index] ;
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	310c      	adds	r1, #12
 8000840:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8000844:	441a      	add	r2, r3
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	task->it_real_period_us = task->it_real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000852:	4a41      	ldr	r2, [pc, #260]	; (8000958 <task_process_it+0x170>)
 8000854:	fba2 2303 	umull	r2, r3, r2, r3
 8000858:	091a      	lsrs	r2, r3, #4
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	619a      	str	r2, [r3, #24]

	task->it_last_execution_us = current_time_us ;
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	683a      	ldr	r2, [r7, #0]
 8000862:	61da      	str	r2, [r3, #28]
	task->it(current_time_us);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	6838      	ldr	r0, [r7, #0]
 800086a:	4798      	blx	r3
	current_time_us = TIME_us();
 800086c:	f000 f99c 	bl	8000ba8 <TIME_us>
 8000870:	6038      	str	r0, [r7, #0]


	//Calcul du "burst time" avec une moyenne glissante
	task->it_duration_us_average_sum -= task->it_duration_us_average_array[task->it_average_index];
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800087e:	6879      	ldr	r1, [r7, #4]
 8000880:	3320      	adds	r3, #32
 8000882:	009b      	lsls	r3, r3, #2
 8000884:	440b      	add	r3, r1
 8000886:	685b      	ldr	r3, [r3, #4]
 8000888:	1ad2      	subs	r2, r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	task->it_duration_us_average_array[task->it_average_index] = current_time_us - task->it_last_execution_us ;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	69da      	ldr	r2, [r3, #28]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800089a:	6839      	ldr	r1, [r7, #0]
 800089c:	1a8a      	subs	r2, r1, r2
 800089e:	6879      	ldr	r1, [r7, #4]
 80008a0:	3320      	adds	r3, #32
 80008a2:	009b      	lsls	r3, r3, #2
 80008a4:	440b      	add	r3, r1
 80008a6:	605a      	str	r2, [r3, #4]
	task->it_duration_us_worst = MAX(task->it_duration_us_average_array[task->it_average_index] , task->it_duration_us_worst);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	691a      	ldr	r2, [r3, #16]
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008b2:	6879      	ldr	r1, [r7, #4]
 80008b4:	3320      	adds	r3, #32
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	440b      	add	r3, r1
 80008ba:	685b      	ldr	r3, [r3, #4]
 80008bc:	429a      	cmp	r2, r3
 80008be:	bf38      	it	cc
 80008c0:	461a      	movcc	r2, r3
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	611a      	str	r2, [r3, #16]
	task->it_duration_us_average_sum += task->it_duration_us_average_array[task->it_average_index];
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	; 0xd4
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008d2:	6879      	ldr	r1, [r7, #4]
 80008d4:	3320      	adds	r3, #32
 80008d6:	009b      	lsls	r3, r3, #2
 80008d8:	440b      	add	r3, r1
 80008da:	685b      	ldr	r3, [r3, #4]
 80008dc:	441a      	add	r2, r3
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
	task->it_duration_us = task->it_duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80008ea:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <task_process_it+0x170>)
 80008ec:	fba2 2303 	umull	r2, r3, r2, r3
 80008f0:	091a      	lsrs	r2, r3, #4
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	60da      	str	r2, [r3, #12]

	if(task->it_duration_us_average_array[task->it_average_index] > 1000)
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	3320      	adds	r3, #32
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	4413      	add	r3, r2
 8000904:	685b      	ldr	r3, [r3, #4]
 8000906:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800090a:	d90f      	bls.n	800092c <task_process_it+0x144>
		task->it_duration_us_average_array[task->it_average_index] ++ ;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000912:	6879      	ldr	r1, [r7, #4]
 8000914:	f102 0320 	add.w	r3, r2, #32
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	440b      	add	r3, r1
 800091c:	685b      	ldr	r3, [r3, #4]
 800091e:	1c59      	adds	r1, r3, #1
 8000920:	6878      	ldr	r0, [r7, #4]
 8000922:	f102 0320 	add.w	r3, r2, #32
 8000926:	009b      	lsls	r3, r3, #2
 8000928:	4403      	add	r3, r0
 800092a:	6059      	str	r1, [r3, #4]

	if(++task->it_average_index == TASK_STAT_AVERAGE_OVER)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000932:	1c5a      	adds	r2, r3, #1
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000940:	2b14      	cmp	r3, #20
 8000942:	d103      	bne.n	800094c <task_process_it+0x164>
		task->it_average_index = 0 ;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2200      	movs	r2, #0
 8000948:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
	return current_time_us ;
 800094c:	683b      	ldr	r3, [r7, #0]
}
 800094e:	4618      	mov	r0, r3
 8000950:	3708      	adds	r7, #8
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	cccccccd 	.word	0xcccccccd

0800095c <SCHEDULER_enable_task>:
	return current_time_us ;
}


//Activation ou d�sactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	4603      	mov	r3, r0
 8000964:	6039      	str	r1, [r7, #0]
 8000966:	71fb      	strb	r3, [r7, #7]
	if(enable && id < TASK_COUNT)
 8000968:	683b      	ldr	r3, [r7, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d00b      	beq.n	8000986 <SCHEDULER_enable_task+0x2a>
 800096e:	79fb      	ldrb	r3, [r7, #7]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d808      	bhi.n	8000986 <SCHEDULER_enable_task+0x2a>
		queu_add(TASK_get_task(id));
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	4618      	mov	r0, r3
 8000978:	f000 f902 	bl	8000b80 <TASK_get_task>
 800097c:	4603      	mov	r3, r0
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f832 	bl	80009e8 <queu_add>
 8000984:	e007      	b.n	8000996 <SCHEDULER_enable_task+0x3a>
	else
		queu_remove(TASK_get_task(id));
 8000986:	79fb      	ldrb	r3, [r7, #7]
 8000988:	4618      	mov	r0, r3
 800098a:	f000 f8f9 	bl	8000b80 <TASK_get_task>
 800098e:	4603      	mov	r3, r0
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f881 	bl	8000a98 <queu_remove>
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
	...

080009a0 <queu_contains>:
//static void queu_clear(void){
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
 80009a0:	b480      	push	{r7}
 80009a2:	b085      	sub	sp, #20
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
	for(uint32_t t = 0; t < task_queu_size; t++)
 80009a8:	2300      	movs	r3, #0
 80009aa:	60fb      	str	r3, [r7, #12]
 80009ac:	e00b      	b.n	80009c6 <queu_contains+0x26>
		if(task_queu[t] == task)
 80009ae:	4a0c      	ldr	r2, [pc, #48]	; (80009e0 <queu_contains+0x40>)
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b6:	687a      	ldr	r2, [r7, #4]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d101      	bne.n	80009c0 <queu_contains+0x20>
			return TRUE ;
 80009bc:	2301      	movs	r3, #1
 80009be:	e008      	b.n	80009d2 <queu_contains+0x32>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	3301      	adds	r3, #1
 80009c4:	60fb      	str	r3, [r7, #12]
 80009c6:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <queu_contains+0x44>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	68fa      	ldr	r2, [r7, #12]
 80009cc:	429a      	cmp	r2, r3
 80009ce:	d3ee      	bcc.n	80009ae <queu_contains+0xe>
	return FALSE ;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	2000039c 	.word	0x2000039c
 80009e4:	200003a8 	.word	0x200003a8

080009e8 <queu_add>:

static bool_e queu_add(task_t * task){
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b084      	sub	sp, #16
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
	if(queu_contains(task) || task_queu_size >= TASK_COUNT)
 80009f0:	6878      	ldr	r0, [r7, #4]
 80009f2:	f7ff ffd5 	bl	80009a0 <queu_contains>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d103      	bne.n	8000a04 <queu_add+0x1c>
 80009fc:	4b24      	ldr	r3, [pc, #144]	; (8000a90 <queu_add+0xa8>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	d901      	bls.n	8000a08 <queu_add+0x20>
		return FALSE ;
 8000a04:	2300      	movs	r3, #0
 8000a06:	e03e      	b.n	8000a86 <queu_add+0x9e>


	uint32_t t = 0 ;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 8000a0c:	e037      	b.n	8000a7e <queu_add+0x96>
	{
		if(task_queu[t] == NULL || task->static_priority > task_queu[t]->static_priority){
 8000a0e:	4a21      	ldr	r2, [pc, #132]	; (8000a94 <queu_add+0xac>)
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d00a      	beq.n	8000a30 <queu_add+0x48>
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	f993 2000 	ldrsb.w	r2, [r3]
 8000a20:	491c      	ldr	r1, [pc, #112]	; (8000a94 <queu_add+0xac>)
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000a28:	f993 3000 	ldrsb.w	r3, [r3]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	dd23      	ble.n	8000a78 <queu_add+0x90>
			if(task_queu[t] != NULL)
 8000a30:	4a18      	ldr	r2, [pc, #96]	; (8000a94 <queu_add+0xac>)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d011      	beq.n	8000a60 <queu_add+0x78>
				memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size +1 - t));
 8000a3c:	68fb      	ldr	r3, [r7, #12]
 8000a3e:	3301      	adds	r3, #1
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	4a14      	ldr	r2, [pc, #80]	; (8000a94 <queu_add+0xac>)
 8000a44:	1898      	adds	r0, r3, r2
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	009b      	lsls	r3, r3, #2
 8000a4a:	4a12      	ldr	r2, [pc, #72]	; (8000a94 <queu_add+0xac>)
 8000a4c:	1899      	adds	r1, r3, r2
 8000a4e:	4b10      	ldr	r3, [pc, #64]	; (8000a90 <queu_add+0xa8>)
 8000a50:	681a      	ldr	r2, [r3, #0]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	1ad3      	subs	r3, r2, r3
 8000a56:	3301      	adds	r3, #1
 8000a58:	009b      	lsls	r3, r3, #2
 8000a5a:	461a      	mov	r2, r3
 8000a5c:	f002 feb6 	bl	80037cc <memmove>
			task_queu[t] = task ;
 8000a60:	490c      	ldr	r1, [pc, #48]	; (8000a94 <queu_add+0xac>)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	687a      	ldr	r2, [r7, #4]
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			task_queu_size ++ ;
 8000a6a:	4b09      	ldr	r3, [pc, #36]	; (8000a90 <queu_add+0xa8>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <queu_add+0xa8>)
 8000a72:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8000a74:	2301      	movs	r3, #1
 8000a76:	e006      	b.n	8000a86 <queu_add+0x9e>
		}
		t++;
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	3301      	adds	r3, #1
 8000a7c:	60fb      	str	r3, [r7, #12]
	while(t < TASK_COUNT)
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	2b01      	cmp	r3, #1
 8000a82:	d9c4      	bls.n	8000a0e <queu_add+0x26>
	}
	return FALSE ;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	200003a8 	.word	0x200003a8
 8000a94:	2000039c 	.word	0x2000039c

08000a98 <queu_remove>:

static bool_e queu_remove(task_t * task){
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
	if(!queu_contains(task))
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff7d 	bl	80009a0 <queu_contains>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d101      	bne.n	8000ab0 <queu_remove+0x18>
		return FALSE ;
 8000aac:	2300      	movs	r3, #0
 8000aae:	e02a      	b.n	8000b06 <queu_remove+0x6e>

	for(uint32_t t = 0; t < task_queu_size; t ++){
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	e021      	b.n	8000afa <queu_remove+0x62>
		if(task == task_queu[t]){
 8000ab6:	4a16      	ldr	r2, [pc, #88]	; (8000b10 <queu_remove+0x78>)
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abe:	687a      	ldr	r2, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	d117      	bne.n	8000af4 <queu_remove+0x5c>
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	009b      	lsls	r3, r3, #2
 8000ac8:	4a11      	ldr	r2, [pc, #68]	; (8000b10 <queu_remove+0x78>)
 8000aca:	1898      	adds	r0, r3, r2
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	009b      	lsls	r3, r3, #2
 8000ad2:	4a0f      	ldr	r2, [pc, #60]	; (8000b10 <queu_remove+0x78>)
 8000ad4:	1899      	adds	r1, r3, r2
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <queu_remove+0x7c>)
 8000ad8:	681a      	ldr	r2, [r3, #0]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	1ad3      	subs	r3, r2, r3
 8000ade:	009b      	lsls	r3, r3, #2
 8000ae0:	461a      	mov	r2, r3
 8000ae2:	f002 fe73 	bl	80037cc <memmove>
			task_queu_size -- ;
 8000ae6:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <queu_remove+0x7c>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	3b01      	subs	r3, #1
 8000aec:	4a09      	ldr	r2, [pc, #36]	; (8000b14 <queu_remove+0x7c>)
 8000aee:	6013      	str	r3, [r2, #0]
			return TRUE ;
 8000af0:	2301      	movs	r3, #1
 8000af2:	e008      	b.n	8000b06 <queu_remove+0x6e>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	3301      	adds	r3, #1
 8000af8:	60fb      	str	r3, [r7, #12]
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <queu_remove+0x7c>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	68fa      	ldr	r2, [r7, #12]
 8000b00:	429a      	cmp	r2, r3
 8000b02:	d3d8      	bcc.n	8000ab6 <queu_remove+0x1e>
		}
	}
	return FALSE ;
 8000b04:	2300      	movs	r3, #0
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000039c 	.word	0x2000039c
 8000b14:	200003a8 	.word	0x200003a8

08000b18 <tasks_init>:
#include "task.h"
#include "../scheduler/scheduler.h"

static system_t * sys;

void tasks_init(system_t * sys_){
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
	//On mémorise où se trouve notre structure système
	sys = sys_ ;
 8000b20:	4a07      	ldr	r2, [pc, #28]	; (8000b40 <tasks_init+0x28>)
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	6013      	str	r3, [r2, #0]

	//Activation des tâches
	SCHEDULER_enable_task(TASK_LED, TRUE);
 8000b26:	2101      	movs	r1, #1
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f7ff ff17 	bl	800095c <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_PRINTF, TRUE);
 8000b2e:	2101      	movs	r1, #1
 8000b30:	2000      	movs	r0, #0
 8000b32:	f7ff ff13 	bl	800095c <SCHEDULER_enable_task>

}
 8000b36:	bf00      	nop
 8000b38:	3708      	adds	r7, #8
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200003b4 	.word	0x200003b4

08000b44 <task_main_print_f>:

void task_main_print_f(uint32_t current_time_us){
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	printf("%lu\n", current_time_us);
 8000b4c:	6879      	ldr	r1, [r7, #4]
 8000b4e:	4803      	ldr	r0, [pc, #12]	; (8000b5c <task_main_print_f+0x18>)
 8000b50:	f002 fe5e 	bl	8003810 <iprintf>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	08004834 	.word	0x08004834

08000b60 <task_main_led>:


void task_main_led(uint32_t current_time_us){
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
	LED_SEQUENCE_play(&sys->led, current_time_us);
 8000b68:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <task_main_led+0x1c>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	6879      	ldr	r1, [r7, #4]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f002 fdae 	bl	80036d0 <LED_SEQUENCE_play>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200003b4 	.word	0x200003b4

08000b80 <TASK_get_task>:
task_t tasks [TASK_COUNT] ={
		[TASK_PRINTF] = 		DEFINE_TASK(TASK_PRINTF, 			PRIORITY_HIGH, 			task_main_print_f, 			PERIOD_US_FROM_HERTZ(50)),
		[TASK_LED] = 			DEFINE_TASK(TASK_LED, 				PRIORITY_LOW,	 		task_main_led, 				PERIOD_US_FROM_HERTZ(10))
};

task_t * TASK_get_task(task_ids_t id){
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	71fb      	strb	r3, [r7, #7]
	return &tasks[id];
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	f44f 72c4 	mov.w	r2, #392	; 0x188
 8000b90:	fb02 f303 	mul.w	r3, r2, r3
 8000b94:	4a03      	ldr	r2, [pc, #12]	; (8000ba4 <TASK_get_task+0x24>)
 8000b96:	4413      	add	r3, r2
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba2:	4770      	bx	lr
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bae:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 8000bb0:	f000 fbae 	bl	8001310 <HAL_GetTick>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000bbc:	fb02 f203 	mul.w	r2, r2, r3
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <TIME_us+0x50>)
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	08db      	lsrs	r3, r3, #3
 8000bc6:	490d      	ldr	r1, [pc, #52]	; (8000bfc <TIME_us+0x54>)
 8000bc8:	fba1 1303 	umull	r1, r3, r1, r3
 8000bcc:	085b      	lsrs	r3, r3, #1
 8000bce:	1ad3      	subs	r3, r2, r3
 8000bd0:	607b      	str	r3, [r7, #4]
  __ASM volatile ("cpsie i" : : : "memory");
 8000bd2:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s ait pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us >= t_us)
 8000bd4:	4b0a      	ldr	r3, [pc, #40]	; (8000c00 <TIME_us+0x58>)
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d803      	bhi.n	8000be6 <TIME_us+0x3e>
		t_us += 1000;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	f503 737a 	add.w	r3, r3, #1000	; 0x3e8
 8000be4:	607b      	str	r3, [r7, #4]
	previous_t_us = t_us ;
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <TIME_us+0x58>)
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6013      	str	r3, [r2, #0]

	return t_us;
 8000bec:	687b      	ldr	r3, [r7, #4]
}
 8000bee:	4618      	mov	r0, r3
 8000bf0:	3708      	adds	r7, #8
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	e000e010 	.word	0xe000e010
 8000bfc:	18618619 	.word	0x18618619
 8000c00:	200003b8 	.word	0x200003b8

08000c04 <MPU_init>:
#include "mpu.h"

/*
 *
 */
sensor_state_e MPU_init(mpu_t * mpu, sensor_connectivity_e connectivity, I2C_HandleTypeDef * hi2c, DMA_HandleTypeDef * hdma){
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af04      	add	r7, sp, #16
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	607a      	str	r2, [r7, #4]
 8000c0e:	603b      	str	r3, [r7, #0]
 8000c10:	460b      	mov	r3, r1
 8000c12:	72fb      	strb	r3, [r7, #11]

	//Vérification de la cochérence des paramètres entré
	if(hi2c == NULL)
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d101      	bne.n	8000c1e <MPU_init+0x1a>
		return SENSOR_INIT_FAILED ;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	e059      	b.n	8000cd2 <MPU_init+0xce>

	if(connectivity % 2)
 8000c1e:	7afb      	ldrb	r3, [r7, #11]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d004      	beq.n	8000c34 <MPU_init+0x30>
		if(hdma == NULL)
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d101      	bne.n	8000c34 <MPU_init+0x30>
			return SENSOR_INIT_FAILED ;
 8000c30:	2302      	movs	r3, #2
 8000c32:	e04e      	b.n	8000cd2 <MPU_init+0xce>

	//Application des paramètres de connexion
	mpu->connectivity = connectivity ;
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	7afa      	ldrb	r2, [r7, #11]
 8000c38:	729a      	strb	r2, [r3, #10]
	if(hi2c != NULL)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	2b00      	cmp	r3, #0
 8000c3e:	d002      	beq.n	8000c46 <MPU_init+0x42>
		mpu->hi2c = hi2c ;
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	687a      	ldr	r2, [r7, #4]
 8000c44:	601a      	str	r2, [r3, #0]
	if(hdma != NULL)
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d002      	beq.n	8000c52 <MPU_init+0x4e>
		mpu->hdma = hdma ;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	605a      	str	r2, [r3, #4]
	mpu->adresse = MPU6050_I2C_ADDR ;
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	22d0      	movs	r2, #208	; 0xd0
 8000c56:	725a      	strb	r2, [r3, #9]

	//Check la présence du mpu
	HAL_StatusTypeDef mpu_test ;
	switch(mpu->connectivity){
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	7a9b      	ldrb	r3, [r3, #10]
 8000c5c:	2b02      	cmp	r3, #2
 8000c5e:	d10b      	bne.n	8000c78 <MPU_init+0x74>
		case USE_I2C :
			mpu_test = HAL_I2C_IsDeviceReady(mpu->hi2c, mpu->adresse, 2, 2);
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	6818      	ldr	r0, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	7a5b      	ldrb	r3, [r3, #9]
 8000c68:	b299      	uxth	r1, r3
 8000c6a:	2302      	movs	r3, #2
 8000c6c:	2202      	movs	r2, #2
 8000c6e:	f001 f827 	bl	8001cc0 <HAL_I2C_IsDeviceReady>
 8000c72:	4603      	mov	r3, r0
 8000c74:	75fb      	strb	r3, [r7, #23]
			break;
 8000c76:	e002      	b.n	8000c7e <MPU_init+0x7a>

		default :
			mpu_test = HAL_ERROR ;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	75fb      	strb	r3, [r7, #23]
			break;
 8000c7c:	bf00      	nop
	}
	if(mpu_test != HAL_OK)
 8000c7e:	7dfb      	ldrb	r3, [r7, #23]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d001      	beq.n	8000c88 <MPU_init+0x84>
		return SENSOR_INIT_FAILED ;
 8000c84:	2302      	movs	r3, #2
 8000c86:	e024      	b.n	8000cd2 <MPU_init+0xce>

	//Wakeup du mpu
	uint8_t wakeup_data = 0x00 ;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	75bb      	strb	r3, [r7, #22]
	switch(mpu->connectivity){
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	7a9b      	ldrb	r3, [r3, #10]
 8000c90:	2b02      	cmp	r3, #2
 8000c92:	d112      	bne.n	8000cba <MPU_init+0xb6>
		case USE_I2C :
			mpu_test = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &wakeup_data, 1, 10);
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	6818      	ldr	r0, [r3, #0]
 8000c98:	68fb      	ldr	r3, [r7, #12]
 8000c9a:	7a5b      	ldrb	r3, [r3, #9]
 8000c9c:	b299      	uxth	r1, r3
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	9302      	str	r3, [sp, #8]
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	9301      	str	r3, [sp, #4]
 8000ca6:	f107 0316 	add.w	r3, r7, #22
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2301      	movs	r3, #1
 8000cae:	226b      	movs	r2, #107	; 0x6b
 8000cb0:	f000 ff0c 	bl	8001acc <HAL_I2C_Mem_Write>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	75fb      	strb	r3, [r7, #23]
			break;
 8000cb8:	e002      	b.n	8000cc0 <MPU_init+0xbc>

		default :
			mpu_test = HAL_ERROR ;
 8000cba:	2301      	movs	r3, #1
 8000cbc:	75fb      	strb	r3, [r7, #23]
			break;
 8000cbe:	bf00      	nop
	}
	if(mpu_test != HAL_OK)
 8000cc0:	7dfb      	ldrb	r3, [r7, #23]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MPU_init+0xc6>
		return SENSOR_INIT_FAILED ;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	e003      	b.n	8000cd2 <MPU_init+0xce>

	mpu->state = SENSOR_INIT_OK ;
 8000cca:	68fb      	ldr	r3, [r7, #12]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	721a      	strb	r2, [r3, #8]
	return SENSOR_INIT_OK ;
 8000cd0:	2301      	movs	r3, #1
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3718      	adds	r7, #24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
	...

08000cdc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b088      	sub	sp, #32
 8000ce0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 030c 	add.w	r3, r7, #12
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
 8000cf6:	4b26      	ldr	r3, [pc, #152]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	4a25      	ldr	r2, [pc, #148]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	; 0x30
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	60bb      	str	r3, [r7, #8]
 8000d0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	607b      	str	r3, [r7, #4]
 8000d12:	4b1f      	ldr	r3, [pc, #124]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d16:	4a1e      	ldr	r2, [pc, #120]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d18:	f043 0308 	orr.w	r3, r3, #8
 8000d1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1e:	4b1c      	ldr	r3, [pc, #112]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	f003 0308 	and.w	r3, r3, #8
 8000d26:	607b      	str	r3, [r7, #4]
 8000d28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	603b      	str	r3, [r7, #0]
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d32:	4a17      	ldr	r2, [pc, #92]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d34:	f043 0302 	orr.w	r3, r3, #2
 8000d38:	6313      	str	r3, [r2, #48]	; 0x30
 8000d3a:	4b15      	ldr	r3, [pc, #84]	; (8000d90 <MX_GPIO_Init+0xb4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3e:	f003 0302 	and.w	r3, r3, #2
 8000d42:	603b      	str	r3, [r7, #0]
 8000d44:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LED_2_Pin|LED_1_Pin|LED_3_Pin|LED_4_Pin, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000d4c:	4811      	ldr	r0, [pc, #68]	; (8000d94 <MX_GPIO_Init+0xb8>)
 8000d4e:	f000 fd6b 	bl	8001828 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000d52:	2301      	movs	r3, #1
 8000d54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	4619      	mov	r1, r3
 8000d64:	480c      	ldr	r0, [pc, #48]	; (8000d98 <MX_GPIO_Init+0xbc>)
 8000d66:	f000 fbc5 	bl	80014f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = LED_2_Pin|LED_1_Pin|LED_3_Pin|LED_4_Pin;
 8000d6a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000d6e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d74:	2300      	movs	r3, #0
 8000d76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d7c:	f107 030c 	add.w	r3, r7, #12
 8000d80:	4619      	mov	r1, r3
 8000d82:	4804      	ldr	r0, [pc, #16]	; (8000d94 <MX_GPIO_Init+0xb8>)
 8000d84:	f000 fbb6 	bl	80014f4 <HAL_GPIO_Init>

}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	40023800 	.word	0x40023800
 8000d94:	40020c00 	.word	0x40020c00
 8000d98:	40020000 	.word	0x40020000

08000d9c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0

  hi2c1.Instance = I2C1;
 8000da0:	4b12      	ldr	r3, [pc, #72]	; (8000dec <MX_I2C1_Init+0x50>)
 8000da2:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <MX_I2C1_Init+0x54>)
 8000da4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000da6:	4b11      	ldr	r3, [pc, #68]	; (8000dec <MX_I2C1_Init+0x50>)
 8000da8:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <MX_I2C1_Init+0x58>)
 8000daa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dac:	4b0f      	ldr	r3, [pc, #60]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000db2:	4b0e      	ldr	r3, [pc, #56]	; (8000dec <MX_I2C1_Init+0x50>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000db8:	4b0c      	ldr	r3, [pc, #48]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dbe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dc0:	4b0a      	ldr	r3, [pc, #40]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000dc6:	4b09      	ldr	r3, [pc, #36]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000dcc:	4b07      	ldr	r3, [pc, #28]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dd2:	4b06      	ldr	r3, [pc, #24]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000dd8:	4804      	ldr	r0, [pc, #16]	; (8000dec <MX_I2C1_Init+0x50>)
 8000dda:	f000 fd3f 	bl	800185c <HAL_I2C_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000de4:	f000 f8e8 	bl	8000fb8 <Error_Handler>
  }

}
 8000de8:	bf00      	nop
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	200003cc 	.word	0x200003cc
 8000df0:	40005400 	.word	0x40005400
 8000df4:	00061a80 	.word	0x00061a80

08000df8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a19      	ldr	r2, [pc, #100]	; (8000e7c <HAL_I2C_MspInit+0x84>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d12c      	bne.n	8000e74 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	613b      	str	r3, [r7, #16]
 8000e1e:	4b18      	ldr	r3, [pc, #96]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2a:	4b15      	ldr	r3, [pc, #84]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e3c:	2312      	movs	r3, #18
 8000e3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e44:	2303      	movs	r3, #3
 8000e46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e48:	2304      	movs	r3, #4
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4c:	f107 0314 	add.w	r3, r7, #20
 8000e50:	4619      	mov	r1, r3
 8000e52:	480c      	ldr	r0, [pc, #48]	; (8000e84 <HAL_I2C_MspInit+0x8c>)
 8000e54:	f000 fb4e 	bl	80014f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	4b08      	ldr	r3, [pc, #32]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e60:	4a07      	ldr	r2, [pc, #28]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e62:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e66:	6413      	str	r3, [r2, #64]	; 0x40
 8000e68:	4b05      	ldr	r3, [pc, #20]	; (8000e80 <HAL_I2C_MspInit+0x88>)
 8000e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e70:	60fb      	str	r3, [r7, #12]
 8000e72:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000e74:	bf00      	nop
 8000e76:	3728      	adds	r7, #40	; 0x28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40005400 	.word	0x40005400
 8000e80:	40023800 	.word	0x40023800
 8000e84:	40020400 	.word	0x40020400

08000e88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b09c      	sub	sp, #112	; 0x70
 8000e8c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e8e:	f000 f9d9 	bl	8001244 <HAL_Init>
  system_t sys ;

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e92:	f000 f827 	bl	8000ee4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e96:	f7ff ff21 	bl	8000cdc <MX_GPIO_Init>
  MX_I2C1_Init();
 8000e9a:	f7ff ff7f 	bl	8000d9c <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8000e9e:	f000 f935 	bl	800110c <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */



  SCHEDULER_init(&sys);
 8000ea2:	463b      	mov	r3, r7
 8000ea4:	4618      	mov	r0, r3
 8000ea6:	f7ff fc35 	bl	8000714 <SCHEDULER_init>
  LED_SEQUENCE_init(&sys.led, LED_1_GPIO_Port, LED_1_Pin, SEQUENCE_LED_1, 200, 12, 1);
 8000eaa:	4638      	mov	r0, r7
 8000eac:	2301      	movs	r3, #1
 8000eae:	9302      	str	r3, [sp, #8]
 8000eb0:	230c      	movs	r3, #12
 8000eb2:	9301      	str	r3, [sp, #4]
 8000eb4:	23c8      	movs	r3, #200	; 0xc8
 8000eb6:	9300      	str	r3, [sp, #0]
 8000eb8:	f640 2328 	movw	r3, #2600	; 0xa28
 8000ebc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ec0:	4906      	ldr	r1, [pc, #24]	; (8000edc <main+0x54>)
 8000ec2:	f002 fbd7 	bl	8003674 <LED_SEQUENCE_init>
  MPU_init(&sys.sensors.mpu, USE_I2C, &hi2c1, NULL);
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	f103 001c 	add.w	r0, r3, #28
 8000ecc:	2300      	movs	r3, #0
 8000ece:	4a04      	ldr	r2, [pc, #16]	; (8000ee0 <main+0x58>)
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	f7ff fe97 	bl	8000c04 <MPU_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  SCHEDULER_run();
 8000ed6:	f7ff fc2f 	bl	8000738 <SCHEDULER_run>
 8000eda:	e7fc      	b.n	8000ed6 <main+0x4e>
 8000edc:	40020c00 	.word	0x40020c00
 8000ee0:	200003cc 	.word	0x200003cc

08000ee4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b094      	sub	sp, #80	; 0x50
 8000ee8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000eea:	f107 0320 	add.w	r3, r7, #32
 8000eee:	2230      	movs	r2, #48	; 0x30
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f002 fc83 	bl	80037fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ef8:	f107 030c 	add.w	r3, r7, #12
 8000efc:	2200      	movs	r2, #0
 8000efe:	601a      	str	r2, [r3, #0]
 8000f00:	605a      	str	r2, [r3, #4]
 8000f02:	609a      	str	r2, [r3, #8]
 8000f04:	60da      	str	r2, [r3, #12]
 8000f06:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	4b28      	ldr	r3, [pc, #160]	; (8000fb0 <SystemClock_Config+0xcc>)
 8000f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f10:	4a27      	ldr	r2, [pc, #156]	; (8000fb0 <SystemClock_Config+0xcc>)
 8000f12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f16:	6413      	str	r3, [r2, #64]	; 0x40
 8000f18:	4b25      	ldr	r3, [pc, #148]	; (8000fb0 <SystemClock_Config+0xcc>)
 8000f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f24:	2300      	movs	r3, #0
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	4b22      	ldr	r3, [pc, #136]	; (8000fb4 <SystemClock_Config+0xd0>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a21      	ldr	r2, [pc, #132]	; (8000fb4 <SystemClock_Config+0xd0>)
 8000f2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f32:	6013      	str	r3, [r2, #0]
 8000f34:	4b1f      	ldr	r3, [pc, #124]	; (8000fb4 <SystemClock_Config+0xd0>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f3c:	607b      	str	r3, [r7, #4]
 8000f3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f40:	2302      	movs	r3, #2
 8000f42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f44:	2301      	movs	r3, #1
 8000f46:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f48:	2310      	movs	r3, #16
 8000f4a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000f50:	2300      	movs	r3, #0
 8000f52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000f54:	2308      	movs	r3, #8
 8000f56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f58:	23a8      	movs	r3, #168	; 0xa8
 8000f5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f60:	2304      	movs	r3, #4
 8000f62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f64:	f107 0320 	add.w	r3, r7, #32
 8000f68:	4618      	mov	r0, r3
 8000f6a:	f001 f9f5 	bl	8002358 <HAL_RCC_OscConfig>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d001      	beq.n	8000f78 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f74:	f000 f820 	bl	8000fb8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f78:	230f      	movs	r3, #15
 8000f7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f84:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f90:	f107 030c 	add.w	r3, r7, #12
 8000f94:	2105      	movs	r1, #5
 8000f96:	4618      	mov	r0, r3
 8000f98:	f001 fc4e 	bl	8002838 <HAL_RCC_ClockConfig>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d001      	beq.n	8000fa6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000fa2:	f000 f809 	bl	8000fb8 <Error_Handler>
  }
}
 8000fa6:	bf00      	nop
 8000fa8:	3750      	adds	r7, #80	; 0x50
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023800 	.word	0x40023800
 8000fb4:	40007000 	.word	0x40007000

08000fb8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_MspInit+0x4c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <HAL_MspInit+0x4c>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_MspInit+0x4c>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_MspInit+0x4c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_MspInit+0x4c>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_MspInit+0x4c>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	bf00      	nop
 8001008:	370c      	adds	r7, #12
 800100a:	46bd      	mov	sp, r7
 800100c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	40023800 	.word	0x40023800

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800102a:	e7fe      	b.n	800102a <HardFault_Handler+0x4>

0800102c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001030:	e7fe      	b.n	8001030 <MemManage_Handler+0x4>

08001032 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001032:	b480      	push	{r7}
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001036:	e7fe      	b.n	8001036 <BusFault_Handler+0x4>

08001038 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800103c:	e7fe      	b.n	800103c <UsageFault_Handler+0x4>

0800103e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103e:	b480      	push	{r7}
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800106c:	f000 f93c 	bl	80012e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001070:	bf00      	nop
 8001072:	bd80      	pop	{r7, pc}

08001074 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b086      	sub	sp, #24
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800107c:	4a14      	ldr	r2, [pc, #80]	; (80010d0 <_sbrk+0x5c>)
 800107e:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <_sbrk+0x60>)
 8001080:	1ad3      	subs	r3, r2, r3
 8001082:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001088:	4b13      	ldr	r3, [pc, #76]	; (80010d8 <_sbrk+0x64>)
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d102      	bne.n	8001096 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001090:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <_sbrk+0x64>)
 8001092:	4a12      	ldr	r2, [pc, #72]	; (80010dc <_sbrk+0x68>)
 8001094:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d207      	bcs.n	80010b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010a4:	f002 fb68 	bl	8003778 <__errno>
 80010a8:	4602      	mov	r2, r0
 80010aa:	230c      	movs	r3, #12
 80010ac:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80010ae:	f04f 33ff 	mov.w	r3, #4294967295
 80010b2:	e009      	b.n	80010c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <_sbrk+0x64>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010ba:	4b07      	ldr	r3, [pc, #28]	; (80010d8 <_sbrk+0x64>)
 80010bc:	681a      	ldr	r2, [r3, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4413      	add	r3, r2
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <_sbrk+0x64>)
 80010c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010c6:	68fb      	ldr	r3, [r7, #12]
}
 80010c8:	4618      	mov	r0, r3
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	20020000 	.word	0x20020000
 80010d4:	00000400 	.word	0x00000400
 80010d8:	200003bc 	.word	0x200003bc
 80010dc:	20000468 	.word	0x20000468

080010e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010e4:	4b08      	ldr	r3, [pc, #32]	; (8001108 <SystemInit+0x28>)
 80010e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ea:	4a07      	ldr	r2, [pc, #28]	; (8001108 <SystemInit+0x28>)
 80010ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010f4:	4b04      	ldr	r3, [pc, #16]	; (8001108 <SystemInit+0x28>)
 80010f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010fa:	609a      	str	r2, [r3, #8]
#endif
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8001110:	4b11      	ldr	r3, [pc, #68]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001112:	4a12      	ldr	r2, [pc, #72]	; (800115c <MX_USART1_UART_Init+0x50>)
 8001114:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 230400;
 8001116:	4b10      	ldr	r3, [pc, #64]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001118:	f44f 3261 	mov.w	r2, #230400	; 0x38400
 800111c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800111e:	4b0e      	ldr	r3, [pc, #56]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001124:	4b0c      	ldr	r3, [pc, #48]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001126:	2200      	movs	r2, #0
 8001128:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800112a:	4b0b      	ldr	r3, [pc, #44]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 800112c:	2200      	movs	r2, #0
 800112e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001130:	4b09      	ldr	r3, [pc, #36]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001132:	220c      	movs	r2, #12
 8001134:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001136:	4b08      	ldr	r3, [pc, #32]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001138:	2200      	movs	r2, #0
 800113a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800113c:	4b06      	ldr	r3, [pc, #24]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 800113e:	2200      	movs	r2, #0
 8001140:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001142:	4805      	ldr	r0, [pc, #20]	; (8001158 <MX_USART1_UART_Init+0x4c>)
 8001144:	f001 fd44 	bl	8002bd0 <HAL_UART_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800114e:	f7ff ff33 	bl	8000fb8 <Error_Handler>
  }

}
 8001152:	bf00      	nop
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	20000420 	.word	0x20000420
 800115c:	40011000 	.word	0x40011000

08001160 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08a      	sub	sp, #40	; 0x28
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	4a19      	ldr	r2, [pc, #100]	; (80011e4 <HAL_UART_MspInit+0x84>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d12b      	bne.n	80011da <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	613b      	str	r3, [r7, #16]
 8001186:	4b18      	ldr	r3, [pc, #96]	; (80011e8 <HAL_UART_MspInit+0x88>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a17      	ldr	r2, [pc, #92]	; (80011e8 <HAL_UART_MspInit+0x88>)
 800118c:	f043 0310 	orr.w	r3, r3, #16
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <HAL_UART_MspInit+0x88>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f003 0310 	and.w	r3, r3, #16
 800119a:	613b      	str	r3, [r7, #16]
 800119c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	60fb      	str	r3, [r7, #12]
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <HAL_UART_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	4a10      	ldr	r2, [pc, #64]	; (80011e8 <HAL_UART_MspInit+0x88>)
 80011a8:	f043 0302 	orr.w	r3, r3, #2
 80011ac:	6313      	str	r3, [r2, #48]	; 0x30
 80011ae:	4b0e      	ldr	r3, [pc, #56]	; (80011e8 <HAL_UART_MspInit+0x88>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011b2:	f003 0302 	and.w	r3, r3, #2
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80011ba:	23c0      	movs	r3, #192	; 0xc0
 80011bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011be:	2302      	movs	r3, #2
 80011c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c2:	2300      	movs	r3, #0
 80011c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c6:	2303      	movs	r3, #3
 80011c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011ca:	2307      	movs	r3, #7
 80011cc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ce:	f107 0314 	add.w	r3, r7, #20
 80011d2:	4619      	mov	r1, r3
 80011d4:	4805      	ldr	r0, [pc, #20]	; (80011ec <HAL_UART_MspInit+0x8c>)
 80011d6:	f000 f98d 	bl	80014f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	3728      	adds	r7, #40	; 0x28
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40011000 	.word	0x40011000
 80011e8:	40023800 	.word	0x40023800
 80011ec:	40020400 	.word	0x40020400

080011f0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80011f0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001228 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80011f4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80011f6:	e003      	b.n	8001200 <LoopCopyDataInit>

080011f8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80011fa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80011fc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80011fe:	3104      	adds	r1, #4

08001200 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001200:	480b      	ldr	r0, [pc, #44]	; (8001230 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001202:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001204:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001206:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001208:	d3f6      	bcc.n	80011f8 <CopyDataInit>
  ldr  r2, =_sbss
 800120a:	4a0b      	ldr	r2, [pc, #44]	; (8001238 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800120c:	e002      	b.n	8001214 <LoopFillZerobss>

0800120e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800120e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001210:	f842 3b04 	str.w	r3, [r2], #4

08001214 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001216:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001218:	d3f9      	bcc.n	800120e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800121a:	f7ff ff61 	bl	80010e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800121e:	f002 fab1 	bl	8003784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001222:	f7ff fe31 	bl	8000e88 <main>
  bx  lr    
 8001226:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001228:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800122c:	080048fc 	.word	0x080048fc
  ldr  r0, =_sdata
 8001230:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001234:	20000380 	.word	0x20000380
  ldr  r2, =_sbss
 8001238:	20000380 	.word	0x20000380
  ldr  r3, = _ebss
 800123c:	20000468 	.word	0x20000468

08001240 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001240:	e7fe      	b.n	8001240 <ADC_IRQHandler>
	...

08001244 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001248:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <HAL_Init+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a0d      	ldr	r2, [pc, #52]	; (8001284 <HAL_Init+0x40>)
 800124e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001252:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001254:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <HAL_Init+0x40>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a0a      	ldr	r2, [pc, #40]	; (8001284 <HAL_Init+0x40>)
 800125a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800125e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001260:	4b08      	ldr	r3, [pc, #32]	; (8001284 <HAL_Init+0x40>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a07      	ldr	r2, [pc, #28]	; (8001284 <HAL_Init+0x40>)
 8001266:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800126c:	2003      	movs	r0, #3
 800126e:	f000 f90d 	bl	800148c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001272:	2000      	movs	r0, #0
 8001274:	f000 f808 	bl	8001288 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001278:	f7ff fea6 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023c00 	.word	0x40023c00

08001288 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001290:	4b12      	ldr	r3, [pc, #72]	; (80012dc <HAL_InitTick+0x54>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_InitTick+0x58>)
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	4619      	mov	r1, r3
 800129a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800129e:	fbb3 f3f1 	udiv	r3, r3, r1
 80012a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012a6:	4618      	mov	r0, r3
 80012a8:	f000 f917 	bl	80014da <HAL_SYSTICK_Config>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	e00e      	b.n	80012d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	2b0f      	cmp	r3, #15
 80012ba:	d80a      	bhi.n	80012d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012bc:	2200      	movs	r2, #0
 80012be:	6879      	ldr	r1, [r7, #4]
 80012c0:	f04f 30ff 	mov.w	r0, #4294967295
 80012c4:	f000 f8ed 	bl	80014a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012c8:	4a06      	ldr	r2, [pc, #24]	; (80012e4 <HAL_InitTick+0x5c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
 80012d0:	e000      	b.n	80012d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
}
 80012d4:	4618      	mov	r0, r3
 80012d6:	3708      	adds	r7, #8
 80012d8:	46bd      	mov	sp, r7
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	20000310 	.word	0x20000310
 80012e0:	20000318 	.word	0x20000318
 80012e4:	20000314 	.word	0x20000314

080012e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012ec:	4b06      	ldr	r3, [pc, #24]	; (8001308 <HAL_IncTick+0x20>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	461a      	mov	r2, r3
 80012f2:	4b06      	ldr	r3, [pc, #24]	; (800130c <HAL_IncTick+0x24>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	4a04      	ldr	r2, [pc, #16]	; (800130c <HAL_IncTick+0x24>)
 80012fa:	6013      	str	r3, [r2, #0]
}
 80012fc:	bf00      	nop
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	20000318 	.word	0x20000318
 800130c:	20000460 	.word	0x20000460

08001310 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return uwTick;
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <HAL_GetTick+0x14>)
 8001316:	681b      	ldr	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000460 	.word	0x20000460

08001328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001338:	4b0c      	ldr	r3, [pc, #48]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800133a:	68db      	ldr	r3, [r3, #12]
 800133c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800133e:	68ba      	ldr	r2, [r7, #8]
 8001340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001344:	4013      	ands	r3, r2
 8001346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001350:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001354:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800135a:	4a04      	ldr	r2, [pc, #16]	; (800136c <__NVIC_SetPriorityGrouping+0x44>)
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	60d3      	str	r3, [r2, #12]
}
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136a:	4770      	bx	lr
 800136c:	e000ed00 	.word	0xe000ed00

08001370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <__NVIC_GetPriorityGrouping+0x18>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	0a1b      	lsrs	r3, r3, #8
 800137a:	f003 0307 	and.w	r3, r3, #7
}
 800137e:	4618      	mov	r0, r3
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800138c:	b480      	push	{r7}
 800138e:	b083      	sub	sp, #12
 8001390:	af00      	add	r7, sp, #0
 8001392:	4603      	mov	r3, r0
 8001394:	6039      	str	r1, [r7, #0]
 8001396:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800139c:	2b00      	cmp	r3, #0
 800139e:	db0a      	blt.n	80013b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	b2da      	uxtb	r2, r3
 80013a4:	490c      	ldr	r1, [pc, #48]	; (80013d8 <__NVIC_SetPriority+0x4c>)
 80013a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013aa:	0112      	lsls	r2, r2, #4
 80013ac:	b2d2      	uxtb	r2, r2
 80013ae:	440b      	add	r3, r1
 80013b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013b4:	e00a      	b.n	80013cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	b2da      	uxtb	r2, r3
 80013ba:	4908      	ldr	r1, [pc, #32]	; (80013dc <__NVIC_SetPriority+0x50>)
 80013bc:	79fb      	ldrb	r3, [r7, #7]
 80013be:	f003 030f 	and.w	r3, r3, #15
 80013c2:	3b04      	subs	r3, #4
 80013c4:	0112      	lsls	r2, r2, #4
 80013c6:	b2d2      	uxtb	r2, r2
 80013c8:	440b      	add	r3, r1
 80013ca:	761a      	strb	r2, [r3, #24]
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr
 80013d8:	e000e100 	.word	0xe000e100
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b089      	sub	sp, #36	; 0x24
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	60b9      	str	r1, [r7, #8]
 80013ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	f003 0307 	and.w	r3, r3, #7
 80013f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f1c3 0307 	rsb	r3, r3, #7
 80013fa:	2b04      	cmp	r3, #4
 80013fc:	bf28      	it	cs
 80013fe:	2304      	movcs	r3, #4
 8001400:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001402:	69fb      	ldr	r3, [r7, #28]
 8001404:	3304      	adds	r3, #4
 8001406:	2b06      	cmp	r3, #6
 8001408:	d902      	bls.n	8001410 <NVIC_EncodePriority+0x30>
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	3b03      	subs	r3, #3
 800140e:	e000      	b.n	8001412 <NVIC_EncodePriority+0x32>
 8001410:	2300      	movs	r3, #0
 8001412:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001414:	f04f 32ff 	mov.w	r2, #4294967295
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	68bb      	ldr	r3, [r7, #8]
 8001422:	401a      	ands	r2, r3
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001428:	f04f 31ff 	mov.w	r1, #4294967295
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	fa01 f303 	lsl.w	r3, r1, r3
 8001432:	43d9      	mvns	r1, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	4313      	orrs	r3, r2
         );
}
 800143a:	4618      	mov	r0, r3
 800143c:	3724      	adds	r7, #36	; 0x24
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
	...

08001448 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b082      	sub	sp, #8
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	3b01      	subs	r3, #1
 8001454:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001458:	d301      	bcc.n	800145e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800145a:	2301      	movs	r3, #1
 800145c:	e00f      	b.n	800147e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800145e:	4a0a      	ldr	r2, [pc, #40]	; (8001488 <SysTick_Config+0x40>)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	3b01      	subs	r3, #1
 8001464:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001466:	210f      	movs	r1, #15
 8001468:	f04f 30ff 	mov.w	r0, #4294967295
 800146c:	f7ff ff8e 	bl	800138c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <SysTick_Config+0x40>)
 8001472:	2200      	movs	r2, #0
 8001474:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001476:	4b04      	ldr	r3, [pc, #16]	; (8001488 <SysTick_Config+0x40>)
 8001478:	2207      	movs	r2, #7
 800147a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	e000e010 	.word	0xe000e010

0800148c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff47 	bl	8001328 <__NVIC_SetPriorityGrouping>
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b086      	sub	sp, #24
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	60b9      	str	r1, [r7, #8]
 80014ac:	607a      	str	r2, [r7, #4]
 80014ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014b4:	f7ff ff5c 	bl	8001370 <__NVIC_GetPriorityGrouping>
 80014b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	6978      	ldr	r0, [r7, #20]
 80014c0:	f7ff ff8e 	bl	80013e0 <NVIC_EncodePriority>
 80014c4:	4602      	mov	r2, r0
 80014c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ca:	4611      	mov	r1, r2
 80014cc:	4618      	mov	r0, r3
 80014ce:	f7ff ff5d 	bl	800138c <__NVIC_SetPriority>
}
 80014d2:	bf00      	nop
 80014d4:	3718      	adds	r7, #24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}

080014da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80014da:	b580      	push	{r7, lr}
 80014dc:	b082      	sub	sp, #8
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80014e2:	6878      	ldr	r0, [r7, #4]
 80014e4:	f7ff ffb0 	bl	8001448 <SysTick_Config>
 80014e8:	4603      	mov	r3, r0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b089      	sub	sp, #36	; 0x24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001502:	2300      	movs	r3, #0
 8001504:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001506:	2300      	movs	r3, #0
 8001508:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800150a:	2300      	movs	r3, #0
 800150c:	61fb      	str	r3, [r7, #28]
 800150e:	e16b      	b.n	80017e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001510:	2201      	movs	r2, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	697a      	ldr	r2, [r7, #20]
 8001520:	4013      	ands	r3, r2
 8001522:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001524:	693a      	ldr	r2, [r7, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	429a      	cmp	r2, r3
 800152a:	f040 815a 	bne.w	80017e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	2b01      	cmp	r3, #1
 8001534:	d00b      	beq.n	800154e <HAL_GPIO_Init+0x5a>
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	2b02      	cmp	r3, #2
 800153c:	d007      	beq.n	800154e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001542:	2b11      	cmp	r3, #17
 8001544:	d003      	beq.n	800154e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	2b12      	cmp	r3, #18
 800154c:	d130      	bne.n	80015b0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	689b      	ldr	r3, [r3, #8]
 8001552:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001554:	69fb      	ldr	r3, [r7, #28]
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	2203      	movs	r2, #3
 800155a:	fa02 f303 	lsl.w	r3, r2, r3
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	68da      	ldr	r2, [r3, #12]
 800156a:	69fb      	ldr	r3, [r7, #28]
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	fa02 f303 	lsl.w	r3, r2, r3
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	4313      	orrs	r3, r2
 8001576:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001584:	2201      	movs	r2, #1
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	fa02 f303 	lsl.w	r3, r2, r3
 800158c:	43db      	mvns	r3, r3
 800158e:	69ba      	ldr	r2, [r7, #24]
 8001590:	4013      	ands	r3, r2
 8001592:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	091b      	lsrs	r3, r3, #4
 800159a:	f003 0201 	and.w	r2, r3, #1
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	fa02 f303 	lsl.w	r3, r2, r3
 80015a4:	69ba      	ldr	r2, [r7, #24]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	69ba      	ldr	r2, [r7, #24]
 80015ae:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015b6:	69fb      	ldr	r3, [r7, #28]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	2203      	movs	r2, #3
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43db      	mvns	r3, r3
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	4013      	ands	r3, r2
 80015c6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	69fb      	ldr	r3, [r7, #28]
 80015ce:	005b      	lsls	r3, r3, #1
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0xfc>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b12      	cmp	r3, #18
 80015ee:	d123      	bne.n	8001638 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015f0:	69fb      	ldr	r3, [r7, #28]
 80015f2:	08da      	lsrs	r2, r3, #3
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	3208      	adds	r2, #8
 80015f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	f003 0307 	and.w	r3, r3, #7
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	220f      	movs	r2, #15
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43db      	mvns	r3, r3
 800160e:	69ba      	ldr	r2, [r7, #24]
 8001610:	4013      	ands	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	691a      	ldr	r2, [r3, #16]
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	009b      	lsls	r3, r3, #2
 8001620:	fa02 f303 	lsl.w	r3, r2, r3
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800162a:	69fb      	ldr	r3, [r7, #28]
 800162c:	08da      	lsrs	r2, r3, #3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	3208      	adds	r2, #8
 8001632:	69b9      	ldr	r1, [r7, #24]
 8001634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800163e:	69fb      	ldr	r3, [r7, #28]
 8001640:	005b      	lsls	r3, r3, #1
 8001642:	2203      	movs	r2, #3
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	43db      	mvns	r3, r3
 800164a:	69ba      	ldr	r2, [r7, #24]
 800164c:	4013      	ands	r3, r2
 800164e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f003 0203 	and.w	r2, r3, #3
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	fa02 f303 	lsl.w	r3, r2, r3
 8001660:	69ba      	ldr	r2, [r7, #24]
 8001662:	4313      	orrs	r3, r2
 8001664:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69ba      	ldr	r2, [r7, #24]
 800166a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 80b4 	beq.w	80017e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800167a:	2300      	movs	r3, #0
 800167c:	60fb      	str	r3, [r7, #12]
 800167e:	4b5f      	ldr	r3, [pc, #380]	; (80017fc <HAL_GPIO_Init+0x308>)
 8001680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001682:	4a5e      	ldr	r2, [pc, #376]	; (80017fc <HAL_GPIO_Init+0x308>)
 8001684:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001688:	6453      	str	r3, [r2, #68]	; 0x44
 800168a:	4b5c      	ldr	r3, [pc, #368]	; (80017fc <HAL_GPIO_Init+0x308>)
 800168c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800168e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001696:	4a5a      	ldr	r2, [pc, #360]	; (8001800 <HAL_GPIO_Init+0x30c>)
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	089b      	lsrs	r3, r3, #2
 800169c:	3302      	adds	r3, #2
 800169e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f003 0303 	and.w	r3, r3, #3
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	220f      	movs	r2, #15
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43db      	mvns	r3, r3
 80016b4:	69ba      	ldr	r2, [r7, #24]
 80016b6:	4013      	ands	r3, r2
 80016b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	4a51      	ldr	r2, [pc, #324]	; (8001804 <HAL_GPIO_Init+0x310>)
 80016be:	4293      	cmp	r3, r2
 80016c0:	d02b      	beq.n	800171a <HAL_GPIO_Init+0x226>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	4a50      	ldr	r2, [pc, #320]	; (8001808 <HAL_GPIO_Init+0x314>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d025      	beq.n	8001716 <HAL_GPIO_Init+0x222>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a4f      	ldr	r2, [pc, #316]	; (800180c <HAL_GPIO_Init+0x318>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d01f      	beq.n	8001712 <HAL_GPIO_Init+0x21e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_GPIO_Init+0x31c>)
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d019      	beq.n	800170e <HAL_GPIO_Init+0x21a>
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	4a4d      	ldr	r2, [pc, #308]	; (8001814 <HAL_GPIO_Init+0x320>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d013      	beq.n	800170a <HAL_GPIO_Init+0x216>
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	4a4c      	ldr	r2, [pc, #304]	; (8001818 <HAL_GPIO_Init+0x324>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d00d      	beq.n	8001706 <HAL_GPIO_Init+0x212>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	4a4b      	ldr	r2, [pc, #300]	; (800181c <HAL_GPIO_Init+0x328>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d007      	beq.n	8001702 <HAL_GPIO_Init+0x20e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	4a4a      	ldr	r2, [pc, #296]	; (8001820 <HAL_GPIO_Init+0x32c>)
 80016f6:	4293      	cmp	r3, r2
 80016f8:	d101      	bne.n	80016fe <HAL_GPIO_Init+0x20a>
 80016fa:	2307      	movs	r3, #7
 80016fc:	e00e      	b.n	800171c <HAL_GPIO_Init+0x228>
 80016fe:	2308      	movs	r3, #8
 8001700:	e00c      	b.n	800171c <HAL_GPIO_Init+0x228>
 8001702:	2306      	movs	r3, #6
 8001704:	e00a      	b.n	800171c <HAL_GPIO_Init+0x228>
 8001706:	2305      	movs	r3, #5
 8001708:	e008      	b.n	800171c <HAL_GPIO_Init+0x228>
 800170a:	2304      	movs	r3, #4
 800170c:	e006      	b.n	800171c <HAL_GPIO_Init+0x228>
 800170e:	2303      	movs	r3, #3
 8001710:	e004      	b.n	800171c <HAL_GPIO_Init+0x228>
 8001712:	2302      	movs	r3, #2
 8001714:	e002      	b.n	800171c <HAL_GPIO_Init+0x228>
 8001716:	2301      	movs	r3, #1
 8001718:	e000      	b.n	800171c <HAL_GPIO_Init+0x228>
 800171a:	2300      	movs	r3, #0
 800171c:	69fa      	ldr	r2, [r7, #28]
 800171e:	f002 0203 	and.w	r2, r2, #3
 8001722:	0092      	lsls	r2, r2, #2
 8001724:	4093      	lsls	r3, r2
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800172c:	4934      	ldr	r1, [pc, #208]	; (8001800 <HAL_GPIO_Init+0x30c>)
 800172e:	69fb      	ldr	r3, [r7, #28]
 8001730:	089b      	lsrs	r3, r3, #2
 8001732:	3302      	adds	r3, #2
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800173a:	4b3a      	ldr	r3, [pc, #232]	; (8001824 <HAL_GPIO_Init+0x330>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d003      	beq.n	800175e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001756:	69ba      	ldr	r2, [r7, #24]
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800175e:	4a31      	ldr	r2, [pc, #196]	; (8001824 <HAL_GPIO_Init+0x330>)
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001764:	4b2f      	ldr	r3, [pc, #188]	; (8001824 <HAL_GPIO_Init+0x330>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800176a:	693b      	ldr	r3, [r7, #16]
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800177c:	2b00      	cmp	r3, #0
 800177e:	d003      	beq.n	8001788 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	4313      	orrs	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001788:	4a26      	ldr	r2, [pc, #152]	; (8001824 <HAL_GPIO_Init+0x330>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800178e:	4b25      	ldr	r3, [pc, #148]	; (8001824 <HAL_GPIO_Init+0x330>)
 8001790:	689b      	ldr	r3, [r3, #8]
 8001792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	43db      	mvns	r3, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4013      	ands	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d003      	beq.n	80017b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80017b2:	4a1c      	ldr	r2, [pc, #112]	; (8001824 <HAL_GPIO_Init+0x330>)
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80017b8:	4b1a      	ldr	r3, [pc, #104]	; (8001824 <HAL_GPIO_Init+0x330>)
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	43db      	mvns	r3, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4013      	ands	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d003      	beq.n	80017dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	4313      	orrs	r3, r2
 80017da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80017dc:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_GPIO_Init+0x330>)
 80017de:	69bb      	ldr	r3, [r7, #24]
 80017e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	3301      	adds	r3, #1
 80017e6:	61fb      	str	r3, [r7, #28]
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	2b0f      	cmp	r3, #15
 80017ec:	f67f ae90 	bls.w	8001510 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80017f0:	bf00      	nop
 80017f2:	3724      	adds	r7, #36	; 0x24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr
 80017fc:	40023800 	.word	0x40023800
 8001800:	40013800 	.word	0x40013800
 8001804:	40020000 	.word	0x40020000
 8001808:	40020400 	.word	0x40020400
 800180c:	40020800 	.word	0x40020800
 8001810:	40020c00 	.word	0x40020c00
 8001814:	40021000 	.word	0x40021000
 8001818:	40021400 	.word	0x40021400
 800181c:	40021800 	.word	0x40021800
 8001820:	40021c00 	.word	0x40021c00
 8001824:	40013c00 	.word	0x40013c00

08001828 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001828:	b480      	push	{r7}
 800182a:	b083      	sub	sp, #12
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
 8001830:	460b      	mov	r3, r1
 8001832:	807b      	strh	r3, [r7, #2]
 8001834:	4613      	mov	r3, r2
 8001836:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001838:	787b      	ldrb	r3, [r7, #1]
 800183a:	2b00      	cmp	r3, #0
 800183c:	d003      	beq.n	8001846 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183e:	887a      	ldrh	r2, [r7, #2]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001844:	e003      	b.n	800184e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001846:	887b      	ldrh	r3, [r7, #2]
 8001848:	041a      	lsls	r2, r3, #16
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	619a      	str	r2, [r3, #24]
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
	...

0800185c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2b00      	cmp	r3, #0
 8001868:	d101      	bne.n	800186e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	e11f      	b.n	8001aae <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001874:	b2db      	uxtb	r3, r3
 8001876:	2b00      	cmp	r3, #0
 8001878:	d106      	bne.n	8001888 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff fab8 	bl	8000df8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2224      	movs	r2, #36	; 0x24
 800188c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	681a      	ldr	r2, [r3, #0]
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	f022 0201 	bic.w	r2, r2, #1
 800189e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80018ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80018be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80018c0:	f001 f95e 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 80018c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	4a7b      	ldr	r2, [pc, #492]	; (8001ab8 <HAL_I2C_Init+0x25c>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d807      	bhi.n	80018e0 <HAL_I2C_Init+0x84>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4a7a      	ldr	r2, [pc, #488]	; (8001abc <HAL_I2C_Init+0x260>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	bf94      	ite	ls
 80018d8:	2301      	movls	r3, #1
 80018da:	2300      	movhi	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	e006      	b.n	80018ee <HAL_I2C_Init+0x92>
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <HAL_I2C_Init+0x264>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	bf94      	ite	ls
 80018e8:	2301      	movls	r3, #1
 80018ea:	2300      	movhi	r3, #0
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e0db      	b.n	8001aae <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	4a72      	ldr	r2, [pc, #456]	; (8001ac4 <HAL_I2C_Init+0x268>)
 80018fa:	fba2 2303 	umull	r2, r3, r2, r3
 80018fe:	0c9b      	lsrs	r3, r3, #18
 8001900:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68ba      	ldr	r2, [r7, #8]
 8001912:	430a      	orrs	r2, r1
 8001914:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	6a1b      	ldr	r3, [r3, #32]
 800191c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	4a64      	ldr	r2, [pc, #400]	; (8001ab8 <HAL_I2C_Init+0x25c>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d802      	bhi.n	8001930 <HAL_I2C_Init+0xd4>
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	3301      	adds	r3, #1
 800192e:	e009      	b.n	8001944 <HAL_I2C_Init+0xe8>
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001936:	fb02 f303 	mul.w	r3, r2, r3
 800193a:	4a63      	ldr	r2, [pc, #396]	; (8001ac8 <HAL_I2C_Init+0x26c>)
 800193c:	fba2 2303 	umull	r2, r3, r2, r3
 8001940:	099b      	lsrs	r3, r3, #6
 8001942:	3301      	adds	r3, #1
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	6812      	ldr	r2, [r2, #0]
 8001948:	430b      	orrs	r3, r1
 800194a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001956:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	4956      	ldr	r1, [pc, #344]	; (8001ab8 <HAL_I2C_Init+0x25c>)
 8001960:	428b      	cmp	r3, r1
 8001962:	d80d      	bhi.n	8001980 <HAL_I2C_Init+0x124>
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	1e59      	subs	r1, r3, #1
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	005b      	lsls	r3, r3, #1
 800196e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001972:	3301      	adds	r3, #1
 8001974:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001978:	2b04      	cmp	r3, #4
 800197a:	bf38      	it	cc
 800197c:	2304      	movcc	r3, #4
 800197e:	e04f      	b.n	8001a20 <HAL_I2C_Init+0x1c4>
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d111      	bne.n	80019ac <HAL_I2C_Init+0x150>
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1e58      	subs	r0, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	6859      	ldr	r1, [r3, #4]
 8001990:	460b      	mov	r3, r1
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	440b      	add	r3, r1
 8001996:	fbb0 f3f3 	udiv	r3, r0, r3
 800199a:	3301      	adds	r3, #1
 800199c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	bf0c      	ite	eq
 80019a4:	2301      	moveq	r3, #1
 80019a6:	2300      	movne	r3, #0
 80019a8:	b2db      	uxtb	r3, r3
 80019aa:	e012      	b.n	80019d2 <HAL_I2C_Init+0x176>
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	1e58      	subs	r0, r3, #1
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6859      	ldr	r1, [r3, #4]
 80019b4:	460b      	mov	r3, r1
 80019b6:	009b      	lsls	r3, r3, #2
 80019b8:	440b      	add	r3, r1
 80019ba:	0099      	lsls	r1, r3, #2
 80019bc:	440b      	add	r3, r1
 80019be:	fbb0 f3f3 	udiv	r3, r0, r3
 80019c2:	3301      	adds	r3, #1
 80019c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	bf0c      	ite	eq
 80019cc:	2301      	moveq	r3, #1
 80019ce:	2300      	movne	r3, #0
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d001      	beq.n	80019da <HAL_I2C_Init+0x17e>
 80019d6:	2301      	movs	r3, #1
 80019d8:	e022      	b.n	8001a20 <HAL_I2C_Init+0x1c4>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d10e      	bne.n	8001a00 <HAL_I2C_Init+0x1a4>
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	1e58      	subs	r0, r3, #1
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6859      	ldr	r1, [r3, #4]
 80019ea:	460b      	mov	r3, r1
 80019ec:	005b      	lsls	r3, r3, #1
 80019ee:	440b      	add	r3, r1
 80019f0:	fbb0 f3f3 	udiv	r3, r0, r3
 80019f4:	3301      	adds	r3, #1
 80019f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80019fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80019fe:	e00f      	b.n	8001a20 <HAL_I2C_Init+0x1c4>
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	1e58      	subs	r0, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6859      	ldr	r1, [r3, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	440b      	add	r3, r1
 8001a0e:	0099      	lsls	r1, r3, #2
 8001a10:	440b      	add	r3, r1
 8001a12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001a16:	3301      	adds	r3, #1
 8001a18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001a1c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001a20:	6879      	ldr	r1, [r7, #4]
 8001a22:	6809      	ldr	r1, [r1, #0]
 8001a24:	4313      	orrs	r3, r2
 8001a26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	69da      	ldr	r2, [r3, #28]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6a1b      	ldr	r3, [r3, #32]
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	430a      	orrs	r2, r1
 8001a42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001a4e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001a52:	687a      	ldr	r2, [r7, #4]
 8001a54:	6911      	ldr	r1, [r2, #16]
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	68d2      	ldr	r2, [r2, #12]
 8001a5a:	4311      	orrs	r1, r2
 8001a5c:	687a      	ldr	r2, [r7, #4]
 8001a5e:	6812      	ldr	r2, [r2, #0]
 8001a60:	430b      	orrs	r3, r1
 8001a62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68db      	ldr	r3, [r3, #12]
 8001a6a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	695a      	ldr	r2, [r3, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	699b      	ldr	r3, [r3, #24]
 8001a76:	431a      	orrs	r2, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f042 0201 	orr.w	r2, r2, #1
 8001a8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	3710      	adds	r7, #16
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	bd80      	pop	{r7, pc}
 8001ab6:	bf00      	nop
 8001ab8:	000186a0 	.word	0x000186a0
 8001abc:	001e847f 	.word	0x001e847f
 8001ac0:	003d08ff 	.word	0x003d08ff
 8001ac4:	431bde83 	.word	0x431bde83
 8001ac8:	10624dd3 	.word	0x10624dd3

08001acc <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b088      	sub	sp, #32
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	60f8      	str	r0, [r7, #12]
 8001ad4:	4608      	mov	r0, r1
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	461a      	mov	r2, r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	817b      	strh	r3, [r7, #10]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	813b      	strh	r3, [r7, #8]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001ae6:	f7ff fc13 	bl	8001310 <HAL_GetTick>
 8001aea:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	f040 80d9 	bne.w	8001cac <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001afa:	697b      	ldr	r3, [r7, #20]
 8001afc:	9300      	str	r3, [sp, #0]
 8001afe:	2319      	movs	r3, #25
 8001b00:	2201      	movs	r2, #1
 8001b02:	496d      	ldr	r1, [pc, #436]	; (8001cb8 <HAL_I2C_Mem_Write+0x1ec>)
 8001b04:	68f8      	ldr	r0, [r7, #12]
 8001b06:	f000 fa9f 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d001      	beq.n	8001b14 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001b10:	2302      	movs	r3, #2
 8001b12:	e0cc      	b.n	8001cae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b1a:	2b01      	cmp	r3, #1
 8001b1c:	d101      	bne.n	8001b22 <HAL_I2C_Mem_Write+0x56>
 8001b1e:	2302      	movs	r3, #2
 8001b20:	e0c5      	b.n	8001cae <HAL_I2C_Mem_Write+0x1e2>
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d007      	beq.n	8001b48 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f042 0201 	orr.w	r2, r2, #1
 8001b46:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b56:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2221      	movs	r2, #33	; 0x21
 8001b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	2240      	movs	r2, #64	; 0x40
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6a3a      	ldr	r2, [r7, #32]
 8001b72:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001b78:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b7e:	b29a      	uxth	r2, r3
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	4a4d      	ldr	r2, [pc, #308]	; (8001cbc <HAL_I2C_Mem_Write+0x1f0>)
 8001b88:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001b8a:	88f8      	ldrh	r0, [r7, #6]
 8001b8c:	893a      	ldrh	r2, [r7, #8]
 8001b8e:	8979      	ldrh	r1, [r7, #10]
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	9301      	str	r3, [sp, #4]
 8001b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001b96:	9300      	str	r3, [sp, #0]
 8001b98:	4603      	mov	r3, r0
 8001b9a:	68f8      	ldr	r0, [r7, #12]
 8001b9c:	f000 f9be 	bl	8001f1c <I2C_RequestMemoryWrite>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d052      	beq.n	8001c4c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e081      	b.n	8001cae <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001baa:	697a      	ldr	r2, [r7, #20]
 8001bac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f000 fb20 	bl	80021f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d00d      	beq.n	8001bd6 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bbe:	2b04      	cmp	r3, #4
 8001bc0:	d107      	bne.n	8001bd2 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	681a      	ldr	r2, [r3, #0]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bd0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e06b      	b.n	8001cae <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bda:	781a      	ldrb	r2, [r3, #0]
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	b29a      	uxth	r2, r3
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bfc:	b29b      	uxth	r3, r3
 8001bfe:	3b01      	subs	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b04      	cmp	r3, #4
 8001c12:	d11b      	bne.n	8001c4c <HAL_I2C_Mem_Write+0x180>
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d017      	beq.n	8001c4c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c20:	781a      	ldrb	r2, [r3, #0]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2c:	1c5a      	adds	r2, r3, #1
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c36:	3b01      	subs	r3, #1
 8001c38:	b29a      	uxth	r2, r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c42:	b29b      	uxth	r3, r3
 8001c44:	3b01      	subs	r3, #1
 8001c46:	b29a      	uxth	r2, r3
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d1aa      	bne.n	8001baa <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c54:	697a      	ldr	r2, [r7, #20]
 8001c56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c58:	68f8      	ldr	r0, [r7, #12]
 8001c5a:	f000 fb0c 	bl	8002276 <I2C_WaitOnBTFFlagUntilTimeout>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d00d      	beq.n	8001c80 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c68:	2b04      	cmp	r3, #4
 8001c6a:	d107      	bne.n	8001c7c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c7a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e016      	b.n	8001cae <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2220      	movs	r2, #32
 8001c94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	e000      	b.n	8001cae <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001cac:	2302      	movs	r3, #2
  }
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	00100002 	.word	0x00100002
 8001cbc:	ffff0000 	.word	0xffff0000

08001cc0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b08a      	sub	sp, #40	; 0x28
 8001cc4:	af02      	add	r7, sp, #8
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	607a      	str	r2, [r7, #4]
 8001cca:	603b      	str	r3, [r7, #0]
 8001ccc:	460b      	mov	r3, r1
 8001cce:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8001cd0:	f7ff fb1e 	bl	8001310 <HAL_GetTick>
 8001cd4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b20      	cmp	r3, #32
 8001ce4:	f040 8111 	bne.w	8001f0a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	9300      	str	r3, [sp, #0]
 8001cec:	2319      	movs	r3, #25
 8001cee:	2201      	movs	r2, #1
 8001cf0:	4988      	ldr	r1, [pc, #544]	; (8001f14 <HAL_I2C_IsDeviceReady+0x254>)
 8001cf2:	68f8      	ldr	r0, [r7, #12]
 8001cf4:	f000 f9a8 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e104      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_I2C_IsDeviceReady+0x50>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e0fd      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 0301 	and.w	r3, r3, #1
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d007      	beq.n	8001d36 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f042 0201 	orr.w	r2, r2, #1
 8001d34:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d44:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2224      	movs	r2, #36	; 0x24
 8001d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	2200      	movs	r2, #0
 8001d52:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	4a70      	ldr	r2, [pc, #448]	; (8001f18 <HAL_I2C_IsDeviceReady+0x258>)
 8001d58:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d68:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	9300      	str	r3, [sp, #0]
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001d76:	68f8      	ldr	r0, [r7, #12]
 8001d78:	f000 f966 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d00d      	beq.n	8001d9e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d8c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001d90:	d103      	bne.n	8001d9a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d98:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e0b6      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001d9e:	897b      	ldrh	r3, [r7, #10]
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	461a      	mov	r2, r3
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001dac:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8001dae:	f7ff faaf 	bl	8001310 <HAL_GetTick>
 8001db2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	695b      	ldr	r3, [r3, #20]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b02      	cmp	r3, #2
 8001dc0:	bf0c      	ite	eq
 8001dc2:	2301      	moveq	r3, #1
 8001dc4:	2300      	movne	r3, #0
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dd8:	bf0c      	ite	eq
 8001dda:	2301      	moveq	r3, #1
 8001ddc:	2300      	movne	r3, #0
 8001dde:	b2db      	uxtb	r3, r3
 8001de0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001de2:	e025      	b.n	8001e30 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001de4:	f7ff fa94 	bl	8001310 <HAL_GetTick>
 8001de8:	4602      	mov	r2, r0
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	683a      	ldr	r2, [r7, #0]
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d302      	bcc.n	8001dfa <HAL_I2C_IsDeviceReady+0x13a>
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d103      	bne.n	8001e02 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	22a0      	movs	r2, #160	; 0xa0
 8001dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	695b      	ldr	r3, [r3, #20]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	bf0c      	ite	eq
 8001e10:	2301      	moveq	r3, #1
 8001e12:	2300      	movne	r3, #0
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	695b      	ldr	r3, [r3, #20]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	2ba0      	cmp	r3, #160	; 0xa0
 8001e3a:	d005      	beq.n	8001e48 <HAL_I2C_IsDeviceReady+0x188>
 8001e3c:	7dfb      	ldrb	r3, [r7, #23]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d102      	bne.n	8001e48 <HAL_I2C_IsDeviceReady+0x188>
 8001e42:	7dbb      	ldrb	r3, [r7, #22]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d0cd      	beq.n	8001de4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	2220      	movs	r2, #32
 8001e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	695b      	ldr	r3, [r3, #20]
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d129      	bne.n	8001eb2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e6c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	613b      	str	r3, [r7, #16]
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	699b      	ldr	r3, [r3, #24]
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2319      	movs	r3, #25
 8001e8a:	2201      	movs	r2, #1
 8001e8c:	4921      	ldr	r1, [pc, #132]	; (8001f14 <HAL_I2C_IsDeviceReady+0x254>)
 8001e8e:	68f8      	ldr	r0, [r7, #12]
 8001e90:	f000 f8da 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e036      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	e02c      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ec0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001eca:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	9300      	str	r3, [sp, #0]
 8001ed0:	2319      	movs	r3, #25
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	490f      	ldr	r1, [pc, #60]	; (8001f14 <HAL_I2C_IsDeviceReady+0x254>)
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f8b6 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e012      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8001ee6:	69bb      	ldr	r3, [r7, #24]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8001eec:	69ba      	ldr	r2, [r7, #24]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	f4ff af32 	bcc.w	8001d5a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2220      	movs	r2, #32
 8001efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001f06:	2301      	movs	r3, #1
 8001f08:	e000      	b.n	8001f0c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8001f0a:	2302      	movs	r3, #2
  }
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3720      	adds	r7, #32
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	00100002 	.word	0x00100002
 8001f18:	ffff0000 	.word	0xffff0000

08001f1c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	4608      	mov	r0, r1
 8001f26:	4611      	mov	r1, r2
 8001f28:	461a      	mov	r2, r3
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	817b      	strh	r3, [r7, #10]
 8001f2e:	460b      	mov	r3, r1
 8001f30:	813b      	strh	r3, [r7, #8]
 8001f32:	4613      	mov	r3, r2
 8001f34:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001f44:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f48:	9300      	str	r3, [sp, #0]
 8001f4a:	6a3b      	ldr	r3, [r7, #32]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001f52:	68f8      	ldr	r0, [r7, #12]
 8001f54:	f000 f878 	bl	8002048 <I2C_WaitOnFlagUntilTimeout>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00d      	beq.n	8001f7a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f6c:	d103      	bne.n	8001f76 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001f74:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e05f      	b.n	800203a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001f7a:	897b      	ldrh	r3, [r7, #10]
 8001f7c:	b2db      	uxtb	r3, r3
 8001f7e:	461a      	mov	r2, r3
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f88:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8c:	6a3a      	ldr	r2, [r7, #32]
 8001f8e:	492d      	ldr	r1, [pc, #180]	; (8002044 <I2C_RequestMemoryWrite+0x128>)
 8001f90:	68f8      	ldr	r0, [r7, #12]
 8001f92:	f000 f8b0 	bl	80020f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	e04c      	b.n	800203a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	695b      	ldr	r3, [r3, #20]
 8001faa:	617b      	str	r3, [r7, #20]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	699b      	ldr	r3, [r3, #24]
 8001fb2:	617b      	str	r3, [r7, #20]
 8001fb4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fb8:	6a39      	ldr	r1, [r7, #32]
 8001fba:	68f8      	ldr	r0, [r7, #12]
 8001fbc:	f000 f91a 	bl	80021f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00d      	beq.n	8001fe2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fca:	2b04      	cmp	r3, #4
 8001fcc:	d107      	bne.n	8001fde <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fdc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e02b      	b.n	800203a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001fe2:	88fb      	ldrh	r3, [r7, #6]
 8001fe4:	2b01      	cmp	r3, #1
 8001fe6:	d105      	bne.n	8001ff4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001fe8:	893b      	ldrh	r3, [r7, #8]
 8001fea:	b2da      	uxtb	r2, r3
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	611a      	str	r2, [r3, #16]
 8001ff2:	e021      	b.n	8002038 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001ff4:	893b      	ldrh	r3, [r7, #8]
 8001ff6:	0a1b      	lsrs	r3, r3, #8
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002002:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002004:	6a39      	ldr	r1, [r7, #32]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 f8f4 	bl	80021f4 <I2C_WaitOnTXEFlagUntilTimeout>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d00d      	beq.n	800202e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002016:	2b04      	cmp	r3, #4
 8002018:	d107      	bne.n	800202a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002028:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e005      	b.n	800203a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800202e:	893b      	ldrh	r3, [r7, #8]
 8002030:	b2da      	uxtb	r2, r3
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3718      	adds	r7, #24
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	00010002 	.word	0x00010002

08002048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	60b9      	str	r1, [r7, #8]
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	4613      	mov	r3, r2
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002058:	e025      	b.n	80020a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002060:	d021      	beq.n	80020a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002062:	f7ff f955 	bl	8001310 <HAL_GetTick>
 8002066:	4602      	mov	r2, r0
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	683a      	ldr	r2, [r7, #0]
 800206e:	429a      	cmp	r2, r3
 8002070:	d302      	bcc.n	8002078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d116      	bne.n	80020a6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	2200      	movs	r2, #0
 800207c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2220      	movs	r2, #32
 8002082:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f043 0220 	orr.w	r2, r3, #32
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	2200      	movs	r2, #0
 800209e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e023      	b.n	80020ee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	0c1b      	lsrs	r3, r3, #16
 80020aa:	b2db      	uxtb	r3, r3
 80020ac:	2b01      	cmp	r3, #1
 80020ae:	d10d      	bne.n	80020cc <I2C_WaitOnFlagUntilTimeout+0x84>
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	695b      	ldr	r3, [r3, #20]
 80020b6:	43da      	mvns	r2, r3
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	4013      	ands	r3, r2
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	bf0c      	ite	eq
 80020c2:	2301      	moveq	r3, #1
 80020c4:	2300      	movne	r3, #0
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	461a      	mov	r2, r3
 80020ca:	e00c      	b.n	80020e6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	699b      	ldr	r3, [r3, #24]
 80020d2:	43da      	mvns	r2, r3
 80020d4:	68bb      	ldr	r3, [r7, #8]
 80020d6:	4013      	ands	r3, r2
 80020d8:	b29b      	uxth	r3, r3
 80020da:	2b00      	cmp	r3, #0
 80020dc:	bf0c      	ite	eq
 80020de:	2301      	moveq	r3, #1
 80020e0:	2300      	movne	r3, #0
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	461a      	mov	r2, r3
 80020e6:	79fb      	ldrb	r3, [r7, #7]
 80020e8:	429a      	cmp	r2, r3
 80020ea:	d0b6      	beq.n	800205a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	3710      	adds	r7, #16
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bd80      	pop	{r7, pc}

080020f6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020f6:	b580      	push	{r7, lr}
 80020f8:	b084      	sub	sp, #16
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	60f8      	str	r0, [r7, #12]
 80020fe:	60b9      	str	r1, [r7, #8]
 8002100:	607a      	str	r2, [r7, #4]
 8002102:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002104:	e051      	b.n	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	695b      	ldr	r3, [r3, #20]
 800210c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002110:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002114:	d123      	bne.n	800215e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	681a      	ldr	r2, [r3, #0]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002124:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800212e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2220      	movs	r2, #32
 800213a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	2200      	movs	r2, #0
 8002142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	f043 0204 	orr.w	r2, r3, #4
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	2200      	movs	r2, #0
 8002156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	e046      	b.n	80021ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002164:	d021      	beq.n	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002166:	f7ff f8d3 	bl	8001310 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	687a      	ldr	r2, [r7, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	d302      	bcc.n	800217c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d116      	bne.n	80021aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2200      	movs	r2, #0
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002196:	f043 0220 	orr.w	r2, r3, #32
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021a6:	2301      	movs	r3, #1
 80021a8:	e020      	b.n	80021ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	0c1b      	lsrs	r3, r3, #16
 80021ae:	b2db      	uxtb	r3, r3
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d10c      	bne.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	43da      	mvns	r2, r3
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4013      	ands	r3, r2
 80021c0:	b29b      	uxth	r3, r3
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	bf14      	ite	ne
 80021c6:	2301      	movne	r3, #1
 80021c8:	2300      	moveq	r3, #0
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	e00b      	b.n	80021e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	43da      	mvns	r2, r3
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	4013      	ands	r3, r2
 80021da:	b29b      	uxth	r3, r3
 80021dc:	2b00      	cmp	r3, #0
 80021de:	bf14      	ite	ne
 80021e0:	2301      	movne	r3, #1
 80021e2:	2300      	moveq	r3, #0
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d18d      	bne.n	8002106 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b084      	sub	sp, #16
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	60f8      	str	r0, [r7, #12]
 80021fc:	60b9      	str	r1, [r7, #8]
 80021fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002200:	e02d      	b.n	800225e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 f878 	bl	80022f8 <I2C_IsAcknowledgeFailed>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e02d      	b.n	800226e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002218:	d021      	beq.n	800225e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221a:	f7ff f879 	bl	8001310 <HAL_GetTick>
 800221e:	4602      	mov	r2, r0
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	1ad3      	subs	r3, r2, r3
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	429a      	cmp	r2, r3
 8002228:	d302      	bcc.n	8002230 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800222a:	68bb      	ldr	r3, [r7, #8]
 800222c:	2b00      	cmp	r3, #0
 800222e:	d116      	bne.n	800225e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	2200      	movs	r2, #0
 8002234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	2220      	movs	r2, #32
 800223a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	2200      	movs	r2, #0
 8002242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224a:	f043 0220 	orr.w	r2, r3, #32
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	2200      	movs	r2, #0
 8002256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800225a:	2301      	movs	r3, #1
 800225c:	e007      	b.n	800226e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d1ca      	bne.n	8002202 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3710      	adds	r7, #16
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}

08002276 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002276:	b580      	push	{r7, lr}
 8002278:	b084      	sub	sp, #16
 800227a:	af00      	add	r7, sp, #0
 800227c:	60f8      	str	r0, [r7, #12]
 800227e:	60b9      	str	r1, [r7, #8]
 8002280:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002282:	e02d      	b.n	80022e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002284:	68f8      	ldr	r0, [r7, #12]
 8002286:	f000 f837 	bl	80022f8 <I2C_IsAcknowledgeFailed>
 800228a:	4603      	mov	r3, r0
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e02d      	b.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002294:	68bb      	ldr	r3, [r7, #8]
 8002296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229a:	d021      	beq.n	80022e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229c:	f7ff f838 	bl	8001310 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	68ba      	ldr	r2, [r7, #8]
 80022a8:	429a      	cmp	r2, r3
 80022aa:	d302      	bcc.n	80022b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d116      	bne.n	80022e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	2200      	movs	r2, #0
 80022b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2220      	movs	r2, #32
 80022bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022cc:	f043 0220 	orr.w	r2, r3, #32
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	e007      	b.n	80022f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	f003 0304 	and.w	r3, r3, #4
 80022ea:	2b04      	cmp	r3, #4
 80022ec:	d1ca      	bne.n	8002284 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80022ee:	2300      	movs	r3, #0
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	3710      	adds	r7, #16
 80022f4:	46bd      	mov	sp, r7
 80022f6:	bd80      	pop	{r7, pc}

080022f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800230a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800230e:	d11b      	bne.n	8002348 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002318:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	2200      	movs	r2, #0
 800231e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2220      	movs	r2, #32
 8002324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002334:	f043 0204 	orr.w	r2, r3, #4
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e000      	b.n	800234a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr
	...

08002358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b086      	sub	sp, #24
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e25b      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0301 	and.w	r3, r3, #1
 8002372:	2b00      	cmp	r3, #0
 8002374:	d075      	beq.n	8002462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002376:	4ba3      	ldr	r3, [pc, #652]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 8002378:	689b      	ldr	r3, [r3, #8]
 800237a:	f003 030c 	and.w	r3, r3, #12
 800237e:	2b04      	cmp	r3, #4
 8002380:	d00c      	beq.n	800239c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002382:	4ba0      	ldr	r3, [pc, #640]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800238a:	2b08      	cmp	r3, #8
 800238c:	d112      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800238e:	4b9d      	ldr	r3, [pc, #628]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002396:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800239a:	d10b      	bne.n	80023b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800239c:	4b99      	ldr	r3, [pc, #612]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d05b      	beq.n	8002460 <HAL_RCC_OscConfig+0x108>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d157      	bne.n	8002460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	e236      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023bc:	d106      	bne.n	80023cc <HAL_RCC_OscConfig+0x74>
 80023be:	4b91      	ldr	r3, [pc, #580]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a90      	ldr	r2, [pc, #576]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80023c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023c8:	6013      	str	r3, [r2, #0]
 80023ca:	e01d      	b.n	8002408 <HAL_RCC_OscConfig+0xb0>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685b      	ldr	r3, [r3, #4]
 80023d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023d4:	d10c      	bne.n	80023f0 <HAL_RCC_OscConfig+0x98>
 80023d6:	4b8b      	ldr	r3, [pc, #556]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a8a      	ldr	r2, [pc, #552]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80023dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	4b88      	ldr	r3, [pc, #544]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	4a87      	ldr	r2, [pc, #540]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80023e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023ec:	6013      	str	r3, [r2, #0]
 80023ee:	e00b      	b.n	8002408 <HAL_RCC_OscConfig+0xb0>
 80023f0:	4b84      	ldr	r3, [pc, #528]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a83      	ldr	r2, [pc, #524]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80023f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	4b81      	ldr	r3, [pc, #516]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	4a80      	ldr	r2, [pc, #512]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 8002402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	2b00      	cmp	r3, #0
 800240e:	d013      	beq.n	8002438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002410:	f7fe ff7e 	bl	8001310 <HAL_GetTick>
 8002414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002416:	e008      	b.n	800242a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002418:	f7fe ff7a 	bl	8001310 <HAL_GetTick>
 800241c:	4602      	mov	r2, r0
 800241e:	693b      	ldr	r3, [r7, #16]
 8002420:	1ad3      	subs	r3, r2, r3
 8002422:	2b64      	cmp	r3, #100	; 0x64
 8002424:	d901      	bls.n	800242a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002426:	2303      	movs	r3, #3
 8002428:	e1fb      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b76      	ldr	r3, [pc, #472]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d0f0      	beq.n	8002418 <HAL_RCC_OscConfig+0xc0>
 8002436:	e014      	b.n	8002462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002438:	f7fe ff6a 	bl	8001310 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002440:	f7fe ff66 	bl	8001310 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b64      	cmp	r3, #100	; 0x64
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1e7      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002452:	4b6c      	ldr	r3, [pc, #432]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0xe8>
 800245e:	e000      	b.n	8002462 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d063      	beq.n	8002536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800246e:	4b65      	ldr	r3, [pc, #404]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00b      	beq.n	8002492 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800247a:	4b62      	ldr	r3, [pc, #392]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002482:	2b08      	cmp	r3, #8
 8002484:	d11c      	bne.n	80024c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002486:	4b5f      	ldr	r3, [pc, #380]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d116      	bne.n	80024c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002492:	4b5c      	ldr	r3, [pc, #368]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0302 	and.w	r3, r3, #2
 800249a:	2b00      	cmp	r3, #0
 800249c:	d005      	beq.n	80024aa <HAL_RCC_OscConfig+0x152>
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68db      	ldr	r3, [r3, #12]
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d001      	beq.n	80024aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80024a6:	2301      	movs	r3, #1
 80024a8:	e1bb      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024aa:	4b56      	ldr	r3, [pc, #344]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	691b      	ldr	r3, [r3, #16]
 80024b6:	00db      	lsls	r3, r3, #3
 80024b8:	4952      	ldr	r1, [pc, #328]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024be:	e03a      	b.n	8002536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d020      	beq.n	800250a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024c8:	4b4f      	ldr	r3, [pc, #316]	; (8002608 <HAL_RCC_OscConfig+0x2b0>)
 80024ca:	2201      	movs	r2, #1
 80024cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ce:	f7fe ff1f 	bl	8001310 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024d6:	f7fe ff1b 	bl	8001310 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e19c      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e8:	4b46      	ldr	r3, [pc, #280]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0f0      	beq.n	80024d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f4:	4b43      	ldr	r3, [pc, #268]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	00db      	lsls	r3, r3, #3
 8002502:	4940      	ldr	r1, [pc, #256]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	4313      	orrs	r3, r2
 8002506:	600b      	str	r3, [r1, #0]
 8002508:	e015      	b.n	8002536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800250a:	4b3f      	ldr	r3, [pc, #252]	; (8002608 <HAL_RCC_OscConfig+0x2b0>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002510:	f7fe fefe 	bl	8001310 <HAL_GetTick>
 8002514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002516:	e008      	b.n	800252a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002518:	f7fe fefa 	bl	8001310 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d901      	bls.n	800252a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e17b      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800252a:	4b36      	ldr	r3, [pc, #216]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0302 	and.w	r3, r3, #2
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1f0      	bne.n	8002518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0308 	and.w	r3, r3, #8
 800253e:	2b00      	cmp	r3, #0
 8002540:	d030      	beq.n	80025a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	695b      	ldr	r3, [r3, #20]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d016      	beq.n	8002578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800254a:	4b30      	ldr	r3, [pc, #192]	; (800260c <HAL_RCC_OscConfig+0x2b4>)
 800254c:	2201      	movs	r2, #1
 800254e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7fe fede 	bl	8001310 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002556:	e008      	b.n	800256a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002558:	f7fe feda 	bl	8001310 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	2b02      	cmp	r3, #2
 8002564:	d901      	bls.n	800256a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002566:	2303      	movs	r3, #3
 8002568:	e15b      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800256a:	4b26      	ldr	r3, [pc, #152]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 800256c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800256e:	f003 0302 	and.w	r3, r3, #2
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f0      	beq.n	8002558 <HAL_RCC_OscConfig+0x200>
 8002576:	e015      	b.n	80025a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002578:	4b24      	ldr	r3, [pc, #144]	; (800260c <HAL_RCC_OscConfig+0x2b4>)
 800257a:	2200      	movs	r2, #0
 800257c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800257e:	f7fe fec7 	bl	8001310 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002584:	e008      	b.n	8002598 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002586:	f7fe fec3 	bl	8001310 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	2b02      	cmp	r3, #2
 8002592:	d901      	bls.n	8002598 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002594:	2303      	movs	r3, #3
 8002596:	e144      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002598:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 800259a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d1f0      	bne.n	8002586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0304 	and.w	r3, r3, #4
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	f000 80a0 	beq.w	80026f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025b2:	2300      	movs	r3, #0
 80025b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025b6:	4b13      	ldr	r3, [pc, #76]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80025b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d10f      	bne.n	80025e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	4b0f      	ldr	r3, [pc, #60]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	4a0e      	ldr	r2, [pc, #56]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80025cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025d0:	6413      	str	r3, [r2, #64]	; 0x40
 80025d2:	4b0c      	ldr	r3, [pc, #48]	; (8002604 <HAL_RCC_OscConfig+0x2ac>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025de:	2301      	movs	r3, #1
 80025e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025e2:	4b0b      	ldr	r3, [pc, #44]	; (8002610 <HAL_RCC_OscConfig+0x2b8>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d121      	bne.n	8002632 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80025ee:	4b08      	ldr	r3, [pc, #32]	; (8002610 <HAL_RCC_OscConfig+0x2b8>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a07      	ldr	r2, [pc, #28]	; (8002610 <HAL_RCC_OscConfig+0x2b8>)
 80025f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80025fa:	f7fe fe89 	bl	8001310 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002600:	e011      	b.n	8002626 <HAL_RCC_OscConfig+0x2ce>
 8002602:	bf00      	nop
 8002604:	40023800 	.word	0x40023800
 8002608:	42470000 	.word	0x42470000
 800260c:	42470e80 	.word	0x42470e80
 8002610:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002614:	f7fe fe7c 	bl	8001310 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e0fd      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002626:	4b81      	ldr	r3, [pc, #516]	; (800282c <HAL_RCC_OscConfig+0x4d4>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d106      	bne.n	8002648 <HAL_RCC_OscConfig+0x2f0>
 800263a:	4b7d      	ldr	r3, [pc, #500]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 800263c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800263e:	4a7c      	ldr	r2, [pc, #496]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 8002640:	f043 0301 	orr.w	r3, r3, #1
 8002644:	6713      	str	r3, [r2, #112]	; 0x70
 8002646:	e01c      	b.n	8002682 <HAL_RCC_OscConfig+0x32a>
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	2b05      	cmp	r3, #5
 800264e:	d10c      	bne.n	800266a <HAL_RCC_OscConfig+0x312>
 8002650:	4b77      	ldr	r3, [pc, #476]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 8002652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002654:	4a76      	ldr	r2, [pc, #472]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 8002656:	f043 0304 	orr.w	r3, r3, #4
 800265a:	6713      	str	r3, [r2, #112]	; 0x70
 800265c:	4b74      	ldr	r3, [pc, #464]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 800265e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002660:	4a73      	ldr	r2, [pc, #460]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 8002662:	f043 0301 	orr.w	r3, r3, #1
 8002666:	6713      	str	r3, [r2, #112]	; 0x70
 8002668:	e00b      	b.n	8002682 <HAL_RCC_OscConfig+0x32a>
 800266a:	4b71      	ldr	r3, [pc, #452]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 800266c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800266e:	4a70      	ldr	r2, [pc, #448]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 8002670:	f023 0301 	bic.w	r3, r3, #1
 8002674:	6713      	str	r3, [r2, #112]	; 0x70
 8002676:	4b6e      	ldr	r3, [pc, #440]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 8002678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800267a:	4a6d      	ldr	r2, [pc, #436]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 800267c:	f023 0304 	bic.w	r3, r3, #4
 8002680:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	689b      	ldr	r3, [r3, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d015      	beq.n	80026b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800268a:	f7fe fe41 	bl	8001310 <HAL_GetTick>
 800268e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002690:	e00a      	b.n	80026a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002692:	f7fe fe3d 	bl	8001310 <HAL_GetTick>
 8002696:	4602      	mov	r2, r0
 8002698:	693b      	ldr	r3, [r7, #16]
 800269a:	1ad3      	subs	r3, r2, r3
 800269c:	f241 3288 	movw	r2, #5000	; 0x1388
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d901      	bls.n	80026a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80026a4:	2303      	movs	r3, #3
 80026a6:	e0bc      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026a8:	4b61      	ldr	r3, [pc, #388]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 80026aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d0ee      	beq.n	8002692 <HAL_RCC_OscConfig+0x33a>
 80026b4:	e014      	b.n	80026e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026b6:	f7fe fe2b 	bl	8001310 <HAL_GetTick>
 80026ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026bc:	e00a      	b.n	80026d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026be:	f7fe fe27 	bl	8001310 <HAL_GetTick>
 80026c2:	4602      	mov	r2, r0
 80026c4:	693b      	ldr	r3, [r7, #16]
 80026c6:	1ad3      	subs	r3, r2, r3
 80026c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e0a6      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026d4:	4b56      	ldr	r3, [pc, #344]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d8:	f003 0302 	and.w	r3, r3, #2
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1ee      	bne.n	80026be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026e0:	7dfb      	ldrb	r3, [r7, #23]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d105      	bne.n	80026f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e6:	4b52      	ldr	r3, [pc, #328]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 80026e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ea:	4a51      	ldr	r2, [pc, #324]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 80026ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	699b      	ldr	r3, [r3, #24]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	f000 8092 	beq.w	8002820 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80026fc:	4b4c      	ldr	r3, [pc, #304]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f003 030c 	and.w	r3, r3, #12
 8002704:	2b08      	cmp	r3, #8
 8002706:	d05c      	beq.n	80027c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	699b      	ldr	r3, [r3, #24]
 800270c:	2b02      	cmp	r3, #2
 800270e:	d141      	bne.n	8002794 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002710:	4b48      	ldr	r3, [pc, #288]	; (8002834 <HAL_RCC_OscConfig+0x4dc>)
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002716:	f7fe fdfb 	bl	8001310 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800271e:	f7fe fdf7 	bl	8001310 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b02      	cmp	r3, #2
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e078      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002730:	4b3f      	ldr	r3, [pc, #252]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002738:	2b00      	cmp	r3, #0
 800273a:	d1f0      	bne.n	800271e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	69da      	ldr	r2, [r3, #28]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	431a      	orrs	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800274a:	019b      	lsls	r3, r3, #6
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002752:	085b      	lsrs	r3, r3, #1
 8002754:	3b01      	subs	r3, #1
 8002756:	041b      	lsls	r3, r3, #16
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800275e:	061b      	lsls	r3, r3, #24
 8002760:	4933      	ldr	r1, [pc, #204]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 8002762:	4313      	orrs	r3, r2
 8002764:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002766:	4b33      	ldr	r3, [pc, #204]	; (8002834 <HAL_RCC_OscConfig+0x4dc>)
 8002768:	2201      	movs	r2, #1
 800276a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe fdd0 	bl	8001310 <HAL_GetTick>
 8002770:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002772:	e008      	b.n	8002786 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002774:	f7fe fdcc 	bl	8001310 <HAL_GetTick>
 8002778:	4602      	mov	r2, r0
 800277a:	693b      	ldr	r3, [r7, #16]
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d901      	bls.n	8002786 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002782:	2303      	movs	r3, #3
 8002784:	e04d      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002786:	4b2a      	ldr	r3, [pc, #168]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278e:	2b00      	cmp	r3, #0
 8002790:	d0f0      	beq.n	8002774 <HAL_RCC_OscConfig+0x41c>
 8002792:	e045      	b.n	8002820 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_RCC_OscConfig+0x4dc>)
 8002796:	2200      	movs	r2, #0
 8002798:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800279a:	f7fe fdb9 	bl	8001310 <HAL_GetTick>
 800279e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027a0:	e008      	b.n	80027b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027a2:	f7fe fdb5 	bl	8001310 <HAL_GetTick>
 80027a6:	4602      	mov	r2, r0
 80027a8:	693b      	ldr	r3, [r7, #16]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d901      	bls.n	80027b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80027b0:	2303      	movs	r3, #3
 80027b2:	e036      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b4:	4b1e      	ldr	r3, [pc, #120]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d1f0      	bne.n	80027a2 <HAL_RCC_OscConfig+0x44a>
 80027c0:	e02e      	b.n	8002820 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b01      	cmp	r3, #1
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e029      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80027ce:	4b18      	ldr	r3, [pc, #96]	; (8002830 <HAL_RCC_OscConfig+0x4d8>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69db      	ldr	r3, [r3, #28]
 80027de:	429a      	cmp	r2, r3
 80027e0:	d11c      	bne.n	800281c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d115      	bne.n	800281c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027f6:	4013      	ands	r3, r2
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d10d      	bne.n	800281c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800280a:	429a      	cmp	r2, r3
 800280c:	d106      	bne.n	800281c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e000      	b.n	8002822 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002820:	2300      	movs	r3, #0
}
 8002822:	4618      	mov	r0, r3
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40007000 	.word	0x40007000
 8002830:	40023800 	.word	0x40023800
 8002834:	42470060 	.word	0x42470060

08002838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
 8002840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d101      	bne.n	800284c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002848:	2301      	movs	r3, #1
 800284a:	e0cc      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800284c:	4b68      	ldr	r3, [pc, #416]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 030f 	and.w	r3, r3, #15
 8002854:	683a      	ldr	r2, [r7, #0]
 8002856:	429a      	cmp	r2, r3
 8002858:	d90c      	bls.n	8002874 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800285a:	4b65      	ldr	r3, [pc, #404]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 800285c:	683a      	ldr	r2, [r7, #0]
 800285e:	b2d2      	uxtb	r2, r2
 8002860:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002862:	4b63      	ldr	r3, [pc, #396]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f003 030f 	and.w	r3, r3, #15
 800286a:	683a      	ldr	r2, [r7, #0]
 800286c:	429a      	cmp	r2, r3
 800286e:	d001      	beq.n	8002874 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e0b8      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	2b00      	cmp	r3, #0
 800287e:	d020      	beq.n	80028c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0304 	and.w	r3, r3, #4
 8002888:	2b00      	cmp	r3, #0
 800288a:	d005      	beq.n	8002898 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800288c:	4b59      	ldr	r3, [pc, #356]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 800288e:	689b      	ldr	r3, [r3, #8]
 8002890:	4a58      	ldr	r2, [pc, #352]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002892:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002896:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d005      	beq.n	80028b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028a4:	4b53      	ldr	r3, [pc, #332]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	4a52      	ldr	r2, [pc, #328]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80028ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028b0:	4b50      	ldr	r3, [pc, #320]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	689b      	ldr	r3, [r3, #8]
 80028bc:	494d      	ldr	r1, [pc, #308]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028be:	4313      	orrs	r3, r2
 80028c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f003 0301 	and.w	r3, r3, #1
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d044      	beq.n	8002958 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	2b01      	cmp	r3, #1
 80028d4:	d107      	bne.n	80028e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d6:	4b47      	ldr	r3, [pc, #284]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d119      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028e2:	2301      	movs	r3, #1
 80028e4:	e07f      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d003      	beq.n	80028f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028f2:	2b03      	cmp	r3, #3
 80028f4:	d107      	bne.n	8002906 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f6:	4b3f      	ldr	r3, [pc, #252]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d109      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e06f      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002906:	4b3b      	ldr	r3, [pc, #236]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	2b00      	cmp	r3, #0
 8002910:	d101      	bne.n	8002916 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e067      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002916:	4b37      	ldr	r3, [pc, #220]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	f023 0203 	bic.w	r2, r3, #3
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	4934      	ldr	r1, [pc, #208]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002924:	4313      	orrs	r3, r2
 8002926:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002928:	f7fe fcf2 	bl	8001310 <HAL_GetTick>
 800292c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800292e:	e00a      	b.n	8002946 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002930:	f7fe fcee 	bl	8001310 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	f241 3288 	movw	r2, #5000	; 0x1388
 800293e:	4293      	cmp	r3, r2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e04f      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002946:	4b2b      	ldr	r3, [pc, #172]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f003 020c 	and.w	r2, r3, #12
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	429a      	cmp	r2, r3
 8002956:	d1eb      	bne.n	8002930 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002958:	4b25      	ldr	r3, [pc, #148]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 030f 	and.w	r3, r3, #15
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d20c      	bcs.n	8002980 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b22      	ldr	r3, [pc, #136]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002968:	683a      	ldr	r2, [r7, #0]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800296e:	4b20      	ldr	r3, [pc, #128]	; (80029f0 <HAL_RCC_ClockConfig+0x1b8>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 030f 	and.w	r3, r3, #15
 8002976:	683a      	ldr	r2, [r7, #0]
 8002978:	429a      	cmp	r2, r3
 800297a:	d001      	beq.n	8002980 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e032      	b.n	80029e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f003 0304 	and.w	r3, r3, #4
 8002988:	2b00      	cmp	r3, #0
 800298a:	d008      	beq.n	800299e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800298c:	4b19      	ldr	r3, [pc, #100]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68db      	ldr	r3, [r3, #12]
 8002998:	4916      	ldr	r1, [pc, #88]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 800299a:	4313      	orrs	r3, r2
 800299c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0308 	and.w	r3, r3, #8
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d009      	beq.n	80029be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029aa:	4b12      	ldr	r3, [pc, #72]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	689b      	ldr	r3, [r3, #8]
 80029ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	691b      	ldr	r3, [r3, #16]
 80029b6:	00db      	lsls	r3, r3, #3
 80029b8:	490e      	ldr	r1, [pc, #56]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80029be:	f000 f821 	bl	8002a04 <HAL_RCC_GetSysClockFreq>
 80029c2:	4601      	mov	r1, r0
 80029c4:	4b0b      	ldr	r3, [pc, #44]	; (80029f4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	091b      	lsrs	r3, r3, #4
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	4a0a      	ldr	r2, [pc, #40]	; (80029f8 <HAL_RCC_ClockConfig+0x1c0>)
 80029d0:	5cd3      	ldrb	r3, [r2, r3]
 80029d2:	fa21 f303 	lsr.w	r3, r1, r3
 80029d6:	4a09      	ldr	r2, [pc, #36]	; (80029fc <HAL_RCC_ClockConfig+0x1c4>)
 80029d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80029da:	4b09      	ldr	r3, [pc, #36]	; (8002a00 <HAL_RCC_ClockConfig+0x1c8>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4618      	mov	r0, r3
 80029e0:	f7fe fc52 	bl	8001288 <HAL_InitTick>

  return HAL_OK;
 80029e4:	2300      	movs	r3, #0
}
 80029e6:	4618      	mov	r0, r3
 80029e8:	3710      	adds	r7, #16
 80029ea:	46bd      	mov	sp, r7
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	40023c00 	.word	0x40023c00
 80029f4:	40023800 	.word	0x40023800
 80029f8:	0800483c 	.word	0x0800483c
 80029fc:	20000310 	.word	0x20000310
 8002a00:	20000314 	.word	0x20000314

08002a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	607b      	str	r3, [r7, #4]
 8002a0e:	2300      	movs	r3, #0
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	2300      	movs	r3, #0
 8002a14:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a1a:	4b50      	ldr	r3, [pc, #320]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x158>)
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	f003 030c 	and.w	r3, r3, #12
 8002a22:	2b04      	cmp	r3, #4
 8002a24:	d007      	beq.n	8002a36 <HAL_RCC_GetSysClockFreq+0x32>
 8002a26:	2b08      	cmp	r3, #8
 8002a28:	d008      	beq.n	8002a3c <HAL_RCC_GetSysClockFreq+0x38>
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	f040 808d 	bne.w	8002b4a <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a30:	4b4b      	ldr	r3, [pc, #300]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002a32:	60bb      	str	r3, [r7, #8]
       break;
 8002a34:	e08c      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a36:	4b4b      	ldr	r3, [pc, #300]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a38:	60bb      	str	r3, [r7, #8]
      break;
 8002a3a:	e089      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a3c:	4b47      	ldr	r3, [pc, #284]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x158>)
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a44:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a46:	4b45      	ldr	r3, [pc, #276]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x158>)
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d023      	beq.n	8002a9a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a52:	4b42      	ldr	r3, [pc, #264]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x158>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	099b      	lsrs	r3, r3, #6
 8002a58:	f04f 0400 	mov.w	r4, #0
 8002a5c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	ea03 0501 	and.w	r5, r3, r1
 8002a68:	ea04 0602 	and.w	r6, r4, r2
 8002a6c:	4a3d      	ldr	r2, [pc, #244]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a6e:	fb02 f106 	mul.w	r1, r2, r6
 8002a72:	2200      	movs	r2, #0
 8002a74:	fb02 f205 	mul.w	r2, r2, r5
 8002a78:	440a      	add	r2, r1
 8002a7a:	493a      	ldr	r1, [pc, #232]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x160>)
 8002a7c:	fba5 0101 	umull	r0, r1, r5, r1
 8002a80:	1853      	adds	r3, r2, r1
 8002a82:	4619      	mov	r1, r3
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f04f 0400 	mov.w	r4, #0
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	4623      	mov	r3, r4
 8002a8e:	f7fd fbef 	bl	8000270 <__aeabi_uldivmod>
 8002a92:	4603      	mov	r3, r0
 8002a94:	460c      	mov	r4, r1
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	e049      	b.n	8002b2e <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9a:	4b30      	ldr	r3, [pc, #192]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x158>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	099b      	lsrs	r3, r3, #6
 8002aa0:	f04f 0400 	mov.w	r4, #0
 8002aa4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002aa8:	f04f 0200 	mov.w	r2, #0
 8002aac:	ea03 0501 	and.w	r5, r3, r1
 8002ab0:	ea04 0602 	and.w	r6, r4, r2
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	4632      	mov	r2, r6
 8002ab8:	f04f 0300 	mov.w	r3, #0
 8002abc:	f04f 0400 	mov.w	r4, #0
 8002ac0:	0154      	lsls	r4, r2, #5
 8002ac2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002ac6:	014b      	lsls	r3, r1, #5
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4622      	mov	r2, r4
 8002acc:	1b49      	subs	r1, r1, r5
 8002ace:	eb62 0206 	sbc.w	r2, r2, r6
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	f04f 0400 	mov.w	r4, #0
 8002ada:	0194      	lsls	r4, r2, #6
 8002adc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002ae0:	018b      	lsls	r3, r1, #6
 8002ae2:	1a5b      	subs	r3, r3, r1
 8002ae4:	eb64 0402 	sbc.w	r4, r4, r2
 8002ae8:	f04f 0100 	mov.w	r1, #0
 8002aec:	f04f 0200 	mov.w	r2, #0
 8002af0:	00e2      	lsls	r2, r4, #3
 8002af2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002af6:	00d9      	lsls	r1, r3, #3
 8002af8:	460b      	mov	r3, r1
 8002afa:	4614      	mov	r4, r2
 8002afc:	195b      	adds	r3, r3, r5
 8002afe:	eb44 0406 	adc.w	r4, r4, r6
 8002b02:	f04f 0100 	mov.w	r1, #0
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	02a2      	lsls	r2, r4, #10
 8002b0c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002b10:	0299      	lsls	r1, r3, #10
 8002b12:	460b      	mov	r3, r1
 8002b14:	4614      	mov	r4, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	4621      	mov	r1, r4
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f04f 0400 	mov.w	r4, #0
 8002b20:	461a      	mov	r2, r3
 8002b22:	4623      	mov	r3, r4
 8002b24:	f7fd fba4 	bl	8000270 <__aeabi_uldivmod>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	460c      	mov	r4, r1
 8002b2c:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <HAL_RCC_GetSysClockFreq+0x158>)
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	0c1b      	lsrs	r3, r3, #16
 8002b34:	f003 0303 	and.w	r3, r3, #3
 8002b38:	3301      	adds	r3, #1
 8002b3a:	005b      	lsls	r3, r3, #1
 8002b3c:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002b3e:	68fa      	ldr	r2, [r7, #12]
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b46:	60bb      	str	r3, [r7, #8]
      break;
 8002b48:	e002      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_GetSysClockFreq+0x15c>)
 8002b4c:	60bb      	str	r3, [r7, #8]
      break;
 8002b4e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b50:	68bb      	ldr	r3, [r7, #8]
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	3714      	adds	r7, #20
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b5a:	bf00      	nop
 8002b5c:	40023800 	.word	0x40023800
 8002b60:	00f42400 	.word	0x00f42400
 8002b64:	017d7840 	.word	0x017d7840

08002b68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b6c:	4b03      	ldr	r3, [pc, #12]	; (8002b7c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	20000310 	.word	0x20000310

08002b80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b84:	f7ff fff0 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002b88:	4601      	mov	r1, r0
 8002b8a:	4b05      	ldr	r3, [pc, #20]	; (8002ba0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b8c:	689b      	ldr	r3, [r3, #8]
 8002b8e:	0a9b      	lsrs	r3, r3, #10
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	4a03      	ldr	r2, [pc, #12]	; (8002ba4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b96:	5cd3      	ldrb	r3, [r2, r3]
 8002b98:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	0800484c 	.word	0x0800484c

08002ba8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002bac:	f7ff ffdc 	bl	8002b68 <HAL_RCC_GetHCLKFreq>
 8002bb0:	4601      	mov	r1, r0
 8002bb2:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	0b5b      	lsrs	r3, r3, #13
 8002bb8:	f003 0307 	and.w	r3, r3, #7
 8002bbc:	4a03      	ldr	r2, [pc, #12]	; (8002bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bbe:	5cd3      	ldrb	r3, [r2, r3]
 8002bc0:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	0800484c 	.word	0x0800484c

08002bd0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e03f      	b.n	8002c62 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d106      	bne.n	8002bfc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fe fab2 	bl	8001160 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2224      	movs	r2, #36	; 0x24
 8002c00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68da      	ldr	r2, [r3, #12]
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002c12:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f9b1 	bl	8002f7c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691a      	ldr	r2, [r3, #16]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c28:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	695a      	ldr	r2, [r3, #20]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c38:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002c48:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2220      	movs	r2, #32
 8002c5c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3708      	adds	r7, #8
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}

08002c6a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c6a:	b580      	push	{r7, lr}
 8002c6c:	b088      	sub	sp, #32
 8002c6e:	af02      	add	r7, sp, #8
 8002c70:	60f8      	str	r0, [r7, #12]
 8002c72:	60b9      	str	r1, [r7, #8]
 8002c74:	603b      	str	r3, [r7, #0]
 8002c76:	4613      	mov	r3, r2
 8002c78:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b20      	cmp	r3, #32
 8002c88:	f040 8083 	bne.w	8002d92 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d002      	beq.n	8002c98 <HAL_UART_Transmit+0x2e>
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d101      	bne.n	8002c9c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e07b      	b.n	8002d94 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_UART_Transmit+0x40>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e074      	b.n	8002d94 <HAL_UART_Transmit+0x12a>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2221      	movs	r2, #33	; 0x21
 8002cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002cc0:	f7fe fb26 	bl	8001310 <HAL_GetTick>
 8002cc4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	88fa      	ldrh	r2, [r7, #6]
 8002cca:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	88fa      	ldrh	r2, [r7, #6]
 8002cd0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002cda:	e042      	b.n	8002d62 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ce0:	b29b      	uxth	r3, r3
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	b29a      	uxth	r2, r3
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cf2:	d122      	bne.n	8002d3a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	9300      	str	r3, [sp, #0]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	2180      	movs	r1, #128	; 0x80
 8002cfe:	68f8      	ldr	r0, [r7, #12]
 8002d00:	f000 f8f2 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d001      	beq.n	8002d0e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e042      	b.n	8002d94 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	461a      	mov	r2, r3
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d20:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d103      	bne.n	8002d32 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	3302      	adds	r3, #2
 8002d2e:	60bb      	str	r3, [r7, #8]
 8002d30:	e017      	b.n	8002d62 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	3301      	adds	r3, #1
 8002d36:	60bb      	str	r3, [r7, #8]
 8002d38:	e013      	b.n	8002d62 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	9300      	str	r3, [sp, #0]
 8002d3e:	697b      	ldr	r3, [r7, #20]
 8002d40:	2200      	movs	r2, #0
 8002d42:	2180      	movs	r1, #128	; 0x80
 8002d44:	68f8      	ldr	r0, [r7, #12]
 8002d46:	f000 f8cf 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e01f      	b.n	8002d94 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002d54:	68bb      	ldr	r3, [r7, #8]
 8002d56:	1c5a      	adds	r2, r3, #1
 8002d58:	60ba      	str	r2, [r7, #8]
 8002d5a:	781a      	ldrb	r2, [r3, #0]
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002d66:	b29b      	uxth	r3, r3
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d1b7      	bne.n	8002cdc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	9300      	str	r3, [sp, #0]
 8002d70:	697b      	ldr	r3, [r7, #20]
 8002d72:	2200      	movs	r2, #0
 8002d74:	2140      	movs	r1, #64	; 0x40
 8002d76:	68f8      	ldr	r0, [r7, #12]
 8002d78:	f000 f8b6 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002d82:	2303      	movs	r3, #3
 8002d84:	e006      	b.n	8002d94 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002d8e:	2300      	movs	r3, #0
 8002d90:	e000      	b.n	8002d94 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002d92:	2302      	movs	r3, #2
  }
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	60f8      	str	r0, [r7, #12]
 8002da4:	60b9      	str	r1, [r7, #8]
 8002da6:	603b      	str	r3, [r7, #0]
 8002da8:	4613      	mov	r3, r2
 8002daa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002dac:	2300      	movs	r3, #0
 8002dae:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	2b20      	cmp	r3, #32
 8002dba:	f040 8090 	bne.w	8002ede <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_UART_Receive+0x2e>
 8002dc4:	88fb      	ldrh	r3, [r7, #6]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e088      	b.n	8002ee0 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <HAL_UART_Receive+0x40>
 8002dd8:	2302      	movs	r3, #2
 8002dda:	e081      	b.n	8002ee0 <HAL_UART_Receive+0x144>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	2200      	movs	r2, #0
 8002de8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	2222      	movs	r2, #34	; 0x22
 8002dee:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002df2:	f7fe fa8d 	bl	8001310 <HAL_GetTick>
 8002df6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	88fa      	ldrh	r2, [r7, #6]
 8002dfc:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	88fa      	ldrh	r2, [r7, #6]
 8002e02:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2200      	movs	r2, #0
 8002e08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e0c:	e05c      	b.n	8002ec8 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	3b01      	subs	r3, #1
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e24:	d12b      	bne.n	8002e7e <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	9300      	str	r3, [sp, #0]
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	2120      	movs	r1, #32
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 f859 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8002e36:	4603      	mov	r3, r0
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d001      	beq.n	8002e40 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e04f      	b.n	8002ee0 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002e40:	68bb      	ldr	r3, [r7, #8]
 8002e42:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	691b      	ldr	r3, [r3, #16]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d10c      	bne.n	8002e66 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e58:	b29a      	uxth	r2, r3
 8002e5a:	693b      	ldr	r3, [r7, #16]
 8002e5c:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8002e5e:	68bb      	ldr	r3, [r7, #8]
 8002e60:	3302      	adds	r3, #2
 8002e62:	60bb      	str	r3, [r7, #8]
 8002e64:	e030      	b.n	8002ec8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	b29b      	uxth	r3, r3
 8002e6e:	b2db      	uxtb	r3, r3
 8002e70:	b29a      	uxth	r2, r3
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8002e76:	68bb      	ldr	r3, [r7, #8]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	60bb      	str	r3, [r7, #8]
 8002e7c:	e024      	b.n	8002ec8 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	2200      	movs	r2, #0
 8002e86:	2120      	movs	r1, #32
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f000 f82d 	bl	8002ee8 <UART_WaitOnFlagUntilTimeout>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d001      	beq.n	8002e98 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e023      	b.n	8002ee0 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d108      	bne.n	8002eb2 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6859      	ldr	r1, [r3, #4]
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	60ba      	str	r2, [r7, #8]
 8002eac:	b2ca      	uxtb	r2, r1
 8002eae:	701a      	strb	r2, [r3, #0]
 8002eb0:	e00a      	b.n	8002ec8 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	b2da      	uxtb	r2, r3
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	1c59      	adds	r1, r3, #1
 8002ebe:	60b9      	str	r1, [r7, #8]
 8002ec0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ec4:	b2d2      	uxtb	r2, r2
 8002ec6:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d19d      	bne.n	8002e0e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2220      	movs	r2, #32
 8002ed6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 8002eda:	2300      	movs	r3, #0
 8002edc:	e000      	b.n	8002ee0 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
  }
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	3718      	adds	r7, #24
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	bd80      	pop	{r7, pc}

08002ee8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	603b      	str	r3, [r7, #0]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ef8:	e02c      	b.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f00:	d028      	beq.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d007      	beq.n	8002f18 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f08:	f7fe fa02 	bl	8001310 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	69ba      	ldr	r2, [r7, #24]
 8002f14:	429a      	cmp	r2, r3
 8002f16:	d21d      	bcs.n	8002f54 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	68da      	ldr	r2, [r3, #12]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f26:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	695a      	ldr	r2, [r3, #20]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f022 0201 	bic.w	r2, r2, #1
 8002f36:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2220      	movs	r2, #32
 8002f3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2220      	movs	r2, #32
 8002f44:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e00f      	b.n	8002f74 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	bf0c      	ite	eq
 8002f64:	2301      	moveq	r3, #1
 8002f66:	2300      	movne	r3, #0
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	79fb      	ldrb	r3, [r7, #7]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d0c3      	beq.n	8002efa <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f72:	2300      	movs	r3, #0
}
 8002f74:	4618      	mov	r0, r3
 8002f76:	3710      	adds	r7, #16
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002f80:	b085      	sub	sp, #20
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	691b      	ldr	r3, [r3, #16]
 8002f8c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	430a      	orrs	r2, r1
 8002f9a:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	68db      	ldr	r3, [r3, #12]
 8002fba:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8002fbe:	f023 030c 	bic.w	r3, r3, #12
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6812      	ldr	r2, [r2, #0]
 8002fc6:	68f9      	ldr	r1, [r7, #12]
 8002fc8:	430b      	orrs	r3, r1
 8002fca:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	430a      	orrs	r2, r1
 8002fe0:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	69db      	ldr	r3, [r3, #28]
 8002fe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fea:	f040 818b 	bne.w	8003304 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4ac1      	ldr	r2, [pc, #772]	; (80032f8 <UART_SetConfig+0x37c>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d005      	beq.n	8003004 <UART_SetConfig+0x88>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4abf      	ldr	r2, [pc, #764]	; (80032fc <UART_SetConfig+0x380>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	f040 80bd 	bne.w	800317e <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003004:	f7ff fdd0 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 8003008:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	461d      	mov	r5, r3
 800300e:	f04f 0600 	mov.w	r6, #0
 8003012:	46a8      	mov	r8, r5
 8003014:	46b1      	mov	r9, r6
 8003016:	eb18 0308 	adds.w	r3, r8, r8
 800301a:	eb49 0409 	adc.w	r4, r9, r9
 800301e:	4698      	mov	r8, r3
 8003020:	46a1      	mov	r9, r4
 8003022:	eb18 0805 	adds.w	r8, r8, r5
 8003026:	eb49 0906 	adc.w	r9, r9, r6
 800302a:	f04f 0100 	mov.w	r1, #0
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003036:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800303a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800303e:	4688      	mov	r8, r1
 8003040:	4691      	mov	r9, r2
 8003042:	eb18 0005 	adds.w	r0, r8, r5
 8003046:	eb49 0106 	adc.w	r1, r9, r6
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	461d      	mov	r5, r3
 8003050:	f04f 0600 	mov.w	r6, #0
 8003054:	196b      	adds	r3, r5, r5
 8003056:	eb46 0406 	adc.w	r4, r6, r6
 800305a:	461a      	mov	r2, r3
 800305c:	4623      	mov	r3, r4
 800305e:	f7fd f907 	bl	8000270 <__aeabi_uldivmod>
 8003062:	4603      	mov	r3, r0
 8003064:	460c      	mov	r4, r1
 8003066:	461a      	mov	r2, r3
 8003068:	4ba5      	ldr	r3, [pc, #660]	; (8003300 <UART_SetConfig+0x384>)
 800306a:	fba3 2302 	umull	r2, r3, r3, r2
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	461d      	mov	r5, r3
 8003078:	f04f 0600 	mov.w	r6, #0
 800307c:	46a9      	mov	r9, r5
 800307e:	46b2      	mov	sl, r6
 8003080:	eb19 0309 	adds.w	r3, r9, r9
 8003084:	eb4a 040a 	adc.w	r4, sl, sl
 8003088:	4699      	mov	r9, r3
 800308a:	46a2      	mov	sl, r4
 800308c:	eb19 0905 	adds.w	r9, r9, r5
 8003090:	eb4a 0a06 	adc.w	sl, sl, r6
 8003094:	f04f 0100 	mov.w	r1, #0
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80030a0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80030a4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80030a8:	4689      	mov	r9, r1
 80030aa:	4692      	mov	sl, r2
 80030ac:	eb19 0005 	adds.w	r0, r9, r5
 80030b0:	eb4a 0106 	adc.w	r1, sl, r6
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	461d      	mov	r5, r3
 80030ba:	f04f 0600 	mov.w	r6, #0
 80030be:	196b      	adds	r3, r5, r5
 80030c0:	eb46 0406 	adc.w	r4, r6, r6
 80030c4:	461a      	mov	r2, r3
 80030c6:	4623      	mov	r3, r4
 80030c8:	f7fd f8d2 	bl	8000270 <__aeabi_uldivmod>
 80030cc:	4603      	mov	r3, r0
 80030ce:	460c      	mov	r4, r1
 80030d0:	461a      	mov	r2, r3
 80030d2:	4b8b      	ldr	r3, [pc, #556]	; (8003300 <UART_SetConfig+0x384>)
 80030d4:	fba3 1302 	umull	r1, r3, r3, r2
 80030d8:	095b      	lsrs	r3, r3, #5
 80030da:	2164      	movs	r1, #100	; 0x64
 80030dc:	fb01 f303 	mul.w	r3, r1, r3
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	00db      	lsls	r3, r3, #3
 80030e4:	3332      	adds	r3, #50	; 0x32
 80030e6:	4a86      	ldr	r2, [pc, #536]	; (8003300 <UART_SetConfig+0x384>)
 80030e8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ec:	095b      	lsrs	r3, r3, #5
 80030ee:	005b      	lsls	r3, r3, #1
 80030f0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80030f4:	4498      	add	r8, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	461d      	mov	r5, r3
 80030fa:	f04f 0600 	mov.w	r6, #0
 80030fe:	46a9      	mov	r9, r5
 8003100:	46b2      	mov	sl, r6
 8003102:	eb19 0309 	adds.w	r3, r9, r9
 8003106:	eb4a 040a 	adc.w	r4, sl, sl
 800310a:	4699      	mov	r9, r3
 800310c:	46a2      	mov	sl, r4
 800310e:	eb19 0905 	adds.w	r9, r9, r5
 8003112:	eb4a 0a06 	adc.w	sl, sl, r6
 8003116:	f04f 0100 	mov.w	r1, #0
 800311a:	f04f 0200 	mov.w	r2, #0
 800311e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003122:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003126:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800312a:	4689      	mov	r9, r1
 800312c:	4692      	mov	sl, r2
 800312e:	eb19 0005 	adds.w	r0, r9, r5
 8003132:	eb4a 0106 	adc.w	r1, sl, r6
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	461d      	mov	r5, r3
 800313c:	f04f 0600 	mov.w	r6, #0
 8003140:	196b      	adds	r3, r5, r5
 8003142:	eb46 0406 	adc.w	r4, r6, r6
 8003146:	461a      	mov	r2, r3
 8003148:	4623      	mov	r3, r4
 800314a:	f7fd f891 	bl	8000270 <__aeabi_uldivmod>
 800314e:	4603      	mov	r3, r0
 8003150:	460c      	mov	r4, r1
 8003152:	461a      	mov	r2, r3
 8003154:	4b6a      	ldr	r3, [pc, #424]	; (8003300 <UART_SetConfig+0x384>)
 8003156:	fba3 1302 	umull	r1, r3, r3, r2
 800315a:	095b      	lsrs	r3, r3, #5
 800315c:	2164      	movs	r1, #100	; 0x64
 800315e:	fb01 f303 	mul.w	r3, r1, r3
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	00db      	lsls	r3, r3, #3
 8003166:	3332      	adds	r3, #50	; 0x32
 8003168:	4a65      	ldr	r2, [pc, #404]	; (8003300 <UART_SetConfig+0x384>)
 800316a:	fba2 2303 	umull	r2, r3, r2, r3
 800316e:	095b      	lsrs	r3, r3, #5
 8003170:	f003 0207 	and.w	r2, r3, #7
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4442      	add	r2, r8
 800317a:	609a      	str	r2, [r3, #8]
 800317c:	e26f      	b.n	800365e <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800317e:	f7ff fcff 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 8003182:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	461d      	mov	r5, r3
 8003188:	f04f 0600 	mov.w	r6, #0
 800318c:	46a8      	mov	r8, r5
 800318e:	46b1      	mov	r9, r6
 8003190:	eb18 0308 	adds.w	r3, r8, r8
 8003194:	eb49 0409 	adc.w	r4, r9, r9
 8003198:	4698      	mov	r8, r3
 800319a:	46a1      	mov	r9, r4
 800319c:	eb18 0805 	adds.w	r8, r8, r5
 80031a0:	eb49 0906 	adc.w	r9, r9, r6
 80031a4:	f04f 0100 	mov.w	r1, #0
 80031a8:	f04f 0200 	mov.w	r2, #0
 80031ac:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80031b0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80031b4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80031b8:	4688      	mov	r8, r1
 80031ba:	4691      	mov	r9, r2
 80031bc:	eb18 0005 	adds.w	r0, r8, r5
 80031c0:	eb49 0106 	adc.w	r1, r9, r6
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	461d      	mov	r5, r3
 80031ca:	f04f 0600 	mov.w	r6, #0
 80031ce:	196b      	adds	r3, r5, r5
 80031d0:	eb46 0406 	adc.w	r4, r6, r6
 80031d4:	461a      	mov	r2, r3
 80031d6:	4623      	mov	r3, r4
 80031d8:	f7fd f84a 	bl	8000270 <__aeabi_uldivmod>
 80031dc:	4603      	mov	r3, r0
 80031de:	460c      	mov	r4, r1
 80031e0:	461a      	mov	r2, r3
 80031e2:	4b47      	ldr	r3, [pc, #284]	; (8003300 <UART_SetConfig+0x384>)
 80031e4:	fba3 2302 	umull	r2, r3, r3, r2
 80031e8:	095b      	lsrs	r3, r3, #5
 80031ea:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	461d      	mov	r5, r3
 80031f2:	f04f 0600 	mov.w	r6, #0
 80031f6:	46a9      	mov	r9, r5
 80031f8:	46b2      	mov	sl, r6
 80031fa:	eb19 0309 	adds.w	r3, r9, r9
 80031fe:	eb4a 040a 	adc.w	r4, sl, sl
 8003202:	4699      	mov	r9, r3
 8003204:	46a2      	mov	sl, r4
 8003206:	eb19 0905 	adds.w	r9, r9, r5
 800320a:	eb4a 0a06 	adc.w	sl, sl, r6
 800320e:	f04f 0100 	mov.w	r1, #0
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800321a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800321e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003222:	4689      	mov	r9, r1
 8003224:	4692      	mov	sl, r2
 8003226:	eb19 0005 	adds.w	r0, r9, r5
 800322a:	eb4a 0106 	adc.w	r1, sl, r6
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	461d      	mov	r5, r3
 8003234:	f04f 0600 	mov.w	r6, #0
 8003238:	196b      	adds	r3, r5, r5
 800323a:	eb46 0406 	adc.w	r4, r6, r6
 800323e:	461a      	mov	r2, r3
 8003240:	4623      	mov	r3, r4
 8003242:	f7fd f815 	bl	8000270 <__aeabi_uldivmod>
 8003246:	4603      	mov	r3, r0
 8003248:	460c      	mov	r4, r1
 800324a:	461a      	mov	r2, r3
 800324c:	4b2c      	ldr	r3, [pc, #176]	; (8003300 <UART_SetConfig+0x384>)
 800324e:	fba3 1302 	umull	r1, r3, r3, r2
 8003252:	095b      	lsrs	r3, r3, #5
 8003254:	2164      	movs	r1, #100	; 0x64
 8003256:	fb01 f303 	mul.w	r3, r1, r3
 800325a:	1ad3      	subs	r3, r2, r3
 800325c:	00db      	lsls	r3, r3, #3
 800325e:	3332      	adds	r3, #50	; 0x32
 8003260:	4a27      	ldr	r2, [pc, #156]	; (8003300 <UART_SetConfig+0x384>)
 8003262:	fba2 2303 	umull	r2, r3, r2, r3
 8003266:	095b      	lsrs	r3, r3, #5
 8003268:	005b      	lsls	r3, r3, #1
 800326a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800326e:	4498      	add	r8, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	461d      	mov	r5, r3
 8003274:	f04f 0600 	mov.w	r6, #0
 8003278:	46a9      	mov	r9, r5
 800327a:	46b2      	mov	sl, r6
 800327c:	eb19 0309 	adds.w	r3, r9, r9
 8003280:	eb4a 040a 	adc.w	r4, sl, sl
 8003284:	4699      	mov	r9, r3
 8003286:	46a2      	mov	sl, r4
 8003288:	eb19 0905 	adds.w	r9, r9, r5
 800328c:	eb4a 0a06 	adc.w	sl, sl, r6
 8003290:	f04f 0100 	mov.w	r1, #0
 8003294:	f04f 0200 	mov.w	r2, #0
 8003298:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800329c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032a0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032a4:	4689      	mov	r9, r1
 80032a6:	4692      	mov	sl, r2
 80032a8:	eb19 0005 	adds.w	r0, r9, r5
 80032ac:	eb4a 0106 	adc.w	r1, sl, r6
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	461d      	mov	r5, r3
 80032b6:	f04f 0600 	mov.w	r6, #0
 80032ba:	196b      	adds	r3, r5, r5
 80032bc:	eb46 0406 	adc.w	r4, r6, r6
 80032c0:	461a      	mov	r2, r3
 80032c2:	4623      	mov	r3, r4
 80032c4:	f7fc ffd4 	bl	8000270 <__aeabi_uldivmod>
 80032c8:	4603      	mov	r3, r0
 80032ca:	460c      	mov	r4, r1
 80032cc:	461a      	mov	r2, r3
 80032ce:	4b0c      	ldr	r3, [pc, #48]	; (8003300 <UART_SetConfig+0x384>)
 80032d0:	fba3 1302 	umull	r1, r3, r3, r2
 80032d4:	095b      	lsrs	r3, r3, #5
 80032d6:	2164      	movs	r1, #100	; 0x64
 80032d8:	fb01 f303 	mul.w	r3, r1, r3
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	00db      	lsls	r3, r3, #3
 80032e0:	3332      	adds	r3, #50	; 0x32
 80032e2:	4a07      	ldr	r2, [pc, #28]	; (8003300 <UART_SetConfig+0x384>)
 80032e4:	fba2 2303 	umull	r2, r3, r2, r3
 80032e8:	095b      	lsrs	r3, r3, #5
 80032ea:	f003 0207 	and.w	r2, r3, #7
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4442      	add	r2, r8
 80032f4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80032f6:	e1b2      	b.n	800365e <UART_SetConfig+0x6e2>
 80032f8:	40011000 	.word	0x40011000
 80032fc:	40011400 	.word	0x40011400
 8003300:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4ad7      	ldr	r2, [pc, #860]	; (8003668 <UART_SetConfig+0x6ec>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d005      	beq.n	800331a <UART_SetConfig+0x39e>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4ad6      	ldr	r2, [pc, #856]	; (800366c <UART_SetConfig+0x6f0>)
 8003314:	4293      	cmp	r3, r2
 8003316:	f040 80d1 	bne.w	80034bc <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800331a:	f7ff fc45 	bl	8002ba8 <HAL_RCC_GetPCLK2Freq>
 800331e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	469a      	mov	sl, r3
 8003324:	f04f 0b00 	mov.w	fp, #0
 8003328:	46d0      	mov	r8, sl
 800332a:	46d9      	mov	r9, fp
 800332c:	eb18 0308 	adds.w	r3, r8, r8
 8003330:	eb49 0409 	adc.w	r4, r9, r9
 8003334:	4698      	mov	r8, r3
 8003336:	46a1      	mov	r9, r4
 8003338:	eb18 080a 	adds.w	r8, r8, sl
 800333c:	eb49 090b 	adc.w	r9, r9, fp
 8003340:	f04f 0100 	mov.w	r1, #0
 8003344:	f04f 0200 	mov.w	r2, #0
 8003348:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800334c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003350:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003354:	4688      	mov	r8, r1
 8003356:	4691      	mov	r9, r2
 8003358:	eb1a 0508 	adds.w	r5, sl, r8
 800335c:	eb4b 0609 	adc.w	r6, fp, r9
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	4619      	mov	r1, r3
 8003366:	f04f 0200 	mov.w	r2, #0
 800336a:	f04f 0300 	mov.w	r3, #0
 800336e:	f04f 0400 	mov.w	r4, #0
 8003372:	0094      	lsls	r4, r2, #2
 8003374:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003378:	008b      	lsls	r3, r1, #2
 800337a:	461a      	mov	r2, r3
 800337c:	4623      	mov	r3, r4
 800337e:	4628      	mov	r0, r5
 8003380:	4631      	mov	r1, r6
 8003382:	f7fc ff75 	bl	8000270 <__aeabi_uldivmod>
 8003386:	4603      	mov	r3, r0
 8003388:	460c      	mov	r4, r1
 800338a:	461a      	mov	r2, r3
 800338c:	4bb8      	ldr	r3, [pc, #736]	; (8003670 <UART_SetConfig+0x6f4>)
 800338e:	fba3 2302 	umull	r2, r3, r3, r2
 8003392:	095b      	lsrs	r3, r3, #5
 8003394:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	469b      	mov	fp, r3
 800339c:	f04f 0c00 	mov.w	ip, #0
 80033a0:	46d9      	mov	r9, fp
 80033a2:	46e2      	mov	sl, ip
 80033a4:	eb19 0309 	adds.w	r3, r9, r9
 80033a8:	eb4a 040a 	adc.w	r4, sl, sl
 80033ac:	4699      	mov	r9, r3
 80033ae:	46a2      	mov	sl, r4
 80033b0:	eb19 090b 	adds.w	r9, r9, fp
 80033b4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80033b8:	f04f 0100 	mov.w	r1, #0
 80033bc:	f04f 0200 	mov.w	r2, #0
 80033c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033c4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80033c8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80033cc:	4689      	mov	r9, r1
 80033ce:	4692      	mov	sl, r2
 80033d0:	eb1b 0509 	adds.w	r5, fp, r9
 80033d4:	eb4c 060a 	adc.w	r6, ip, sl
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	4619      	mov	r1, r3
 80033de:	f04f 0200 	mov.w	r2, #0
 80033e2:	f04f 0300 	mov.w	r3, #0
 80033e6:	f04f 0400 	mov.w	r4, #0
 80033ea:	0094      	lsls	r4, r2, #2
 80033ec:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80033f0:	008b      	lsls	r3, r1, #2
 80033f2:	461a      	mov	r2, r3
 80033f4:	4623      	mov	r3, r4
 80033f6:	4628      	mov	r0, r5
 80033f8:	4631      	mov	r1, r6
 80033fa:	f7fc ff39 	bl	8000270 <__aeabi_uldivmod>
 80033fe:	4603      	mov	r3, r0
 8003400:	460c      	mov	r4, r1
 8003402:	461a      	mov	r2, r3
 8003404:	4b9a      	ldr	r3, [pc, #616]	; (8003670 <UART_SetConfig+0x6f4>)
 8003406:	fba3 1302 	umull	r1, r3, r3, r2
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	2164      	movs	r1, #100	; 0x64
 800340e:	fb01 f303 	mul.w	r3, r1, r3
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	011b      	lsls	r3, r3, #4
 8003416:	3332      	adds	r3, #50	; 0x32
 8003418:	4a95      	ldr	r2, [pc, #596]	; (8003670 <UART_SetConfig+0x6f4>)
 800341a:	fba2 2303 	umull	r2, r3, r2, r3
 800341e:	095b      	lsrs	r3, r3, #5
 8003420:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003424:	4498      	add	r8, r3
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	469b      	mov	fp, r3
 800342a:	f04f 0c00 	mov.w	ip, #0
 800342e:	46d9      	mov	r9, fp
 8003430:	46e2      	mov	sl, ip
 8003432:	eb19 0309 	adds.w	r3, r9, r9
 8003436:	eb4a 040a 	adc.w	r4, sl, sl
 800343a:	4699      	mov	r9, r3
 800343c:	46a2      	mov	sl, r4
 800343e:	eb19 090b 	adds.w	r9, r9, fp
 8003442:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003446:	f04f 0100 	mov.w	r1, #0
 800344a:	f04f 0200 	mov.w	r2, #0
 800344e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003452:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003456:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800345a:	4689      	mov	r9, r1
 800345c:	4692      	mov	sl, r2
 800345e:	eb1b 0509 	adds.w	r5, fp, r9
 8003462:	eb4c 060a 	adc.w	r6, ip, sl
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	4619      	mov	r1, r3
 800346c:	f04f 0200 	mov.w	r2, #0
 8003470:	f04f 0300 	mov.w	r3, #0
 8003474:	f04f 0400 	mov.w	r4, #0
 8003478:	0094      	lsls	r4, r2, #2
 800347a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800347e:	008b      	lsls	r3, r1, #2
 8003480:	461a      	mov	r2, r3
 8003482:	4623      	mov	r3, r4
 8003484:	4628      	mov	r0, r5
 8003486:	4631      	mov	r1, r6
 8003488:	f7fc fef2 	bl	8000270 <__aeabi_uldivmod>
 800348c:	4603      	mov	r3, r0
 800348e:	460c      	mov	r4, r1
 8003490:	461a      	mov	r2, r3
 8003492:	4b77      	ldr	r3, [pc, #476]	; (8003670 <UART_SetConfig+0x6f4>)
 8003494:	fba3 1302 	umull	r1, r3, r3, r2
 8003498:	095b      	lsrs	r3, r3, #5
 800349a:	2164      	movs	r1, #100	; 0x64
 800349c:	fb01 f303 	mul.w	r3, r1, r3
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	011b      	lsls	r3, r3, #4
 80034a4:	3332      	adds	r3, #50	; 0x32
 80034a6:	4a72      	ldr	r2, [pc, #456]	; (8003670 <UART_SetConfig+0x6f4>)
 80034a8:	fba2 2303 	umull	r2, r3, r2, r3
 80034ac:	095b      	lsrs	r3, r3, #5
 80034ae:	f003 020f 	and.w	r2, r3, #15
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4442      	add	r2, r8
 80034b8:	609a      	str	r2, [r3, #8]
 80034ba:	e0d0      	b.n	800365e <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 80034bc:	f7ff fb60 	bl	8002b80 <HAL_RCC_GetPCLK1Freq>
 80034c0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	469a      	mov	sl, r3
 80034c6:	f04f 0b00 	mov.w	fp, #0
 80034ca:	46d0      	mov	r8, sl
 80034cc:	46d9      	mov	r9, fp
 80034ce:	eb18 0308 	adds.w	r3, r8, r8
 80034d2:	eb49 0409 	adc.w	r4, r9, r9
 80034d6:	4698      	mov	r8, r3
 80034d8:	46a1      	mov	r9, r4
 80034da:	eb18 080a 	adds.w	r8, r8, sl
 80034de:	eb49 090b 	adc.w	r9, r9, fp
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	f04f 0200 	mov.w	r2, #0
 80034ea:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80034ee:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80034f2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80034f6:	4688      	mov	r8, r1
 80034f8:	4691      	mov	r9, r2
 80034fa:	eb1a 0508 	adds.w	r5, sl, r8
 80034fe:	eb4b 0609 	adc.w	r6, fp, r9
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	4619      	mov	r1, r3
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	f04f 0400 	mov.w	r4, #0
 8003514:	0094      	lsls	r4, r2, #2
 8003516:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800351a:	008b      	lsls	r3, r1, #2
 800351c:	461a      	mov	r2, r3
 800351e:	4623      	mov	r3, r4
 8003520:	4628      	mov	r0, r5
 8003522:	4631      	mov	r1, r6
 8003524:	f7fc fea4 	bl	8000270 <__aeabi_uldivmod>
 8003528:	4603      	mov	r3, r0
 800352a:	460c      	mov	r4, r1
 800352c:	461a      	mov	r2, r3
 800352e:	4b50      	ldr	r3, [pc, #320]	; (8003670 <UART_SetConfig+0x6f4>)
 8003530:	fba3 2302 	umull	r2, r3, r3, r2
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	469b      	mov	fp, r3
 800353e:	f04f 0c00 	mov.w	ip, #0
 8003542:	46d9      	mov	r9, fp
 8003544:	46e2      	mov	sl, ip
 8003546:	eb19 0309 	adds.w	r3, r9, r9
 800354a:	eb4a 040a 	adc.w	r4, sl, sl
 800354e:	4699      	mov	r9, r3
 8003550:	46a2      	mov	sl, r4
 8003552:	eb19 090b 	adds.w	r9, r9, fp
 8003556:	eb4a 0a0c 	adc.w	sl, sl, ip
 800355a:	f04f 0100 	mov.w	r1, #0
 800355e:	f04f 0200 	mov.w	r2, #0
 8003562:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003566:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800356a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800356e:	4689      	mov	r9, r1
 8003570:	4692      	mov	sl, r2
 8003572:	eb1b 0509 	adds.w	r5, fp, r9
 8003576:	eb4c 060a 	adc.w	r6, ip, sl
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	4619      	mov	r1, r3
 8003580:	f04f 0200 	mov.w	r2, #0
 8003584:	f04f 0300 	mov.w	r3, #0
 8003588:	f04f 0400 	mov.w	r4, #0
 800358c:	0094      	lsls	r4, r2, #2
 800358e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003592:	008b      	lsls	r3, r1, #2
 8003594:	461a      	mov	r2, r3
 8003596:	4623      	mov	r3, r4
 8003598:	4628      	mov	r0, r5
 800359a:	4631      	mov	r1, r6
 800359c:	f7fc fe68 	bl	8000270 <__aeabi_uldivmod>
 80035a0:	4603      	mov	r3, r0
 80035a2:	460c      	mov	r4, r1
 80035a4:	461a      	mov	r2, r3
 80035a6:	4b32      	ldr	r3, [pc, #200]	; (8003670 <UART_SetConfig+0x6f4>)
 80035a8:	fba3 1302 	umull	r1, r3, r3, r2
 80035ac:	095b      	lsrs	r3, r3, #5
 80035ae:	2164      	movs	r1, #100	; 0x64
 80035b0:	fb01 f303 	mul.w	r3, r1, r3
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	011b      	lsls	r3, r3, #4
 80035b8:	3332      	adds	r3, #50	; 0x32
 80035ba:	4a2d      	ldr	r2, [pc, #180]	; (8003670 <UART_SetConfig+0x6f4>)
 80035bc:	fba2 2303 	umull	r2, r3, r2, r3
 80035c0:	095b      	lsrs	r3, r3, #5
 80035c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80035c6:	4498      	add	r8, r3
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	469b      	mov	fp, r3
 80035cc:	f04f 0c00 	mov.w	ip, #0
 80035d0:	46d9      	mov	r9, fp
 80035d2:	46e2      	mov	sl, ip
 80035d4:	eb19 0309 	adds.w	r3, r9, r9
 80035d8:	eb4a 040a 	adc.w	r4, sl, sl
 80035dc:	4699      	mov	r9, r3
 80035de:	46a2      	mov	sl, r4
 80035e0:	eb19 090b 	adds.w	r9, r9, fp
 80035e4:	eb4a 0a0c 	adc.w	sl, sl, ip
 80035e8:	f04f 0100 	mov.w	r1, #0
 80035ec:	f04f 0200 	mov.w	r2, #0
 80035f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80035f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80035fc:	4689      	mov	r9, r1
 80035fe:	4692      	mov	sl, r2
 8003600:	eb1b 0509 	adds.w	r5, fp, r9
 8003604:	eb4c 060a 	adc.w	r6, ip, sl
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	4619      	mov	r1, r3
 800360e:	f04f 0200 	mov.w	r2, #0
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	f04f 0400 	mov.w	r4, #0
 800361a:	0094      	lsls	r4, r2, #2
 800361c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003620:	008b      	lsls	r3, r1, #2
 8003622:	461a      	mov	r2, r3
 8003624:	4623      	mov	r3, r4
 8003626:	4628      	mov	r0, r5
 8003628:	4631      	mov	r1, r6
 800362a:	f7fc fe21 	bl	8000270 <__aeabi_uldivmod>
 800362e:	4603      	mov	r3, r0
 8003630:	460c      	mov	r4, r1
 8003632:	461a      	mov	r2, r3
 8003634:	4b0e      	ldr	r3, [pc, #56]	; (8003670 <UART_SetConfig+0x6f4>)
 8003636:	fba3 1302 	umull	r1, r3, r3, r2
 800363a:	095b      	lsrs	r3, r3, #5
 800363c:	2164      	movs	r1, #100	; 0x64
 800363e:	fb01 f303 	mul.w	r3, r1, r3
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	011b      	lsls	r3, r3, #4
 8003646:	3332      	adds	r3, #50	; 0x32
 8003648:	4a09      	ldr	r2, [pc, #36]	; (8003670 <UART_SetConfig+0x6f4>)
 800364a:	fba2 2303 	umull	r2, r3, r2, r3
 800364e:	095b      	lsrs	r3, r3, #5
 8003650:	f003 020f 	and.w	r2, r3, #15
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4442      	add	r2, r8
 800365a:	609a      	str	r2, [r3, #8]
}
 800365c:	e7ff      	b.n	800365e <UART_SetConfig+0x6e2>
 800365e:	bf00      	nop
 8003660:	3714      	adds	r7, #20
 8003662:	46bd      	mov	sp, r7
 8003664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003668:	40011000 	.word	0x40011000
 800366c:	40011400 	.word	0x40011400
 8003670:	51eb851f 	.word	0x51eb851f

08003674 <LED_SEQUENCE_init>:

#include "../Inc/Sequence_led.h"


//On initialise les paramètres
void LED_SEQUENCE_init(sequence_led_t * seq_led, GPIO_TypeDef* gpio, uint16_t gpio_pin, int32_t init_seq, uint32_t periode, int8_t length_sequence, bool_e output_logic){
 8003674:	b480      	push	{r7}
 8003676:	b085      	sub	sp, #20
 8003678:	af00      	add	r7, sp, #0
 800367a:	60f8      	str	r0, [r7, #12]
 800367c:	60b9      	str	r1, [r7, #8]
 800367e:	603b      	str	r3, [r7, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	80fb      	strh	r3, [r7, #6]
	//Init des varaibles
	seq_led->compteur = 0;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	741a      	strb	r2, [r3, #16]
	seq_led->gpio = gpio ;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	601a      	str	r2, [r3, #0]
	seq_led->gpio_pin = gpio_pin ;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	88fa      	ldrh	r2, [r7, #6]
 8003694:	809a      	strh	r2, [r3, #4]
	seq_led->length_sequence = length_sequence ;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	7f3a      	ldrb	r2, [r7, #28]
 800369a:	745a      	strb	r2, [r3, #17]
	seq_led->periode = periode ;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	69ba      	ldr	r2, [r7, #24]
 80036a0:	609a      	str	r2, [r3, #8]
	seq_led->output_logic = output_logic ;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	6a3a      	ldr	r2, [r7, #32]
 80036a6:	619a      	str	r2, [r3, #24]
	if(seq_led->output_logic == 1)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d102      	bne.n	80036b6 <LED_SEQUENCE_init+0x42>
		//Si logique négative on inverse la séquence
		init_seq = ~init_seq ;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	43db      	mvns	r3, r3
 80036b4:	603b      	str	r3, [r7, #0]
	seq_led->sequence = init_seq ;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	683a      	ldr	r2, [r7, #0]
 80036ba:	60da      	str	r2, [r3, #12]
	seq_led->previous_time = 0 ;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	615a      	str	r2, [r3, #20]



}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
	...

080036d0 <LED_SEQUENCE_play>:
	seq_led->compteur = 0 ;
	seq_led->sequence = seq ;
}

//On change la sortie de la led en fonction de la séquence active
void LED_SEQUENCE_play(sequence_led_t * seq_led, uint32_t current_time_us){
 80036d0:	b480      	push	{r7}
 80036d2:	b085      	sub	sp, #20
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
 80036d8:	6039      	str	r1, [r7, #0]
	if(current_time_us / 1000 > seq_led->previous_time + seq_led->periode){
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	4a25      	ldr	r2, [pc, #148]	; (8003774 <LED_SEQUENCE_play+0xa4>)
 80036de:	fba2 2303 	umull	r2, r3, r2, r3
 80036e2:	099a      	lsrs	r2, r3, #6
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6959      	ldr	r1, [r3, #20]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	440b      	add	r3, r1
 80036ee:	429a      	cmp	r2, r3
 80036f0:	d93a      	bls.n	8003768 <LED_SEQUENCE_play+0x98>
		seq_led->previous_time += seq_led->periode ;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	695a      	ldr	r2, [r3, #20]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	689b      	ldr	r3, [r3, #8]
 80036fa:	441a      	add	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	615a      	str	r2, [r3, #20]
		//on récupère le niveau logique de la sortie
		bool_e output = ((seq_led->sequence) >> ((seq_led->length_sequence - seq_led->compteur) - 1)) & 1 ;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68da      	ldr	r2, [r3, #12]
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800370a:	4619      	mov	r1, r3
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003712:	1acb      	subs	r3, r1, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	fa42 f303 	asr.w	r3, r2, r3
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	60fb      	str	r3, [r7, #12]
		//On update la sortie
		if(output)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d005      	beq.n	8003732 <LED_SEQUENCE_play+0x62>
			seq_led->gpio->BSRR = seq_led->gpio_pin ;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	889a      	ldrh	r2, [r3, #4]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	619a      	str	r2, [r3, #24]
 8003730:	e006      	b.n	8003740 <LED_SEQUENCE_play+0x70>
		else
			seq_led->gpio->BSRR = (uint32_t)(seq_led->gpio_pin) << 16U ;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	889b      	ldrh	r3, [r3, #4]
 8003736:	461a      	mov	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	0412      	lsls	r2, r2, #16
 800373e:	619a      	str	r2, [r3, #24]
		//on update le compteur
		seq_led->compteur ++ ;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f993 3010 	ldrsb.w	r3, [r3, #16]
 8003746:	b2db      	uxtb	r3, r3
 8003748:	3301      	adds	r3, #1
 800374a:	b2db      	uxtb	r3, r3
 800374c:	b25a      	sxtb	r2, r3
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	741a      	strb	r2, [r3, #16]
		//TODO : verif l'init si length > 0
		if(seq_led->compteur == seq_led->length_sequence)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f993 2010 	ldrsb.w	r2, [r3, #16]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f993 3011 	ldrsb.w	r3, [r3, #17]
 800375e:	429a      	cmp	r2, r3
 8003760:	d102      	bne.n	8003768 <LED_SEQUENCE_play+0x98>
			seq_led->compteur = 0 ;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	741a      	strb	r2, [r3, #16]
	}
}
 8003768:	bf00      	nop
 800376a:	3714      	adds	r7, #20
 800376c:	46bd      	mov	sp, r7
 800376e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003772:	4770      	bx	lr
 8003774:	10624dd3 	.word	0x10624dd3

08003778 <__errno>:
 8003778:	4b01      	ldr	r3, [pc, #4]	; (8003780 <__errno+0x8>)
 800377a:	6818      	ldr	r0, [r3, #0]
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	2000031c 	.word	0x2000031c

08003784 <__libc_init_array>:
 8003784:	b570      	push	{r4, r5, r6, lr}
 8003786:	4e0d      	ldr	r6, [pc, #52]	; (80037bc <__libc_init_array+0x38>)
 8003788:	4c0d      	ldr	r4, [pc, #52]	; (80037c0 <__libc_init_array+0x3c>)
 800378a:	1ba4      	subs	r4, r4, r6
 800378c:	10a4      	asrs	r4, r4, #2
 800378e:	2500      	movs	r5, #0
 8003790:	42a5      	cmp	r5, r4
 8003792:	d109      	bne.n	80037a8 <__libc_init_array+0x24>
 8003794:	4e0b      	ldr	r6, [pc, #44]	; (80037c4 <__libc_init_array+0x40>)
 8003796:	4c0c      	ldr	r4, [pc, #48]	; (80037c8 <__libc_init_array+0x44>)
 8003798:	f001 f838 	bl	800480c <_init>
 800379c:	1ba4      	subs	r4, r4, r6
 800379e:	10a4      	asrs	r4, r4, #2
 80037a0:	2500      	movs	r5, #0
 80037a2:	42a5      	cmp	r5, r4
 80037a4:	d105      	bne.n	80037b2 <__libc_init_array+0x2e>
 80037a6:	bd70      	pop	{r4, r5, r6, pc}
 80037a8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037ac:	4798      	blx	r3
 80037ae:	3501      	adds	r5, #1
 80037b0:	e7ee      	b.n	8003790 <__libc_init_array+0xc>
 80037b2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80037b6:	4798      	blx	r3
 80037b8:	3501      	adds	r5, #1
 80037ba:	e7f2      	b.n	80037a2 <__libc_init_array+0x1e>
 80037bc:	080048f4 	.word	0x080048f4
 80037c0:	080048f4 	.word	0x080048f4
 80037c4:	080048f4 	.word	0x080048f4
 80037c8:	080048f8 	.word	0x080048f8

080037cc <memmove>:
 80037cc:	4288      	cmp	r0, r1
 80037ce:	b510      	push	{r4, lr}
 80037d0:	eb01 0302 	add.w	r3, r1, r2
 80037d4:	d807      	bhi.n	80037e6 <memmove+0x1a>
 80037d6:	1e42      	subs	r2, r0, #1
 80037d8:	4299      	cmp	r1, r3
 80037da:	d00a      	beq.n	80037f2 <memmove+0x26>
 80037dc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80037e0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80037e4:	e7f8      	b.n	80037d8 <memmove+0xc>
 80037e6:	4283      	cmp	r3, r0
 80037e8:	d9f5      	bls.n	80037d6 <memmove+0xa>
 80037ea:	1881      	adds	r1, r0, r2
 80037ec:	1ad2      	subs	r2, r2, r3
 80037ee:	42d3      	cmn	r3, r2
 80037f0:	d100      	bne.n	80037f4 <memmove+0x28>
 80037f2:	bd10      	pop	{r4, pc}
 80037f4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80037f8:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80037fc:	e7f7      	b.n	80037ee <memmove+0x22>

080037fe <memset>:
 80037fe:	4402      	add	r2, r0
 8003800:	4603      	mov	r3, r0
 8003802:	4293      	cmp	r3, r2
 8003804:	d100      	bne.n	8003808 <memset+0xa>
 8003806:	4770      	bx	lr
 8003808:	f803 1b01 	strb.w	r1, [r3], #1
 800380c:	e7f9      	b.n	8003802 <memset+0x4>
	...

08003810 <iprintf>:
 8003810:	b40f      	push	{r0, r1, r2, r3}
 8003812:	4b0a      	ldr	r3, [pc, #40]	; (800383c <iprintf+0x2c>)
 8003814:	b513      	push	{r0, r1, r4, lr}
 8003816:	681c      	ldr	r4, [r3, #0]
 8003818:	b124      	cbz	r4, 8003824 <iprintf+0x14>
 800381a:	69a3      	ldr	r3, [r4, #24]
 800381c:	b913      	cbnz	r3, 8003824 <iprintf+0x14>
 800381e:	4620      	mov	r0, r4
 8003820:	f000 fad0 	bl	8003dc4 <__sinit>
 8003824:	ab05      	add	r3, sp, #20
 8003826:	9a04      	ldr	r2, [sp, #16]
 8003828:	68a1      	ldr	r1, [r4, #8]
 800382a:	9301      	str	r3, [sp, #4]
 800382c:	4620      	mov	r0, r4
 800382e:	f000 fc91 	bl	8004154 <_vfiprintf_r>
 8003832:	b002      	add	sp, #8
 8003834:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003838:	b004      	add	sp, #16
 800383a:	4770      	bx	lr
 800383c:	2000031c 	.word	0x2000031c

08003840 <_puts_r>:
 8003840:	b570      	push	{r4, r5, r6, lr}
 8003842:	460e      	mov	r6, r1
 8003844:	4605      	mov	r5, r0
 8003846:	b118      	cbz	r0, 8003850 <_puts_r+0x10>
 8003848:	6983      	ldr	r3, [r0, #24]
 800384a:	b90b      	cbnz	r3, 8003850 <_puts_r+0x10>
 800384c:	f000 faba 	bl	8003dc4 <__sinit>
 8003850:	69ab      	ldr	r3, [r5, #24]
 8003852:	68ac      	ldr	r4, [r5, #8]
 8003854:	b913      	cbnz	r3, 800385c <_puts_r+0x1c>
 8003856:	4628      	mov	r0, r5
 8003858:	f000 fab4 	bl	8003dc4 <__sinit>
 800385c:	4b23      	ldr	r3, [pc, #140]	; (80038ec <_puts_r+0xac>)
 800385e:	429c      	cmp	r4, r3
 8003860:	d117      	bne.n	8003892 <_puts_r+0x52>
 8003862:	686c      	ldr	r4, [r5, #4]
 8003864:	89a3      	ldrh	r3, [r4, #12]
 8003866:	071b      	lsls	r3, r3, #28
 8003868:	d51d      	bpl.n	80038a6 <_puts_r+0x66>
 800386a:	6923      	ldr	r3, [r4, #16]
 800386c:	b1db      	cbz	r3, 80038a6 <_puts_r+0x66>
 800386e:	3e01      	subs	r6, #1
 8003870:	68a3      	ldr	r3, [r4, #8]
 8003872:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003876:	3b01      	subs	r3, #1
 8003878:	60a3      	str	r3, [r4, #8]
 800387a:	b9e9      	cbnz	r1, 80038b8 <_puts_r+0x78>
 800387c:	2b00      	cmp	r3, #0
 800387e:	da2e      	bge.n	80038de <_puts_r+0x9e>
 8003880:	4622      	mov	r2, r4
 8003882:	210a      	movs	r1, #10
 8003884:	4628      	mov	r0, r5
 8003886:	f000 f8ed 	bl	8003a64 <__swbuf_r>
 800388a:	3001      	adds	r0, #1
 800388c:	d011      	beq.n	80038b2 <_puts_r+0x72>
 800388e:	200a      	movs	r0, #10
 8003890:	e011      	b.n	80038b6 <_puts_r+0x76>
 8003892:	4b17      	ldr	r3, [pc, #92]	; (80038f0 <_puts_r+0xb0>)
 8003894:	429c      	cmp	r4, r3
 8003896:	d101      	bne.n	800389c <_puts_r+0x5c>
 8003898:	68ac      	ldr	r4, [r5, #8]
 800389a:	e7e3      	b.n	8003864 <_puts_r+0x24>
 800389c:	4b15      	ldr	r3, [pc, #84]	; (80038f4 <_puts_r+0xb4>)
 800389e:	429c      	cmp	r4, r3
 80038a0:	bf08      	it	eq
 80038a2:	68ec      	ldreq	r4, [r5, #12]
 80038a4:	e7de      	b.n	8003864 <_puts_r+0x24>
 80038a6:	4621      	mov	r1, r4
 80038a8:	4628      	mov	r0, r5
 80038aa:	f000 f92d 	bl	8003b08 <__swsetup_r>
 80038ae:	2800      	cmp	r0, #0
 80038b0:	d0dd      	beq.n	800386e <_puts_r+0x2e>
 80038b2:	f04f 30ff 	mov.w	r0, #4294967295
 80038b6:	bd70      	pop	{r4, r5, r6, pc}
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	da04      	bge.n	80038c6 <_puts_r+0x86>
 80038bc:	69a2      	ldr	r2, [r4, #24]
 80038be:	429a      	cmp	r2, r3
 80038c0:	dc06      	bgt.n	80038d0 <_puts_r+0x90>
 80038c2:	290a      	cmp	r1, #10
 80038c4:	d004      	beq.n	80038d0 <_puts_r+0x90>
 80038c6:	6823      	ldr	r3, [r4, #0]
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	6022      	str	r2, [r4, #0]
 80038cc:	7019      	strb	r1, [r3, #0]
 80038ce:	e7cf      	b.n	8003870 <_puts_r+0x30>
 80038d0:	4622      	mov	r2, r4
 80038d2:	4628      	mov	r0, r5
 80038d4:	f000 f8c6 	bl	8003a64 <__swbuf_r>
 80038d8:	3001      	adds	r0, #1
 80038da:	d1c9      	bne.n	8003870 <_puts_r+0x30>
 80038dc:	e7e9      	b.n	80038b2 <_puts_r+0x72>
 80038de:	6823      	ldr	r3, [r4, #0]
 80038e0:	200a      	movs	r0, #10
 80038e2:	1c5a      	adds	r2, r3, #1
 80038e4:	6022      	str	r2, [r4, #0]
 80038e6:	7018      	strb	r0, [r3, #0]
 80038e8:	e7e5      	b.n	80038b6 <_puts_r+0x76>
 80038ea:	bf00      	nop
 80038ec:	08004878 	.word	0x08004878
 80038f0:	08004898 	.word	0x08004898
 80038f4:	08004858 	.word	0x08004858

080038f8 <puts>:
 80038f8:	4b02      	ldr	r3, [pc, #8]	; (8003904 <puts+0xc>)
 80038fa:	4601      	mov	r1, r0
 80038fc:	6818      	ldr	r0, [r3, #0]
 80038fe:	f7ff bf9f 	b.w	8003840 <_puts_r>
 8003902:	bf00      	nop
 8003904:	2000031c 	.word	0x2000031c

08003908 <setvbuf>:
 8003908:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800390c:	461d      	mov	r5, r3
 800390e:	4b51      	ldr	r3, [pc, #324]	; (8003a54 <setvbuf+0x14c>)
 8003910:	681e      	ldr	r6, [r3, #0]
 8003912:	4604      	mov	r4, r0
 8003914:	460f      	mov	r7, r1
 8003916:	4690      	mov	r8, r2
 8003918:	b126      	cbz	r6, 8003924 <setvbuf+0x1c>
 800391a:	69b3      	ldr	r3, [r6, #24]
 800391c:	b913      	cbnz	r3, 8003924 <setvbuf+0x1c>
 800391e:	4630      	mov	r0, r6
 8003920:	f000 fa50 	bl	8003dc4 <__sinit>
 8003924:	4b4c      	ldr	r3, [pc, #304]	; (8003a58 <setvbuf+0x150>)
 8003926:	429c      	cmp	r4, r3
 8003928:	d152      	bne.n	80039d0 <setvbuf+0xc8>
 800392a:	6874      	ldr	r4, [r6, #4]
 800392c:	f1b8 0f02 	cmp.w	r8, #2
 8003930:	d006      	beq.n	8003940 <setvbuf+0x38>
 8003932:	f1b8 0f01 	cmp.w	r8, #1
 8003936:	f200 8089 	bhi.w	8003a4c <setvbuf+0x144>
 800393a:	2d00      	cmp	r5, #0
 800393c:	f2c0 8086 	blt.w	8003a4c <setvbuf+0x144>
 8003940:	4621      	mov	r1, r4
 8003942:	4630      	mov	r0, r6
 8003944:	f000 f9d4 	bl	8003cf0 <_fflush_r>
 8003948:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800394a:	b141      	cbz	r1, 800395e <setvbuf+0x56>
 800394c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003950:	4299      	cmp	r1, r3
 8003952:	d002      	beq.n	800395a <setvbuf+0x52>
 8003954:	4630      	mov	r0, r6
 8003956:	f000 fb2b 	bl	8003fb0 <_free_r>
 800395a:	2300      	movs	r3, #0
 800395c:	6363      	str	r3, [r4, #52]	; 0x34
 800395e:	2300      	movs	r3, #0
 8003960:	61a3      	str	r3, [r4, #24]
 8003962:	6063      	str	r3, [r4, #4]
 8003964:	89a3      	ldrh	r3, [r4, #12]
 8003966:	061b      	lsls	r3, r3, #24
 8003968:	d503      	bpl.n	8003972 <setvbuf+0x6a>
 800396a:	6921      	ldr	r1, [r4, #16]
 800396c:	4630      	mov	r0, r6
 800396e:	f000 fb1f 	bl	8003fb0 <_free_r>
 8003972:	89a3      	ldrh	r3, [r4, #12]
 8003974:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8003978:	f023 0303 	bic.w	r3, r3, #3
 800397c:	f1b8 0f02 	cmp.w	r8, #2
 8003980:	81a3      	strh	r3, [r4, #12]
 8003982:	d05d      	beq.n	8003a40 <setvbuf+0x138>
 8003984:	ab01      	add	r3, sp, #4
 8003986:	466a      	mov	r2, sp
 8003988:	4621      	mov	r1, r4
 800398a:	4630      	mov	r0, r6
 800398c:	f000 faa4 	bl	8003ed8 <__swhatbuf_r>
 8003990:	89a3      	ldrh	r3, [r4, #12]
 8003992:	4318      	orrs	r0, r3
 8003994:	81a0      	strh	r0, [r4, #12]
 8003996:	bb2d      	cbnz	r5, 80039e4 <setvbuf+0xdc>
 8003998:	9d00      	ldr	r5, [sp, #0]
 800399a:	4628      	mov	r0, r5
 800399c:	f000 fb00 	bl	8003fa0 <malloc>
 80039a0:	4607      	mov	r7, r0
 80039a2:	2800      	cmp	r0, #0
 80039a4:	d14e      	bne.n	8003a44 <setvbuf+0x13c>
 80039a6:	f8dd 9000 	ldr.w	r9, [sp]
 80039aa:	45a9      	cmp	r9, r5
 80039ac:	d13c      	bne.n	8003a28 <setvbuf+0x120>
 80039ae:	f04f 30ff 	mov.w	r0, #4294967295
 80039b2:	89a3      	ldrh	r3, [r4, #12]
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	81a3      	strh	r3, [r4, #12]
 80039ba:	2300      	movs	r3, #0
 80039bc:	60a3      	str	r3, [r4, #8]
 80039be:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80039c2:	6023      	str	r3, [r4, #0]
 80039c4:	6123      	str	r3, [r4, #16]
 80039c6:	2301      	movs	r3, #1
 80039c8:	6163      	str	r3, [r4, #20]
 80039ca:	b003      	add	sp, #12
 80039cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80039d0:	4b22      	ldr	r3, [pc, #136]	; (8003a5c <setvbuf+0x154>)
 80039d2:	429c      	cmp	r4, r3
 80039d4:	d101      	bne.n	80039da <setvbuf+0xd2>
 80039d6:	68b4      	ldr	r4, [r6, #8]
 80039d8:	e7a8      	b.n	800392c <setvbuf+0x24>
 80039da:	4b21      	ldr	r3, [pc, #132]	; (8003a60 <setvbuf+0x158>)
 80039dc:	429c      	cmp	r4, r3
 80039de:	bf08      	it	eq
 80039e0:	68f4      	ldreq	r4, [r6, #12]
 80039e2:	e7a3      	b.n	800392c <setvbuf+0x24>
 80039e4:	2f00      	cmp	r7, #0
 80039e6:	d0d8      	beq.n	800399a <setvbuf+0x92>
 80039e8:	69b3      	ldr	r3, [r6, #24]
 80039ea:	b913      	cbnz	r3, 80039f2 <setvbuf+0xea>
 80039ec:	4630      	mov	r0, r6
 80039ee:	f000 f9e9 	bl	8003dc4 <__sinit>
 80039f2:	f1b8 0f01 	cmp.w	r8, #1
 80039f6:	bf08      	it	eq
 80039f8:	89a3      	ldrheq	r3, [r4, #12]
 80039fa:	6027      	str	r7, [r4, #0]
 80039fc:	bf04      	itt	eq
 80039fe:	f043 0301 	orreq.w	r3, r3, #1
 8003a02:	81a3      	strheq	r3, [r4, #12]
 8003a04:	89a3      	ldrh	r3, [r4, #12]
 8003a06:	f013 0008 	ands.w	r0, r3, #8
 8003a0a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8003a0e:	d01b      	beq.n	8003a48 <setvbuf+0x140>
 8003a10:	f013 0001 	ands.w	r0, r3, #1
 8003a14:	bf18      	it	ne
 8003a16:	426d      	negne	r5, r5
 8003a18:	f04f 0300 	mov.w	r3, #0
 8003a1c:	bf1d      	ittte	ne
 8003a1e:	60a3      	strne	r3, [r4, #8]
 8003a20:	61a5      	strne	r5, [r4, #24]
 8003a22:	4618      	movne	r0, r3
 8003a24:	60a5      	streq	r5, [r4, #8]
 8003a26:	e7d0      	b.n	80039ca <setvbuf+0xc2>
 8003a28:	4648      	mov	r0, r9
 8003a2a:	f000 fab9 	bl	8003fa0 <malloc>
 8003a2e:	4607      	mov	r7, r0
 8003a30:	2800      	cmp	r0, #0
 8003a32:	d0bc      	beq.n	80039ae <setvbuf+0xa6>
 8003a34:	89a3      	ldrh	r3, [r4, #12]
 8003a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a3a:	81a3      	strh	r3, [r4, #12]
 8003a3c:	464d      	mov	r5, r9
 8003a3e:	e7d3      	b.n	80039e8 <setvbuf+0xe0>
 8003a40:	2000      	movs	r0, #0
 8003a42:	e7b6      	b.n	80039b2 <setvbuf+0xaa>
 8003a44:	46a9      	mov	r9, r5
 8003a46:	e7f5      	b.n	8003a34 <setvbuf+0x12c>
 8003a48:	60a0      	str	r0, [r4, #8]
 8003a4a:	e7be      	b.n	80039ca <setvbuf+0xc2>
 8003a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8003a50:	e7bb      	b.n	80039ca <setvbuf+0xc2>
 8003a52:	bf00      	nop
 8003a54:	2000031c 	.word	0x2000031c
 8003a58:	08004878 	.word	0x08004878
 8003a5c:	08004898 	.word	0x08004898
 8003a60:	08004858 	.word	0x08004858

08003a64 <__swbuf_r>:
 8003a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a66:	460e      	mov	r6, r1
 8003a68:	4614      	mov	r4, r2
 8003a6a:	4605      	mov	r5, r0
 8003a6c:	b118      	cbz	r0, 8003a76 <__swbuf_r+0x12>
 8003a6e:	6983      	ldr	r3, [r0, #24]
 8003a70:	b90b      	cbnz	r3, 8003a76 <__swbuf_r+0x12>
 8003a72:	f000 f9a7 	bl	8003dc4 <__sinit>
 8003a76:	4b21      	ldr	r3, [pc, #132]	; (8003afc <__swbuf_r+0x98>)
 8003a78:	429c      	cmp	r4, r3
 8003a7a:	d12a      	bne.n	8003ad2 <__swbuf_r+0x6e>
 8003a7c:	686c      	ldr	r4, [r5, #4]
 8003a7e:	69a3      	ldr	r3, [r4, #24]
 8003a80:	60a3      	str	r3, [r4, #8]
 8003a82:	89a3      	ldrh	r3, [r4, #12]
 8003a84:	071a      	lsls	r2, r3, #28
 8003a86:	d52e      	bpl.n	8003ae6 <__swbuf_r+0x82>
 8003a88:	6923      	ldr	r3, [r4, #16]
 8003a8a:	b363      	cbz	r3, 8003ae6 <__swbuf_r+0x82>
 8003a8c:	6923      	ldr	r3, [r4, #16]
 8003a8e:	6820      	ldr	r0, [r4, #0]
 8003a90:	1ac0      	subs	r0, r0, r3
 8003a92:	6963      	ldr	r3, [r4, #20]
 8003a94:	b2f6      	uxtb	r6, r6
 8003a96:	4283      	cmp	r3, r0
 8003a98:	4637      	mov	r7, r6
 8003a9a:	dc04      	bgt.n	8003aa6 <__swbuf_r+0x42>
 8003a9c:	4621      	mov	r1, r4
 8003a9e:	4628      	mov	r0, r5
 8003aa0:	f000 f926 	bl	8003cf0 <_fflush_r>
 8003aa4:	bb28      	cbnz	r0, 8003af2 <__swbuf_r+0x8e>
 8003aa6:	68a3      	ldr	r3, [r4, #8]
 8003aa8:	3b01      	subs	r3, #1
 8003aaa:	60a3      	str	r3, [r4, #8]
 8003aac:	6823      	ldr	r3, [r4, #0]
 8003aae:	1c5a      	adds	r2, r3, #1
 8003ab0:	6022      	str	r2, [r4, #0]
 8003ab2:	701e      	strb	r6, [r3, #0]
 8003ab4:	6963      	ldr	r3, [r4, #20]
 8003ab6:	3001      	adds	r0, #1
 8003ab8:	4283      	cmp	r3, r0
 8003aba:	d004      	beq.n	8003ac6 <__swbuf_r+0x62>
 8003abc:	89a3      	ldrh	r3, [r4, #12]
 8003abe:	07db      	lsls	r3, r3, #31
 8003ac0:	d519      	bpl.n	8003af6 <__swbuf_r+0x92>
 8003ac2:	2e0a      	cmp	r6, #10
 8003ac4:	d117      	bne.n	8003af6 <__swbuf_r+0x92>
 8003ac6:	4621      	mov	r1, r4
 8003ac8:	4628      	mov	r0, r5
 8003aca:	f000 f911 	bl	8003cf0 <_fflush_r>
 8003ace:	b190      	cbz	r0, 8003af6 <__swbuf_r+0x92>
 8003ad0:	e00f      	b.n	8003af2 <__swbuf_r+0x8e>
 8003ad2:	4b0b      	ldr	r3, [pc, #44]	; (8003b00 <__swbuf_r+0x9c>)
 8003ad4:	429c      	cmp	r4, r3
 8003ad6:	d101      	bne.n	8003adc <__swbuf_r+0x78>
 8003ad8:	68ac      	ldr	r4, [r5, #8]
 8003ada:	e7d0      	b.n	8003a7e <__swbuf_r+0x1a>
 8003adc:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <__swbuf_r+0xa0>)
 8003ade:	429c      	cmp	r4, r3
 8003ae0:	bf08      	it	eq
 8003ae2:	68ec      	ldreq	r4, [r5, #12]
 8003ae4:	e7cb      	b.n	8003a7e <__swbuf_r+0x1a>
 8003ae6:	4621      	mov	r1, r4
 8003ae8:	4628      	mov	r0, r5
 8003aea:	f000 f80d 	bl	8003b08 <__swsetup_r>
 8003aee:	2800      	cmp	r0, #0
 8003af0:	d0cc      	beq.n	8003a8c <__swbuf_r+0x28>
 8003af2:	f04f 37ff 	mov.w	r7, #4294967295
 8003af6:	4638      	mov	r0, r7
 8003af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003afa:	bf00      	nop
 8003afc:	08004878 	.word	0x08004878
 8003b00:	08004898 	.word	0x08004898
 8003b04:	08004858 	.word	0x08004858

08003b08 <__swsetup_r>:
 8003b08:	4b32      	ldr	r3, [pc, #200]	; (8003bd4 <__swsetup_r+0xcc>)
 8003b0a:	b570      	push	{r4, r5, r6, lr}
 8003b0c:	681d      	ldr	r5, [r3, #0]
 8003b0e:	4606      	mov	r6, r0
 8003b10:	460c      	mov	r4, r1
 8003b12:	b125      	cbz	r5, 8003b1e <__swsetup_r+0x16>
 8003b14:	69ab      	ldr	r3, [r5, #24]
 8003b16:	b913      	cbnz	r3, 8003b1e <__swsetup_r+0x16>
 8003b18:	4628      	mov	r0, r5
 8003b1a:	f000 f953 	bl	8003dc4 <__sinit>
 8003b1e:	4b2e      	ldr	r3, [pc, #184]	; (8003bd8 <__swsetup_r+0xd0>)
 8003b20:	429c      	cmp	r4, r3
 8003b22:	d10f      	bne.n	8003b44 <__swsetup_r+0x3c>
 8003b24:	686c      	ldr	r4, [r5, #4]
 8003b26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	0715      	lsls	r5, r2, #28
 8003b2e:	d42c      	bmi.n	8003b8a <__swsetup_r+0x82>
 8003b30:	06d0      	lsls	r0, r2, #27
 8003b32:	d411      	bmi.n	8003b58 <__swsetup_r+0x50>
 8003b34:	2209      	movs	r2, #9
 8003b36:	6032      	str	r2, [r6, #0]
 8003b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b3c:	81a3      	strh	r3, [r4, #12]
 8003b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8003b42:	e03e      	b.n	8003bc2 <__swsetup_r+0xba>
 8003b44:	4b25      	ldr	r3, [pc, #148]	; (8003bdc <__swsetup_r+0xd4>)
 8003b46:	429c      	cmp	r4, r3
 8003b48:	d101      	bne.n	8003b4e <__swsetup_r+0x46>
 8003b4a:	68ac      	ldr	r4, [r5, #8]
 8003b4c:	e7eb      	b.n	8003b26 <__swsetup_r+0x1e>
 8003b4e:	4b24      	ldr	r3, [pc, #144]	; (8003be0 <__swsetup_r+0xd8>)
 8003b50:	429c      	cmp	r4, r3
 8003b52:	bf08      	it	eq
 8003b54:	68ec      	ldreq	r4, [r5, #12]
 8003b56:	e7e6      	b.n	8003b26 <__swsetup_r+0x1e>
 8003b58:	0751      	lsls	r1, r2, #29
 8003b5a:	d512      	bpl.n	8003b82 <__swsetup_r+0x7a>
 8003b5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003b5e:	b141      	cbz	r1, 8003b72 <__swsetup_r+0x6a>
 8003b60:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003b64:	4299      	cmp	r1, r3
 8003b66:	d002      	beq.n	8003b6e <__swsetup_r+0x66>
 8003b68:	4630      	mov	r0, r6
 8003b6a:	f000 fa21 	bl	8003fb0 <_free_r>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	6363      	str	r3, [r4, #52]	; 0x34
 8003b72:	89a3      	ldrh	r3, [r4, #12]
 8003b74:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003b78:	81a3      	strh	r3, [r4, #12]
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	6063      	str	r3, [r4, #4]
 8003b7e:	6923      	ldr	r3, [r4, #16]
 8003b80:	6023      	str	r3, [r4, #0]
 8003b82:	89a3      	ldrh	r3, [r4, #12]
 8003b84:	f043 0308 	orr.w	r3, r3, #8
 8003b88:	81a3      	strh	r3, [r4, #12]
 8003b8a:	6923      	ldr	r3, [r4, #16]
 8003b8c:	b94b      	cbnz	r3, 8003ba2 <__swsetup_r+0x9a>
 8003b8e:	89a3      	ldrh	r3, [r4, #12]
 8003b90:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b98:	d003      	beq.n	8003ba2 <__swsetup_r+0x9a>
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	f000 f9bf 	bl	8003f20 <__smakebuf_r>
 8003ba2:	89a2      	ldrh	r2, [r4, #12]
 8003ba4:	f012 0301 	ands.w	r3, r2, #1
 8003ba8:	d00c      	beq.n	8003bc4 <__swsetup_r+0xbc>
 8003baa:	2300      	movs	r3, #0
 8003bac:	60a3      	str	r3, [r4, #8]
 8003bae:	6963      	ldr	r3, [r4, #20]
 8003bb0:	425b      	negs	r3, r3
 8003bb2:	61a3      	str	r3, [r4, #24]
 8003bb4:	6923      	ldr	r3, [r4, #16]
 8003bb6:	b953      	cbnz	r3, 8003bce <__swsetup_r+0xc6>
 8003bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003bbc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003bc0:	d1ba      	bne.n	8003b38 <__swsetup_r+0x30>
 8003bc2:	bd70      	pop	{r4, r5, r6, pc}
 8003bc4:	0792      	lsls	r2, r2, #30
 8003bc6:	bf58      	it	pl
 8003bc8:	6963      	ldrpl	r3, [r4, #20]
 8003bca:	60a3      	str	r3, [r4, #8]
 8003bcc:	e7f2      	b.n	8003bb4 <__swsetup_r+0xac>
 8003bce:	2000      	movs	r0, #0
 8003bd0:	e7f7      	b.n	8003bc2 <__swsetup_r+0xba>
 8003bd2:	bf00      	nop
 8003bd4:	2000031c 	.word	0x2000031c
 8003bd8:	08004878 	.word	0x08004878
 8003bdc:	08004898 	.word	0x08004898
 8003be0:	08004858 	.word	0x08004858

08003be4 <__sflush_r>:
 8003be4:	898a      	ldrh	r2, [r1, #12]
 8003be6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bea:	4605      	mov	r5, r0
 8003bec:	0710      	lsls	r0, r2, #28
 8003bee:	460c      	mov	r4, r1
 8003bf0:	d458      	bmi.n	8003ca4 <__sflush_r+0xc0>
 8003bf2:	684b      	ldr	r3, [r1, #4]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	dc05      	bgt.n	8003c04 <__sflush_r+0x20>
 8003bf8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	dc02      	bgt.n	8003c04 <__sflush_r+0x20>
 8003bfe:	2000      	movs	r0, #0
 8003c00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c06:	2e00      	cmp	r6, #0
 8003c08:	d0f9      	beq.n	8003bfe <__sflush_r+0x1a>
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c10:	682f      	ldr	r7, [r5, #0]
 8003c12:	6a21      	ldr	r1, [r4, #32]
 8003c14:	602b      	str	r3, [r5, #0]
 8003c16:	d032      	beq.n	8003c7e <__sflush_r+0x9a>
 8003c18:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c1a:	89a3      	ldrh	r3, [r4, #12]
 8003c1c:	075a      	lsls	r2, r3, #29
 8003c1e:	d505      	bpl.n	8003c2c <__sflush_r+0x48>
 8003c20:	6863      	ldr	r3, [r4, #4]
 8003c22:	1ac0      	subs	r0, r0, r3
 8003c24:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c26:	b10b      	cbz	r3, 8003c2c <__sflush_r+0x48>
 8003c28:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c2a:	1ac0      	subs	r0, r0, r3
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	4602      	mov	r2, r0
 8003c30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c32:	6a21      	ldr	r1, [r4, #32]
 8003c34:	4628      	mov	r0, r5
 8003c36:	47b0      	blx	r6
 8003c38:	1c43      	adds	r3, r0, #1
 8003c3a:	89a3      	ldrh	r3, [r4, #12]
 8003c3c:	d106      	bne.n	8003c4c <__sflush_r+0x68>
 8003c3e:	6829      	ldr	r1, [r5, #0]
 8003c40:	291d      	cmp	r1, #29
 8003c42:	d848      	bhi.n	8003cd6 <__sflush_r+0xf2>
 8003c44:	4a29      	ldr	r2, [pc, #164]	; (8003cec <__sflush_r+0x108>)
 8003c46:	40ca      	lsrs	r2, r1
 8003c48:	07d6      	lsls	r6, r2, #31
 8003c4a:	d544      	bpl.n	8003cd6 <__sflush_r+0xf2>
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	6062      	str	r2, [r4, #4]
 8003c50:	04d9      	lsls	r1, r3, #19
 8003c52:	6922      	ldr	r2, [r4, #16]
 8003c54:	6022      	str	r2, [r4, #0]
 8003c56:	d504      	bpl.n	8003c62 <__sflush_r+0x7e>
 8003c58:	1c42      	adds	r2, r0, #1
 8003c5a:	d101      	bne.n	8003c60 <__sflush_r+0x7c>
 8003c5c:	682b      	ldr	r3, [r5, #0]
 8003c5e:	b903      	cbnz	r3, 8003c62 <__sflush_r+0x7e>
 8003c60:	6560      	str	r0, [r4, #84]	; 0x54
 8003c62:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003c64:	602f      	str	r7, [r5, #0]
 8003c66:	2900      	cmp	r1, #0
 8003c68:	d0c9      	beq.n	8003bfe <__sflush_r+0x1a>
 8003c6a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003c6e:	4299      	cmp	r1, r3
 8003c70:	d002      	beq.n	8003c78 <__sflush_r+0x94>
 8003c72:	4628      	mov	r0, r5
 8003c74:	f000 f99c 	bl	8003fb0 <_free_r>
 8003c78:	2000      	movs	r0, #0
 8003c7a:	6360      	str	r0, [r4, #52]	; 0x34
 8003c7c:	e7c0      	b.n	8003c00 <__sflush_r+0x1c>
 8003c7e:	2301      	movs	r3, #1
 8003c80:	4628      	mov	r0, r5
 8003c82:	47b0      	blx	r6
 8003c84:	1c41      	adds	r1, r0, #1
 8003c86:	d1c8      	bne.n	8003c1a <__sflush_r+0x36>
 8003c88:	682b      	ldr	r3, [r5, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d0c5      	beq.n	8003c1a <__sflush_r+0x36>
 8003c8e:	2b1d      	cmp	r3, #29
 8003c90:	d001      	beq.n	8003c96 <__sflush_r+0xb2>
 8003c92:	2b16      	cmp	r3, #22
 8003c94:	d101      	bne.n	8003c9a <__sflush_r+0xb6>
 8003c96:	602f      	str	r7, [r5, #0]
 8003c98:	e7b1      	b.n	8003bfe <__sflush_r+0x1a>
 8003c9a:	89a3      	ldrh	r3, [r4, #12]
 8003c9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ca0:	81a3      	strh	r3, [r4, #12]
 8003ca2:	e7ad      	b.n	8003c00 <__sflush_r+0x1c>
 8003ca4:	690f      	ldr	r7, [r1, #16]
 8003ca6:	2f00      	cmp	r7, #0
 8003ca8:	d0a9      	beq.n	8003bfe <__sflush_r+0x1a>
 8003caa:	0793      	lsls	r3, r2, #30
 8003cac:	680e      	ldr	r6, [r1, #0]
 8003cae:	bf08      	it	eq
 8003cb0:	694b      	ldreq	r3, [r1, #20]
 8003cb2:	600f      	str	r7, [r1, #0]
 8003cb4:	bf18      	it	ne
 8003cb6:	2300      	movne	r3, #0
 8003cb8:	eba6 0807 	sub.w	r8, r6, r7
 8003cbc:	608b      	str	r3, [r1, #8]
 8003cbe:	f1b8 0f00 	cmp.w	r8, #0
 8003cc2:	dd9c      	ble.n	8003bfe <__sflush_r+0x1a>
 8003cc4:	4643      	mov	r3, r8
 8003cc6:	463a      	mov	r2, r7
 8003cc8:	6a21      	ldr	r1, [r4, #32]
 8003cca:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003ccc:	4628      	mov	r0, r5
 8003cce:	47b0      	blx	r6
 8003cd0:	2800      	cmp	r0, #0
 8003cd2:	dc06      	bgt.n	8003ce2 <__sflush_r+0xfe>
 8003cd4:	89a3      	ldrh	r3, [r4, #12]
 8003cd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cda:	81a3      	strh	r3, [r4, #12]
 8003cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8003ce0:	e78e      	b.n	8003c00 <__sflush_r+0x1c>
 8003ce2:	4407      	add	r7, r0
 8003ce4:	eba8 0800 	sub.w	r8, r8, r0
 8003ce8:	e7e9      	b.n	8003cbe <__sflush_r+0xda>
 8003cea:	bf00      	nop
 8003cec:	20400001 	.word	0x20400001

08003cf0 <_fflush_r>:
 8003cf0:	b538      	push	{r3, r4, r5, lr}
 8003cf2:	690b      	ldr	r3, [r1, #16]
 8003cf4:	4605      	mov	r5, r0
 8003cf6:	460c      	mov	r4, r1
 8003cf8:	b1db      	cbz	r3, 8003d32 <_fflush_r+0x42>
 8003cfa:	b118      	cbz	r0, 8003d04 <_fflush_r+0x14>
 8003cfc:	6983      	ldr	r3, [r0, #24]
 8003cfe:	b90b      	cbnz	r3, 8003d04 <_fflush_r+0x14>
 8003d00:	f000 f860 	bl	8003dc4 <__sinit>
 8003d04:	4b0c      	ldr	r3, [pc, #48]	; (8003d38 <_fflush_r+0x48>)
 8003d06:	429c      	cmp	r4, r3
 8003d08:	d109      	bne.n	8003d1e <_fflush_r+0x2e>
 8003d0a:	686c      	ldr	r4, [r5, #4]
 8003d0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d10:	b17b      	cbz	r3, 8003d32 <_fflush_r+0x42>
 8003d12:	4621      	mov	r1, r4
 8003d14:	4628      	mov	r0, r5
 8003d16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d1a:	f7ff bf63 	b.w	8003be4 <__sflush_r>
 8003d1e:	4b07      	ldr	r3, [pc, #28]	; (8003d3c <_fflush_r+0x4c>)
 8003d20:	429c      	cmp	r4, r3
 8003d22:	d101      	bne.n	8003d28 <_fflush_r+0x38>
 8003d24:	68ac      	ldr	r4, [r5, #8]
 8003d26:	e7f1      	b.n	8003d0c <_fflush_r+0x1c>
 8003d28:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <_fflush_r+0x50>)
 8003d2a:	429c      	cmp	r4, r3
 8003d2c:	bf08      	it	eq
 8003d2e:	68ec      	ldreq	r4, [r5, #12]
 8003d30:	e7ec      	b.n	8003d0c <_fflush_r+0x1c>
 8003d32:	2000      	movs	r0, #0
 8003d34:	bd38      	pop	{r3, r4, r5, pc}
 8003d36:	bf00      	nop
 8003d38:	08004878 	.word	0x08004878
 8003d3c:	08004898 	.word	0x08004898
 8003d40:	08004858 	.word	0x08004858

08003d44 <std>:
 8003d44:	2300      	movs	r3, #0
 8003d46:	b510      	push	{r4, lr}
 8003d48:	4604      	mov	r4, r0
 8003d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8003d4e:	6083      	str	r3, [r0, #8]
 8003d50:	8181      	strh	r1, [r0, #12]
 8003d52:	6643      	str	r3, [r0, #100]	; 0x64
 8003d54:	81c2      	strh	r2, [r0, #14]
 8003d56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003d5a:	6183      	str	r3, [r0, #24]
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	2208      	movs	r2, #8
 8003d60:	305c      	adds	r0, #92	; 0x5c
 8003d62:	f7ff fd4c 	bl	80037fe <memset>
 8003d66:	4b05      	ldr	r3, [pc, #20]	; (8003d7c <std+0x38>)
 8003d68:	6263      	str	r3, [r4, #36]	; 0x24
 8003d6a:	4b05      	ldr	r3, [pc, #20]	; (8003d80 <std+0x3c>)
 8003d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8003d6e:	4b05      	ldr	r3, [pc, #20]	; (8003d84 <std+0x40>)
 8003d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003d72:	4b05      	ldr	r3, [pc, #20]	; (8003d88 <std+0x44>)
 8003d74:	6224      	str	r4, [r4, #32]
 8003d76:	6323      	str	r3, [r4, #48]	; 0x30
 8003d78:	bd10      	pop	{r4, pc}
 8003d7a:	bf00      	nop
 8003d7c:	080046b1 	.word	0x080046b1
 8003d80:	080046d3 	.word	0x080046d3
 8003d84:	0800470b 	.word	0x0800470b
 8003d88:	0800472f 	.word	0x0800472f

08003d8c <_cleanup_r>:
 8003d8c:	4901      	ldr	r1, [pc, #4]	; (8003d94 <_cleanup_r+0x8>)
 8003d8e:	f000 b885 	b.w	8003e9c <_fwalk_reent>
 8003d92:	bf00      	nop
 8003d94:	08003cf1 	.word	0x08003cf1

08003d98 <__sfmoreglue>:
 8003d98:	b570      	push	{r4, r5, r6, lr}
 8003d9a:	1e4a      	subs	r2, r1, #1
 8003d9c:	2568      	movs	r5, #104	; 0x68
 8003d9e:	4355      	muls	r5, r2
 8003da0:	460e      	mov	r6, r1
 8003da2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003da6:	f000 f951 	bl	800404c <_malloc_r>
 8003daa:	4604      	mov	r4, r0
 8003dac:	b140      	cbz	r0, 8003dc0 <__sfmoreglue+0x28>
 8003dae:	2100      	movs	r1, #0
 8003db0:	e9c0 1600 	strd	r1, r6, [r0]
 8003db4:	300c      	adds	r0, #12
 8003db6:	60a0      	str	r0, [r4, #8]
 8003db8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003dbc:	f7ff fd1f 	bl	80037fe <memset>
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	bd70      	pop	{r4, r5, r6, pc}

08003dc4 <__sinit>:
 8003dc4:	6983      	ldr	r3, [r0, #24]
 8003dc6:	b510      	push	{r4, lr}
 8003dc8:	4604      	mov	r4, r0
 8003dca:	bb33      	cbnz	r3, 8003e1a <__sinit+0x56>
 8003dcc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003dd0:	6503      	str	r3, [r0, #80]	; 0x50
 8003dd2:	4b12      	ldr	r3, [pc, #72]	; (8003e1c <__sinit+0x58>)
 8003dd4:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <__sinit+0x5c>)
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	6282      	str	r2, [r0, #40]	; 0x28
 8003dda:	4298      	cmp	r0, r3
 8003ddc:	bf04      	itt	eq
 8003dde:	2301      	moveq	r3, #1
 8003de0:	6183      	streq	r3, [r0, #24]
 8003de2:	f000 f81f 	bl	8003e24 <__sfp>
 8003de6:	6060      	str	r0, [r4, #4]
 8003de8:	4620      	mov	r0, r4
 8003dea:	f000 f81b 	bl	8003e24 <__sfp>
 8003dee:	60a0      	str	r0, [r4, #8]
 8003df0:	4620      	mov	r0, r4
 8003df2:	f000 f817 	bl	8003e24 <__sfp>
 8003df6:	2200      	movs	r2, #0
 8003df8:	60e0      	str	r0, [r4, #12]
 8003dfa:	2104      	movs	r1, #4
 8003dfc:	6860      	ldr	r0, [r4, #4]
 8003dfe:	f7ff ffa1 	bl	8003d44 <std>
 8003e02:	2201      	movs	r2, #1
 8003e04:	2109      	movs	r1, #9
 8003e06:	68a0      	ldr	r0, [r4, #8]
 8003e08:	f7ff ff9c 	bl	8003d44 <std>
 8003e0c:	2202      	movs	r2, #2
 8003e0e:	2112      	movs	r1, #18
 8003e10:	68e0      	ldr	r0, [r4, #12]
 8003e12:	f7ff ff97 	bl	8003d44 <std>
 8003e16:	2301      	movs	r3, #1
 8003e18:	61a3      	str	r3, [r4, #24]
 8003e1a:	bd10      	pop	{r4, pc}
 8003e1c:	08004854 	.word	0x08004854
 8003e20:	08003d8d 	.word	0x08003d8d

08003e24 <__sfp>:
 8003e24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e26:	4b1b      	ldr	r3, [pc, #108]	; (8003e94 <__sfp+0x70>)
 8003e28:	681e      	ldr	r6, [r3, #0]
 8003e2a:	69b3      	ldr	r3, [r6, #24]
 8003e2c:	4607      	mov	r7, r0
 8003e2e:	b913      	cbnz	r3, 8003e36 <__sfp+0x12>
 8003e30:	4630      	mov	r0, r6
 8003e32:	f7ff ffc7 	bl	8003dc4 <__sinit>
 8003e36:	3648      	adds	r6, #72	; 0x48
 8003e38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003e3c:	3b01      	subs	r3, #1
 8003e3e:	d503      	bpl.n	8003e48 <__sfp+0x24>
 8003e40:	6833      	ldr	r3, [r6, #0]
 8003e42:	b133      	cbz	r3, 8003e52 <__sfp+0x2e>
 8003e44:	6836      	ldr	r6, [r6, #0]
 8003e46:	e7f7      	b.n	8003e38 <__sfp+0x14>
 8003e48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003e4c:	b16d      	cbz	r5, 8003e6a <__sfp+0x46>
 8003e4e:	3468      	adds	r4, #104	; 0x68
 8003e50:	e7f4      	b.n	8003e3c <__sfp+0x18>
 8003e52:	2104      	movs	r1, #4
 8003e54:	4638      	mov	r0, r7
 8003e56:	f7ff ff9f 	bl	8003d98 <__sfmoreglue>
 8003e5a:	6030      	str	r0, [r6, #0]
 8003e5c:	2800      	cmp	r0, #0
 8003e5e:	d1f1      	bne.n	8003e44 <__sfp+0x20>
 8003e60:	230c      	movs	r3, #12
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	4604      	mov	r4, r0
 8003e66:	4620      	mov	r0, r4
 8003e68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003e6a:	4b0b      	ldr	r3, [pc, #44]	; (8003e98 <__sfp+0x74>)
 8003e6c:	6665      	str	r5, [r4, #100]	; 0x64
 8003e6e:	e9c4 5500 	strd	r5, r5, [r4]
 8003e72:	60a5      	str	r5, [r4, #8]
 8003e74:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003e78:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003e7c:	2208      	movs	r2, #8
 8003e7e:	4629      	mov	r1, r5
 8003e80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003e84:	f7ff fcbb 	bl	80037fe <memset>
 8003e88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003e8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003e90:	e7e9      	b.n	8003e66 <__sfp+0x42>
 8003e92:	bf00      	nop
 8003e94:	08004854 	.word	0x08004854
 8003e98:	ffff0001 	.word	0xffff0001

08003e9c <_fwalk_reent>:
 8003e9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ea0:	4680      	mov	r8, r0
 8003ea2:	4689      	mov	r9, r1
 8003ea4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003ea8:	2600      	movs	r6, #0
 8003eaa:	b914      	cbnz	r4, 8003eb2 <_fwalk_reent+0x16>
 8003eac:	4630      	mov	r0, r6
 8003eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003eb2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003eb6:	3f01      	subs	r7, #1
 8003eb8:	d501      	bpl.n	8003ebe <_fwalk_reent+0x22>
 8003eba:	6824      	ldr	r4, [r4, #0]
 8003ebc:	e7f5      	b.n	8003eaa <_fwalk_reent+0xe>
 8003ebe:	89ab      	ldrh	r3, [r5, #12]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d907      	bls.n	8003ed4 <_fwalk_reent+0x38>
 8003ec4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003ec8:	3301      	adds	r3, #1
 8003eca:	d003      	beq.n	8003ed4 <_fwalk_reent+0x38>
 8003ecc:	4629      	mov	r1, r5
 8003ece:	4640      	mov	r0, r8
 8003ed0:	47c8      	blx	r9
 8003ed2:	4306      	orrs	r6, r0
 8003ed4:	3568      	adds	r5, #104	; 0x68
 8003ed6:	e7ee      	b.n	8003eb6 <_fwalk_reent+0x1a>

08003ed8 <__swhatbuf_r>:
 8003ed8:	b570      	push	{r4, r5, r6, lr}
 8003eda:	460e      	mov	r6, r1
 8003edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ee0:	2900      	cmp	r1, #0
 8003ee2:	b096      	sub	sp, #88	; 0x58
 8003ee4:	4614      	mov	r4, r2
 8003ee6:	461d      	mov	r5, r3
 8003ee8:	da07      	bge.n	8003efa <__swhatbuf_r+0x22>
 8003eea:	2300      	movs	r3, #0
 8003eec:	602b      	str	r3, [r5, #0]
 8003eee:	89b3      	ldrh	r3, [r6, #12]
 8003ef0:	061a      	lsls	r2, r3, #24
 8003ef2:	d410      	bmi.n	8003f16 <__swhatbuf_r+0x3e>
 8003ef4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ef8:	e00e      	b.n	8003f18 <__swhatbuf_r+0x40>
 8003efa:	466a      	mov	r2, sp
 8003efc:	f000 fc3e 	bl	800477c <_fstat_r>
 8003f00:	2800      	cmp	r0, #0
 8003f02:	dbf2      	blt.n	8003eea <__swhatbuf_r+0x12>
 8003f04:	9a01      	ldr	r2, [sp, #4]
 8003f06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f0e:	425a      	negs	r2, r3
 8003f10:	415a      	adcs	r2, r3
 8003f12:	602a      	str	r2, [r5, #0]
 8003f14:	e7ee      	b.n	8003ef4 <__swhatbuf_r+0x1c>
 8003f16:	2340      	movs	r3, #64	; 0x40
 8003f18:	2000      	movs	r0, #0
 8003f1a:	6023      	str	r3, [r4, #0]
 8003f1c:	b016      	add	sp, #88	; 0x58
 8003f1e:	bd70      	pop	{r4, r5, r6, pc}

08003f20 <__smakebuf_r>:
 8003f20:	898b      	ldrh	r3, [r1, #12]
 8003f22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f24:	079d      	lsls	r5, r3, #30
 8003f26:	4606      	mov	r6, r0
 8003f28:	460c      	mov	r4, r1
 8003f2a:	d507      	bpl.n	8003f3c <__smakebuf_r+0x1c>
 8003f2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f30:	6023      	str	r3, [r4, #0]
 8003f32:	6123      	str	r3, [r4, #16]
 8003f34:	2301      	movs	r3, #1
 8003f36:	6163      	str	r3, [r4, #20]
 8003f38:	b002      	add	sp, #8
 8003f3a:	bd70      	pop	{r4, r5, r6, pc}
 8003f3c:	ab01      	add	r3, sp, #4
 8003f3e:	466a      	mov	r2, sp
 8003f40:	f7ff ffca 	bl	8003ed8 <__swhatbuf_r>
 8003f44:	9900      	ldr	r1, [sp, #0]
 8003f46:	4605      	mov	r5, r0
 8003f48:	4630      	mov	r0, r6
 8003f4a:	f000 f87f 	bl	800404c <_malloc_r>
 8003f4e:	b948      	cbnz	r0, 8003f64 <__smakebuf_r+0x44>
 8003f50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003f54:	059a      	lsls	r2, r3, #22
 8003f56:	d4ef      	bmi.n	8003f38 <__smakebuf_r+0x18>
 8003f58:	f023 0303 	bic.w	r3, r3, #3
 8003f5c:	f043 0302 	orr.w	r3, r3, #2
 8003f60:	81a3      	strh	r3, [r4, #12]
 8003f62:	e7e3      	b.n	8003f2c <__smakebuf_r+0xc>
 8003f64:	4b0d      	ldr	r3, [pc, #52]	; (8003f9c <__smakebuf_r+0x7c>)
 8003f66:	62b3      	str	r3, [r6, #40]	; 0x28
 8003f68:	89a3      	ldrh	r3, [r4, #12]
 8003f6a:	6020      	str	r0, [r4, #0]
 8003f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f70:	81a3      	strh	r3, [r4, #12]
 8003f72:	9b00      	ldr	r3, [sp, #0]
 8003f74:	6163      	str	r3, [r4, #20]
 8003f76:	9b01      	ldr	r3, [sp, #4]
 8003f78:	6120      	str	r0, [r4, #16]
 8003f7a:	b15b      	cbz	r3, 8003f94 <__smakebuf_r+0x74>
 8003f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f80:	4630      	mov	r0, r6
 8003f82:	f000 fc0d 	bl	80047a0 <_isatty_r>
 8003f86:	b128      	cbz	r0, 8003f94 <__smakebuf_r+0x74>
 8003f88:	89a3      	ldrh	r3, [r4, #12]
 8003f8a:	f023 0303 	bic.w	r3, r3, #3
 8003f8e:	f043 0301 	orr.w	r3, r3, #1
 8003f92:	81a3      	strh	r3, [r4, #12]
 8003f94:	89a3      	ldrh	r3, [r4, #12]
 8003f96:	431d      	orrs	r5, r3
 8003f98:	81a5      	strh	r5, [r4, #12]
 8003f9a:	e7cd      	b.n	8003f38 <__smakebuf_r+0x18>
 8003f9c:	08003d8d 	.word	0x08003d8d

08003fa0 <malloc>:
 8003fa0:	4b02      	ldr	r3, [pc, #8]	; (8003fac <malloc+0xc>)
 8003fa2:	4601      	mov	r1, r0
 8003fa4:	6818      	ldr	r0, [r3, #0]
 8003fa6:	f000 b851 	b.w	800404c <_malloc_r>
 8003faa:	bf00      	nop
 8003fac:	2000031c 	.word	0x2000031c

08003fb0 <_free_r>:
 8003fb0:	b538      	push	{r3, r4, r5, lr}
 8003fb2:	4605      	mov	r5, r0
 8003fb4:	2900      	cmp	r1, #0
 8003fb6:	d045      	beq.n	8004044 <_free_r+0x94>
 8003fb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003fbc:	1f0c      	subs	r4, r1, #4
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	bfb8      	it	lt
 8003fc2:	18e4      	addlt	r4, r4, r3
 8003fc4:	f000 fc0e 	bl	80047e4 <__malloc_lock>
 8003fc8:	4a1f      	ldr	r2, [pc, #124]	; (8004048 <_free_r+0x98>)
 8003fca:	6813      	ldr	r3, [r2, #0]
 8003fcc:	4610      	mov	r0, r2
 8003fce:	b933      	cbnz	r3, 8003fde <_free_r+0x2e>
 8003fd0:	6063      	str	r3, [r4, #4]
 8003fd2:	6014      	str	r4, [r2, #0]
 8003fd4:	4628      	mov	r0, r5
 8003fd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003fda:	f000 bc04 	b.w	80047e6 <__malloc_unlock>
 8003fde:	42a3      	cmp	r3, r4
 8003fe0:	d90c      	bls.n	8003ffc <_free_r+0x4c>
 8003fe2:	6821      	ldr	r1, [r4, #0]
 8003fe4:	1862      	adds	r2, r4, r1
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	bf04      	itt	eq
 8003fea:	681a      	ldreq	r2, [r3, #0]
 8003fec:	685b      	ldreq	r3, [r3, #4]
 8003fee:	6063      	str	r3, [r4, #4]
 8003ff0:	bf04      	itt	eq
 8003ff2:	1852      	addeq	r2, r2, r1
 8003ff4:	6022      	streq	r2, [r4, #0]
 8003ff6:	6004      	str	r4, [r0, #0]
 8003ff8:	e7ec      	b.n	8003fd4 <_free_r+0x24>
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	685a      	ldr	r2, [r3, #4]
 8003ffe:	b10a      	cbz	r2, 8004004 <_free_r+0x54>
 8004000:	42a2      	cmp	r2, r4
 8004002:	d9fa      	bls.n	8003ffa <_free_r+0x4a>
 8004004:	6819      	ldr	r1, [r3, #0]
 8004006:	1858      	adds	r0, r3, r1
 8004008:	42a0      	cmp	r0, r4
 800400a:	d10b      	bne.n	8004024 <_free_r+0x74>
 800400c:	6820      	ldr	r0, [r4, #0]
 800400e:	4401      	add	r1, r0
 8004010:	1858      	adds	r0, r3, r1
 8004012:	4282      	cmp	r2, r0
 8004014:	6019      	str	r1, [r3, #0]
 8004016:	d1dd      	bne.n	8003fd4 <_free_r+0x24>
 8004018:	6810      	ldr	r0, [r2, #0]
 800401a:	6852      	ldr	r2, [r2, #4]
 800401c:	605a      	str	r2, [r3, #4]
 800401e:	4401      	add	r1, r0
 8004020:	6019      	str	r1, [r3, #0]
 8004022:	e7d7      	b.n	8003fd4 <_free_r+0x24>
 8004024:	d902      	bls.n	800402c <_free_r+0x7c>
 8004026:	230c      	movs	r3, #12
 8004028:	602b      	str	r3, [r5, #0]
 800402a:	e7d3      	b.n	8003fd4 <_free_r+0x24>
 800402c:	6820      	ldr	r0, [r4, #0]
 800402e:	1821      	adds	r1, r4, r0
 8004030:	428a      	cmp	r2, r1
 8004032:	bf04      	itt	eq
 8004034:	6811      	ldreq	r1, [r2, #0]
 8004036:	6852      	ldreq	r2, [r2, #4]
 8004038:	6062      	str	r2, [r4, #4]
 800403a:	bf04      	itt	eq
 800403c:	1809      	addeq	r1, r1, r0
 800403e:	6021      	streq	r1, [r4, #0]
 8004040:	605c      	str	r4, [r3, #4]
 8004042:	e7c7      	b.n	8003fd4 <_free_r+0x24>
 8004044:	bd38      	pop	{r3, r4, r5, pc}
 8004046:	bf00      	nop
 8004048:	200003c0 	.word	0x200003c0

0800404c <_malloc_r>:
 800404c:	b570      	push	{r4, r5, r6, lr}
 800404e:	1ccd      	adds	r5, r1, #3
 8004050:	f025 0503 	bic.w	r5, r5, #3
 8004054:	3508      	adds	r5, #8
 8004056:	2d0c      	cmp	r5, #12
 8004058:	bf38      	it	cc
 800405a:	250c      	movcc	r5, #12
 800405c:	2d00      	cmp	r5, #0
 800405e:	4606      	mov	r6, r0
 8004060:	db01      	blt.n	8004066 <_malloc_r+0x1a>
 8004062:	42a9      	cmp	r1, r5
 8004064:	d903      	bls.n	800406e <_malloc_r+0x22>
 8004066:	230c      	movs	r3, #12
 8004068:	6033      	str	r3, [r6, #0]
 800406a:	2000      	movs	r0, #0
 800406c:	bd70      	pop	{r4, r5, r6, pc}
 800406e:	f000 fbb9 	bl	80047e4 <__malloc_lock>
 8004072:	4a21      	ldr	r2, [pc, #132]	; (80040f8 <_malloc_r+0xac>)
 8004074:	6814      	ldr	r4, [r2, #0]
 8004076:	4621      	mov	r1, r4
 8004078:	b991      	cbnz	r1, 80040a0 <_malloc_r+0x54>
 800407a:	4c20      	ldr	r4, [pc, #128]	; (80040fc <_malloc_r+0xb0>)
 800407c:	6823      	ldr	r3, [r4, #0]
 800407e:	b91b      	cbnz	r3, 8004088 <_malloc_r+0x3c>
 8004080:	4630      	mov	r0, r6
 8004082:	f000 fb05 	bl	8004690 <_sbrk_r>
 8004086:	6020      	str	r0, [r4, #0]
 8004088:	4629      	mov	r1, r5
 800408a:	4630      	mov	r0, r6
 800408c:	f000 fb00 	bl	8004690 <_sbrk_r>
 8004090:	1c43      	adds	r3, r0, #1
 8004092:	d124      	bne.n	80040de <_malloc_r+0x92>
 8004094:	230c      	movs	r3, #12
 8004096:	6033      	str	r3, [r6, #0]
 8004098:	4630      	mov	r0, r6
 800409a:	f000 fba4 	bl	80047e6 <__malloc_unlock>
 800409e:	e7e4      	b.n	800406a <_malloc_r+0x1e>
 80040a0:	680b      	ldr	r3, [r1, #0]
 80040a2:	1b5b      	subs	r3, r3, r5
 80040a4:	d418      	bmi.n	80040d8 <_malloc_r+0x8c>
 80040a6:	2b0b      	cmp	r3, #11
 80040a8:	d90f      	bls.n	80040ca <_malloc_r+0x7e>
 80040aa:	600b      	str	r3, [r1, #0]
 80040ac:	50cd      	str	r5, [r1, r3]
 80040ae:	18cc      	adds	r4, r1, r3
 80040b0:	4630      	mov	r0, r6
 80040b2:	f000 fb98 	bl	80047e6 <__malloc_unlock>
 80040b6:	f104 000b 	add.w	r0, r4, #11
 80040ba:	1d23      	adds	r3, r4, #4
 80040bc:	f020 0007 	bic.w	r0, r0, #7
 80040c0:	1ac3      	subs	r3, r0, r3
 80040c2:	d0d3      	beq.n	800406c <_malloc_r+0x20>
 80040c4:	425a      	negs	r2, r3
 80040c6:	50e2      	str	r2, [r4, r3]
 80040c8:	e7d0      	b.n	800406c <_malloc_r+0x20>
 80040ca:	428c      	cmp	r4, r1
 80040cc:	684b      	ldr	r3, [r1, #4]
 80040ce:	bf16      	itet	ne
 80040d0:	6063      	strne	r3, [r4, #4]
 80040d2:	6013      	streq	r3, [r2, #0]
 80040d4:	460c      	movne	r4, r1
 80040d6:	e7eb      	b.n	80040b0 <_malloc_r+0x64>
 80040d8:	460c      	mov	r4, r1
 80040da:	6849      	ldr	r1, [r1, #4]
 80040dc:	e7cc      	b.n	8004078 <_malloc_r+0x2c>
 80040de:	1cc4      	adds	r4, r0, #3
 80040e0:	f024 0403 	bic.w	r4, r4, #3
 80040e4:	42a0      	cmp	r0, r4
 80040e6:	d005      	beq.n	80040f4 <_malloc_r+0xa8>
 80040e8:	1a21      	subs	r1, r4, r0
 80040ea:	4630      	mov	r0, r6
 80040ec:	f000 fad0 	bl	8004690 <_sbrk_r>
 80040f0:	3001      	adds	r0, #1
 80040f2:	d0cf      	beq.n	8004094 <_malloc_r+0x48>
 80040f4:	6025      	str	r5, [r4, #0]
 80040f6:	e7db      	b.n	80040b0 <_malloc_r+0x64>
 80040f8:	200003c0 	.word	0x200003c0
 80040fc:	200003c4 	.word	0x200003c4

08004100 <__sfputc_r>:
 8004100:	6893      	ldr	r3, [r2, #8]
 8004102:	3b01      	subs	r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	b410      	push	{r4}
 8004108:	6093      	str	r3, [r2, #8]
 800410a:	da08      	bge.n	800411e <__sfputc_r+0x1e>
 800410c:	6994      	ldr	r4, [r2, #24]
 800410e:	42a3      	cmp	r3, r4
 8004110:	db01      	blt.n	8004116 <__sfputc_r+0x16>
 8004112:	290a      	cmp	r1, #10
 8004114:	d103      	bne.n	800411e <__sfputc_r+0x1e>
 8004116:	f85d 4b04 	ldr.w	r4, [sp], #4
 800411a:	f7ff bca3 	b.w	8003a64 <__swbuf_r>
 800411e:	6813      	ldr	r3, [r2, #0]
 8004120:	1c58      	adds	r0, r3, #1
 8004122:	6010      	str	r0, [r2, #0]
 8004124:	7019      	strb	r1, [r3, #0]
 8004126:	4608      	mov	r0, r1
 8004128:	f85d 4b04 	ldr.w	r4, [sp], #4
 800412c:	4770      	bx	lr

0800412e <__sfputs_r>:
 800412e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004130:	4606      	mov	r6, r0
 8004132:	460f      	mov	r7, r1
 8004134:	4614      	mov	r4, r2
 8004136:	18d5      	adds	r5, r2, r3
 8004138:	42ac      	cmp	r4, r5
 800413a:	d101      	bne.n	8004140 <__sfputs_r+0x12>
 800413c:	2000      	movs	r0, #0
 800413e:	e007      	b.n	8004150 <__sfputs_r+0x22>
 8004140:	463a      	mov	r2, r7
 8004142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004146:	4630      	mov	r0, r6
 8004148:	f7ff ffda 	bl	8004100 <__sfputc_r>
 800414c:	1c43      	adds	r3, r0, #1
 800414e:	d1f3      	bne.n	8004138 <__sfputs_r+0xa>
 8004150:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004154 <_vfiprintf_r>:
 8004154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004158:	460c      	mov	r4, r1
 800415a:	b09d      	sub	sp, #116	; 0x74
 800415c:	4617      	mov	r7, r2
 800415e:	461d      	mov	r5, r3
 8004160:	4606      	mov	r6, r0
 8004162:	b118      	cbz	r0, 800416c <_vfiprintf_r+0x18>
 8004164:	6983      	ldr	r3, [r0, #24]
 8004166:	b90b      	cbnz	r3, 800416c <_vfiprintf_r+0x18>
 8004168:	f7ff fe2c 	bl	8003dc4 <__sinit>
 800416c:	4b7c      	ldr	r3, [pc, #496]	; (8004360 <_vfiprintf_r+0x20c>)
 800416e:	429c      	cmp	r4, r3
 8004170:	d158      	bne.n	8004224 <_vfiprintf_r+0xd0>
 8004172:	6874      	ldr	r4, [r6, #4]
 8004174:	89a3      	ldrh	r3, [r4, #12]
 8004176:	0718      	lsls	r0, r3, #28
 8004178:	d55e      	bpl.n	8004238 <_vfiprintf_r+0xe4>
 800417a:	6923      	ldr	r3, [r4, #16]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d05b      	beq.n	8004238 <_vfiprintf_r+0xe4>
 8004180:	2300      	movs	r3, #0
 8004182:	9309      	str	r3, [sp, #36]	; 0x24
 8004184:	2320      	movs	r3, #32
 8004186:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800418a:	2330      	movs	r3, #48	; 0x30
 800418c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004190:	9503      	str	r5, [sp, #12]
 8004192:	f04f 0b01 	mov.w	fp, #1
 8004196:	46b8      	mov	r8, r7
 8004198:	4645      	mov	r5, r8
 800419a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800419e:	b10b      	cbz	r3, 80041a4 <_vfiprintf_r+0x50>
 80041a0:	2b25      	cmp	r3, #37	; 0x25
 80041a2:	d154      	bne.n	800424e <_vfiprintf_r+0xfa>
 80041a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80041a8:	d00b      	beq.n	80041c2 <_vfiprintf_r+0x6e>
 80041aa:	4653      	mov	r3, sl
 80041ac:	463a      	mov	r2, r7
 80041ae:	4621      	mov	r1, r4
 80041b0:	4630      	mov	r0, r6
 80041b2:	f7ff ffbc 	bl	800412e <__sfputs_r>
 80041b6:	3001      	adds	r0, #1
 80041b8:	f000 80c2 	beq.w	8004340 <_vfiprintf_r+0x1ec>
 80041bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041be:	4453      	add	r3, sl
 80041c0:	9309      	str	r3, [sp, #36]	; 0x24
 80041c2:	f898 3000 	ldrb.w	r3, [r8]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	f000 80ba 	beq.w	8004340 <_vfiprintf_r+0x1ec>
 80041cc:	2300      	movs	r3, #0
 80041ce:	f04f 32ff 	mov.w	r2, #4294967295
 80041d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041d6:	9304      	str	r3, [sp, #16]
 80041d8:	9307      	str	r3, [sp, #28]
 80041da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041de:	931a      	str	r3, [sp, #104]	; 0x68
 80041e0:	46a8      	mov	r8, r5
 80041e2:	2205      	movs	r2, #5
 80041e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80041e8:	485e      	ldr	r0, [pc, #376]	; (8004364 <_vfiprintf_r+0x210>)
 80041ea:	f7fb fff1 	bl	80001d0 <memchr>
 80041ee:	9b04      	ldr	r3, [sp, #16]
 80041f0:	bb78      	cbnz	r0, 8004252 <_vfiprintf_r+0xfe>
 80041f2:	06d9      	lsls	r1, r3, #27
 80041f4:	bf44      	itt	mi
 80041f6:	2220      	movmi	r2, #32
 80041f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041fc:	071a      	lsls	r2, r3, #28
 80041fe:	bf44      	itt	mi
 8004200:	222b      	movmi	r2, #43	; 0x2b
 8004202:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004206:	782a      	ldrb	r2, [r5, #0]
 8004208:	2a2a      	cmp	r2, #42	; 0x2a
 800420a:	d02a      	beq.n	8004262 <_vfiprintf_r+0x10e>
 800420c:	9a07      	ldr	r2, [sp, #28]
 800420e:	46a8      	mov	r8, r5
 8004210:	2000      	movs	r0, #0
 8004212:	250a      	movs	r5, #10
 8004214:	4641      	mov	r1, r8
 8004216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800421a:	3b30      	subs	r3, #48	; 0x30
 800421c:	2b09      	cmp	r3, #9
 800421e:	d969      	bls.n	80042f4 <_vfiprintf_r+0x1a0>
 8004220:	b360      	cbz	r0, 800427c <_vfiprintf_r+0x128>
 8004222:	e024      	b.n	800426e <_vfiprintf_r+0x11a>
 8004224:	4b50      	ldr	r3, [pc, #320]	; (8004368 <_vfiprintf_r+0x214>)
 8004226:	429c      	cmp	r4, r3
 8004228:	d101      	bne.n	800422e <_vfiprintf_r+0xda>
 800422a:	68b4      	ldr	r4, [r6, #8]
 800422c:	e7a2      	b.n	8004174 <_vfiprintf_r+0x20>
 800422e:	4b4f      	ldr	r3, [pc, #316]	; (800436c <_vfiprintf_r+0x218>)
 8004230:	429c      	cmp	r4, r3
 8004232:	bf08      	it	eq
 8004234:	68f4      	ldreq	r4, [r6, #12]
 8004236:	e79d      	b.n	8004174 <_vfiprintf_r+0x20>
 8004238:	4621      	mov	r1, r4
 800423a:	4630      	mov	r0, r6
 800423c:	f7ff fc64 	bl	8003b08 <__swsetup_r>
 8004240:	2800      	cmp	r0, #0
 8004242:	d09d      	beq.n	8004180 <_vfiprintf_r+0x2c>
 8004244:	f04f 30ff 	mov.w	r0, #4294967295
 8004248:	b01d      	add	sp, #116	; 0x74
 800424a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800424e:	46a8      	mov	r8, r5
 8004250:	e7a2      	b.n	8004198 <_vfiprintf_r+0x44>
 8004252:	4a44      	ldr	r2, [pc, #272]	; (8004364 <_vfiprintf_r+0x210>)
 8004254:	1a80      	subs	r0, r0, r2
 8004256:	fa0b f000 	lsl.w	r0, fp, r0
 800425a:	4318      	orrs	r0, r3
 800425c:	9004      	str	r0, [sp, #16]
 800425e:	4645      	mov	r5, r8
 8004260:	e7be      	b.n	80041e0 <_vfiprintf_r+0x8c>
 8004262:	9a03      	ldr	r2, [sp, #12]
 8004264:	1d11      	adds	r1, r2, #4
 8004266:	6812      	ldr	r2, [r2, #0]
 8004268:	9103      	str	r1, [sp, #12]
 800426a:	2a00      	cmp	r2, #0
 800426c:	db01      	blt.n	8004272 <_vfiprintf_r+0x11e>
 800426e:	9207      	str	r2, [sp, #28]
 8004270:	e004      	b.n	800427c <_vfiprintf_r+0x128>
 8004272:	4252      	negs	r2, r2
 8004274:	f043 0302 	orr.w	r3, r3, #2
 8004278:	9207      	str	r2, [sp, #28]
 800427a:	9304      	str	r3, [sp, #16]
 800427c:	f898 3000 	ldrb.w	r3, [r8]
 8004280:	2b2e      	cmp	r3, #46	; 0x2e
 8004282:	d10e      	bne.n	80042a2 <_vfiprintf_r+0x14e>
 8004284:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004288:	2b2a      	cmp	r3, #42	; 0x2a
 800428a:	d138      	bne.n	80042fe <_vfiprintf_r+0x1aa>
 800428c:	9b03      	ldr	r3, [sp, #12]
 800428e:	1d1a      	adds	r2, r3, #4
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	9203      	str	r2, [sp, #12]
 8004294:	2b00      	cmp	r3, #0
 8004296:	bfb8      	it	lt
 8004298:	f04f 33ff 	movlt.w	r3, #4294967295
 800429c:	f108 0802 	add.w	r8, r8, #2
 80042a0:	9305      	str	r3, [sp, #20]
 80042a2:	4d33      	ldr	r5, [pc, #204]	; (8004370 <_vfiprintf_r+0x21c>)
 80042a4:	f898 1000 	ldrb.w	r1, [r8]
 80042a8:	2203      	movs	r2, #3
 80042aa:	4628      	mov	r0, r5
 80042ac:	f7fb ff90 	bl	80001d0 <memchr>
 80042b0:	b140      	cbz	r0, 80042c4 <_vfiprintf_r+0x170>
 80042b2:	2340      	movs	r3, #64	; 0x40
 80042b4:	1b40      	subs	r0, r0, r5
 80042b6:	fa03 f000 	lsl.w	r0, r3, r0
 80042ba:	9b04      	ldr	r3, [sp, #16]
 80042bc:	4303      	orrs	r3, r0
 80042be:	f108 0801 	add.w	r8, r8, #1
 80042c2:	9304      	str	r3, [sp, #16]
 80042c4:	f898 1000 	ldrb.w	r1, [r8]
 80042c8:	482a      	ldr	r0, [pc, #168]	; (8004374 <_vfiprintf_r+0x220>)
 80042ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042ce:	2206      	movs	r2, #6
 80042d0:	f108 0701 	add.w	r7, r8, #1
 80042d4:	f7fb ff7c 	bl	80001d0 <memchr>
 80042d8:	2800      	cmp	r0, #0
 80042da:	d037      	beq.n	800434c <_vfiprintf_r+0x1f8>
 80042dc:	4b26      	ldr	r3, [pc, #152]	; (8004378 <_vfiprintf_r+0x224>)
 80042de:	bb1b      	cbnz	r3, 8004328 <_vfiprintf_r+0x1d4>
 80042e0:	9b03      	ldr	r3, [sp, #12]
 80042e2:	3307      	adds	r3, #7
 80042e4:	f023 0307 	bic.w	r3, r3, #7
 80042e8:	3308      	adds	r3, #8
 80042ea:	9303      	str	r3, [sp, #12]
 80042ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042ee:	444b      	add	r3, r9
 80042f0:	9309      	str	r3, [sp, #36]	; 0x24
 80042f2:	e750      	b.n	8004196 <_vfiprintf_r+0x42>
 80042f4:	fb05 3202 	mla	r2, r5, r2, r3
 80042f8:	2001      	movs	r0, #1
 80042fa:	4688      	mov	r8, r1
 80042fc:	e78a      	b.n	8004214 <_vfiprintf_r+0xc0>
 80042fe:	2300      	movs	r3, #0
 8004300:	f108 0801 	add.w	r8, r8, #1
 8004304:	9305      	str	r3, [sp, #20]
 8004306:	4619      	mov	r1, r3
 8004308:	250a      	movs	r5, #10
 800430a:	4640      	mov	r0, r8
 800430c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004310:	3a30      	subs	r2, #48	; 0x30
 8004312:	2a09      	cmp	r2, #9
 8004314:	d903      	bls.n	800431e <_vfiprintf_r+0x1ca>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d0c3      	beq.n	80042a2 <_vfiprintf_r+0x14e>
 800431a:	9105      	str	r1, [sp, #20]
 800431c:	e7c1      	b.n	80042a2 <_vfiprintf_r+0x14e>
 800431e:	fb05 2101 	mla	r1, r5, r1, r2
 8004322:	2301      	movs	r3, #1
 8004324:	4680      	mov	r8, r0
 8004326:	e7f0      	b.n	800430a <_vfiprintf_r+0x1b6>
 8004328:	ab03      	add	r3, sp, #12
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	4622      	mov	r2, r4
 800432e:	4b13      	ldr	r3, [pc, #76]	; (800437c <_vfiprintf_r+0x228>)
 8004330:	a904      	add	r1, sp, #16
 8004332:	4630      	mov	r0, r6
 8004334:	f3af 8000 	nop.w
 8004338:	f1b0 3fff 	cmp.w	r0, #4294967295
 800433c:	4681      	mov	r9, r0
 800433e:	d1d5      	bne.n	80042ec <_vfiprintf_r+0x198>
 8004340:	89a3      	ldrh	r3, [r4, #12]
 8004342:	065b      	lsls	r3, r3, #25
 8004344:	f53f af7e 	bmi.w	8004244 <_vfiprintf_r+0xf0>
 8004348:	9809      	ldr	r0, [sp, #36]	; 0x24
 800434a:	e77d      	b.n	8004248 <_vfiprintf_r+0xf4>
 800434c:	ab03      	add	r3, sp, #12
 800434e:	9300      	str	r3, [sp, #0]
 8004350:	4622      	mov	r2, r4
 8004352:	4b0a      	ldr	r3, [pc, #40]	; (800437c <_vfiprintf_r+0x228>)
 8004354:	a904      	add	r1, sp, #16
 8004356:	4630      	mov	r0, r6
 8004358:	f000 f888 	bl	800446c <_printf_i>
 800435c:	e7ec      	b.n	8004338 <_vfiprintf_r+0x1e4>
 800435e:	bf00      	nop
 8004360:	08004878 	.word	0x08004878
 8004364:	080048b8 	.word	0x080048b8
 8004368:	08004898 	.word	0x08004898
 800436c:	08004858 	.word	0x08004858
 8004370:	080048be 	.word	0x080048be
 8004374:	080048c2 	.word	0x080048c2
 8004378:	00000000 	.word	0x00000000
 800437c:	0800412f 	.word	0x0800412f

08004380 <_printf_common>:
 8004380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004384:	4691      	mov	r9, r2
 8004386:	461f      	mov	r7, r3
 8004388:	688a      	ldr	r2, [r1, #8]
 800438a:	690b      	ldr	r3, [r1, #16]
 800438c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004390:	4293      	cmp	r3, r2
 8004392:	bfb8      	it	lt
 8004394:	4613      	movlt	r3, r2
 8004396:	f8c9 3000 	str.w	r3, [r9]
 800439a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800439e:	4606      	mov	r6, r0
 80043a0:	460c      	mov	r4, r1
 80043a2:	b112      	cbz	r2, 80043aa <_printf_common+0x2a>
 80043a4:	3301      	adds	r3, #1
 80043a6:	f8c9 3000 	str.w	r3, [r9]
 80043aa:	6823      	ldr	r3, [r4, #0]
 80043ac:	0699      	lsls	r1, r3, #26
 80043ae:	bf42      	ittt	mi
 80043b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80043b4:	3302      	addmi	r3, #2
 80043b6:	f8c9 3000 	strmi.w	r3, [r9]
 80043ba:	6825      	ldr	r5, [r4, #0]
 80043bc:	f015 0506 	ands.w	r5, r5, #6
 80043c0:	d107      	bne.n	80043d2 <_printf_common+0x52>
 80043c2:	f104 0a19 	add.w	sl, r4, #25
 80043c6:	68e3      	ldr	r3, [r4, #12]
 80043c8:	f8d9 2000 	ldr.w	r2, [r9]
 80043cc:	1a9b      	subs	r3, r3, r2
 80043ce:	42ab      	cmp	r3, r5
 80043d0:	dc28      	bgt.n	8004424 <_printf_common+0xa4>
 80043d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80043d6:	6822      	ldr	r2, [r4, #0]
 80043d8:	3300      	adds	r3, #0
 80043da:	bf18      	it	ne
 80043dc:	2301      	movne	r3, #1
 80043de:	0692      	lsls	r2, r2, #26
 80043e0:	d42d      	bmi.n	800443e <_printf_common+0xbe>
 80043e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043e6:	4639      	mov	r1, r7
 80043e8:	4630      	mov	r0, r6
 80043ea:	47c0      	blx	r8
 80043ec:	3001      	adds	r0, #1
 80043ee:	d020      	beq.n	8004432 <_printf_common+0xb2>
 80043f0:	6823      	ldr	r3, [r4, #0]
 80043f2:	68e5      	ldr	r5, [r4, #12]
 80043f4:	f8d9 2000 	ldr.w	r2, [r9]
 80043f8:	f003 0306 	and.w	r3, r3, #6
 80043fc:	2b04      	cmp	r3, #4
 80043fe:	bf08      	it	eq
 8004400:	1aad      	subeq	r5, r5, r2
 8004402:	68a3      	ldr	r3, [r4, #8]
 8004404:	6922      	ldr	r2, [r4, #16]
 8004406:	bf0c      	ite	eq
 8004408:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800440c:	2500      	movne	r5, #0
 800440e:	4293      	cmp	r3, r2
 8004410:	bfc4      	itt	gt
 8004412:	1a9b      	subgt	r3, r3, r2
 8004414:	18ed      	addgt	r5, r5, r3
 8004416:	f04f 0900 	mov.w	r9, #0
 800441a:	341a      	adds	r4, #26
 800441c:	454d      	cmp	r5, r9
 800441e:	d11a      	bne.n	8004456 <_printf_common+0xd6>
 8004420:	2000      	movs	r0, #0
 8004422:	e008      	b.n	8004436 <_printf_common+0xb6>
 8004424:	2301      	movs	r3, #1
 8004426:	4652      	mov	r2, sl
 8004428:	4639      	mov	r1, r7
 800442a:	4630      	mov	r0, r6
 800442c:	47c0      	blx	r8
 800442e:	3001      	adds	r0, #1
 8004430:	d103      	bne.n	800443a <_printf_common+0xba>
 8004432:	f04f 30ff 	mov.w	r0, #4294967295
 8004436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800443a:	3501      	adds	r5, #1
 800443c:	e7c3      	b.n	80043c6 <_printf_common+0x46>
 800443e:	18e1      	adds	r1, r4, r3
 8004440:	1c5a      	adds	r2, r3, #1
 8004442:	2030      	movs	r0, #48	; 0x30
 8004444:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004448:	4422      	add	r2, r4
 800444a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800444e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004452:	3302      	adds	r3, #2
 8004454:	e7c5      	b.n	80043e2 <_printf_common+0x62>
 8004456:	2301      	movs	r3, #1
 8004458:	4622      	mov	r2, r4
 800445a:	4639      	mov	r1, r7
 800445c:	4630      	mov	r0, r6
 800445e:	47c0      	blx	r8
 8004460:	3001      	adds	r0, #1
 8004462:	d0e6      	beq.n	8004432 <_printf_common+0xb2>
 8004464:	f109 0901 	add.w	r9, r9, #1
 8004468:	e7d8      	b.n	800441c <_printf_common+0x9c>
	...

0800446c <_printf_i>:
 800446c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004470:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004474:	460c      	mov	r4, r1
 8004476:	7e09      	ldrb	r1, [r1, #24]
 8004478:	b085      	sub	sp, #20
 800447a:	296e      	cmp	r1, #110	; 0x6e
 800447c:	4617      	mov	r7, r2
 800447e:	4606      	mov	r6, r0
 8004480:	4698      	mov	r8, r3
 8004482:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004484:	f000 80b3 	beq.w	80045ee <_printf_i+0x182>
 8004488:	d822      	bhi.n	80044d0 <_printf_i+0x64>
 800448a:	2963      	cmp	r1, #99	; 0x63
 800448c:	d036      	beq.n	80044fc <_printf_i+0x90>
 800448e:	d80a      	bhi.n	80044a6 <_printf_i+0x3a>
 8004490:	2900      	cmp	r1, #0
 8004492:	f000 80b9 	beq.w	8004608 <_printf_i+0x19c>
 8004496:	2958      	cmp	r1, #88	; 0x58
 8004498:	f000 8083 	beq.w	80045a2 <_printf_i+0x136>
 800449c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80044a4:	e032      	b.n	800450c <_printf_i+0xa0>
 80044a6:	2964      	cmp	r1, #100	; 0x64
 80044a8:	d001      	beq.n	80044ae <_printf_i+0x42>
 80044aa:	2969      	cmp	r1, #105	; 0x69
 80044ac:	d1f6      	bne.n	800449c <_printf_i+0x30>
 80044ae:	6820      	ldr	r0, [r4, #0]
 80044b0:	6813      	ldr	r3, [r2, #0]
 80044b2:	0605      	lsls	r5, r0, #24
 80044b4:	f103 0104 	add.w	r1, r3, #4
 80044b8:	d52a      	bpl.n	8004510 <_printf_i+0xa4>
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6011      	str	r1, [r2, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	da03      	bge.n	80044ca <_printf_i+0x5e>
 80044c2:	222d      	movs	r2, #45	; 0x2d
 80044c4:	425b      	negs	r3, r3
 80044c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80044ca:	486f      	ldr	r0, [pc, #444]	; (8004688 <_printf_i+0x21c>)
 80044cc:	220a      	movs	r2, #10
 80044ce:	e039      	b.n	8004544 <_printf_i+0xd8>
 80044d0:	2973      	cmp	r1, #115	; 0x73
 80044d2:	f000 809d 	beq.w	8004610 <_printf_i+0x1a4>
 80044d6:	d808      	bhi.n	80044ea <_printf_i+0x7e>
 80044d8:	296f      	cmp	r1, #111	; 0x6f
 80044da:	d020      	beq.n	800451e <_printf_i+0xb2>
 80044dc:	2970      	cmp	r1, #112	; 0x70
 80044de:	d1dd      	bne.n	800449c <_printf_i+0x30>
 80044e0:	6823      	ldr	r3, [r4, #0]
 80044e2:	f043 0320 	orr.w	r3, r3, #32
 80044e6:	6023      	str	r3, [r4, #0]
 80044e8:	e003      	b.n	80044f2 <_printf_i+0x86>
 80044ea:	2975      	cmp	r1, #117	; 0x75
 80044ec:	d017      	beq.n	800451e <_printf_i+0xb2>
 80044ee:	2978      	cmp	r1, #120	; 0x78
 80044f0:	d1d4      	bne.n	800449c <_printf_i+0x30>
 80044f2:	2378      	movs	r3, #120	; 0x78
 80044f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044f8:	4864      	ldr	r0, [pc, #400]	; (800468c <_printf_i+0x220>)
 80044fa:	e055      	b.n	80045a8 <_printf_i+0x13c>
 80044fc:	6813      	ldr	r3, [r2, #0]
 80044fe:	1d19      	adds	r1, r3, #4
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	6011      	str	r1, [r2, #0]
 8004504:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004508:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800450c:	2301      	movs	r3, #1
 800450e:	e08c      	b.n	800462a <_printf_i+0x1be>
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6011      	str	r1, [r2, #0]
 8004514:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004518:	bf18      	it	ne
 800451a:	b21b      	sxthne	r3, r3
 800451c:	e7cf      	b.n	80044be <_printf_i+0x52>
 800451e:	6813      	ldr	r3, [r2, #0]
 8004520:	6825      	ldr	r5, [r4, #0]
 8004522:	1d18      	adds	r0, r3, #4
 8004524:	6010      	str	r0, [r2, #0]
 8004526:	0628      	lsls	r0, r5, #24
 8004528:	d501      	bpl.n	800452e <_printf_i+0xc2>
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	e002      	b.n	8004534 <_printf_i+0xc8>
 800452e:	0668      	lsls	r0, r5, #25
 8004530:	d5fb      	bpl.n	800452a <_printf_i+0xbe>
 8004532:	881b      	ldrh	r3, [r3, #0]
 8004534:	4854      	ldr	r0, [pc, #336]	; (8004688 <_printf_i+0x21c>)
 8004536:	296f      	cmp	r1, #111	; 0x6f
 8004538:	bf14      	ite	ne
 800453a:	220a      	movne	r2, #10
 800453c:	2208      	moveq	r2, #8
 800453e:	2100      	movs	r1, #0
 8004540:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004544:	6865      	ldr	r5, [r4, #4]
 8004546:	60a5      	str	r5, [r4, #8]
 8004548:	2d00      	cmp	r5, #0
 800454a:	f2c0 8095 	blt.w	8004678 <_printf_i+0x20c>
 800454e:	6821      	ldr	r1, [r4, #0]
 8004550:	f021 0104 	bic.w	r1, r1, #4
 8004554:	6021      	str	r1, [r4, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d13d      	bne.n	80045d6 <_printf_i+0x16a>
 800455a:	2d00      	cmp	r5, #0
 800455c:	f040 808e 	bne.w	800467c <_printf_i+0x210>
 8004560:	4665      	mov	r5, ip
 8004562:	2a08      	cmp	r2, #8
 8004564:	d10b      	bne.n	800457e <_printf_i+0x112>
 8004566:	6823      	ldr	r3, [r4, #0]
 8004568:	07db      	lsls	r3, r3, #31
 800456a:	d508      	bpl.n	800457e <_printf_i+0x112>
 800456c:	6923      	ldr	r3, [r4, #16]
 800456e:	6862      	ldr	r2, [r4, #4]
 8004570:	429a      	cmp	r2, r3
 8004572:	bfde      	ittt	le
 8004574:	2330      	movle	r3, #48	; 0x30
 8004576:	f805 3c01 	strble.w	r3, [r5, #-1]
 800457a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800457e:	ebac 0305 	sub.w	r3, ip, r5
 8004582:	6123      	str	r3, [r4, #16]
 8004584:	f8cd 8000 	str.w	r8, [sp]
 8004588:	463b      	mov	r3, r7
 800458a:	aa03      	add	r2, sp, #12
 800458c:	4621      	mov	r1, r4
 800458e:	4630      	mov	r0, r6
 8004590:	f7ff fef6 	bl	8004380 <_printf_common>
 8004594:	3001      	adds	r0, #1
 8004596:	d14d      	bne.n	8004634 <_printf_i+0x1c8>
 8004598:	f04f 30ff 	mov.w	r0, #4294967295
 800459c:	b005      	add	sp, #20
 800459e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045a2:	4839      	ldr	r0, [pc, #228]	; (8004688 <_printf_i+0x21c>)
 80045a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80045a8:	6813      	ldr	r3, [r2, #0]
 80045aa:	6821      	ldr	r1, [r4, #0]
 80045ac:	1d1d      	adds	r5, r3, #4
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6015      	str	r5, [r2, #0]
 80045b2:	060a      	lsls	r2, r1, #24
 80045b4:	d50b      	bpl.n	80045ce <_printf_i+0x162>
 80045b6:	07ca      	lsls	r2, r1, #31
 80045b8:	bf44      	itt	mi
 80045ba:	f041 0120 	orrmi.w	r1, r1, #32
 80045be:	6021      	strmi	r1, [r4, #0]
 80045c0:	b91b      	cbnz	r3, 80045ca <_printf_i+0x15e>
 80045c2:	6822      	ldr	r2, [r4, #0]
 80045c4:	f022 0220 	bic.w	r2, r2, #32
 80045c8:	6022      	str	r2, [r4, #0]
 80045ca:	2210      	movs	r2, #16
 80045cc:	e7b7      	b.n	800453e <_printf_i+0xd2>
 80045ce:	064d      	lsls	r5, r1, #25
 80045d0:	bf48      	it	mi
 80045d2:	b29b      	uxthmi	r3, r3
 80045d4:	e7ef      	b.n	80045b6 <_printf_i+0x14a>
 80045d6:	4665      	mov	r5, ip
 80045d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80045dc:	fb02 3311 	mls	r3, r2, r1, r3
 80045e0:	5cc3      	ldrb	r3, [r0, r3]
 80045e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80045e6:	460b      	mov	r3, r1
 80045e8:	2900      	cmp	r1, #0
 80045ea:	d1f5      	bne.n	80045d8 <_printf_i+0x16c>
 80045ec:	e7b9      	b.n	8004562 <_printf_i+0xf6>
 80045ee:	6813      	ldr	r3, [r2, #0]
 80045f0:	6825      	ldr	r5, [r4, #0]
 80045f2:	6961      	ldr	r1, [r4, #20]
 80045f4:	1d18      	adds	r0, r3, #4
 80045f6:	6010      	str	r0, [r2, #0]
 80045f8:	0628      	lsls	r0, r5, #24
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	d501      	bpl.n	8004602 <_printf_i+0x196>
 80045fe:	6019      	str	r1, [r3, #0]
 8004600:	e002      	b.n	8004608 <_printf_i+0x19c>
 8004602:	066a      	lsls	r2, r5, #25
 8004604:	d5fb      	bpl.n	80045fe <_printf_i+0x192>
 8004606:	8019      	strh	r1, [r3, #0]
 8004608:	2300      	movs	r3, #0
 800460a:	6123      	str	r3, [r4, #16]
 800460c:	4665      	mov	r5, ip
 800460e:	e7b9      	b.n	8004584 <_printf_i+0x118>
 8004610:	6813      	ldr	r3, [r2, #0]
 8004612:	1d19      	adds	r1, r3, #4
 8004614:	6011      	str	r1, [r2, #0]
 8004616:	681d      	ldr	r5, [r3, #0]
 8004618:	6862      	ldr	r2, [r4, #4]
 800461a:	2100      	movs	r1, #0
 800461c:	4628      	mov	r0, r5
 800461e:	f7fb fdd7 	bl	80001d0 <memchr>
 8004622:	b108      	cbz	r0, 8004628 <_printf_i+0x1bc>
 8004624:	1b40      	subs	r0, r0, r5
 8004626:	6060      	str	r0, [r4, #4]
 8004628:	6863      	ldr	r3, [r4, #4]
 800462a:	6123      	str	r3, [r4, #16]
 800462c:	2300      	movs	r3, #0
 800462e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004632:	e7a7      	b.n	8004584 <_printf_i+0x118>
 8004634:	6923      	ldr	r3, [r4, #16]
 8004636:	462a      	mov	r2, r5
 8004638:	4639      	mov	r1, r7
 800463a:	4630      	mov	r0, r6
 800463c:	47c0      	blx	r8
 800463e:	3001      	adds	r0, #1
 8004640:	d0aa      	beq.n	8004598 <_printf_i+0x12c>
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	079b      	lsls	r3, r3, #30
 8004646:	d413      	bmi.n	8004670 <_printf_i+0x204>
 8004648:	68e0      	ldr	r0, [r4, #12]
 800464a:	9b03      	ldr	r3, [sp, #12]
 800464c:	4298      	cmp	r0, r3
 800464e:	bfb8      	it	lt
 8004650:	4618      	movlt	r0, r3
 8004652:	e7a3      	b.n	800459c <_printf_i+0x130>
 8004654:	2301      	movs	r3, #1
 8004656:	464a      	mov	r2, r9
 8004658:	4639      	mov	r1, r7
 800465a:	4630      	mov	r0, r6
 800465c:	47c0      	blx	r8
 800465e:	3001      	adds	r0, #1
 8004660:	d09a      	beq.n	8004598 <_printf_i+0x12c>
 8004662:	3501      	adds	r5, #1
 8004664:	68e3      	ldr	r3, [r4, #12]
 8004666:	9a03      	ldr	r2, [sp, #12]
 8004668:	1a9b      	subs	r3, r3, r2
 800466a:	42ab      	cmp	r3, r5
 800466c:	dcf2      	bgt.n	8004654 <_printf_i+0x1e8>
 800466e:	e7eb      	b.n	8004648 <_printf_i+0x1dc>
 8004670:	2500      	movs	r5, #0
 8004672:	f104 0919 	add.w	r9, r4, #25
 8004676:	e7f5      	b.n	8004664 <_printf_i+0x1f8>
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1ac      	bne.n	80045d6 <_printf_i+0x16a>
 800467c:	7803      	ldrb	r3, [r0, #0]
 800467e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004682:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004686:	e76c      	b.n	8004562 <_printf_i+0xf6>
 8004688:	080048c9 	.word	0x080048c9
 800468c:	080048da 	.word	0x080048da

08004690 <_sbrk_r>:
 8004690:	b538      	push	{r3, r4, r5, lr}
 8004692:	4c06      	ldr	r4, [pc, #24]	; (80046ac <_sbrk_r+0x1c>)
 8004694:	2300      	movs	r3, #0
 8004696:	4605      	mov	r5, r0
 8004698:	4608      	mov	r0, r1
 800469a:	6023      	str	r3, [r4, #0]
 800469c:	f7fc fcea 	bl	8001074 <_sbrk>
 80046a0:	1c43      	adds	r3, r0, #1
 80046a2:	d102      	bne.n	80046aa <_sbrk_r+0x1a>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	b103      	cbz	r3, 80046aa <_sbrk_r+0x1a>
 80046a8:	602b      	str	r3, [r5, #0]
 80046aa:	bd38      	pop	{r3, r4, r5, pc}
 80046ac:	20000464 	.word	0x20000464

080046b0 <__sread>:
 80046b0:	b510      	push	{r4, lr}
 80046b2:	460c      	mov	r4, r1
 80046b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046b8:	f000 f896 	bl	80047e8 <_read_r>
 80046bc:	2800      	cmp	r0, #0
 80046be:	bfab      	itete	ge
 80046c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046c2:	89a3      	ldrhlt	r3, [r4, #12]
 80046c4:	181b      	addge	r3, r3, r0
 80046c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046ca:	bfac      	ite	ge
 80046cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80046ce:	81a3      	strhlt	r3, [r4, #12]
 80046d0:	bd10      	pop	{r4, pc}

080046d2 <__swrite>:
 80046d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046d6:	461f      	mov	r7, r3
 80046d8:	898b      	ldrh	r3, [r1, #12]
 80046da:	05db      	lsls	r3, r3, #23
 80046dc:	4605      	mov	r5, r0
 80046de:	460c      	mov	r4, r1
 80046e0:	4616      	mov	r6, r2
 80046e2:	d505      	bpl.n	80046f0 <__swrite+0x1e>
 80046e4:	2302      	movs	r3, #2
 80046e6:	2200      	movs	r2, #0
 80046e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ec:	f000 f868 	bl	80047c0 <_lseek_r>
 80046f0:	89a3      	ldrh	r3, [r4, #12]
 80046f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046fa:	81a3      	strh	r3, [r4, #12]
 80046fc:	4632      	mov	r2, r6
 80046fe:	463b      	mov	r3, r7
 8004700:	4628      	mov	r0, r5
 8004702:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004706:	f000 b817 	b.w	8004738 <_write_r>

0800470a <__sseek>:
 800470a:	b510      	push	{r4, lr}
 800470c:	460c      	mov	r4, r1
 800470e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004712:	f000 f855 	bl	80047c0 <_lseek_r>
 8004716:	1c43      	adds	r3, r0, #1
 8004718:	89a3      	ldrh	r3, [r4, #12]
 800471a:	bf15      	itete	ne
 800471c:	6560      	strne	r0, [r4, #84]	; 0x54
 800471e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004722:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004726:	81a3      	strheq	r3, [r4, #12]
 8004728:	bf18      	it	ne
 800472a:	81a3      	strhne	r3, [r4, #12]
 800472c:	bd10      	pop	{r4, pc}

0800472e <__sclose>:
 800472e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004732:	f000 b813 	b.w	800475c <_close_r>
	...

08004738 <_write_r>:
 8004738:	b538      	push	{r3, r4, r5, lr}
 800473a:	4c07      	ldr	r4, [pc, #28]	; (8004758 <_write_r+0x20>)
 800473c:	4605      	mov	r5, r0
 800473e:	4608      	mov	r0, r1
 8004740:	4611      	mov	r1, r2
 8004742:	2200      	movs	r2, #0
 8004744:	6022      	str	r2, [r4, #0]
 8004746:	461a      	mov	r2, r3
 8004748:	f7fb ff4e 	bl	80005e8 <_write>
 800474c:	1c43      	adds	r3, r0, #1
 800474e:	d102      	bne.n	8004756 <_write_r+0x1e>
 8004750:	6823      	ldr	r3, [r4, #0]
 8004752:	b103      	cbz	r3, 8004756 <_write_r+0x1e>
 8004754:	602b      	str	r3, [r5, #0]
 8004756:	bd38      	pop	{r3, r4, r5, pc}
 8004758:	20000464 	.word	0x20000464

0800475c <_close_r>:
 800475c:	b538      	push	{r3, r4, r5, lr}
 800475e:	4c06      	ldr	r4, [pc, #24]	; (8004778 <_close_r+0x1c>)
 8004760:	2300      	movs	r3, #0
 8004762:	4605      	mov	r5, r0
 8004764:	4608      	mov	r0, r1
 8004766:	6023      	str	r3, [r4, #0]
 8004768:	f7fb ff68 	bl	800063c <_close>
 800476c:	1c43      	adds	r3, r0, #1
 800476e:	d102      	bne.n	8004776 <_close_r+0x1a>
 8004770:	6823      	ldr	r3, [r4, #0]
 8004772:	b103      	cbz	r3, 8004776 <_close_r+0x1a>
 8004774:	602b      	str	r3, [r5, #0]
 8004776:	bd38      	pop	{r3, r4, r5, pc}
 8004778:	20000464 	.word	0x20000464

0800477c <_fstat_r>:
 800477c:	b538      	push	{r3, r4, r5, lr}
 800477e:	4c07      	ldr	r4, [pc, #28]	; (800479c <_fstat_r+0x20>)
 8004780:	2300      	movs	r3, #0
 8004782:	4605      	mov	r5, r0
 8004784:	4608      	mov	r0, r1
 8004786:	4611      	mov	r1, r2
 8004788:	6023      	str	r3, [r4, #0]
 800478a:	f7fb ffa7 	bl	80006dc <_fstat>
 800478e:	1c43      	adds	r3, r0, #1
 8004790:	d102      	bne.n	8004798 <_fstat_r+0x1c>
 8004792:	6823      	ldr	r3, [r4, #0]
 8004794:	b103      	cbz	r3, 8004798 <_fstat_r+0x1c>
 8004796:	602b      	str	r3, [r5, #0]
 8004798:	bd38      	pop	{r3, r4, r5, pc}
 800479a:	bf00      	nop
 800479c:	20000464 	.word	0x20000464

080047a0 <_isatty_r>:
 80047a0:	b538      	push	{r3, r4, r5, lr}
 80047a2:	4c06      	ldr	r4, [pc, #24]	; (80047bc <_isatty_r+0x1c>)
 80047a4:	2300      	movs	r3, #0
 80047a6:	4605      	mov	r5, r0
 80047a8:	4608      	mov	r0, r1
 80047aa:	6023      	str	r3, [r4, #0]
 80047ac:	f7fb ff06 	bl	80005bc <_isatty>
 80047b0:	1c43      	adds	r3, r0, #1
 80047b2:	d102      	bne.n	80047ba <_isatty_r+0x1a>
 80047b4:	6823      	ldr	r3, [r4, #0]
 80047b6:	b103      	cbz	r3, 80047ba <_isatty_r+0x1a>
 80047b8:	602b      	str	r3, [r5, #0]
 80047ba:	bd38      	pop	{r3, r4, r5, pc}
 80047bc:	20000464 	.word	0x20000464

080047c0 <_lseek_r>:
 80047c0:	b538      	push	{r3, r4, r5, lr}
 80047c2:	4c07      	ldr	r4, [pc, #28]	; (80047e0 <_lseek_r+0x20>)
 80047c4:	4605      	mov	r5, r0
 80047c6:	4608      	mov	r0, r1
 80047c8:	4611      	mov	r1, r2
 80047ca:	2200      	movs	r2, #0
 80047cc:	6022      	str	r2, [r4, #0]
 80047ce:	461a      	mov	r2, r3
 80047d0:	f7fb ff4b 	bl	800066a <_lseek>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d102      	bne.n	80047de <_lseek_r+0x1e>
 80047d8:	6823      	ldr	r3, [r4, #0]
 80047da:	b103      	cbz	r3, 80047de <_lseek_r+0x1e>
 80047dc:	602b      	str	r3, [r5, #0]
 80047de:	bd38      	pop	{r3, r4, r5, pc}
 80047e0:	20000464 	.word	0x20000464

080047e4 <__malloc_lock>:
 80047e4:	4770      	bx	lr

080047e6 <__malloc_unlock>:
 80047e6:	4770      	bx	lr

080047e8 <_read_r>:
 80047e8:	b538      	push	{r3, r4, r5, lr}
 80047ea:	4c07      	ldr	r4, [pc, #28]	; (8004808 <_read_r+0x20>)
 80047ec:	4605      	mov	r5, r0
 80047ee:	4608      	mov	r0, r1
 80047f0:	4611      	mov	r1, r2
 80047f2:	2200      	movs	r2, #0
 80047f4:	6022      	str	r2, [r4, #0]
 80047f6:	461a      	mov	r2, r3
 80047f8:	f7fb ff48 	bl	800068c <_read>
 80047fc:	1c43      	adds	r3, r0, #1
 80047fe:	d102      	bne.n	8004806 <_read_r+0x1e>
 8004800:	6823      	ldr	r3, [r4, #0]
 8004802:	b103      	cbz	r3, 8004806 <_read_r+0x1e>
 8004804:	602b      	str	r3, [r5, #0]
 8004806:	bd38      	pop	{r3, r4, r5, pc}
 8004808:	20000464 	.word	0x20000464

0800480c <_init>:
 800480c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800480e:	bf00      	nop
 8004810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004812:	bc08      	pop	{r3}
 8004814:	469e      	mov	lr, r3
 8004816:	4770      	bx	lr

08004818 <_fini>:
 8004818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800481a:	bf00      	nop
 800481c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800481e:	bc08      	pop	{r3}
 8004820:	469e      	mov	lr, r3
 8004822:	4770      	bx	lr
