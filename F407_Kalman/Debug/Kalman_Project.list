
Kalman_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008938  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002e4  08008ac0  08008ac0  00018ac0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008da4  08008da4  000218c0  2**0
                  CONTENTS
  4 .ARM          00000008  08008da4  08008da4  00018da4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008dac  08008dac  000218c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008dac  08008dac  00018dac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008db0  08008db0  00018db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000018c0  20000000  08008db4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c8c  200018c0  0800a674  000218c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000254c  0800a674  0002254c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000218c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00034181  00000000  00000000  000218f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000065a1  00000000  00000000  00055a71  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000114d1  00000000  00000000  0005c012  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000010a0  00000000  00000000  0006d4e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00002838  00000000  00000000  0006e588  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00028aa8  00000000  00000000  00070dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   0001ef5b  00000000  00000000  00099868  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    000d197f  00000000  00000000  000b87c3  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      000000e9  00000000  00000000  0018a142  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000043a8  00000000  00000000  0018a22c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200018c0 	.word	0x200018c0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008aa8 	.word	0x08008aa8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200018c4 	.word	0x200018c4
 80001c4:	08008aa8 	.word	0x08008aa8

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000316:	f1a4 0401 	sub.w	r4, r4, #1
 800031a:	d1e9      	bne.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2iz>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ab8:	d215      	bcs.n	8000ae6 <__aeabi_d2iz+0x36>
 8000aba:	d511      	bpl.n	8000ae0 <__aeabi_d2iz+0x30>
 8000abc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac4:	d912      	bls.n	8000aec <__aeabi_d2iz+0x3c>
 8000ac6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ace:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ad6:	fa23 f002 	lsr.w	r0, r3, r2
 8000ada:	bf18      	it	ne
 8000adc:	4240      	negne	r0, r0
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d105      	bne.n	8000af8 <__aeabi_d2iz+0x48>
 8000aec:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	bf08      	it	eq
 8000af2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000af6:	4770      	bx	lr
 8000af8:	f04f 0000 	mov.w	r0, #0
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop

08000b00 <__aeabi_d2f>:
 8000b00:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b04:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b08:	bf24      	itt	cs
 8000b0a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b0e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b12:	d90d      	bls.n	8000b30 <__aeabi_d2f+0x30>
 8000b14:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b18:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b1c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b20:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b24:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b28:	bf08      	it	eq
 8000b2a:	f020 0001 	biceq.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b34:	d121      	bne.n	8000b7a <__aeabi_d2f+0x7a>
 8000b36:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b3a:	bfbc      	itt	lt
 8000b3c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b40:	4770      	bxlt	lr
 8000b42:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b46:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b4a:	f1c2 0218 	rsb	r2, r2, #24
 8000b4e:	f1c2 0c20 	rsb	ip, r2, #32
 8000b52:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b56:	fa20 f002 	lsr.w	r0, r0, r2
 8000b5a:	bf18      	it	ne
 8000b5c:	f040 0001 	orrne.w	r0, r0, #1
 8000b60:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b64:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b68:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b6c:	ea40 000c 	orr.w	r0, r0, ip
 8000b70:	fa23 f302 	lsr.w	r3, r3, r2
 8000b74:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b78:	e7cc      	b.n	8000b14 <__aeabi_d2f+0x14>
 8000b7a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b7e:	d107      	bne.n	8000b90 <__aeabi_d2f+0x90>
 8000b80:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b84:	bf1e      	ittt	ne
 8000b86:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b8a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b8e:	4770      	bxne	lr
 8000b90:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b94:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b98:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_uldivmod>:
 8000ba0:	b953      	cbnz	r3, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba2:	b94a      	cbnz	r2, 8000bb8 <__aeabi_uldivmod+0x18>
 8000ba4:	2900      	cmp	r1, #0
 8000ba6:	bf08      	it	eq
 8000ba8:	2800      	cmpeq	r0, #0
 8000baa:	bf1c      	itt	ne
 8000bac:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bb4:	f000 b972 	b.w	8000e9c <__aeabi_idiv0>
 8000bb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bbc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc0:	f000 f806 	bl	8000bd0 <__udivmoddi4>
 8000bc4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bcc:	b004      	add	sp, #16
 8000bce:	4770      	bx	lr

08000bd0 <__udivmoddi4>:
 8000bd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bd4:	9e08      	ldr	r6, [sp, #32]
 8000bd6:	4604      	mov	r4, r0
 8000bd8:	4688      	mov	r8, r1
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d14b      	bne.n	8000c76 <__udivmoddi4+0xa6>
 8000bde:	428a      	cmp	r2, r1
 8000be0:	4615      	mov	r5, r2
 8000be2:	d967      	bls.n	8000cb4 <__udivmoddi4+0xe4>
 8000be4:	fab2 f282 	clz	r2, r2
 8000be8:	b14a      	cbz	r2, 8000bfe <__udivmoddi4+0x2e>
 8000bea:	f1c2 0720 	rsb	r7, r2, #32
 8000bee:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf2:	fa20 f707 	lsr.w	r7, r0, r7
 8000bf6:	4095      	lsls	r5, r2
 8000bf8:	ea47 0803 	orr.w	r8, r7, r3
 8000bfc:	4094      	lsls	r4, r2
 8000bfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c02:	0c23      	lsrs	r3, r4, #16
 8000c04:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c08:	fa1f fc85 	uxth.w	ip, r5
 8000c0c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c10:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c14:	fb07 f10c 	mul.w	r1, r7, ip
 8000c18:	4299      	cmp	r1, r3
 8000c1a:	d909      	bls.n	8000c30 <__udivmoddi4+0x60>
 8000c1c:	18eb      	adds	r3, r5, r3
 8000c1e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c22:	f080 811b 	bcs.w	8000e5c <__udivmoddi4+0x28c>
 8000c26:	4299      	cmp	r1, r3
 8000c28:	f240 8118 	bls.w	8000e5c <__udivmoddi4+0x28c>
 8000c2c:	3f02      	subs	r7, #2
 8000c2e:	442b      	add	r3, r5
 8000c30:	1a5b      	subs	r3, r3, r1
 8000c32:	b2a4      	uxth	r4, r4
 8000c34:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c38:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c3c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c40:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c44:	45a4      	cmp	ip, r4
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x8c>
 8000c48:	192c      	adds	r4, r5, r4
 8000c4a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c4e:	f080 8107 	bcs.w	8000e60 <__udivmoddi4+0x290>
 8000c52:	45a4      	cmp	ip, r4
 8000c54:	f240 8104 	bls.w	8000e60 <__udivmoddi4+0x290>
 8000c58:	3802      	subs	r0, #2
 8000c5a:	442c      	add	r4, r5
 8000c5c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c60:	eba4 040c 	sub.w	r4, r4, ip
 8000c64:	2700      	movs	r7, #0
 8000c66:	b11e      	cbz	r6, 8000c70 <__udivmoddi4+0xa0>
 8000c68:	40d4      	lsrs	r4, r2
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e9c6 4300 	strd	r4, r3, [r6]
 8000c70:	4639      	mov	r1, r7
 8000c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c76:	428b      	cmp	r3, r1
 8000c78:	d909      	bls.n	8000c8e <__udivmoddi4+0xbe>
 8000c7a:	2e00      	cmp	r6, #0
 8000c7c:	f000 80eb 	beq.w	8000e56 <__udivmoddi4+0x286>
 8000c80:	2700      	movs	r7, #0
 8000c82:	e9c6 0100 	strd	r0, r1, [r6]
 8000c86:	4638      	mov	r0, r7
 8000c88:	4639      	mov	r1, r7
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	fab3 f783 	clz	r7, r3
 8000c92:	2f00      	cmp	r7, #0
 8000c94:	d147      	bne.n	8000d26 <__udivmoddi4+0x156>
 8000c96:	428b      	cmp	r3, r1
 8000c98:	d302      	bcc.n	8000ca0 <__udivmoddi4+0xd0>
 8000c9a:	4282      	cmp	r2, r0
 8000c9c:	f200 80fa 	bhi.w	8000e94 <__udivmoddi4+0x2c4>
 8000ca0:	1a84      	subs	r4, r0, r2
 8000ca2:	eb61 0303 	sbc.w	r3, r1, r3
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	4698      	mov	r8, r3
 8000caa:	2e00      	cmp	r6, #0
 8000cac:	d0e0      	beq.n	8000c70 <__udivmoddi4+0xa0>
 8000cae:	e9c6 4800 	strd	r4, r8, [r6]
 8000cb2:	e7dd      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000cb4:	b902      	cbnz	r2, 8000cb8 <__udivmoddi4+0xe8>
 8000cb6:	deff      	udf	#255	; 0xff
 8000cb8:	fab2 f282 	clz	r2, r2
 8000cbc:	2a00      	cmp	r2, #0
 8000cbe:	f040 808f 	bne.w	8000de0 <__udivmoddi4+0x210>
 8000cc2:	1b49      	subs	r1, r1, r5
 8000cc4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cc8:	fa1f f885 	uxth.w	r8, r5
 8000ccc:	2701      	movs	r7, #1
 8000cce:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cd2:	0c23      	lsrs	r3, r4, #16
 8000cd4:	fb0e 111c 	mls	r1, lr, ip, r1
 8000cd8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cdc:	fb08 f10c 	mul.w	r1, r8, ip
 8000ce0:	4299      	cmp	r1, r3
 8000ce2:	d907      	bls.n	8000cf4 <__udivmoddi4+0x124>
 8000ce4:	18eb      	adds	r3, r5, r3
 8000ce6:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cea:	d202      	bcs.n	8000cf2 <__udivmoddi4+0x122>
 8000cec:	4299      	cmp	r1, r3
 8000cee:	f200 80cd 	bhi.w	8000e8c <__udivmoddi4+0x2bc>
 8000cf2:	4684      	mov	ip, r0
 8000cf4:	1a59      	subs	r1, r3, r1
 8000cf6:	b2a3      	uxth	r3, r4
 8000cf8:	fbb1 f0fe 	udiv	r0, r1, lr
 8000cfc:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d00:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d04:	fb08 f800 	mul.w	r8, r8, r0
 8000d08:	45a0      	cmp	r8, r4
 8000d0a:	d907      	bls.n	8000d1c <__udivmoddi4+0x14c>
 8000d0c:	192c      	adds	r4, r5, r4
 8000d0e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x14a>
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	f200 80b6 	bhi.w	8000e86 <__udivmoddi4+0x2b6>
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	eba4 0408 	sub.w	r4, r4, r8
 8000d20:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d24:	e79f      	b.n	8000c66 <__udivmoddi4+0x96>
 8000d26:	f1c7 0c20 	rsb	ip, r7, #32
 8000d2a:	40bb      	lsls	r3, r7
 8000d2c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d30:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d34:	fa01 f407 	lsl.w	r4, r1, r7
 8000d38:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d3c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d40:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d44:	4325      	orrs	r5, r4
 8000d46:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d4a:	0c2c      	lsrs	r4, r5, #16
 8000d4c:	fb08 3319 	mls	r3, r8, r9, r3
 8000d50:	fa1f fa8e 	uxth.w	sl, lr
 8000d54:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d58:	fb09 f40a 	mul.w	r4, r9, sl
 8000d5c:	429c      	cmp	r4, r3
 8000d5e:	fa02 f207 	lsl.w	r2, r2, r7
 8000d62:	fa00 f107 	lsl.w	r1, r0, r7
 8000d66:	d90b      	bls.n	8000d80 <__udivmoddi4+0x1b0>
 8000d68:	eb1e 0303 	adds.w	r3, lr, r3
 8000d6c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d70:	f080 8087 	bcs.w	8000e82 <__udivmoddi4+0x2b2>
 8000d74:	429c      	cmp	r4, r3
 8000d76:	f240 8084 	bls.w	8000e82 <__udivmoddi4+0x2b2>
 8000d7a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d7e:	4473      	add	r3, lr
 8000d80:	1b1b      	subs	r3, r3, r4
 8000d82:	b2ad      	uxth	r5, r5
 8000d84:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d88:	fb08 3310 	mls	r3, r8, r0, r3
 8000d8c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d90:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d94:	45a2      	cmp	sl, r4
 8000d96:	d908      	bls.n	8000daa <__udivmoddi4+0x1da>
 8000d98:	eb1e 0404 	adds.w	r4, lr, r4
 8000d9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da0:	d26b      	bcs.n	8000e7a <__udivmoddi4+0x2aa>
 8000da2:	45a2      	cmp	sl, r4
 8000da4:	d969      	bls.n	8000e7a <__udivmoddi4+0x2aa>
 8000da6:	3802      	subs	r0, #2
 8000da8:	4474      	add	r4, lr
 8000daa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dae:	fba0 8902 	umull	r8, r9, r0, r2
 8000db2:	eba4 040a 	sub.w	r4, r4, sl
 8000db6:	454c      	cmp	r4, r9
 8000db8:	46c2      	mov	sl, r8
 8000dba:	464b      	mov	r3, r9
 8000dbc:	d354      	bcc.n	8000e68 <__udivmoddi4+0x298>
 8000dbe:	d051      	beq.n	8000e64 <__udivmoddi4+0x294>
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d069      	beq.n	8000e98 <__udivmoddi4+0x2c8>
 8000dc4:	ebb1 050a 	subs.w	r5, r1, sl
 8000dc8:	eb64 0403 	sbc.w	r4, r4, r3
 8000dcc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dd0:	40fd      	lsrs	r5, r7
 8000dd2:	40fc      	lsrs	r4, r7
 8000dd4:	ea4c 0505 	orr.w	r5, ip, r5
 8000dd8:	e9c6 5400 	strd	r5, r4, [r6]
 8000ddc:	2700      	movs	r7, #0
 8000dde:	e747      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000de0:	f1c2 0320 	rsb	r3, r2, #32
 8000de4:	fa20 f703 	lsr.w	r7, r0, r3
 8000de8:	4095      	lsls	r5, r2
 8000dea:	fa01 f002 	lsl.w	r0, r1, r2
 8000dee:	fa21 f303 	lsr.w	r3, r1, r3
 8000df2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000df6:	4338      	orrs	r0, r7
 8000df8:	0c01      	lsrs	r1, r0, #16
 8000dfa:	fbb3 f7fe 	udiv	r7, r3, lr
 8000dfe:	fa1f f885 	uxth.w	r8, r5
 8000e02:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e0a:	fb07 f308 	mul.w	r3, r7, r8
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	fa04 f402 	lsl.w	r4, r4, r2
 8000e14:	d907      	bls.n	8000e26 <__udivmoddi4+0x256>
 8000e16:	1869      	adds	r1, r5, r1
 8000e18:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e1c:	d22f      	bcs.n	8000e7e <__udivmoddi4+0x2ae>
 8000e1e:	428b      	cmp	r3, r1
 8000e20:	d92d      	bls.n	8000e7e <__udivmoddi4+0x2ae>
 8000e22:	3f02      	subs	r7, #2
 8000e24:	4429      	add	r1, r5
 8000e26:	1acb      	subs	r3, r1, r3
 8000e28:	b281      	uxth	r1, r0
 8000e2a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e2e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb00 f308 	mul.w	r3, r0, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d907      	bls.n	8000e4e <__udivmoddi4+0x27e>
 8000e3e:	1869      	adds	r1, r5, r1
 8000e40:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e44:	d217      	bcs.n	8000e76 <__udivmoddi4+0x2a6>
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d915      	bls.n	8000e76 <__udivmoddi4+0x2a6>
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	4429      	add	r1, r5
 8000e4e:	1ac9      	subs	r1, r1, r3
 8000e50:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e54:	e73b      	b.n	8000cce <__udivmoddi4+0xfe>
 8000e56:	4637      	mov	r7, r6
 8000e58:	4630      	mov	r0, r6
 8000e5a:	e709      	b.n	8000c70 <__udivmoddi4+0xa0>
 8000e5c:	4607      	mov	r7, r0
 8000e5e:	e6e7      	b.n	8000c30 <__udivmoddi4+0x60>
 8000e60:	4618      	mov	r0, r3
 8000e62:	e6fb      	b.n	8000c5c <__udivmoddi4+0x8c>
 8000e64:	4541      	cmp	r1, r8
 8000e66:	d2ab      	bcs.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e68:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e6c:	eb69 020e 	sbc.w	r2, r9, lr
 8000e70:	3801      	subs	r0, #1
 8000e72:	4613      	mov	r3, r2
 8000e74:	e7a4      	b.n	8000dc0 <__udivmoddi4+0x1f0>
 8000e76:	4660      	mov	r0, ip
 8000e78:	e7e9      	b.n	8000e4e <__udivmoddi4+0x27e>
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	e795      	b.n	8000daa <__udivmoddi4+0x1da>
 8000e7e:	4667      	mov	r7, ip
 8000e80:	e7d1      	b.n	8000e26 <__udivmoddi4+0x256>
 8000e82:	4681      	mov	r9, r0
 8000e84:	e77c      	b.n	8000d80 <__udivmoddi4+0x1b0>
 8000e86:	3802      	subs	r0, #2
 8000e88:	442c      	add	r4, r5
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0x14c>
 8000e8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e90:	442b      	add	r3, r5
 8000e92:	e72f      	b.n	8000cf4 <__udivmoddi4+0x124>
 8000e94:	4638      	mov	r0, r7
 8000e96:	e708      	b.n	8000caa <__udivmoddi4+0xda>
 8000e98:	4637      	mov	r7, r6
 8000e9a:	e6e9      	b.n	8000c70 <__udivmoddi4+0xa0>

08000e9c <__aeabi_idiv0>:
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop

08000ea0 <DATA_LOGGER_Init>:
static uint8_t name_input_pwm1[] = "PWM 1";


void DATA_LOGGER_Init(system_t * sys_){

	sys = sys_;
 8000ea0:	4ad4      	ldr	r2, [pc, #848]	; (80011f4 <DATA_LOGGER_Init+0x354>)

	//	-----------------------------------------------	Définitions des data	-----------------------------------------------------------------
	//Angle
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							NOT_USED);
 8000ea2:	4bd5      	ldr	r3, [pc, #852]	; (80011f8 <DATA_LOGGER_Init+0x358>)
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							USED_AS_OUTPUT);

	//Angles acc
	DEFINE_DATA(DATA_ID_ROLL_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_ROLL], 								DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle_acc,						NOT_USED);
 8000ea4:	f8df c390 	ldr.w	ip, [pc, #912]	; 8001238 <DATA_LOGGER_Init+0x398>
void DATA_LOGGER_Init(system_t * sys_){
 8000ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys = sys_;
 8000eac:	6010      	str	r0, [r2, #0]
	DEFINE_DATA(DATA_ID_PITCH_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle_acc,						NOT_USED);
 8000eae:	2703      	movs	r7, #3

	//Angle rate
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							NOT_USED);
 8000eb0:	f100 0208 	add.w	r2, r0, #8
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							NOT_USED);
 8000eb4:	f500 7bae 	add.w	fp, r0, #348	; 0x15c
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							USED_AS_OUTPUT);
 8000eb8:	f500 79b0 	add.w	r9, r0, #352	; 0x160
	DEFINE_DATA(DATA_ID_ROLL_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_ROLL], 								DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle_acc,						NOT_USED);
 8000ebc:	f500 7eb6 	add.w	lr, r0, #364	; 0x16c
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							NOT_USED);
 8000ec0:	f8df a378 	ldr.w	sl, [pc, #888]	; 800123c <DATA_LOGGER_Init+0x39c>
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							USED_AS_OUTPUT);
 8000ec4:	f8df 8378 	ldr.w	r8, [pc, #888]	; 8001240 <DATA_LOGGER_Init+0x3a0>
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							NOT_USED);
 8000ec8:	655a      	str	r2, [r3, #84]	; 0x54
	DEFINE_DATA(DATA_ID_PITCH_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle_acc,						NOT_USED);
 8000eca:	f883 7044 	strb.w	r7, [r3, #68]	; 0x44
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 							USED_AS_OUTPUT);
 8000ece:	f100 020c 	add.w	r2, r0, #12
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							NOT_USED);
 8000ed2:	4fca      	ldr	r7, [pc, #808]	; (80011fc <DATA_LOGGER_Init+0x35c>)
	DEFINE_DATA(DATA_ID_PITCH_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle_acc,						NOT_USED);
 8000ed4:	4dca      	ldr	r5, [pc, #808]	; (8001200 <DATA_LOGGER_Init+0x360>)
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 							USED_AS_OUTPUT);
 8000ed6:	669a      	str	r2, [r3, #104]	; 0x68
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							NOT_USED);
 8000ed8:	2129      	movs	r1, #41	; 0x29
 8000eda:	2200      	movs	r2, #0
	DEFINE_DATA(DATA_ID_PITCH_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle_acc,						NOT_USED);
 8000edc:	f500 76b8 	add.w	r6, r0, #368	; 0x170
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							NOT_USED);
 8000ee0:	2404      	movs	r4, #4
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							NOT_USED);
 8000ee2:	f8c3 b004 	str.w	fp, [r3, #4]
 8000ee6:	f8c3 a00c 	str.w	sl, [r3, #12]
 8000eea:	f04f 0b0a 	mov.w	fp, #10
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							USED_AS_OUTPUT);
 8000eee:	f04f 0a01 	mov.w	sl, #1
 8000ef2:	f8c3 9018 	str.w	r9, [r3, #24]
 8000ef6:	f8c3 8020 	str.w	r8, [r3, #32]
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							NOT_USED);
 8000efa:	f04f 0909 	mov.w	r9, #9
	DEFINE_DATA(DATA_ID_ROLL_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_ROLL], 								DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle_acc,						NOT_USED);
 8000efe:	f04f 0802 	mov.w	r8, #2
 8000f02:	f8c3 e02c 	str.w	lr, [r3, #44]	; 0x2c
 8000f06:	f8c3 c034 	str.w	ip, [r3, #52]	; 0x34
 8000f0a:	f04f 0e0c 	mov.w	lr, #12
	DEFINE_DATA(DATA_ID_PITCH_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle_acc,						NOT_USED);
 8000f0e:	f04f 0c0d 	mov.w	ip, #13
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							NOT_USED);
 8000f12:	65df      	str	r7, [r3, #92]	; 0x5c
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							USED_AS_OUTPUT);
 8000f14:	f04f 070b 	mov.w	r7, #11
	DEFINE_DATA(DATA_ID_PITCH_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle_acc,						NOT_USED);
 8000f18:	641e      	str	r6, [r3, #64]	; 0x40
 8000f1a:	649d      	str	r5, [r3, #72]	; 0x48
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							NOT_USED);
 8000f1c:	f883 4058 	strb.w	r4, [r3, #88]	; 0x58
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					NOT_USED);
 8000f20:	2506      	movs	r5, #6
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							NOT_USED);
 8000f22:	721a      	strb	r2, [r3, #8]
 8000f24:	745a      	strb	r2, [r3, #17]
	DEFINE_DATA(DATA_ID_ROLL_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_ROLL], 								DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle_acc,						NOT_USED);
 8000f26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	DEFINE_DATA(DATA_ID_PITCH_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle_acc,						NOT_USED);
 8000f2a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							NOT_USED);
 8000f2e:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							NOT_USED);
 8000f32:	7259      	strb	r1, [r3, #9]
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							USED_AS_OUTPUT);
 8000f34:	7759      	strb	r1, [r3, #29]
	DEFINE_DATA(DATA_ID_ROLL_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_ROLL], 								DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle_acc,						NOT_USED);
 8000f36:	f883 1031 	strb.w	r1, [r3, #49]	; 0x31
	DEFINE_DATA(DATA_ID_PITCH_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle_acc,						NOT_USED);
 8000f3a:	f883 1045 	strb.w	r1, [r3, #69]	; 0x45
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							NOT_USED);
 8000f3e:	f883 1059 	strb.w	r1, [r3, #89]	; 0x59
	DEFINE_DATA(DATA_ID_ROLL_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_ROLL], 							DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle,							NOT_USED);
 8000f42:	f883 b010 	strb.w	fp, [r3, #16]
	DEFINE_DATA(DATA_ID_PITCH_ANGLE, (uint8_t*)&sys->orientation.angular_position[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle,							USED_AS_OUTPUT);
 8000f46:	f883 a01c 	strb.w	sl, [r3, #28]
 8000f4a:	f883 a025 	strb.w	sl, [r3, #37]	; 0x25
 8000f4e:	f883 7024 	strb.w	r7, [r3, #36]	; 0x24
	DEFINE_DATA(DATA_ID_ROLL_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_ROLL], 								DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle_acc,						NOT_USED);
 8000f52:	f883 e038 	strb.w	lr, [r3, #56]	; 0x38
	DEFINE_DATA(DATA_ID_PITCH_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_PITCH], 							DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_angle_acc,						NOT_USED);
 8000f56:	f883 c04c 	strb.w	ip, [r3, #76]	; 0x4c
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 							USED_AS_OUTPUT);
 8000f5a:	f04f 0605 	mov.w	r6, #5
	DEFINE_DATA(DATA_ID_ROLL_ACC_ANGLE, (uint8_t*)&sys->orientation.acc_angles[ORIENTATION_ROLL], 								DATA_FORMAT_16B_FLOAT_1D, 	name_roll_angle_acc,						NOT_USED);
 8000f5e:	f883 8030 	strb.w	r8, [r3, #48]	; 0x30
	DEFINE_DATA(DATA_ID_ROLL_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro, 							NOT_USED);
 8000f62:	f883 9060 	strb.w	r9, [r3, #96]	; 0x60

	//Acceleration
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								NOT_USED);
	DEFINE_DATA(DATA_ID_PITCH_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc, 							NOT_USED);
 8000f66:	f883 90ec 	strb.w	r9, [r3, #236]	; 0xec
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 							USED_AS_OUTPUT);
 8000f6a:	f8df 92d8 	ldr.w	r9, [pc, #728]	; 8001244 <DATA_LOGGER_Init+0x3a4>
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								NOT_USED);
 8000f6e:	f883 b0d0 	strb.w	fp, [r3, #208]	; 0xd0
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					NOT_USED);
 8000f72:	2408      	movs	r4, #8
	DEFINE_DATA(DATA_ID_PITCH_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc, 							NOT_USED);
 8000f74:	f883 70e4 	strb.w	r7, [r3, #228]	; 0xe4
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					NOT_USED);
 8000f78:	f883 5080 	strb.w	r5, [r3, #128]	; 0x80
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 							USED_AS_OUTPUT);
 8000f7c:	f883 606c 	strb.w	r6, [r3, #108]	; 0x6c
	DEFINE_DATA(DATA_ID_YAW_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc, 								NOT_USED);
 8000f80:	f04f 0507 	mov.w	r5, #7
	DEFINE_DATA(DATA_ID_PITCH_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc, 							NOT_USED);
 8000f84:	463e      	mov	r6, r7
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 							USED_AS_OUTPUT);
 8000f86:	f883 b074 	strb.w	fp, [r3, #116]	; 0x74
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					NOT_USED);
 8000f8a:	4f9e      	ldr	r7, [pc, #632]	; (8001204 <DATA_LOGGER_Init+0x364>)
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 							USED_AS_OUTPUT);
 8000f8c:	f8c3 9070 	str.w	r9, [r3, #112]	; 0x70
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					NOT_USED);
 8000f90:	f100 0b10 	add.w	fp, r0, #16
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								NOT_USED);
 8000f94:	f100 097c 	add.w	r9, r0, #124	; 0x7c
	DEFINE_DATA(DATA_ID_YAW_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc, 								NOT_USED);
 8000f98:	f883 e0f8 	strb.w	lr, [r3, #248]	; 0xf8

	//Acceleration
	DEFINE_DATA(DATA_ID_ROLL_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc_raw, 							NOT_USED);
 8000f9c:	f883 c10c 	strb.w	ip, [r3, #268]	; 0x10c
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					NOT_USED);
 8000fa0:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								NOT_USED);
 8000fa4:	f883 40d8 	strb.w	r4, [r3, #216]	; 0xd8
	DEFINE_DATA(DATA_ID_YAW_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc, 								NOT_USED);
 8000fa8:	f883 5100 	strb.w	r5, [r3, #256]	; 0x100
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					NOT_USED);
 8000fac:	f8c3 b07c 	str.w	fp, [r3, #124]	; 0x7c
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								NOT_USED);
 8000fb0:	4d95      	ldr	r5, [pc, #596]	; (8001208 <DATA_LOGGER_Init+0x368>)
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					NOT_USED);
 8000fb2:	f8c3 7084 	str.w	r7, [r3, #132]	; 0x84
	DEFINE_DATA(DATA_ID_PITCH_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc, 							NOT_USED);
 8000fb6:	f100 0b80 	add.w	fp, r0, #128	; 0x80
 8000fba:	4f94      	ldr	r7, [pc, #592]	; (800120c <DATA_LOGGER_Init+0x36c>)
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								NOT_USED);
 8000fbc:	f8c3 90cc 	str.w	r9, [r3, #204]	; 0xcc
	DEFINE_DATA(DATA_ID_YAW_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc, 								NOT_USED);
 8000fc0:	f100 0984 	add.w	r9, r0, #132	; 0x84
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								NOT_USED);
 8000fc4:	f8c3 50d4 	str.w	r5, [r3, #212]	; 0xd4
	DEFINE_DATA(DATA_ID_PITCH_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc, 							NOT_USED);
 8000fc8:	f8c3 b0e0 	str.w	fp, [r3, #224]	; 0xe0
	DEFINE_DATA(DATA_ID_YAW_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc, 								NOT_USED);
 8000fcc:	4d90      	ldr	r5, [pc, #576]	; (8001210 <DATA_LOGGER_Init+0x370>)
	DEFINE_DATA(DATA_ID_ROLL_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc_raw, 							NOT_USED);
 8000fce:	f8d0 b078 	ldr.w	fp, [r0, #120]	; 0x78
	DEFINE_DATA(DATA_ID_PITCH_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc, 							NOT_USED);
 8000fd2:	f8c3 70e8 	str.w	r7, [r3, #232]	; 0xe8
	DEFINE_DATA(DATA_ID_YAW_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc, 								NOT_USED);
 8000fd6:	f8c3 90f4 	str.w	r9, [r3, #244]	; 0xf4
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								NOT_USED);
 8000fda:	272b      	movs	r7, #43	; 0x2b
	DEFINE_DATA(DATA_ID_ROLL_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc_raw, 							NOT_USED);
 8000fdc:	f8df 9268 	ldr.w	r9, [pc, #616]	; 8001248 <DATA_LOGGER_Init+0x3a8>
	DEFINE_DATA(DATA_ID_PITCH_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro, 							USED_AS_OUTPUT);
 8000fe0:	f883 106d 	strb.w	r1, [r3, #109]	; 0x6d
 8000fe4:	f883 a075 	strb.w	sl, [r3, #117]	; 0x75
	DEFINE_DATA(DATA_ID_YAW_GYRO, (uint8_t*)&sys->sensors.gyro.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro, 			 					NOT_USED);
 8000fe8:	f883 1081 	strb.w	r1, [r3, #129]	; 0x81
 8000fec:	f883 2089 	strb.w	r2, [r3, #137]	; 0x89
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								NOT_USED);
 8000ff0:	f883 20d9 	strb.w	r2, [r3, #217]	; 0xd9
	DEFINE_DATA(DATA_ID_PITCH_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc, 							NOT_USED);
 8000ff4:	f883 20ed 	strb.w	r2, [r3, #237]	; 0xed
	DEFINE_DATA(DATA_ID_YAW_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc, 								NOT_USED);
 8000ff8:	f883 2101 	strb.w	r2, [r3, #257]	; 0x101
 8000ffc:	f8c3 50fc 	str.w	r5, [r3, #252]	; 0xfc
	DEFINE_DATA(DATA_ID_ROLL_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc_raw, 							NOT_USED);
 8001000:	f8c3 b108 	str.w	fp, [r3, #264]	; 0x108
	DEFINE_DATA(DATA_ID_PITCH_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_PITCH], 										DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc_raw, 						NOT_USED);
	DEFINE_DATA(DATA_ID_YAW_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_YAW], 											DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc_raw, 							NOT_USED);
 8001004:	250f      	movs	r5, #15
	DEFINE_DATA(DATA_ID_ROLL_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc, 								NOT_USED);
 8001006:	f883 70d1 	strb.w	r7, [r3, #209]	; 0xd1
	DEFINE_DATA(DATA_ID_PITCH_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_PITCH], 									DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc, 							NOT_USED);
 800100a:	f883 70e5 	strb.w	r7, [r3, #229]	; 0xe5
	DEFINE_DATA(DATA_ID_YAW_ACC, (uint8_t*)&sys->sensors.acc.filtered[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc, 								NOT_USED);
 800100e:	f883 70f9 	strb.w	r7, [r3, #249]	; 0xf9
	DEFINE_DATA(DATA_ID_ROLL_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc_raw, 							NOT_USED);
 8001012:	f883 710d 	strb.w	r7, [r3, #269]	; 0x10d
	DEFINE_DATA(DATA_ID_YAW_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_YAW], 											DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc_raw, 							NOT_USED);
 8001016:	f883 613c 	strb.w	r6, [r3, #316]	; 0x13c
	DEFINE_DATA(DATA_ID_ROLL_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc_raw, 							NOT_USED);
 800101a:	f8c3 9110 	str.w	r9, [r3, #272]	; 0x110

	//Angle Rate raw
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 						NOT_USED);
 800101e:	f04f 0607 	mov.w	r6, #7
	DEFINE_DATA(DATA_ID_PITCH_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_PITCH], 										DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc_raw, 						NOT_USED);
 8001022:	f04f 090e 	mov.w	r9, #14
	DEFINE_DATA(DATA_ID_ROLL_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc_raw, 							NOT_USED);
 8001026:	f883 e114 	strb.w	lr, [r3, #276]	; 0x114
	DEFINE_DATA(DATA_ID_PITCH_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_PITCH], 										DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc_raw, 						NOT_USED);
 800102a:	f883 c128 	strb.w	ip, [r3, #296]	; 0x128
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 						NOT_USED);
 800102e:	f883 6094 	strb.w	r6, [r3, #148]	; 0x94
	DEFINE_DATA(DATA_ID_PITCH_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_PITCH], 										DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc_raw, 						NOT_USED);
 8001032:	f883 9120 	strb.w	r9, [r3, #288]	; 0x120
	DEFINE_DATA(DATA_ID_YAW_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_YAW], 											DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc_raw, 							NOT_USED);
 8001036:	f883 5134 	strb.w	r5, [r3, #308]	; 0x134
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 						NOT_USED);
 800103a:	6845      	ldr	r5, [r0, #4]
	DEFINE_DATA(DATA_ID_PITCH_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_PITCH], 										DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc_raw, 						NOT_USED);
 800103c:	f883 7121 	strb.w	r7, [r3, #289]	; 0x121
	DEFINE_DATA(DATA_ID_YAW_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_YAW], 											DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc_raw, 							NOT_USED);
 8001040:	f883 7135 	strb.w	r7, [r3, #309]	; 0x135
	DEFINE_DATA(DATA_ID_PITCH_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_PITCH], 										DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc_raw, 						NOT_USED);
 8001044:	f10b 0704 	add.w	r7, fp, #4
 8001048:	f8c3 711c 	str.w	r7, [r3, #284]	; 0x11c
	DEFINE_DATA(DATA_ID_YAW_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_YAW], 											DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc_raw, 							NOT_USED);
 800104c:	44a3      	add	fp, r4
	DEFINE_DATA(DATA_ID_PITCH_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_PITCH], 										DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc_raw, 						NOT_USED);
 800104e:	4f71      	ldr	r7, [pc, #452]	; (8001214 <DATA_LOGGER_Init+0x374>)
	DEFINE_DATA(DATA_ID_YAW_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_YAW], 											DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc_raw, 							NOT_USED);
 8001050:	f8c3 b130 	str.w	fp, [r3, #304]	; 0x130
	DEFINE_DATA(DATA_ID_PITCH_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_PITCH], 										DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc_raw, 						NOT_USED);
 8001054:	f8c3 7124 	str.w	r7, [r3, #292]	; 0x124
	DEFINE_DATA(DATA_ID_YAW_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_YAW], 											DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc_raw, 							NOT_USED);
 8001058:	f8df b1f0 	ldr.w	fp, [pc, #496]	; 800124c <DATA_LOGGER_Init+0x3ac>
 800105c:	f8c3 b138 	str.w	fp, [r3, #312]	; 0x138
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,						NOT_USED);
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 							NOT_USED);
 8001060:	192f      	adds	r7, r5, r4
 8001062:	f04f 0609 	mov.w	r6, #9
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 						NOT_USED);
 8001066:	f8df b1e8 	ldr.w	fp, [pc, #488]	; 8001250 <DATA_LOGGER_Init+0x3b0>
 800106a:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,						NOT_USED);
 800106e:	f8c3 50a4 	str.w	r5, [r3, #164]	; 0xa4
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 							NOT_USED);
 8001072:	f8c3 70b8 	str.w	r7, [r3, #184]	; 0xb8
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,						NOT_USED);
 8001076:	4d68      	ldr	r5, [pc, #416]	; (8001218 <DATA_LOGGER_Init+0x378>)
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 							NOT_USED);
 8001078:	4f68      	ldr	r7, [pc, #416]	; (800121c <DATA_LOGGER_Init+0x37c>)
 800107a:	f883 60bc 	strb.w	r6, [r3, #188]	; 0xbc


	DEFINE_DATA(DATA_ID_SIMULATION_OUTPUT1,	 (uint8_t*)sys->state_space.X_array, 											DATA_FORMAT_16B_FLOAT_2D, 	name_simulation_output1, 					USED_AS_OUTPUT);
 800107e:	f04f 0607 	mov.w	r6, #7
	DEFINE_DATA(DATA_ID_ROLL_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_3D, 	name_roll_acc_raw, 							NOT_USED);
 8001082:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	DEFINE_DATA(DATA_ID_PITCH_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_PITCH], 										DATA_FORMAT_16B_FLOAT_3D, 	name_pitch_acc_raw, 						NOT_USED);
 8001086:	f883 2129 	strb.w	r2, [r3, #297]	; 0x129
	DEFINE_DATA(DATA_ID_YAW_ACC_RAW, (uint8_t*)&sys->sensors.acc.raw[ORIENTATION_YAW], 											DATA_FORMAT_16B_FLOAT_3D, 	name_yaw_acc_raw, 							NOT_USED);
 800108a:	f883 213d 	strb.w	r2, [r3, #317]	; 0x13d
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 						NOT_USED);
 800108e:	f883 1095 	strb.w	r1, [r3, #149]	; 0x95
 8001092:	f883 c09c 	strb.w	ip, [r3, #156]	; 0x9c
 8001096:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,						NOT_USED);
 800109a:	f883 40a8 	strb.w	r4, [r3, #168]	; 0xa8
 800109e:	f883 10a9 	strb.w	r1, [r3, #169]	; 0xa9
 80010a2:	f883 90b0 	strb.w	r9, [r3, #176]	; 0xb0
 80010a6:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 							NOT_USED);
 80010aa:	f883 10bd 	strb.w	r1, [r3, #189]	; 0xbd
 80010ae:	f883 e0c4 	strb.w	lr, [r3, #196]	; 0xc4
	DEFINE_DATA(DATA_ID_SIMULATION_OUTPUT1,	 (uint8_t*)sys->state_space.X_array, 											DATA_FORMAT_16B_FLOAT_2D, 	name_simulation_output1, 					USED_AS_OUTPUT);
 80010b2:	2111      	movs	r1, #17
 80010b4:	f200 6eb4 	addw	lr, r0, #1716	; 0x6b4
	DEFINE_DATA(DATA_ID_ROLL_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 										DATA_FORMAT_16B_FLOAT_1D, 	name_roll_gyro_raw, 						NOT_USED);
 80010b8:	f8c3 b098 	str.w	fp, [r3, #152]	; 0x98

	DEFINE_DATA(DATA_ID_MCU_LOAD,	 (uint8_t*)&sys->soft.cpu_load, 															DATA_FORMAT_16B_FLOAT_2D, 	name_mcu_load, 								USED_AS_OUTPUT);
 80010bc:	f500 7050 	add.w	r0, r0, #832	; 0x340
	DEFINE_DATA(DATA_ID_PITCH_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_ROLL], 									DATA_FORMAT_16B_FLOAT_1D, 	name_pitch_gyro_raw,						NOT_USED);
 80010c0:	f8c3 50ac 	str.w	r5, [r3, #172]	; 0xac
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 							NOT_USED);
 80010c4:	f8c3 70c0 	str.w	r7, [r3, #192]	; 0xc0
	DEFINE_DATA(DATA_ID_SIMULATION_OUTPUT1,	 (uint8_t*)sys->state_space.X_array, 											DATA_FORMAT_16B_FLOAT_2D, 	name_simulation_output1, 					USED_AS_OUTPUT);
 80010c8:	f883 6164 	strb.w	r6, [r3, #356]	; 0x164

	//Buttons
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_config_request, 						USED_AS_INPUT );
 80010cc:	f04f 060b 	mov.w	r6, #11
	DEFINE_DATA(DATA_ID_SIMULATION_OUTPUT1,	 (uint8_t*)sys->state_space.X_array, 											DATA_FORMAT_16B_FLOAT_2D, 	name_simulation_output1, 					USED_AS_OUTPUT);
 80010d0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8001254 <DATA_LOGGER_Init+0x3b4>
	DEFINE_DATA(DATA_ID_MCU_LOAD,	 (uint8_t*)&sys->soft.cpu_load, 															DATA_FORMAT_16B_FLOAT_2D, 	name_mcu_load, 								USED_AS_OUTPUT);
 80010d4:	4f52      	ldr	r7, [pc, #328]	; (8001220 <DATA_LOGGER_Init+0x380>)
	DEFINE_DATA(DATA_ID_SIMULATION_OUTPUT1,	 (uint8_t*)sys->state_space.X_array, 											DATA_FORMAT_16B_FLOAT_2D, 	name_simulation_output1, 					USED_AS_OUTPUT);
 80010d6:	f883 a165 	strb.w	sl, [r3, #357]	; 0x165
	DEFINE_DATA(DATA_ID_MCU_LOAD,	 (uint8_t*)&sys->soft.cpu_load, 															DATA_FORMAT_16B_FLOAT_2D, 	name_mcu_load, 								USED_AS_OUTPUT);
 80010da:	2518      	movs	r5, #24
 80010dc:	f883 41f0 	strb.w	r4, [r3, #496]	; 0x1f0
 80010e0:	f883 a1f1 	strb.w	sl, [r3, #497]	; 0x1f1
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_config_request, 						USED_AS_INPUT );
 80010e4:	4c4f      	ldr	r4, [pc, #316]	; (8001224 <DATA_LOGGER_Init+0x384>)
 80010e6:	f883 6178 	strb.w	r6, [r3, #376]	; 0x178
	DEFINE_DATA(DATA_ID_START_TRANSFER, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_transfer, 		 				USED_AS_INPUT);
 80010ea:	f04f 0a13 	mov.w	sl, #19
 80010ee:	f883 918c 	strb.w	r9, [r3, #396]	; 0x18c
	DEFINE_DATA(DATA_ID_STOP_TRANSFER, 		NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_stop_transfer, 						USED_AS_INPUT);
 80010f2:	f883 c1a0 	strb.w	ip, [r3, #416]	; 0x1a0
	DEFINE_DATA(DATA_ID_START_TRANSFER, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_transfer, 		 				USED_AS_INPUT);
 80010f6:	f8df 9160 	ldr.w	r9, [pc, #352]	; 8001258 <DATA_LOGGER_Init+0x3b8>
	DEFINE_DATA(DATA_ID_SIMULATION_OUTPUT1,	 (uint8_t*)sys->state_space.X_array, 											DATA_FORMAT_16B_FLOAT_2D, 	name_simulation_output1, 					USED_AS_OUTPUT);
 80010fa:	f883 115c 	strb.w	r1, [r3, #348]	; 0x15c
	DEFINE_DATA(DATA_ID_STOP_TRANSFER, 		NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_stop_transfer, 						USED_AS_INPUT);
 80010fe:	f04f 0c14 	mov.w	ip, #20
 8001102:	4949      	ldr	r1, [pc, #292]	; (8001228 <DATA_LOGGER_Init+0x388>)
	DEFINE_DATA(DATA_ID_SIMULATION_OUTPUT1,	 (uint8_t*)sys->state_space.X_array, 											DATA_FORMAT_16B_FLOAT_2D, 	name_simulation_output1, 					USED_AS_OUTPUT);
 8001104:	f8c3 e158 	str.w	lr, [r3, #344]	; 0x158
	DEFINE_DATA(DATA_ID_MCU_LOAD,	 (uint8_t*)&sys->soft.cpu_load, 															DATA_FORMAT_16B_FLOAT_2D, 	name_mcu_load, 								USED_AS_OUTPUT);
 8001108:	f8c3 01e4 	str.w	r0, [r3, #484]	; 0x1e4
	DEFINE_DATA(DATA_ID_IDLE_MODE, 			NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_idle_mode, 							USED_AS_INPUT);
 800110c:	f04f 0e15 	mov.w	lr, #21
	DEFINE_DATA(DATA_ID_SIMULATION_OUTPUT1,	 (uint8_t*)sys->state_space.X_array, 											DATA_FORMAT_16B_FLOAT_2D, 	name_simulation_output1, 					USED_AS_OUTPUT);
 8001110:	202a      	movs	r0, #42	; 0x2a
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_config_request, 						USED_AS_INPUT );
 8001112:	f04f 0612 	mov.w	r6, #18
	DEFINE_DATA(DATA_ID_YAW_GYRO_RAW, (uint8_t*)&sys->sensors.gyro.raw[ORIENTATION_YAW], 										DATA_FORMAT_16B_FLOAT_1D, 	name_yaw_gyro_raw, 							NOT_USED);
 8001116:	f883 20c5 	strb.w	r2, [r3, #197]	; 0xc5
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_config_request, 						USED_AS_INPUT );
 800111a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 800111e:	f883 2171 	strb.w	r2, [r3, #369]	; 0x171
	DEFINE_DATA(DATA_ID_START_TRANSFER, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_transfer, 		 				USED_AS_INPUT);
 8001122:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
 8001126:	f883 2185 	strb.w	r2, [r3, #389]	; 0x185
	DEFINE_DATA(DATA_ID_STOP_TRANSFER, 		NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_stop_transfer, 						USED_AS_INPUT);
 800112a:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
 800112e:	f883 2199 	strb.w	r2, [r3, #409]	; 0x199
	DEFINE_DATA(DATA_ID_IDLE_MODE, 			NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_idle_mode, 							USED_AS_INPUT);
 8001132:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
	DEFINE_DATA(DATA_ID_SIMULATION_OUTPUT1,	 (uint8_t*)sys->state_space.X_array, 											DATA_FORMAT_16B_FLOAT_2D, 	name_simulation_output1, 					USED_AS_OUTPUT);
 8001136:	f8c3 b160 	str.w	fp, [r3, #352]	; 0x160
	DEFINE_DATA(DATA_ID_MCU_LOAD,	 (uint8_t*)&sys->soft.cpu_load, 															DATA_FORMAT_16B_FLOAT_2D, 	name_mcu_load, 								USED_AS_OUTPUT);
 800113a:	f883 51e8 	strb.w	r5, [r3, #488]	; 0x1e8
 800113e:	f8c3 71ec 	str.w	r7, [r3, #492]	; 0x1ec
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_config_request, 						USED_AS_INPUT );
 8001142:	f883 6170 	strb.w	r6, [r3, #368]	; 0x170
 8001146:	f8c3 4174 	str.w	r4, [r3, #372]	; 0x174
	DEFINE_DATA(DATA_ID_START_TRANSFER, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_transfer, 		 				USED_AS_INPUT);
 800114a:	f883 a184 	strb.w	sl, [r3, #388]	; 0x184
 800114e:	f8c3 9188 	str.w	r9, [r3, #392]	; 0x188
	DEFINE_DATA(DATA_ID_STOP_TRANSFER, 		NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_stop_transfer, 						USED_AS_INPUT);
 8001152:	f883 c198 	strb.w	ip, [r3, #408]	; 0x198
 8001156:	f8c3 119c 	str.w	r1, [r3, #412]	; 0x19c
	DEFINE_DATA(DATA_ID_IDLE_MODE, 			NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_idle_mode, 							USED_AS_INPUT);
 800115a:	f883 e1ac 	strb.w	lr, [r3, #428]	; 0x1ac
	DEFINE_DATA(DATA_ID_SIMULATION_OUTPUT1,	 (uint8_t*)sys->state_space.X_array, 											DATA_FORMAT_16B_FLOAT_2D, 	name_simulation_output1, 					USED_AS_OUTPUT);
 800115e:	f883 015d 	strb.w	r0, [r3, #349]	; 0x15d
	DEFINE_DATA(DATA_ID_CONFIG_REQUEST, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_config_request, 						USED_AS_INPUT );
 8001162:	f883 8179 	strb.w	r8, [r3, #377]	; 0x179
	DEFINE_DATA(DATA_ID_START_TRANSFER, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_transfer, 		 				USED_AS_INPUT);
 8001166:	f883 818d 	strb.w	r8, [r3, #397]	; 0x18d
	DEFINE_DATA(DATA_ID_STOP_TRANSFER, 		NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_stop_transfer, 						USED_AS_INPUT);
 800116a:	f883 81a1 	strb.w	r8, [r3, #417]	; 0x1a1
	DEFINE_DATA(DATA_ID_FULL_MANUAL_MODE, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_full_manual_mode, 						USED_AS_INPUT);
 800116e:	2516      	movs	r5, #22
	DEFINE_DATA(DATA_ID_MCU_LOAD,	 (uint8_t*)&sys->soft.cpu_load, 															DATA_FORMAT_16B_FLOAT_2D, 	name_mcu_load, 								USED_AS_OUTPUT);
 8001170:	f883 01e9 	strb.w	r0, [r3, #489]	; 0x1e9
	DEFINE_DATA(DATA_ID_START_SIMULATION, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_simulation, 						USED_AS_INPUT);
 8001174:	2617      	movs	r6, #23
 8001176:	f04f 0a10 	mov.w	sl, #16


	DEFINE_DATA(DATA_ID_INPUT_PWM_1, 		NULL, 																				DATA_FORMAT_16B_UINT16, 	name_input_pwm1, 							USED_AS_INPUT);
 800117a:	f04f 0919 	mov.w	r9, #25
	DEFINE_DATA(DATA_ID_IDLE_MODE, 			NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_idle_mode, 							USED_AS_INPUT);
 800117e:	f883 21ad 	strb.w	r2, [r3, #429]	; 0x1ad
 8001182:	f04f 0e09 	mov.w	lr, #9
	DEFINE_DATA(DATA_ID_FULL_MANUAL_MODE, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_full_manual_mode, 						USED_AS_INPUT);
 8001186:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
 800118a:	f883 21c1 	strb.w	r2, [r3, #449]	; 0x1c1
 800118e:	f04f 000b 	mov.w	r0, #11
	DEFINE_DATA(DATA_ID_START_SIMULATION, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_simulation, 						USED_AS_INPUT);
 8001192:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
 8001196:	f883 21d5 	strb.w	r2, [r3, #469]	; 0x1d5
	DEFINE_DATA(DATA_ID_INPUT_PWM_1, 		NULL, 																				DATA_FORMAT_16B_UINT16, 	name_input_pwm1, 							USED_AS_INPUT);
 800119a:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
 800119e:	f04f 0205 	mov.w	r2, #5
	DEFINE_DATA(DATA_ID_IDLE_MODE, 			NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_idle_mode, 							USED_AS_INPUT);
 80011a2:	f8df b0b8 	ldr.w	fp, [pc, #184]	; 800125c <DATA_LOGGER_Init+0x3bc>
	DEFINE_DATA(DATA_ID_FULL_MANUAL_MODE, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_full_manual_mode, 						USED_AS_INPUT);
 80011a6:	4f21      	ldr	r7, [pc, #132]	; (800122c <DATA_LOGGER_Init+0x38c>)
	DEFINE_DATA(DATA_ID_START_SIMULATION, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_simulation, 						USED_AS_INPUT);
 80011a8:	4c21      	ldr	r4, [pc, #132]	; (8001230 <DATA_LOGGER_Init+0x390>)
	DEFINE_DATA(DATA_ID_INPUT_PWM_1, 		NULL, 																				DATA_FORMAT_16B_UINT16, 	name_input_pwm1, 							USED_AS_INPUT);
 80011aa:	4922      	ldr	r1, [pc, #136]	; (8001234 <DATA_LOGGER_Init+0x394>)
	DEFINE_DATA(DATA_ID_IDLE_MODE, 			NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_idle_mode, 							USED_AS_INPUT);
 80011ac:	f883 e1b4 	strb.w	lr, [r3, #436]	; 0x1b4
	DEFINE_DATA(DATA_ID_INPUT_PWM_1, 		NULL, 																				DATA_FORMAT_16B_UINT16, 	name_input_pwm1, 							USED_AS_INPUT);
 80011b0:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
	DEFINE_DATA(DATA_ID_FULL_MANUAL_MODE, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_full_manual_mode, 						USED_AS_INPUT);
 80011b4:	f883 01c8 	strb.w	r0, [r3, #456]	; 0x1c8
	DEFINE_DATA(DATA_ID_INPUT_PWM_1, 		NULL, 																				DATA_FORMAT_16B_UINT16, 	name_input_pwm1, 							USED_AS_INPUT);
 80011b8:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
	DEFINE_DATA(DATA_ID_FULL_MANUAL_MODE, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_full_manual_mode, 						USED_AS_INPUT);
 80011bc:	f883 51c0 	strb.w	r5, [r3, #448]	; 0x1c0
	DEFINE_DATA(DATA_ID_START_SIMULATION, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_simulation, 						USED_AS_INPUT);
 80011c0:	f883 61d4 	strb.w	r6, [r3, #468]	; 0x1d4
 80011c4:	f883 a1dc 	strb.w	sl, [r3, #476]	; 0x1dc
	DEFINE_DATA(DATA_ID_INPUT_PWM_1, 		NULL, 																				DATA_FORMAT_16B_UINT16, 	name_input_pwm1, 							USED_AS_INPUT);
 80011c8:	f883 91fc 	strb.w	r9, [r3, #508]	; 0x1fc
	DEFINE_DATA(DATA_ID_IDLE_MODE, 			NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_idle_mode, 							USED_AS_INPUT);
 80011cc:	f883 81b5 	strb.w	r8, [r3, #437]	; 0x1b5
	DEFINE_DATA(DATA_ID_FULL_MANUAL_MODE, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_full_manual_mode, 						USED_AS_INPUT);
 80011d0:	f883 81c9 	strb.w	r8, [r3, #457]	; 0x1c9
	DEFINE_DATA(DATA_ID_START_SIMULATION, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_simulation, 						USED_AS_INPUT);
 80011d4:	f883 81dd 	strb.w	r8, [r3, #477]	; 0x1dd
	DEFINE_DATA(DATA_ID_INPUT_PWM_1, 		NULL, 																				DATA_FORMAT_16B_UINT16, 	name_input_pwm1, 							USED_AS_INPUT);
 80011d8:	f883 8205 	strb.w	r8, [r3, #517]	; 0x205
	DEFINE_DATA(DATA_ID_IDLE_MODE, 			NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_idle_mode, 							USED_AS_INPUT);
 80011dc:	f8c3 b1b0 	str.w	fp, [r3, #432]	; 0x1b0
	DEFINE_DATA(DATA_ID_FULL_MANUAL_MODE, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_full_manual_mode, 						USED_AS_INPUT);
 80011e0:	f8c3 71c4 	str.w	r7, [r3, #452]	; 0x1c4
	DEFINE_DATA(DATA_ID_START_SIMULATION, 	NULL, 																				DATA_FORMAT_0B_BUTTON, 		name_start_simulation, 						USED_AS_INPUT);
 80011e4:	f8c3 41d8 	str.w	r4, [r3, #472]	; 0x1d8
	DEFINE_DATA(DATA_ID_INPUT_PWM_1, 		NULL, 																				DATA_FORMAT_16B_UINT16, 	name_input_pwm1, 							USED_AS_INPUT);
 80011e8:	f883 c1fd 	strb.w	ip, [r3, #509]	; 0x1fd
 80011ec:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200


}
 80011f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011f4:	20001afc 	.word	0x20001afc
 80011f8:	200018dc 	.word	0x200018dc
 80011fc:	200000c4 	.word	0x200000c4
 8001200:	20000060 	.word	0x20000060
 8001204:	20000130 	.word	0x20000130
 8001208:	2000008c 	.word	0x2000008c
 800120c:	20000038 	.word	0x20000038
 8001210:	2000011c 	.word	0x2000011c
 8001214:	20000044 	.word	0x20000044
 8001218:	2000007c 	.word	0x2000007c
 800121c:	2000013c 	.word	0x2000013c
 8001220:	2000002c 	.word	0x2000002c
 8001224:	20000000 	.word	0x20000000
 8001228:	2000010c 	.word	0x2000010c
 800122c:	2000000c 	.word	0x2000000c
 8001230:	200000e8 	.word	0x200000e8
 8001234:	20000024 	.word	0x20000024
 8001238:	200000b4 	.word	0x200000b4
 800123c:	200000a8 	.word	0x200000a8
 8001240:	20000054 	.word	0x20000054
 8001244:	20000070 	.word	0x20000070
 8001248:	20000098 	.word	0x20000098
 800124c:	20000124 	.word	0x20000124
 8001250:	200000d0 	.word	0x200000d0
 8001254:	200000e0 	.word	0x200000e0
 8001258:	200000fc 	.word	0x200000fc
 800125c:	20000018 	.word	0x20000018

08001260 <DATA_LOGGER_Main>:

void DATA_LOGGER_Stop(){
	stop_flag = TRUE;
}

void DATA_LOGGER_Main(void){
 8001260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	static data_logger_state_e previous_state 	= LOGGER_TRANSMIT_CONFIG ;
	bool_e entrance = previous_state != state ;
 8001264:	4ca3      	ldr	r4, [pc, #652]	; (80014f4 <DATA_LOGGER_Main+0x294>)
 8001266:	4aa4      	ldr	r2, [pc, #656]	; (80014f8 <DATA_LOGGER_Main+0x298>)
 8001268:	7823      	ldrb	r3, [r4, #0]
 800126a:	7811      	ldrb	r1, [r2, #0]
	previous_state = state ;

	switch(state){
 800126c:	2b01      	cmp	r3, #1
void DATA_LOGGER_Main(void){
 800126e:	ed2d 8b02 	vpush	{d8}
	previous_state = state ;
 8001272:	7013      	strb	r3, [r2, #0]
	switch(state){
 8001274:	f000 8094 	beq.w	80013a0 <DATA_LOGGER_Main+0x140>
 8001278:	d361      	bcc.n	800133e <DATA_LOGGER_Main+0xde>
 800127a:	2b02      	cmp	r3, #2
 800127c:	d146      	bne.n	800130c <DATA_LOGGER_Main+0xac>
			}

			break;

		case LOGGER_LOG:
			if(entrance)
 800127e:	2902      	cmp	r1, #2
 8001280:	f040 8125 	bne.w	80014ce <DATA_LOGGER_Main+0x26e>
				SCHEDULER_reschedule_task(TASK_LOGGER, 10000);	//Période d'envoie des données

			if(stop_flag)
 8001284:	4b9d      	ldr	r3, [pc, #628]	; (80014fc <DATA_LOGGER_Main+0x29c>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	f040 8102 	bne.w	8001492 <DATA_LOGGER_Main+0x232>
 800128e:	4d9c      	ldr	r5, [pc, #624]	; (8001500 <DATA_LOGGER_Main+0x2a0>)
//	uint16_t tmp_u16 = 0;
	int16_t tmp_16 = 0;
	float tmp_float = 0;

	//Premier octet contient l'id
	buffer[0] = id ;
 8001290:	4e9c      	ldr	r6, [pc, #624]	; (8001504 <DATA_LOGGER_Main+0x2a4>)
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
			break;
		case DATA_FORMAT_16B_FLOAT_3D:
			tmp_float = *(float*)data_list[id].data;
			tmp_16 = tmp_float * 1000;
 8001292:	eddf 8a9d 	vldr	s17, [pc, #628]	; 8001508 <DATA_LOGGER_Main+0x2a8>
			tmp_16 = tmp_float * 100;
 8001296:	ed9f 8a9d 	vldr	s16, [pc, #628]	; 800150c <DATA_LOGGER_Main+0x2ac>
void DATA_LOGGER_Main(void){
 800129a:	2400      	movs	r4, #0
 800129c:	e004      	b.n	80012a8 <DATA_LOGGER_Main+0x48>
 800129e:	3401      	adds	r4, #1
			for(uint8_t d = 0; d < DATA_ID_COUNT; d++)
 80012a0:	2c1a      	cmp	r4, #26
 80012a2:	f105 0514 	add.w	r5, r5, #20
 80012a6:	d031      	beq.n	800130c <DATA_LOGGER_Main+0xac>
				if(data_list[d].use_format == USED_AS_OUTPUT && (data_list[d].data != NULL))
 80012a8:	7c6b      	ldrb	r3, [r5, #17]
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	b2e2      	uxtb	r2, r4
 80012ae:	d1f6      	bne.n	800129e <DATA_LOGGER_Main+0x3e>
 80012b0:	686b      	ldr	r3, [r5, #4]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0f3      	beq.n	800129e <DATA_LOGGER_Main+0x3e>
	switch(data_list[id].format){
 80012b6:	7a69      	ldrb	r1, [r5, #9]
	buffer[0] = id ;
 80012b8:	7032      	strb	r2, [r6, #0]
	switch(data_list[id].format){
 80012ba:	f1a1 0214 	sub.w	r2, r1, #20
 80012be:	2a19      	cmp	r2, #25
 80012c0:	d834      	bhi.n	800132c <DATA_LOGGER_Main+0xcc>
 80012c2:	e8df f012 	tbh	[pc, r2, lsl #1]
 80012c6:	00e3      	.short	0x00e3
 80012c8:	00330033 	.word	0x00330033
 80012cc:	003300d5 	.word	0x003300d5
 80012d0:	00330033 	.word	0x00330033
 80012d4:	00330033 	.word	0x00330033
 80012d8:	00330033 	.word	0x00330033
 80012dc:	00330033 	.word	0x00330033
 80012e0:	00330033 	.word	0x00330033
 80012e4:	00330033 	.word	0x00330033
 80012e8:	00330033 	.word	0x00330033
 80012ec:	00330033 	.word	0x00330033
 80012f0:	002700c8 	.word	0x002700c8
 80012f4:	00cf010f 	.word	0x00cf010f
 80012f8:	00dd      	.short	0x00dd
 80012fa:	f88c 1000 	strb.w	r1, [ip]
				if(is_any_data_used)
 80012fe:	4b84      	ldr	r3, [pc, #528]	; (8001510 <DATA_LOGGER_Main+0x2b0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	f000 80f3 	beq.w	80014ee <DATA_LOGGER_Main+0x28e>
					state = LOGGER_LOG ;
 8001308:	2302      	movs	r3, #2
 800130a:	7023      	strb	r3, [r4, #0]
}
 800130c:	ecbd 8b02 	vpop	{d8}
 8001310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			tmp_16 = tmp_float * 100;
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	ee67 7a88 	vmul.f32	s15, s15, s16
 800131c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001320:	ee17 3a90 	vmov	r3, s15
 8001324:	b21b      	sxth	r3, r3
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001326:	121a      	asrs	r2, r3, #8
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001328:	70b3      	strb	r3, [r6, #2]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 800132a:	7072      	strb	r2, [r6, #1]
		default:
			break;
	}

	//Return the len of data
	return (data_list[id].format / 20) + 1;
 800132c:	4b79      	ldr	r3, [pc, #484]	; (8001514 <DATA_LOGGER_Main+0x2b4>)
 800132e:	fba3 3101 	umull	r3, r1, r3, r1
 8001332:	0909      	lsrs	r1, r1, #4
					TELEMETRY_Send_Data(tmp, tmp_len);
 8001334:	3101      	adds	r1, #1
 8001336:	4630      	mov	r0, r6
 8001338:	f002 f982 	bl	8003640 <TELEMETRY_Send_Data>
 800133c:	e7af      	b.n	800129e <DATA_LOGGER_Main+0x3e>
			if(entrance){
 800133e:	2900      	cmp	r1, #0
 8001340:	f040 80c0 	bne.w	80014c4 <DATA_LOGGER_Main+0x264>

uint8_t DATA_LOGGER_Get_Data_Config(data_id_e id, uint8_t * buffer){
	//New data so we start with 255
	buffer[0] = 255;
	//Then name len
	buffer[1] = data_list[id].len_name;
 8001344:	4f6e      	ldr	r7, [pc, #440]	; (8001500 <DATA_LOGGER_Main+0x2a0>)
	buffer[0] = 255;
 8001346:	4b6f      	ldr	r3, [pc, #444]	; (8001504 <DATA_LOGGER_Main+0x2a4>)
	//Then format
	buffer[2] = data_list[id].format ;
	//Taille du nom
	buffer[3] = id	 ;
	if(data_list[id].use_format == USED_AS_INPUT)	//Si cette donnée sert d'entré pour le système, on l'indique en rajoute 0b10000000 sur l'id d'origine
 8001348:	f897 2179 	ldrb.w	r2, [r7, #377]	; 0x179
	buffer[1] = data_list[id].len_name;
 800134c:	f897 5178 	ldrb.w	r5, [r7, #376]	; 0x178
 8001350:	705d      	strb	r5, [r3, #1]
	buffer[0] = 255;
 8001352:	21ff      	movs	r1, #255	; 0xff
	if(data_list[id].use_format == USED_AS_INPUT)	//Si cette donnée sert d'entré pour le système, on l'indique en rajoute 0b10000000 sur l'id d'origine
 8001354:	2a02      	cmp	r2, #2
	buffer[0] = 255;
 8001356:	7019      	strb	r1, [r3, #0]
	buffer[2] = data_list[id].format ;
 8001358:	f897 1171 	ldrb.w	r1, [r7, #369]	; 0x171
 800135c:	7099      	strb	r1, [r3, #2]
		buffer[3] += 128 ;
 800135e:	bf08      	it	eq
 8001360:	2292      	moveq	r2, #146	; 0x92
	buffer[3] = id	 ;
 8001362:	f04f 0112 	mov.w	r1, #18
 8001366:	70d9      	strb	r1, [r3, #3]
	//Copie du nom
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8001368:	486b      	ldr	r0, [pc, #428]	; (8001518 <DATA_LOGGER_Main+0x2b8>)
		buffer[3] += 128 ;
 800136a:	bf08      	it	eq
 800136c:	70da      	strbeq	r2, [r3, #3]
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 800136e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8001372:	462a      	mov	r2, r5
 8001374:	f004 fffe 	bl	8006374 <memcpy>

	//And that s it
	return 4 + data_list[id].len_name ;
 8001378:	1d29      	adds	r1, r5, #4
			TELEMETRY_Send_Data(tmp, tmp_len);
 800137a:	b2c9      	uxtb	r1, r1
 800137c:	4861      	ldr	r0, [pc, #388]	; (8001504 <DATA_LOGGER_Main+0x2a4>)
 800137e:	f002 f95f 	bl	8003640 <TELEMETRY_Send_Data>
			if(send_config_flag){
 8001382:	4a66      	ldr	r2, [pc, #408]	; (800151c <DATA_LOGGER_Main+0x2bc>)
 8001384:	6813      	ldr	r3, [r2, #0]
 8001386:	2b00      	cmp	r3, #0
 8001388:	f040 8086 	bne.w	8001498 <DATA_LOGGER_Main+0x238>
			else if(start_flag)
 800138c:	4a64      	ldr	r2, [pc, #400]	; (8001520 <DATA_LOGGER_Main+0x2c0>)
 800138e:	6811      	ldr	r1, [r2, #0]
 8001390:	2900      	cmp	r1, #0
 8001392:	d0bb      	beq.n	800130c <DATA_LOGGER_Main+0xac>
				stop_flag = FALSE;
 8001394:	4959      	ldr	r1, [pc, #356]	; (80014fc <DATA_LOGGER_Main+0x29c>)
				start_flag = FALSE;
 8001396:	6013      	str	r3, [r2, #0]
				state = LOGGER_LOG;
 8001398:	2202      	movs	r2, #2
				stop_flag = FALSE;
 800139a:	600b      	str	r3, [r1, #0]
				state = LOGGER_LOG;
 800139c:	7022      	strb	r2, [r4, #0]
 800139e:	e7b5      	b.n	800130c <DATA_LOGGER_Main+0xac>
			if(entrance)
 80013a0:	2901      	cmp	r1, #1
 80013a2:	f040 8089 	bne.w	80014b8 <DATA_LOGGER_Main+0x258>
			while(data_list[id_init_counter].use_format == NOT_USED && id_init_counter < DATA_ID_COUNT){
 80013a6:	f8df c17c 	ldr.w	ip, [pc, #380]	; 8001524 <DATA_LOGGER_Main+0x2c4>
 80013aa:	4f55      	ldr	r7, [pc, #340]	; (8001500 <DATA_LOGGER_Main+0x2a0>)
 80013ac:	f89c 1000 	ldrb.w	r1, [ip]
 80013b0:	eb01 0381 	add.w	r3, r1, r1, lsl #2
 80013b4:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80013b8:	460e      	mov	r6, r1
 80013ba:	7c58      	ldrb	r0, [r3, #17]
 80013bc:	b9e8      	cbnz	r0, 80013fa <DATA_LOGGER_Main+0x19a>
 80013be:	2919      	cmp	r1, #25
 80013c0:	d89d      	bhi.n	80012fe <DATA_LOGGER_Main+0x9e>
 80013c2:	1c4b      	adds	r3, r1, #1
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	f1c1 0119 	rsb	r1, r1, #25
 80013ca:	fa53 f581 	uxtab	r5, r3, r1
 80013ce:	eb05 0185 	add.w	r1, r5, r5, lsl #2
 80013d2:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80013d6:	f107 0514 	add.w	r5, r7, #20
 80013da:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80013de:	eb07 0282 	add.w	r2, r7, r2, lsl #2
 80013e2:	e001      	b.n	80013e8 <DATA_LOGGER_Main+0x188>
 80013e4:	4295      	cmp	r5, r2
 80013e6:	d088      	beq.n	80012fa <DATA_LOGGER_Main+0x9a>
 80013e8:	7c50      	ldrb	r0, [r2, #17]
				id_init_counter ++ ;
 80013ea:	b2d9      	uxtb	r1, r3
			while(data_list[id_init_counter].use_format == NOT_USED && id_init_counter < DATA_ID_COUNT){
 80013ec:	461e      	mov	r6, r3
 80013ee:	3214      	adds	r2, #20
 80013f0:	3301      	adds	r3, #1
 80013f2:	2800      	cmp	r0, #0
 80013f4:	d0f6      	beq.n	80013e4 <DATA_LOGGER_Main+0x184>
 80013f6:	f88c 1000 	strb.w	r1, [ip]
			if(id_init_counter < DATA_ID_COUNT){
 80013fa:	2919      	cmp	r1, #25
 80013fc:	f63f af7f 	bhi.w	80012fe <DATA_LOGGER_Main+0x9e>
	buffer[1] = data_list[id].len_name;
 8001400:	00b3      	lsls	r3, r6, #2
 8001402:	199d      	adds	r5, r3, r6
 8001404:	eb07 0585 	add.w	r5, r7, r5, lsl #2
	buffer[0] = 255;
 8001408:	4a3e      	ldr	r2, [pc, #248]	; (8001504 <DATA_LOGGER_Main+0x2a4>)
	buffer[1] = data_list[id].len_name;
 800140a:	7c2c      	ldrb	r4, [r5, #16]
	buffer[2] = data_list[id].format ;
 800140c:	7a6d      	ldrb	r5, [r5, #9]
 800140e:	7095      	strb	r5, [r2, #2]
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8001410:	4433      	add	r3, r6
				is_any_data_used = TRUE;
 8001412:	f04f 0801 	mov.w	r8, #1
	if(data_list[id].use_format == USED_AS_INPUT)	//Si cette donnée sert d'entré pour le système, on l'indique en rajoute 0b10000000 sur l'id d'origine
 8001416:	2802      	cmp	r0, #2
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8001418:	eb07 0383 	add.w	r3, r7, r3, lsl #2
	buffer[0] = 255;
 800141c:	f04f 05ff 	mov.w	r5, #255	; 0xff
				is_any_data_used = TRUE;
 8001420:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 8001510 <DATA_LOGGER_Main+0x2b0>
	buffer[0] = 255;
 8001424:	7015      	strb	r5, [r2, #0]
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 8001426:	eb01 0508 	add.w	r5, r1, r8
		buffer[3] += 128 ;
 800142a:	bf08      	it	eq
 800142c:	3980      	subeq	r1, #128	; 0x80
	buffer[1] = data_list[id].len_name;
 800142e:	7054      	strb	r4, [r2, #1]
		buffer[3] += 128 ;
 8001430:	70d1      	strb	r1, [r2, #3]
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8001432:	4839      	ldr	r0, [pc, #228]	; (8001518 <DATA_LOGGER_Main+0x2b8>)
 8001434:	68d9      	ldr	r1, [r3, #12]
				is_any_data_used = TRUE;
 8001436:	f8ce 8000 	str.w	r8, [lr]
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 800143a:	4622      	mov	r2, r4
				tmp_len = DATA_LOGGER_Get_Data_Config(id_init_counter++, tmp);
 800143c:	f88c 5000 	strb.w	r5, [ip]
	memcpy(&buffer[4], data_list[id].name, data_list[id].len_name);
 8001440:	f004 ff98 	bl	8006374 <memcpy>
}
 8001444:	ecbd 8b02 	vpop	{d8}
	return 4 + data_list[id].len_name ;
 8001448:	1d21      	adds	r1, r4, #4
				TELEMETRY_Send_Data(tmp, tmp_len);
 800144a:	b2c9      	uxtb	r1, r1
 800144c:	482d      	ldr	r0, [pc, #180]	; (8001504 <DATA_LOGGER_Main+0x2a4>)
}
 800144e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				TELEMETRY_Send_Data(tmp, tmp_len);
 8001452:	f002 b8f5 	b.w	8003640 <TELEMETRY_Send_Data>
			tmp_16 = tmp_float * 10;
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800145e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001462:	e75b      	b.n	800131c <DATA_LOGGER_Main+0xbc>
			tmp_16 = *(uint16_t*)data_list[id].data ;
 8001464:	881b      	ldrh	r3, [r3, #0]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001466:	70b3      	strb	r3, [r6, #2]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001468:	f343 2307 	sbfx	r3, r3, #8, #8
 800146c:	7073      	strb	r3, [r6, #1]
 800146e:	e75d      	b.n	800132c <DATA_LOGGER_Main+0xcc>
			buffer[1] = (int8_t)tmp_float;
 8001470:	edd3 7a00 	vldr	s15, [r3]
 8001474:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001478:	ee17 3a90 	vmov	r3, s15
 800147c:	7073      	strb	r3, [r6, #1]
 800147e:	e755      	b.n	800132c <DATA_LOGGER_Main+0xcc>
			tmp_16 = *(int16_t*)data_list[id].data ;
 8001480:	f9b3 3000 	ldrsh.w	r3, [r3]
			buffer[2] = (uint8_t)(tmp_16 & 0b11111111);
 8001484:	70b3      	strb	r3, [r6, #2]
			buffer[1] = (uint8_t)((tmp_16 >> 8) & 0b11111111) ;
 8001486:	121b      	asrs	r3, r3, #8
 8001488:	7073      	strb	r3, [r6, #1]
 800148a:	e74f      	b.n	800132c <DATA_LOGGER_Main+0xcc>
			buffer[1] = *data_list[id].data ;
 800148c:	781b      	ldrb	r3, [r3, #0]
 800148e:	7073      	strb	r3, [r6, #1]
 8001490:	e74c      	b.n	800132c <DATA_LOGGER_Main+0xcc>
				state = LOGGER_IDDLE;
 8001492:	2300      	movs	r3, #0
 8001494:	7023      	strb	r3, [r4, #0]
 8001496:	e6fa      	b.n	800128e <DATA_LOGGER_Main+0x2e>
					id_init_counter = 0;
 8001498:	4822      	ldr	r0, [pc, #136]	; (8001524 <DATA_LOGGER_Main+0x2c4>)
				start_flag = FALSE;
 800149a:	4e21      	ldr	r6, [pc, #132]	; (8001520 <DATA_LOGGER_Main+0x2c0>)
				stop_flag = FALSE;
 800149c:	4d17      	ldr	r5, [pc, #92]	; (80014fc <DATA_LOGGER_Main+0x29c>)
					is_any_data_used = FALSE;
 800149e:	491c      	ldr	r1, [pc, #112]	; (8001510 <DATA_LOGGER_Main+0x2b0>)
				start_flag = FALSE;
 80014a0:	2300      	movs	r3, #0
					id_init_counter = 0;
 80014a2:	7003      	strb	r3, [r0, #0]
}
 80014a4:	ecbd 8b02 	vpop	{d8}
				send_config_flag = FALSE;
 80014a8:	6013      	str	r3, [r2, #0]
					state = LOGGER_TRANSMIT_CONFIG;
 80014aa:	2201      	movs	r2, #1
				start_flag = FALSE;
 80014ac:	6033      	str	r3, [r6, #0]
				stop_flag = FALSE;
 80014ae:	602b      	str	r3, [r5, #0]
					is_any_data_used = FALSE;
 80014b0:	600b      	str	r3, [r1, #0]
					state = LOGGER_TRANSMIT_CONFIG;
 80014b2:	7022      	strb	r2, [r4, #0]
}
 80014b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				SCHEDULER_reschedule_task(TASK_LOGGER, 10000);
 80014b8:	f242 7110 	movw	r1, #10000	; 0x2710
 80014bc:	200a      	movs	r0, #10
 80014be:	f001 f865 	bl	800258c <SCHEDULER_reschedule_task>
 80014c2:	e770      	b.n	80013a6 <DATA_LOGGER_Main+0x146>
				SCHEDULER_reschedule_task(TASK_LOGGER, 500000);
 80014c4:	4918      	ldr	r1, [pc, #96]	; (8001528 <DATA_LOGGER_Main+0x2c8>)
 80014c6:	200a      	movs	r0, #10
 80014c8:	f001 f860 	bl	800258c <SCHEDULER_reschedule_task>
 80014cc:	e73a      	b.n	8001344 <DATA_LOGGER_Main+0xe4>
				SCHEDULER_reschedule_task(TASK_LOGGER, 10000);	//Période d'envoie des données
 80014ce:	f242 7110 	movw	r1, #10000	; 0x2710
 80014d2:	200a      	movs	r0, #10
 80014d4:	f001 f85a 	bl	800258c <SCHEDULER_reschedule_task>
			if(stop_flag)
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <DATA_LOGGER_Main+0x29c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	f43f aed6 	beq.w	800128e <DATA_LOGGER_Main+0x2e>
 80014e2:	e7d6      	b.n	8001492 <DATA_LOGGER_Main+0x232>
			tmp_16 = tmp_float * 1000;
 80014e4:	edd3 7a00 	vldr	s15, [r3]
 80014e8:	ee67 7aa8 	vmul.f32	s15, s15, s17
 80014ec:	e716      	b.n	800131c <DATA_LOGGER_Main+0xbc>
					state = LOGGER_IDDLE ;
 80014ee:	7023      	strb	r3, [r4, #0]
 80014f0:	e70c      	b.n	800130c <DATA_LOGGER_Main+0xac>
 80014f2:	bf00      	nop
 80014f4:	20001af4 	.word	0x20001af4
 80014f8:	20000149 	.word	0x20000149
 80014fc:	20001af8 	.word	0x20001af8
 8001500:	200018dc 	.word	0x200018dc
 8001504:	20001b00 	.word	0x20001b00
 8001508:	447a0000 	.word	0x447a0000
 800150c:	42c80000 	.word	0x42c80000
 8001510:	20001ae8 	.word	0x20001ae8
 8001514:	cccccccd 	.word	0xcccccccd
 8001518:	20001b04 	.word	0x20001b04
 800151c:	20001aec 	.word	0x20001aec
 8001520:	20001af0 	.word	0x20001af0
 8001524:	20001ae4 	.word	0x20001ae4
 8001528:	0007a120 	.word	0x0007a120

0800152c <DATA_LOGGER_Reception>:
	uint8_t id = input_buffer[0];
 800152c:	7803      	ldrb	r3, [r0, #0]
	switch(data_list[id].format){
 800152e:	4a1d      	ldr	r2, [pc, #116]	; (80015a4 <DATA_LOGGER_Reception+0x78>)
 8001530:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8001534:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001538:	7a52      	ldrb	r2, [r2, #9]
 800153a:	b19a      	cbz	r2, 8001564 <DATA_LOGGER_Reception+0x38>
 800153c:	2a2c      	cmp	r2, #44	; 0x2c
 800153e:	d110      	bne.n	8001562 <DATA_LOGGER_Reception+0x36>
			switch(id){
 8001540:	2b19      	cmp	r3, #25
 8001542:	d10d      	bne.n	8001560 <DATA_LOGGER_Reception+0x34>
			tmp_uint_16 = (uint16_t)input_buffer[1] << 8;
 8001544:	7841      	ldrb	r1, [r0, #1]
			tmp_uint_16 += (uint16_t)input_buffer[2];
 8001546:	7883      	ldrb	r3, [r0, #2]
					sys->regulation.motor_consigne = MIN(1000, tmp_uint_16);
 8001548:	4a17      	ldr	r2, [pc, #92]	; (80015a8 <DATA_LOGGER_Reception+0x7c>)
			tmp_uint_16 += (uint16_t)input_buffer[2];
 800154a:	eb03 2301 	add.w	r3, r3, r1, lsl #8
					sys->regulation.motor_consigne = MIN(1000, tmp_uint_16);
 800154e:	b29b      	uxth	r3, r3
 8001550:	6812      	ldr	r2, [r2, #0]
 8001552:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001556:	bf28      	it	cs
 8001558:	f44f 737a 	movcs.w	r3, #1000	; 0x3e8
 800155c:	f8a2 3334 	strh.w	r3, [r2, #820]	; 0x334
}
 8001560:	4770      	bx	lr
 8001562:	4770      	bx	lr
			switch(id)
 8001564:	3b12      	subs	r3, #18
 8001566:	2b05      	cmp	r3, #5
 8001568:	d8fa      	bhi.n	8001560 <DATA_LOGGER_Reception+0x34>
 800156a:	e8df f003 	tbb	[pc, r3]
 800156e:	0d09      	.short	0x0d09
 8001570:	03181511 	.word	0x03181511
					sys->simulate = TRUE;
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <DATA_LOGGER_Reception+0x7c>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2201      	movs	r2, #1
 800157a:	f8c3 26c0 	str.w	r2, [r3, #1728]	; 0x6c0
					break;
 800157e:	4770      	bx	lr
					send_config_flag = TRUE;
 8001580:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <DATA_LOGGER_Reception+0x80>)
 8001582:	2201      	movs	r2, #1
 8001584:	601a      	str	r2, [r3, #0]
					break;
 8001586:	4770      	bx	lr
	start_flag = TRUE;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <DATA_LOGGER_Reception+0x84>)
 800158a:	2201      	movs	r2, #1
 800158c:	601a      	str	r2, [r3, #0]
 800158e:	4770      	bx	lr
	stop_flag = TRUE;
 8001590:	4b08      	ldr	r3, [pc, #32]	; (80015b4 <DATA_LOGGER_Reception+0x88>)
 8001592:	2201      	movs	r2, #1
 8001594:	601a      	str	r2, [r3, #0]
 8001596:	4770      	bx	lr
					HIGH_LVL_Set_Mode(HIGH_LVL_STATE_IDLE);
 8001598:	2000      	movs	r0, #0
 800159a:	f000 b925 	b.w	80017e8 <HIGH_LVL_Set_Mode>
					HIGH_LVL_Set_Mode(HIGH_LVL_STATE_FULL_MANUAL);
 800159e:	2001      	movs	r0, #1
 80015a0:	f000 b922 	b.w	80017e8 <HIGH_LVL_Set_Mode>
 80015a4:	200018dc 	.word	0x200018dc
 80015a8:	20001afc 	.word	0x20001afc
 80015ac:	20001aec 	.word	0x20001aec
 80015b0:	20001af0 	.word	0x20001af0
 80015b4:	20001af8 	.word	0x20001af8

080015b8 <DATA_LOGGER_Get_Data>:
}

data_t * DATA_LOGGER_Get_Data(data_id_e id){
	return &data_list[id];
 80015b8:	4b02      	ldr	r3, [pc, #8]	; (80015c4 <DATA_LOGGER_Get_Data+0xc>)
 80015ba:	eb00 0080 	add.w	r0, r0, r0, lsl #2
}
 80015be:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80015c2:	4770      	bx	lr
 80015c4:	200018dc 	.word	0x200018dc

080015c8 <ORIENTATION_Init>:
static float acc_correction(float x){
	x = ( x > 0) ? 180 - x : -180 -x ;
	return x ;
}

void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){
 80015c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80015ca:	4617      	mov	r7, r2
	//Kalman's matricies init
	arm_mat_init_f32(&A, X_SIZE, X_SIZE, A_array);
 80015cc:	2202      	movs	r2, #2
void ORIENTATION_Init(orientation_t * orientation, gyro_t * gyro, acc_t * acc, int32_t frequency){
 80015ce:	4604      	mov	r4, r0
 80015d0:	460d      	mov	r5, r1
 80015d2:	461e      	mov	r6, r3
	arm_mat_init_f32(&A, X_SIZE, X_SIZE, A_array);
 80015d4:	4611      	mov	r1, r2
 80015d6:	4b20      	ldr	r3, [pc, #128]	; (8001658 <ORIENTATION_Init+0x90>)
 80015d8:	4820      	ldr	r0, [pc, #128]	; (800165c <ORIENTATION_Init+0x94>)
 80015da:	f004 fe9d 	bl	8006318 <arm_mat_init_f32>
	arm_mat_init_f32(&B, X_SIZE, U_SIZE, B_array);
 80015de:	4b20      	ldr	r3, [pc, #128]	; (8001660 <ORIENTATION_Init+0x98>)
 80015e0:	4820      	ldr	r0, [pc, #128]	; (8001664 <ORIENTATION_Init+0x9c>)
 80015e2:	2201      	movs	r2, #1
 80015e4:	2102      	movs	r1, #2
 80015e6:	f004 fe97 	bl	8006318 <arm_mat_init_f32>
	arm_mat_init_f32(&C, Z_SIZE, X_SIZE, C_array);
 80015ea:	2202      	movs	r2, #2
 80015ec:	4611      	mov	r1, r2
 80015ee:	4b1e      	ldr	r3, [pc, #120]	; (8001668 <ORIENTATION_Init+0xa0>)
 80015f0:	481e      	ldr	r0, [pc, #120]	; (800166c <ORIENTATION_Init+0xa4>)
 80015f2:	f004 fe91 	bl	8006318 <arm_mat_init_f32>
	arm_mat_init_f32(&R, Z_SIZE, Z_SIZE, R_array);
 80015f6:	2202      	movs	r2, #2
 80015f8:	4611      	mov	r1, r2
 80015fa:	4b1d      	ldr	r3, [pc, #116]	; (8001670 <ORIENTATION_Init+0xa8>)
 80015fc:	481d      	ldr	r0, [pc, #116]	; (8001674 <ORIENTATION_Init+0xac>)
 80015fe:	f004 fe8b 	bl	8006318 <arm_mat_init_f32>
	arm_mat_init_f32(&Q, X_SIZE, X_SIZE, Q_array);
 8001602:	2202      	movs	r2, #2
 8001604:	4611      	mov	r1, r2
 8001606:	4b1c      	ldr	r3, [pc, #112]	; (8001678 <ORIENTATION_Init+0xb0>)
 8001608:	481c      	ldr	r0, [pc, #112]	; (800167c <ORIENTATION_Init+0xb4>)
 800160a:	f004 fe85 	bl	8006318 <arm_mat_init_f32>
	arm_mat_init_f32(&P, X_SIZE, X_SIZE, P_array);
 800160e:	2202      	movs	r2, #2
 8001610:	4611      	mov	r1, r2
 8001612:	4b1b      	ldr	r3, [pc, #108]	; (8001680 <ORIENTATION_Init+0xb8>)
 8001614:	481b      	ldr	r0, [pc, #108]	; (8001684 <ORIENTATION_Init+0xbc>)
 8001616:	f004 fe7f 	bl	8006318 <arm_mat_init_f32>
	orientation->gyro = gyro ;
	orientation->angular_velocity = gyro->filtered ;

	//Configure our frequency
	orientation->frequency = frequency ;
	orientation->periode = (float)1 / (float)frequency ;
 800161a:	ee07 6a90 	vmov	s15, r6
 800161e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001622:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001626:	eec6 7a87 	vdiv.f32	s15, s13, s14
	orientation->angular_velocity = gyro->filtered ;
 800162a:	f105 0308 	add.w	r3, r5, #8
 800162e:	60e3      	str	r3, [r4, #12]

	orientation->alpha = ORIENTATION_ALPHA ;
 8001630:	4a15      	ldr	r2, [pc, #84]	; (8001688 <ORIENTATION_Init+0xc0>)
	orientation->acc = acc ;
 8001632:	f8c4 7120 	str.w	r7, [r4, #288]	; 0x120

	//Init our values to zero
	for(int x = 0; x < 3; x++)
	{
		orientation->angular_position[x] = 0 ;
 8001636:	2300      	movs	r3, #0
	orientation->gyro = gyro ;
 8001638:	f8c4 511c 	str.w	r5, [r4, #284]	; 0x11c
	orientation->frequency = frequency ;
 800163c:	f8c4 6124 	str.w	r6, [r4, #292]	; 0x124
	orientation->alpha = ORIENTATION_ALPHA ;
 8001640:	f8c4 212c 	str.w	r2, [r4, #300]	; 0x12c
		orientation->angular_position[x] = 0 ;
 8001644:	6023      	str	r3, [r4, #0]
	orientation->periode = (float)1 / (float)frequency ;
 8001646:	edc4 7a4a 	vstr	s15, [r4, #296]	; 0x128
		orientation->angular_velocity[x] = 0 ;
 800164a:	60ab      	str	r3, [r5, #8]
		orientation->angular_position[x] = 0 ;
 800164c:	6063      	str	r3, [r4, #4]
		orientation->angular_velocity[x] = 0 ;
 800164e:	60eb      	str	r3, [r5, #12]
		orientation->angular_position[x] = 0 ;
 8001650:	60a3      	str	r3, [r4, #8]
		orientation->angular_velocity[x] = 0 ;
 8001652:	612b      	str	r3, [r5, #16]
	}

}
 8001654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001656:	bf00      	nop
 8001658:	2000014c 	.word	0x2000014c
 800165c:	20001b20 	.word	0x20001b20
 8001660:	20001b30 	.word	0x20001b30
 8001664:	20001b28 	.word	0x20001b28
 8001668:	2000015c 	.word	0x2000015c
 800166c:	20001b38 	.word	0x20001b38
 8001670:	2000018c 	.word	0x2000018c
 8001674:	20001b50 	.word	0x20001b50
 8001678:	2000017c 	.word	0x2000017c
 800167c:	20001b48 	.word	0x20001b48
 8001680:	2000016c 	.word	0x2000016c
 8001684:	20001b40 	.word	0x20001b40
 8001688:	3f7f7cee 	.word	0x3f7f7cee

0800168c <ORIENTATION_Update>:

void ORIENTATION_Update(orientation_t * orientation){
 800168c:	b530      	push	{r4, r5, lr}
	//Just to make the code shorter
	acc_t * acc = orientation->acc ;
 800168e:	f8d0 4120 	ldr.w	r4, [r0, #288]	; 0x120
	gyro_t * gyro = orientation->gyro ;
 8001692:	f8d0 511c 	ldr.w	r5, [r0, #284]	; 0x11c

	//Guess our angular position using the accelerometer

	//Total acceleration
	float acc_total = acc->filtered[ORIENTATION_ROLL] * acc->filtered[ORIENTATION_ROLL] ;
	acc_total += acc->filtered[ORIENTATION_PITCH] * acc->filtered[ORIENTATION_PITCH] ;
 8001696:	ed94 0a03 	vldr	s0, [r4, #12]
	float acc_total = acc->filtered[ORIENTATION_ROLL] * acc->filtered[ORIENTATION_ROLL] ;
 800169a:	ed94 7a02 	vldr	s14, [r4, #8]
	acc_total += acc->filtered[ORIENTATION_YAW] * acc->filtered[ORIENTATION_YAW] ;
 800169e:	edd4 7a04 	vldr	s15, [r4, #16]
	acc_total += acc->filtered[ORIENTATION_PITCH] * acc->filtered[ORIENTATION_PITCH] ;
 80016a2:	ee20 0a00 	vmul.f32	s0, s0, s0
void ORIENTATION_Update(orientation_t * orientation){
 80016a6:	ed2d 8b02 	vpush	{d8}
	acc_total += acc->filtered[ORIENTATION_PITCH] * acc->filtered[ORIENTATION_PITCH] ;
 80016aa:	eea7 0a07 	vfma.f32	s0, s14, s14
void ORIENTATION_Update(orientation_t * orientation){
 80016ae:	b083      	sub	sp, #12
	acc_total += acc->filtered[ORIENTATION_YAW] * acc->filtered[ORIENTATION_YAW] ;
 80016b0:	eea7 0aa7 	vfma.f32	s0, s15, s15
 80016b4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80016b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	acc_total = sqrtf(acc_total);
 80016bc:	eeb1 8ac0 	vsqrt.f32	s16, s0
 80016c0:	d478      	bmi.n	80017b4 <ORIENTATION_Update+0x128>

	if(acc_total)	//To avoid /0
 80016c2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80016c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ca:	d12f      	bne.n	800172c <ORIENTATION_Update+0xa0>
 80016cc:	ed90 7a05 	vldr	s14, [r0, #20]
			orientation->acc_angles[ORIENTATION_PITCH] = acc_correction(orientation->acc_angles[ORIENTATION_PITCH]);
		}
	}

	//If it's our first use, we dont use the gyro
	if(first_use)
 80016d0:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <ORIENTATION_Update+0x134>)
 80016d2:	681a      	ldr	r2, [r3, #0]
 80016d4:	2a00      	cmp	r2, #0
 80016d6:	d153      	bne.n	8001780 <ORIENTATION_Update+0xf4>
//		float dx = gyro->filtered[ORIENTATION_ROLL] * orientation->periode ;
		float dy = gyro->filtered[ORIENTATION_PITCH] * orientation->periode ;
//		float dz = gyro->filtered[ORIENTATION_YAW] * orientation->periode ;

//		orientation->angular_position[ORIENTATION_ROLL] += dx ;
		orientation->angular_position[ORIENTATION_PITCH] += dy ;
 80016d8:	edd5 5a03 	vldr	s11, [r5, #12]
 80016dc:	ed90 6a4a 	vldr	s12, [r0, #296]	; 0x128
 80016e0:	edd0 7a01 	vldr	s15, [r0, #4]
	if(x > 180)
 80016e4:	eddf 6a37 	vldr	s13, [pc, #220]	; 80017c4 <ORIENTATION_Update+0x138>
		orientation->angular_position[ORIENTATION_PITCH] += dy ;
 80016e8:	eee5 7a86 	vfma.f32	s15, s11, s12
	if(x > 180)
 80016ec:	eef4 7ae6 	vcmpe.f32	s15, s13
 80016f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016f4:	dc4c      	bgt.n	8001790 <ORIENTATION_Update+0x104>
	else if( x < -180)
 80016f6:	eddf 6a34 	vldr	s13, [pc, #208]	; 80017c8 <ORIENTATION_Update+0x13c>
 80016fa:	eef4 7ae6 	vcmpe.f32	s15, s13
 80016fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		x += 360 ;
 8001702:	bf44      	itt	mi
 8001704:	eddf 6a31 	vldrmi	s13, [pc, #196]	; 80017cc <ORIENTATION_Update+0x140>
 8001708:	ee77 7aa6 	vaddmi.f32	s15, s15, s13

//		orientation->angular_position[ORIENTATION_ROLL] = angle_180(orientation->angular_position[ORIENTATION_ROLL]);
		orientation->angular_position[ORIENTATION_PITCH] = angle_180(orientation->angular_position[ORIENTATION_PITCH]);

//		orientation->angular_position[ORIENTATION_ROLL] = orientation->alpha * orientation->angular_position[ORIENTATION_ROLL] + (1.0f - orientation->alpha) * orientation->acc_angles[ORIENTATION_ROLL];
		orientation->angular_position[ORIENTATION_PITCH] = orientation->alpha * orientation->angular_position[ORIENTATION_PITCH] + (1.0f - orientation->alpha) * orientation->acc_angles[ORIENTATION_PITCH];
 800170c:	edd0 6a4b 	vldr	s13, [r0, #300]	; 0x12c
 8001710:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001714:	ee30 0a66 	vsub.f32	s0, s0, s13
 8001718:	ee20 0a07 	vmul.f32	s0, s0, s14
 800171c:	eea6 0aa7 	vfma.f32	s0, s13, s15
 8001720:	ed80 0a01 	vstr	s0, [r0, #4]



	}
}
 8001724:	b003      	add	sp, #12
 8001726:	ecbd 8b02 	vpop	{d8}
 800172a:	bd30      	pop	{r4, r5, pc}
		if(absolu(acc->filtered[ORIENTATION_YAW]) < acc_total)	//To avoid asin x with x greater than 1
 800172c:	ed94 0a04 	vldr	s0, [r4, #16]
	if( x > 0)
 8001730:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8001734:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		return -x ;
 8001738:	bfd4      	ite	le
 800173a:	eef1 7a40 	vnegle.f32	s15, s0
		return x ;
 800173e:	eef0 7a40 	vmovgt.f32	s15, s0
		if(absolu(acc->filtered[ORIENTATION_YAW]) < acc_total)	//To avoid asin x with x greater than 1
 8001742:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8001746:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800174a:	dc26      	bgt.n	800179a <ORIENTATION_Update+0x10e>
 800174c:	ed90 7a05 	vldr	s14, [r0, #20]
		if(acc->filtered[ORIENTATION_ROLL] < 0)
 8001750:	edd4 7a02 	vldr	s15, [r4, #8]
 8001754:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001758:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800175c:	d5b8      	bpl.n	80016d0 <ORIENTATION_Update+0x44>
	x = ( x > 0) ? 180 - x : -180 -x ;
 800175e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8001762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001766:	bfcc      	ite	gt
 8001768:	eddf 7a16 	vldrgt	s15, [pc, #88]	; 80017c4 <ORIENTATION_Update+0x138>
 800176c:	eddf 7a16 	vldrle	s15, [pc, #88]	; 80017c8 <ORIENTATION_Update+0x13c>
	if(first_use)
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <ORIENTATION_Update+0x134>)
	x = ( x > 0) ? 180 - x : -180 -x ;
 8001772:	ee37 7ac7 	vsub.f32	s14, s15, s14
	if(first_use)
 8001776:	681a      	ldr	r2, [r3, #0]
			orientation->acc_angles[ORIENTATION_PITCH] = acc_correction(orientation->acc_angles[ORIENTATION_PITCH]);
 8001778:	ed80 7a05 	vstr	s14, [r0, #20]
	if(first_use)
 800177c:	2a00      	cmp	r2, #0
 800177e:	d0ab      	beq.n	80016d8 <ORIENTATION_Update+0x4c>
		first_use = FALSE ;
 8001780:	2200      	movs	r2, #0
		orientation->angular_position[ORIENTATION_PITCH] = orientation->acc_angles[ORIENTATION_PITCH] ;
 8001782:	ed80 7a01 	vstr	s14, [r0, #4]
		first_use = FALSE ;
 8001786:	601a      	str	r2, [r3, #0]
}
 8001788:	b003      	add	sp, #12
 800178a:	ecbd 8b02 	vpop	{d8}
 800178e:	bd30      	pop	{r4, r5, pc}
		x -= 360;
 8001790:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80017cc <ORIENTATION_Update+0x140>
 8001794:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001798:	e7b8      	b.n	800170c <ORIENTATION_Update+0x80>
			orientation->acc_angles[ORIENTATION_PITCH] = asinf(acc->filtered[ORIENTATION_YAW] / acc_total) * 57.32f;
 800179a:	ee80 0a08 	vdiv.f32	s0, s0, s16
 800179e:	9001      	str	r0, [sp, #4]
 80017a0:	f006 ffda 	bl	8008758 <asinf>
 80017a4:	9801      	ldr	r0, [sp, #4]
 80017a6:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80017d0 <ORIENTATION_Update+0x144>
 80017aa:	ee20 7a07 	vmul.f32	s14, s0, s14
 80017ae:	ed80 7a05 	vstr	s14, [r0, #20]
 80017b2:	e7cd      	b.n	8001750 <ORIENTATION_Update+0xc4>
 80017b4:	9001      	str	r0, [sp, #4]
	acc_total = sqrtf(acc_total);
 80017b6:	f007 f827 	bl	8008808 <sqrtf>
 80017ba:	9801      	ldr	r0, [sp, #4]
 80017bc:	e781      	b.n	80016c2 <ORIENTATION_Update+0x36>
 80017be:	bf00      	nop
 80017c0:	2000019c 	.word	0x2000019c
 80017c4:	43340000 	.word	0x43340000
 80017c8:	c3340000 	.word	0xc3340000
 80017cc:	43b40000 	.word	0x43b40000
 80017d0:	426547ae 	.word	0x426547ae

080017d4 <HIGH_LVL_Init>:

};

//	-------------------------	Public functions	-------------------------
void HIGH_LVL_Init(system_t * sys_){
	sys = sys_;
 80017d4:	4a02      	ldr	r2, [pc, #8]	; (80017e0 <HIGH_LVL_Init+0xc>)
	sys->soft.high_lvl_state = &current_state;
 80017d6:	4b03      	ldr	r3, [pc, #12]	; (80017e4 <HIGH_LVL_Init+0x10>)
	sys = sys_;
 80017d8:	6010      	str	r0, [r2, #0]
	sys->soft.high_lvl_state = &current_state;
 80017da:	f8c0 333c 	str.w	r3, [r0, #828]	; 0x33c
}
 80017de:	4770      	bx	lr
 80017e0:	20001b5c 	.word	0x20001b5c
 80017e4:	20001b58 	.word	0x20001b58

080017e8 <HIGH_LVL_Set_Mode>:

//Dont call it from an it plz for now ..
void HIGH_LVL_Set_Mode(high_level_state_names_e new){
	next_state = new ;
 80017e8:	4b01      	ldr	r3, [pc, #4]	; (80017f0 <HIGH_LVL_Set_Mode+0x8>)
 80017ea:	7018      	strb	r0, [r3, #0]
}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20001b59 	.word	0x20001b59

080017f4 <HIGH_LVL_Main>:

void HIGH_LVL_Main(uint32_t time_us){
 80017f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	//Check if we have to change the current flight mode
	if(next_state != current_state){
 80017f8:	4d13      	ldr	r5, [pc, #76]	; (8001848 <HIGH_LVL_Main+0x54>)
 80017fa:	4f14      	ldr	r7, [pc, #80]	; (800184c <HIGH_LVL_Main+0x58>)
 80017fc:	782a      	ldrb	r2, [r5, #0]
 80017fe:	783b      	ldrb	r3, [r7, #0]

		//Call the leave function associated to the current(previous) flight mode if it exists
		if(high_lvl_states[current_state].function_leave != NULL)
 8001800:	4c13      	ldr	r4, [pc, #76]	; (8001850 <HIGH_LVL_Main+0x5c>)
	if(next_state != current_state){
 8001802:	429a      	cmp	r2, r3
void HIGH_LVL_Main(uint32_t time_us){
 8001804:	4606      	mov	r6, r0
	if(next_state != current_state){
 8001806:	d012      	beq.n	800182e <HIGH_LVL_Main+0x3a>
		if(high_lvl_states[current_state].function_leave != NULL)
 8001808:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 800180c:	68db      	ldr	r3, [r3, #12]
 800180e:	b11b      	cbz	r3, 8001818 <HIGH_LVL_Main+0x24>
			high_lvl_states[current_state].function_leave(sys);
 8001810:	4a10      	ldr	r2, [pc, #64]	; (8001854 <HIGH_LVL_Main+0x60>)
 8001812:	6810      	ldr	r0, [r2, #0]
 8001814:	4798      	blx	r3
 8001816:	782a      	ldrb	r2, [r5, #0]

		//Call the entrance function associated to the next flight mode if it exists
		if(high_lvl_states[next_state].function_entrance != NULL)
 8001818:	eb04 1102 	add.w	r1, r4, r2, lsl #4
 800181c:	4613      	mov	r3, r2
 800181e:	6849      	ldr	r1, [r1, #4]
 8001820:	b121      	cbz	r1, 800182c <HIGH_LVL_Main+0x38>
			high_lvl_states[next_state].function_entrance(sys);
 8001822:	4b0c      	ldr	r3, [pc, #48]	; (8001854 <HIGH_LVL_Main+0x60>)
 8001824:	6818      	ldr	r0, [r3, #0]
 8001826:	4788      	blx	r1
 8001828:	782a      	ldrb	r2, [r5, #0]
 800182a:	4613      	mov	r3, r2

		//Change the current flight mode
		current_state = next_state ;
 800182c:	703a      	strb	r2, [r7, #0]
	}
	//Call the function associated to the current flight mode
	if(high_lvl_states[current_state].function_main != NULL)
 800182e:	eb04 1303 	add.w	r3, r4, r3, lsl #4
 8001832:	689b      	ldr	r3, [r3, #8]
 8001834:	b12b      	cbz	r3, 8001842 <HIGH_LVL_Main+0x4e>
		high_lvl_states[current_state].function_main(sys, time_us);
 8001836:	4a07      	ldr	r2, [pc, #28]	; (8001854 <HIGH_LVL_Main+0x60>)
 8001838:	4631      	mov	r1, r6
 800183a:	6810      	ldr	r0, [r2, #0]

}
 800183c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		high_lvl_states[current_state].function_main(sys, time_us);
 8001840:	4718      	bx	r3
}
 8001842:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001846:	bf00      	nop
 8001848:	20001b59 	.word	0x20001b59
 800184c:	20001b58 	.word	0x20001b58
 8001850:	08008ac0 	.word	0x08008ac0
 8001854:	20001b5c 	.word	0x20001b5c

08001858 <full_manual_entrance>:

#include "High_lvl.h"


void full_manual_entrance(system_t * sys){
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_MODE_MANUAL);
 8001858:	2001      	movs	r0, #1
 800185a:	f000 bf6b 	b.w	8002734 <REGULATION_ORIENTATION_Set_Regulation_Mode>
 800185e:	bf00      	nop

08001860 <full_manual_main>:
}

void full_manual_main(system_t * sys, uint32_t time_us){
	//nada
}
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop

08001864 <idle_entrance>:
 */

#include "../High_lvl/High_lvl.h"

void idle_entrance(system_t * sys){
	REGULATION_ORIENTATION_Set_Regulation_Mode(REGULATION_MODE_OFF);
 8001864:	2000      	movs	r0, #0
 8001866:	f000 bf65 	b.w	8002734 <REGULATION_ORIENTATION_Set_Regulation_Mode>
 800186a:	bf00      	nop

0800186c <idle_main>:
}

void idle_main(system_t * sys, uint32_t time_us){
	//For now we just do nada
}
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop

08001870 <DEBUG_init>:
#include "debug.h"
#include "retarget.h"

extern UART_HandleTypeDef huart1 ;

void DEBUG_init(void){
 8001870:	b508      	push	{r3, lr}
	RetargetInit(&huart1);
 8001872:	4804      	ldr	r0, [pc, #16]	; (8001884 <DEBUG_init+0x14>)
 8001874:	f000 f80a 	bl	800188c <RetargetInit>
	printf("Debuger is init\n");
 8001878:	4803      	ldr	r0, [pc, #12]	; (8001888 <DEBUG_init+0x18>)
}
 800187a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printf("Debuger is init\n");
 800187e:	f005 b94b 	b.w	8006b18 <puts>
 8001882:	bf00      	nop
 8001884:	20002504 	.word	0x20002504
 8001888:	08008ae0 	.word	0x08008ae0

0800188c <RetargetInit>:
void RetargetInit(UART_HandleTypeDef *huart) {
  gHuart = huart;

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <RetargetInit+0x14>)
  gHuart = huart;
 800188e:	4b05      	ldr	r3, [pc, #20]	; (80018a4 <RetargetInit+0x18>)
  setvbuf(stdout, NULL, _IONBF, 0);
 8001890:	6812      	ldr	r2, [r2, #0]
  gHuart = huart;
 8001892:	6018      	str	r0, [r3, #0]
  setvbuf(stdout, NULL, _IONBF, 0);
 8001894:	2300      	movs	r3, #0
 8001896:	6890      	ldr	r0, [r2, #8]
 8001898:	4619      	mov	r1, r3
 800189a:	2202      	movs	r2, #2
 800189c:	f005 b944 	b.w	8006b28 <setvbuf>
 80018a0:	200016ec 	.word	0x200016ec
 80018a4:	20001c28 	.word	0x20001c28

080018a8 <_isatty>:
}

int _isatty(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80018a8:	2802      	cmp	r0, #2
 80018aa:	d801      	bhi.n	80018b0 <_isatty+0x8>
    return 1;
 80018ac:	2001      	movs	r0, #1

  errno = EBADF;
  return 0;
}
 80018ae:	4770      	bx	lr
int _isatty(int fd) {
 80018b0:	b508      	push	{r3, lr}
  errno = EBADF;
 80018b2:	f004 fd35 	bl	8006320 <__errno>
 80018b6:	2309      	movs	r3, #9
 80018b8:	6003      	str	r3, [r0, #0]
  return 0;
 80018ba:	2000      	movs	r0, #0
}
 80018bc:	bd08      	pop	{r3, pc}
 80018be:	bf00      	nop

080018c0 <_write>:

int _write(int fd, char* ptr, int len) {
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80018c0:	3801      	subs	r0, #1
 80018c2:	2801      	cmp	r0, #1
int _write(int fd, char* ptr, int len) {
 80018c4:	b510      	push	{r4, lr}
  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 80018c6:	d80b      	bhi.n	80018e0 <_write+0x20>
 80018c8:	4614      	mov	r4, r2
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, 100);
 80018ca:	4a09      	ldr	r2, [pc, #36]	; (80018f0 <_write+0x30>)
 80018cc:	2364      	movs	r3, #100	; 0x64
 80018ce:	6810      	ldr	r0, [r2, #0]
 80018d0:	b2a2      	uxth	r2, r4
 80018d2:	f004 f8b7 	bl	8005a44 <HAL_UART_Transmit>
    if (hstatus == HAL_OK)
 80018d6:	2800      	cmp	r0, #0
      return len;
    else
      return EIO;
 80018d8:	bf18      	it	ne
 80018da:	2405      	movne	r4, #5
  }
  errno = EBADF;
  return -1;
}
 80018dc:	4620      	mov	r0, r4
 80018de:	bd10      	pop	{r4, pc}
  errno = EBADF;
 80018e0:	f004 fd1e 	bl	8006320 <__errno>
 80018e4:	2309      	movs	r3, #9
 80018e6:	6003      	str	r3, [r0, #0]
  return -1;
 80018e8:	f04f 34ff 	mov.w	r4, #4294967295
 80018ec:	e7f6      	b.n	80018dc <_write+0x1c>
 80018ee:	bf00      	nop
 80018f0:	20001c28 	.word	0x20001c28

080018f4 <_close>:

int _close(int fd) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 80018f4:	2802      	cmp	r0, #2
 80018f6:	d801      	bhi.n	80018fc <_close+0x8>
    return 0;
 80018f8:	2000      	movs	r0, #0

  errno = EBADF;
  return -1;
}
 80018fa:	4770      	bx	lr
int _close(int fd) {
 80018fc:	b508      	push	{r3, lr}
  errno = EBADF;
 80018fe:	f004 fd0f 	bl	8006320 <__errno>
 8001902:	2309      	movs	r3, #9
 8001904:	6003      	str	r3, [r0, #0]
  return -1;
 8001906:	f04f 30ff 	mov.w	r0, #4294967295
}
 800190a:	bd08      	pop	{r3, pc}

0800190c <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 800190c:	b508      	push	{r3, lr}
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 800190e:	f004 fd07 	bl	8006320 <__errno>
 8001912:	2309      	movs	r3, #9
 8001914:	6003      	str	r3, [r0, #0]
  return -1;
}
 8001916:	f04f 30ff 	mov.w	r0, #4294967295
 800191a:	bd08      	pop	{r3, pc}

0800191c <_read>:

int _read(int fd, char* ptr, int len) {
 800191c:	b508      	push	{r3, lr}
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 800191e:	b958      	cbnz	r0, 8001938 <_read+0x1c>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001920:	4a09      	ldr	r2, [pc, #36]	; (8001948 <_read+0x2c>)
 8001922:	f04f 33ff 	mov.w	r3, #4294967295
 8001926:	6810      	ldr	r0, [r2, #0]
 8001928:	2201      	movs	r2, #1
 800192a:	f004 f919 	bl	8005b60 <HAL_UART_Receive>
    if (hstatus == HAL_OK)
 800192e:	2800      	cmp	r0, #0
      return 1;
    else
      return EIO;
 8001930:	bf0c      	ite	eq
 8001932:	2001      	moveq	r0, #1
 8001934:	2005      	movne	r0, #5
  }
  errno = EBADF;
  return -1;
}
 8001936:	bd08      	pop	{r3, pc}
  errno = EBADF;
 8001938:	f004 fcf2 	bl	8006320 <__errno>
 800193c:	2309      	movs	r3, #9
 800193e:	6003      	str	r3, [r0, #0]
  return -1;
 8001940:	f04f 30ff 	mov.w	r0, #4294967295
}
 8001944:	bd08      	pop	{r3, pc}
 8001946:	bf00      	nop
 8001948:	20001c28 	.word	0x20001c28

0800194c <_fstat>:

int _fstat(int fd, struct stat* st) {
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 800194c:	2802      	cmp	r0, #2
int _fstat(int fd, struct stat* st) {
 800194e:	b508      	push	{r3, lr}
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001950:	d804      	bhi.n	800195c <_fstat+0x10>
    st->st_mode = S_IFCHR;
 8001952:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001956:	604b      	str	r3, [r1, #4]
    return 0;
  }

  errno = EBADF;
  return 0;
}
 8001958:	2000      	movs	r0, #0
 800195a:	bd08      	pop	{r3, pc}
  errno = EBADF;
 800195c:	f004 fce0 	bl	8006320 <__errno>
 8001960:	2309      	movs	r3, #9
 8001962:	6003      	str	r3, [r0, #0]
}
 8001964:	2000      	movs	r0, #0
 8001966:	bd08      	pop	{r3, pc}

08001968 <orientation_update>:
	__enable_irq();
	//On lance la tâche d'update du gyro
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
}

static void orientation_update(mask_def_ids_t mask_id){
 8001968:	b510      	push	{r4, lr}
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800196a:	b672      	cpsid	i
	__disable_irq();
	MASK_clean_flag(&flags, FLAG_ACC_FILTERED_DATA_READY);
 800196c:	4c07      	ldr	r4, [pc, #28]	; (800198c <orientation_update+0x24>)
 800196e:	2107      	movs	r1, #7
 8001970:	4620      	mov	r0, r4
 8001972:	f000 f939 	bl	8001be8 <MASK_clean_flag>
	MASK_clean_flag(&flags, FLAG_GYRO_FILTERED_DATA_READY);
 8001976:	4620      	mov	r0, r4
 8001978:	2103      	movs	r1, #3
 800197a:	f000 f935 	bl	8001be8 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 800197e:	b662      	cpsie	i
	__enable_irq();
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 8001980:	2102      	movs	r1, #2
 8001982:	200c      	movs	r0, #12
}
 8001984:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	SCHEDULER_task_set_mode(TASK_ORIENTATION_UPDATE, TASK_MODE_EVENT);
 8001988:	f000 bde6 	b.w	8002558 <SCHEDULER_task_set_mode>
 800198c:	20001b60 	.word	0x20001b60

08001990 <acc_data_ready_func>:
static void acc_data_ready_func(mask_def_ids_t mask_id){
 8001990:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8001992:	b672      	cpsid	i
	MASK_clean_flag(&flags, FLAG_ACC_DATA_READY);
 8001994:	2106      	movs	r1, #6
 8001996:	4805      	ldr	r0, [pc, #20]	; (80019ac <acc_data_ready_func+0x1c>)
 8001998:	f000 f926 	bl	8001be8 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 800199c:	b662      	cpsie	i
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 800199e:	2102      	movs	r1, #2
 80019a0:	2008      	movs	r0, #8
}
 80019a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SCHEDULER_task_set_mode(TASK_ACC_FILTER, TASK_MODE_EVENT);
 80019a6:	f000 bdd7 	b.w	8002558 <SCHEDULER_task_set_mode>
 80019aa:	bf00      	nop
 80019ac:	20001b60 	.word	0x20001b60

080019b0 <gyro_data_ready_func>:
static void gyro_data_ready_func(mask_def_ids_t mask_id){
 80019b0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80019b2:	b672      	cpsid	i
	MASK_clean_flag(&flags, FLAG_GYRO_DATA_READY);
 80019b4:	2102      	movs	r1, #2
 80019b6:	4805      	ldr	r0, [pc, #20]	; (80019cc <gyro_data_ready_func+0x1c>)
 80019b8:	f000 f916 	bl	8001be8 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80019bc:	b662      	cpsie	i
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 80019be:	2102      	movs	r1, #2
 80019c0:	2006      	movs	r0, #6
}
 80019c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SCHEDULER_task_set_mode(TASK_GYRO_FILTER, TASK_MODE_EVENT);
 80019c6:	f000 bdc7 	b.w	8002558 <SCHEDULER_task_set_mode>
 80019ca:	bf00      	nop
 80019cc:	20001b60 	.word	0x20001b60

080019d0 <acc_init_ok_func>:
static void acc_init_ok_func(mask_def_ids_t mask_id){
 80019d0:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80019d2:	b672      	cpsid	i


//Set a flag
void EVENT_Set_flag(Flags_e flag){
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 80019d4:	4b07      	ldr	r3, [pc, #28]	; (80019f4 <acc_init_ok_func+0x24>)
	MASK_set_flag(&flags, flag);
 80019d6:	4808      	ldr	r0, [pc, #32]	; (80019f8 <acc_init_ok_func+0x28>)
	new_flag = TRUE ;
 80019d8:	2401      	movs	r4, #1
	MASK_set_flag(&flags, flag);
 80019da:	2105      	movs	r1, #5
	new_flag = TRUE ;
 80019dc:	601c      	str	r4, [r3, #0]
	MASK_set_flag(&flags, flag);
 80019de:	f000 f8ed 	bl	8001bbc <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 80019e2:	b662      	cpsie	i
	SCHEDULER_task_set_mode(TASK_ACC_UPDATE, TASK_MODE_TIME);
 80019e4:	2007      	movs	r0, #7
 80019e6:	4621      	mov	r1, r4
 80019e8:	f000 fdb6 	bl	8002558 <SCHEDULER_task_set_mode>
	events_main[EVENT_ACC_INIT_OK].state = EVENT_DISABLED ;
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <acc_init_ok_func+0x2c>)
 80019ee:	f883 4430 	strb.w	r4, [r3, #1072]	; 0x430
}
 80019f2:	bd10      	pop	{r4, pc}
 80019f4:	20001b68 	.word	0x20001b68
 80019f8:	20001b60 	.word	0x20001b60
 80019fc:	200001a0 	.word	0x200001a0

08001a00 <gyro_init_ok_func>:
static void gyro_init_ok_func(mask_def_ids_t mask_id){
 8001a00:	b510      	push	{r4, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 8001a02:	b672      	cpsid	i
	new_flag = TRUE ;
 8001a04:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <gyro_init_ok_func+0x24>)
	MASK_set_flag(&flags, flag);
 8001a06:	4808      	ldr	r0, [pc, #32]	; (8001a28 <gyro_init_ok_func+0x28>)
	new_flag = TRUE ;
 8001a08:	2401      	movs	r4, #1
	MASK_set_flag(&flags, flag);
 8001a0a:	4621      	mov	r1, r4
	new_flag = TRUE ;
 8001a0c:	601c      	str	r4, [r3, #0]
	MASK_set_flag(&flags, flag);
 8001a0e:	f000 f8d5 	bl	8001bbc <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8001a12:	b662      	cpsie	i
	SCHEDULER_task_set_mode(TASK_GYRO_UPDATE, TASK_MODE_TIME);
 8001a14:	2005      	movs	r0, #5
 8001a16:	4621      	mov	r1, r4
 8001a18:	f000 fd9e 	bl	8002558 <SCHEDULER_task_set_mode>
	events_main[EVENT_GYRO_INIT_OK].state = EVENT_DISABLED ;
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <gyro_init_ok_func+0x2c>)
 8001a1e:	f883 437c 	strb.w	r4, [r3, #892]	; 0x37c
}
 8001a22:	bd10      	pop	{r4, pc}
 8001a24:	20001b68 	.word	0x20001b68
 8001a28:	20001b60 	.word	0x20001b60
 8001a2c:	200001a0 	.word	0x200001a0

08001a30 <EVENT_init>:
	mask_def_events_init(events_main);
 8001a30:	4801      	ldr	r0, [pc, #4]	; (8001a38 <EVENT_init+0x8>)
 8001a32:	f000 b8ef 	b.w	8001c14 <mask_def_events_init>
 8001a36:	bf00      	nop
 8001a38:	200001a0 	.word	0x200001a0

08001a3c <EVENT_process>:
	if(new_flag)
 8001a3c:	4b33      	ldr	r3, [pc, #204]	; (8001b0c <EVENT_process+0xd0>)
 8001a3e:	681a      	ldr	r2, [r3, #0]
 8001a40:	2a00      	cmp	r2, #0
 8001a42:	d05b      	beq.n	8001afc <EVENT_process+0xc0>
void EVENT_process(bool_e test_all){
 8001a44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001a48:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 8001b14 <EVENT_process+0xd8>
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 8001a4c:	4d30      	ldr	r5, [pc, #192]	; (8001b10 <EVENT_process+0xd4>)
		if(test_all)
 8001a4e:	2800      	cmp	r0, #0
		new_flag = FALSE;
 8001a50:	f04f 0200 	mov.w	r2, #0
		if(test_all)
 8001a54:	bf14      	ite	ne
 8001a56:	f04f 0a0d 	movne.w	sl, #13
 8001a5a:	f04f 0a07 	moveq.w	sl, #7
 8001a5e:	4646      	mov	r6, r8
		new_flag = FALSE;
 8001a60:	601a      	str	r2, [r3, #0]
		for(uint32_t e = 0; e < max; e ++)
 8001a62:	4691      	mov	r9, r2
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8001a64:	f8d6 30a8 	ldr.w	r3, [r6, #168]	; 0xa8
 8001a68:	b1e3      	cbz	r3, 8001aa4 <EVENT_process+0x68>
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 8001a6a:	27b4      	movs	r7, #180	; 0xb4
 8001a6c:	fb07 f709 	mul.w	r7, r7, r9
 8001a70:	2400      	movs	r4, #0
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8001a72:	f896 30ac 	ldrb.w	r3, [r6, #172]	; 0xac
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 8001a76:	eb07 01c4 	add.w	r1, r7, r4, lsl #3
 8001a7a:	4441      	add	r1, r8
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8001a7c:	b993      	cbnz	r3, 8001aa4 <EVENT_process+0x68>
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 8001a7e:	e895 000c 	ldmia.w	r5, {r2, r3}
 8001a82:	c903      	ldmia	r1, {r0, r1}
 8001a84:	f000 f868 	bl	8001b58 <Mask_test_and>
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8001a88:	1c63      	adds	r3, r4, #1
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 8001a8a:	b998      	cbnz	r0, 8001ab4 <EVENT_process+0x78>
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8001a8c:	f8d6 20a8 	ldr.w	r2, [r6, #168]	; 0xa8
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d207      	bcs.n	8001aa4 <EVENT_process+0x68>
 8001a94:	461c      	mov	r4, r3
 8001a96:	f896 30ac 	ldrb.w	r3, [r6, #172]	; 0xac
				if(Mask_test_and(events_main[e].mask_and[m], flags))			//Mask and test
 8001a9a:	eb07 01c4 	add.w	r1, r7, r4, lsl #3
 8001a9e:	4441      	add	r1, r8
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0ec      	beq.n	8001a7e <EVENT_process+0x42>
		for(uint32_t e = 0; e < max; e ++)
 8001aa4:	f109 0901 	add.w	r9, r9, #1
 8001aa8:	45ca      	cmp	sl, r9
 8001aaa:	f106 06b4 	add.w	r6, r6, #180	; 0xb4
 8001aae:	d1d9      	bne.n	8001a64 <EVENT_process+0x28>
}
 8001ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					if(Mask_test_or(events_main[e].mask_or[m], flags))			//Mask or test
 8001ab4:	1de3      	adds	r3, r4, #7
 8001ab6:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8001aba:	4443      	add	r3, r8
 8001abc:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001ac0:	e895 000c 	ldmia.w	r5, {r2, r3}
 8001ac4:	f000 f860 	bl	8001b88 <Mask_test_or>
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8001ac8:	1c63      	adds	r3, r4, #1
					if(Mask_test_or(events_main[e].mask_or[m], flags))			//Mask or test
 8001aca:	2800      	cmp	r0, #0
 8001acc:	d0de      	beq.n	8001a8c <EVENT_process+0x50>
						if(!Mask_test_or(events_main[e].mask_not[m], flags))	//Mask not test
 8001ace:	f104 030e 	add.w	r3, r4, #14
 8001ad2:	eb07 03c3 	add.w	r3, r7, r3, lsl #3
 8001ad6:	4443      	add	r3, r8
 8001ad8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001adc:	e895 000c 	ldmia.w	r5, {r2, r3}
 8001ae0:	f000 f852 	bl	8001b88 <Mask_test_or>
 8001ae4:	b958      	cbnz	r0, 8001afe <EVENT_process+0xc2>
							events_main[e].function(m);
 8001ae6:	f8d6 30b0 	ldr.w	r3, [r6, #176]	; 0xb0
 8001aea:	b2e0      	uxtb	r0, r4
		for(uint32_t e = 0; e < max; e ++)
 8001aec:	f109 0901 	add.w	r9, r9, #1
							events_main[e].function(m);
 8001af0:	4798      	blx	r3
		for(uint32_t e = 0; e < max; e ++)
 8001af2:	45ca      	cmp	sl, r9
 8001af4:	f106 06b4 	add.w	r6, r6, #180	; 0xb4
 8001af8:	d1b4      	bne.n	8001a64 <EVENT_process+0x28>
 8001afa:	e7d9      	b.n	8001ab0 <EVENT_process+0x74>
 8001afc:	4770      	bx	lr
			while(m < events_main[e].nb_mask && !function_did_run_once && events_main[e].state == EVENT_ENABLED)
 8001afe:	f8d6 20a8 	ldr.w	r2, [r6, #168]	; 0xa8
 8001b02:	1c63      	adds	r3, r4, #1
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d2cd      	bcs.n	8001aa4 <EVENT_process+0x68>
 8001b08:	461c      	mov	r4, r3
 8001b0a:	e7c4      	b.n	8001a96 <EVENT_process+0x5a>
 8001b0c:	20001b68 	.word	0x20001b68
 8001b10:	20001b60 	.word	0x20001b60
 8001b14:	200001a0 	.word	0x200001a0

08001b18 <EVENT_Set_flag>:
void EVENT_Set_flag(Flags_e flag){
 8001b18:	b508      	push	{r3, lr}
 8001b1a:	4601      	mov	r1, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b1c:	b672      	cpsid	i
	new_flag = TRUE ;
 8001b1e:	4b04      	ldr	r3, [pc, #16]	; (8001b30 <EVENT_Set_flag+0x18>)
	MASK_set_flag(&flags, flag);
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <EVENT_Set_flag+0x1c>)
	new_flag = TRUE ;
 8001b22:	2201      	movs	r2, #1
 8001b24:	601a      	str	r2, [r3, #0]
	MASK_set_flag(&flags, flag);
 8001b26:	f000 f849 	bl	8001bbc <MASK_set_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b2a:	b662      	cpsie	i
	__enable_irq();
}
 8001b2c:	bd08      	pop	{r3, pc}
 8001b2e:	bf00      	nop
 8001b30:	20001b68 	.word	0x20001b68
 8001b34:	20001b60 	.word	0x20001b60

08001b38 <EVENT_Clean_flag>:
//CleaR a flag (i know it should be called cleaR instead of cleaN but i didnt took the time to change it YET)
//Todo : cleaRRRRRRR a flag
void EVENT_Clean_flag(Flags_e flag){
 8001b38:	b508      	push	{r3, lr}
 8001b3a:	4601      	mov	r1, r0
  __ASM volatile ("cpsid i" : : : "memory");
 8001b3c:	b672      	cpsid	i
	__disable_irq();					//It désactivitées pour éviter la réentrance
	new_flag = TRUE ;
 8001b3e:	4b04      	ldr	r3, [pc, #16]	; (8001b50 <EVENT_Clean_flag+0x18>)
	MASK_clean_flag(&flags, flag);
 8001b40:	4804      	ldr	r0, [pc, #16]	; (8001b54 <EVENT_Clean_flag+0x1c>)
	new_flag = TRUE ;
 8001b42:	2201      	movs	r2, #1
 8001b44:	601a      	str	r2, [r3, #0]
	MASK_clean_flag(&flags, flag);
 8001b46:	f000 f84f 	bl	8001be8 <MASK_clean_flag>
  __ASM volatile ("cpsie i" : : : "memory");
 8001b4a:	b662      	cpsie	i
	__enable_irq();
}
 8001b4c:	bd08      	pop	{r3, pc}
 8001b4e:	bf00      	nop
 8001b50:	20001b68 	.word	0x20001b68
 8001b54:	20001b60 	.word	0x20001b60

08001b58 <Mask_test_and>:
	for(int m = 0; m < NB_ARRAY_MASK; m++)
		mask->array[m] = 0 ;
}

//Fonction qui compare si tous les bits du mask de test sont pr�sent dans le mask de ref
bool_e Mask_test_and(Mask_t mask_test, Mask_t mask_ref){
 8001b58:	b410      	push	{r4}
 8001b5a:	b085      	sub	sp, #20
 8001b5c:	f10d 0c10 	add.w	ip, sp, #16
 8001b60:	e90c 0003 	stmdb	ip, {r0, r1}
 8001b64:	466c      	mov	r4, sp
 8001b66:	e884 000c 	stmia.w	r4, {r2, r3}
	//On cherche � savoir si les bits du mask sont pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
		if((mask_test.array[m] & mask_ref.array[m]) != mask_test.array[m]){
 8001b6a:	9b02      	ldr	r3, [sp, #8]
 8001b6c:	4393      	bics	r3, r2
 8001b6e:	d109      	bne.n	8001b84 <Mask_test_and+0x2c>
 8001b70:	9b03      	ldr	r3, [sp, #12]
 8001b72:	9a01      	ldr	r2, [sp, #4]
 8001b74:	4393      	bics	r3, r2
 8001b76:	bf0c      	ite	eq
 8001b78:	2001      	moveq	r0, #1
 8001b7a:	2000      	movne	r0, #0
			//Si il ne y a pas correspondance sur une des entiers on renvoit faux
			return FALSE ;
		}
	return TRUE ;
}
 8001b7c:	b005      	add	sp, #20
 8001b7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001b82:	4770      	bx	lr
			return FALSE ;
 8001b84:	2000      	movs	r0, #0
 8001b86:	e7f9      	b.n	8001b7c <Mask_test_and+0x24>

08001b88 <Mask_test_or>:

//Fonction qui compare si au moins des bits du mask de test est pr�sent dans le mask de ref
bool_e Mask_test_or(Mask_t mask_test, Mask_t mask_ref){
 8001b88:	b410      	push	{r4}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	466c      	mov	r4, sp
 8001b8e:	f10d 0c10 	add.w	ip, sp, #16
 8001b92:	e884 000c 	stmia.w	r4, {r2, r3}
 8001b96:	e90c 0003 	stmdb	ip, {r0, r1}
	//On cherche � savoir si au moins des bits du mask ref est pr�sent dans le mask de ref
	for(int32_t m = 0; m < NB_ARRAY_MASK; m++)
		if(mask_test.array[m] & mask_ref.array[m])
 8001b9a:	9b00      	ldr	r3, [sp, #0]
 8001b9c:	9a02      	ldr	r2, [sp, #8]
 8001b9e:	421a      	tst	r2, r3
 8001ba0:	d109      	bne.n	8001bb6 <Mask_test_or+0x2e>
 8001ba2:	9a03      	ldr	r2, [sp, #12]
 8001ba4:	9b01      	ldr	r3, [sp, #4]
 8001ba6:	421a      	tst	r2, r3
 8001ba8:	bf14      	ite	ne
 8001baa:	2001      	movne	r0, #1
 8001bac:	2000      	moveq	r0, #0
			//Si un des bits est pr�sent on renvoit vrai
			return TRUE ;
	return FALSE ;
}
 8001bae:	b005      	add	sp, #20
 8001bb0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001bb4:	4770      	bx	lr
			return TRUE ;
 8001bb6:	2001      	movs	r0, #1
 8001bb8:	e7f9      	b.n	8001bae <Mask_test_or+0x26>
 8001bba:	bf00      	nop

08001bbc <MASK_set_flag>:

//Passe le flag s�l�ctionner � l'�tat haut, renvoit faux si il l'�tait d�j�, vrai sinon
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_e flag){
	uint32_t array_nb = flag / 32 ;
 8001bbc:	094a      	lsrs	r2, r1, #5
bool_e MASK_set_flag(volatile Mask_t * mask, Flags_e flag){
 8001bbe:	b410      	push	{r4}
	uint32_t flag_pos = flag % 32 ;
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8001bc0:	2301      	movs	r3, #1
	//On v�rifi si le flag est pas d�j� haut
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 8001bc2:	f850 4022 	ldr.w	r4, [r0, r2, lsl #2]
	uint32_t flag_pos = flag % 32 ;
 8001bc6:	f001 011f 	and.w	r1, r1, #31
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8001bca:	fa03 f101 	lsl.w	r1, r3, r1
	if((mask->array[array_nb] & flag_mask) == flag_mask)
 8001bce:	ea31 0404 	bics.w	r4, r1, r4
		return FALSE ;
	//Et on passe � l�tat haut sinon
	mask->array[array_nb] |= flag_mask ;
 8001bd2:	bf17      	itett	ne
 8001bd4:	f850 4022 	ldrne.w	r4, [r0, r2, lsl #2]
		return FALSE ;
 8001bd8:	2300      	moveq	r3, #0
	mask->array[array_nb] |= flag_mask ;
 8001bda:	4321      	orrne	r1, r4
 8001bdc:	f840 1022 	strne.w	r1, [r0, r2, lsl #2]
	return TRUE ;
}
 8001be0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001be4:	4618      	mov	r0, r3
 8001be6:	4770      	bx	lr

08001be8 <MASK_clean_flag>:

//Clean un flag, renvoit si il �tat d�j� clean, vrai sinon
bool_e MASK_clean_flag(volatile Mask_t * mask, Flags_e flag){
 8001be8:	b410      	push	{r4}
	uint32_t array_nb = flag / 32 ;
 8001bea:	094c      	lsrs	r4, r1, #5
	uint32_t flag_pos = flag % 32 ;
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8001bec:	2201      	movs	r2, #1
	//On  v�rifi si le flag est bien lev�
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 8001bee:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
	uint32_t flag_pos = flag % 32 ;
 8001bf2:	f001 011f 	and.w	r1, r1, #31
	uint32_t flag_mask = (uint32_t)(1 << flag_pos) ;
 8001bf6:	fa02 f101 	lsl.w	r1, r2, r1
	if((mask->array[array_nb] & flag_mask ) == flag_mask){
 8001bfa:	400b      	ands	r3, r1
 8001bfc:	428b      	cmp	r3, r1
		mask->array[array_nb] -= flag_mask ;
 8001bfe:	bf09      	itett	eq
 8001c00:	f850 1024 	ldreq.w	r1, [r0, r4, lsl #2]
		return TRUE ;
	}
	return FALSE ;
 8001c04:	2200      	movne	r2, #0
		mask->array[array_nb] -= flag_mask ;
 8001c06:	1acb      	subeq	r3, r1, r3
 8001c08:	f840 3024 	streq.w	r3, [r0, r4, lsl #2]
}
 8001c0c:	4610      	mov	r0, r2
 8001c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <mask_def_events_init>:
// ----------------	Orientation ------------------------
static void mask_def_orientation_update(Event_t * event);



void mask_def_events_init(Event_t * event){
 8001c14:	b538      	push	{r3, r4, r5, lr}
}

// ----------------	GYRO ------------------------
static void mask_def_gyro_init_ok(Event_t * event){
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8001c16:	2100      	movs	r1, #0
void mask_def_events_init(Event_t * event){
 8001c18:	4604      	mov	r4, r0
	MASK_set_flag(&event->mask_and[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8001c1a:	f500 7034 	add.w	r0, r0, #720	; 0x2d0
 8001c1e:	f7ff ffcd 	bl	8001bbc <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_INIT_OK], FLAG_GYRO_OK);
 8001c22:	f504 7042 	add.w	r0, r4, #776	; 0x308
 8001c26:	2100      	movs	r1, #0
 8001c28:	f7ff ffc8 	bl	8001bbc <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_GYRO_INIT_OK], FLAG_GYRO_READING);
 8001c2c:	f504 7050 	add.w	r0, r4, #832	; 0x340
 8001c30:	2101      	movs	r1, #1
 8001c32:	f7ff ffc3 	bl	8001bbc <MASK_set_flag>
}

static void mask_def_gyro_data_ready(Event_t * event){
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_GYRO_DATA_READY], FLAG_GYRO_OK);
 8001c36:	4620      	mov	r0, r4
 8001c38:	2100      	movs	r1, #0
 8001c3a:	f7ff ffbf 	bl	8001bbc <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_GYRO_DATA_READY], FLAG_GYRO_DATA_READY);
 8001c3e:	f104 0038 	add.w	r0, r4, #56	; 0x38
 8001c42:	2102      	movs	r1, #2
 8001c44:	f7ff ffba 	bl	8001bbc <MASK_set_flag>

// ----------------	ACC ------------------------

static void mask_def_acc_init_ok(Event_t * event){
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8001c48:	f504 7061 	add.w	r0, r4, #900	; 0x384
 8001c4c:	2104      	movs	r1, #4
 8001c4e:	f7ff ffb5 	bl	8001bbc <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ACC_INIT_OK], FLAG_ACC_OK);
 8001c52:	f504 706f 	add.w	r0, r4, #956	; 0x3bc
 8001c56:	2104      	movs	r1, #4
 8001c58:	f7ff ffb0 	bl	8001bbc <MASK_set_flag>
	MASK_set_flag(&event->mask_not[MASK_ACC_INIT_OK], FLAG_ACC_READING);
 8001c5c:	f504 707d 	add.w	r0, r4, #1012	; 0x3f4
 8001c60:	2105      	movs	r1, #5
 8001c62:	f7ff ffab 	bl	8001bbc <MASK_set_flag>
}

static void mask_def_acc_data_ready(Event_t * event){
	//Si le gyro est init et pas déjà en train de tourner
	MASK_set_flag(&event->mask_and[MASK_ACC_DATA_READY], FLAG_ACC_OK);
 8001c66:	f104 00b4 	add.w	r0, r4, #180	; 0xb4
 8001c6a:	2104      	movs	r1, #4
 8001c6c:	f7ff ffa6 	bl	8001bbc <MASK_set_flag>
}

// ----------------	ORIENTATION ------------------------
static void mask_def_orientation_update(Event_t * event){
	//Si les données filtrées du gyro et de l'acc on go
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 8001c70:	f504 75b4 	add.w	r5, r4, #360	; 0x168
	MASK_set_flag(&event->mask_or[MASK_ACC_DATA_READY], FLAG_ACC_DATA_READY);
 8001c74:	f104 00ec 	add.w	r0, r4, #236	; 0xec
 8001c78:	2106      	movs	r1, #6
 8001c7a:	f7ff ff9f 	bl	8001bbc <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_ACC_OK);
 8001c7e:	4628      	mov	r0, r5
 8001c80:	2104      	movs	r1, #4
 8001c82:	f7ff ff9b 	bl	8001bbc <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_OK);
 8001c86:	4628      	mov	r0, r5
 8001c88:	2100      	movs	r1, #0
 8001c8a:	f7ff ff97 	bl	8001bbc <MASK_set_flag>
	MASK_set_flag(&event->mask_and[MASK_ORIENTATION_UPDATE], FLAG_GYRO_FILTERED_DATA_READY);
 8001c8e:	4628      	mov	r0, r5
 8001c90:	2103      	movs	r1, #3
 8001c92:	f7ff ff93 	bl	8001bbc <MASK_set_flag>
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 8001c96:	f504 70d0 	add.w	r0, r4, #416	; 0x1a0
 8001c9a:	2107      	movs	r1, #7
}
 8001c9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	MASK_set_flag(&event->mask_or[MASK_ORIENTATION_UPDATE], FLAG_ACC_FILTERED_DATA_READY);
 8001ca0:	f7ff bf8c 	b.w	8001bbc <MASK_set_flag>

08001ca4 <SCHEDULER_init>:
static bool_e queu_remove(task_t * task);
//static void queu_clear(void);		Not used



void SCHEDULER_init(system_t * sys_){
 8001ca4:	b510      	push	{r4, lr}
 8001ca6:	4604      	mov	r4, r0
	//Mémorise l'emplacement données du système
	sys = sys_ ;

	//Init du debug pour le printf
	DEBUG_init();
 8001ca8:	f7ff fde2 	bl	8001870 <DEBUG_init>

	//Init des tâches
	tasks_init(sys_);
 8001cac:	4620      	mov	r0, r4
}
 8001cae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	tasks_init(sys_);
 8001cb2:	f000 bcbd 	b.w	8002630 <tasks_init>
 8001cb6:	bf00      	nop

08001cb8 <SCHEDULER_run>:

void SCHEDULER_run(void){
 8001cb8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t current_time_us = TIME_us();
	task_t * task = get_first_task();
	bool_e task_executed = FALSE ;
	while(task_queu_position < task_queu_size && task != NULL){
 8001cbc:	f8df 825c 	ldr.w	r8, [pc, #604]	; 8001f1c <SCHEDULER_run+0x264>

	return load_pourcentage / 512.0f ;
}

static task_t * get_first_task(void){
	task_queu_position = 0 ;
 8001cc0:	4d93      	ldr	r5, [pc, #588]	; (8001f10 <SCHEDULER_run+0x258>)
	return task_queu[0] ;
 8001cc2:	4e94      	ldr	r6, [pc, #592]	; (8001f14 <SCHEDULER_run+0x25c>)
	uint32_t current_time_us = TIME_us();
 8001cc4:	f000 fcf4 	bl	80026b0 <TIME_us>
	while(task_queu_position < task_queu_size && task != NULL){
 8001cc8:	f8d8 1000 	ldr.w	r1, [r8]
	return task_queu[0] ;
 8001ccc:	6834      	ldr	r4, [r6, #0]
	task_queu_position = 0 ;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	602b      	str	r3, [r5, #0]
	while(task_queu_position < task_queu_size && task != NULL){
 8001cd2:	2900      	cmp	r1, #0
 8001cd4:	d06b      	beq.n	8001dae <SCHEDULER_run+0xf6>
 8001cd6:	2c00      	cmp	r4, #0
 8001cd8:	d069      	beq.n	8001dae <SCHEDULER_run+0xf6>
 8001cda:	4682      	mov	sl, r0

	//Calcul de la période réelle en appliquant une moyenne glissante
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001cdc:	4f8e      	ldr	r7, [pc, #568]	; (8001f18 <SCHEDULER_run+0x260>)
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 8001cde:	4699      	mov	r9, r3
 8001ce0:	e00c      	b.n	8001cfc <SCHEDULER_run+0x44>
		switch(task->mode){
 8001ce2:	2a03      	cmp	r2, #3
 8001ce4:	f000 80c8 	beq.w	8001e78 <SCHEDULER_run+0x1c0>
 8001ce8:	2a01      	cmp	r2, #1
 8001cea:	d062      	beq.n	8001db2 <SCHEDULER_run+0xfa>
	return task_queu[++task_queu_position];
 8001cec:	3301      	adds	r3, #1
	while(task_queu_position < task_queu_size && task != NULL){
 8001cee:	428b      	cmp	r3, r1
	return task_queu[++task_queu_position];
 8001cf0:	602b      	str	r3, [r5, #0]
 8001cf2:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
	while(task_queu_position < task_queu_size && task != NULL){
 8001cf6:	d25a      	bcs.n	8001dae <SCHEDULER_run+0xf6>
 8001cf8:	2c00      	cmp	r4, #0
 8001cfa:	d058      	beq.n	8001dae <SCHEDULER_run+0xf6>
		switch(task->mode){
 8001cfc:	7a22      	ldrb	r2, [r4, #8]
 8001cfe:	2a02      	cmp	r2, #2
 8001d00:	d1ef      	bne.n	8001ce2 <SCHEDULER_run+0x2a>
	if(task->process == NULL)
 8001d02:	6861      	ldr	r1, [r4, #4]
 8001d04:	2900      	cmp	r1, #0
 8001d06:	d03d      	beq.n	8001d84 <SCHEDULER_run+0xcc>
 8001d08:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001d0c:	6a23      	ldr	r3, [r4, #32]
 8001d0e:	f8d4 c078 	ldr.w	ip, [r4, #120]	; 0x78
 8001d12:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001d16:	ebaa 0303 	sub.w	r3, sl, r3
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 8001d1a:	6a90      	ldr	r0, [r2, #40]	; 0x28
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001d1c:	6293      	str	r3, [r2, #40]	; 0x28
 8001d1e:	4463      	add	r3, ip
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8001d20:	1a1b      	subs	r3, r3, r0
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001d22:	fba7 0203 	umull	r0, r2, r7, r3
 8001d26:	0912      	lsrs	r2, r2, #4
		else
			task->lag_average -= (float)(task->desired_period_us - task->real_period_us_average_array[task->average_index]) * 0.5f ;
	}


	task->last_execution_us = current_time_us ;
 8001d28:	e9c4 2a07 	strd	r2, sl, [r4, #28]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8001d2c:	67a3      	str	r3, [r4, #120]	; 0x78
	task->process(current_time_us);
 8001d2e:	4650      	mov	r0, sl
 8001d30:	4788      	blx	r1
	current_time_us = TIME_us();
 8001d32:	f000 fcbd 	bl	80026b0 <TIME_us>


	//Calcul du "burst time" avec une moyenne glissante
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001d36:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001d3a:	6a22      	ldr	r2, [r4, #32]
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001d3c:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
	current_time_us = TIME_us();
 8001d40:	4682      	mov	sl, r0
 8001d42:	eb04 0081 	add.w	r0, r4, r1, lsl #2
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001d46:	ebaa 0c02 	sub.w	ip, sl, r2
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001d4a:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001d4c:	f8c0 c07c 	str.w	ip, [r0, #124]	; 0x7c
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001d50:	1a9b      	subs	r3, r3, r2
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001d52:	6962      	ldr	r2, [r4, #20]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 8001d54:	4463      	add	r3, ip
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001d56:	4562      	cmp	r2, ip
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 8001d58:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001d5c:	fba7 e303 	umull	lr, r3, r7, r3
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001d60:	bf38      	it	cc
 8001d62:	4662      	movcc	r2, ip
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001d64:	091b      	lsrs	r3, r3, #4

	if(task->duration_us_average_array[task->average_index] > 1000)
 8001d66:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
		task->duration_us_average_array[task->average_index] ++ ;

	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8001d6a:	f101 0101 	add.w	r1, r1, #1
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001d6e:	e9c4 3204 	strd	r3, r2, [r4, #16]
		task->duration_us_average_array[task->average_index] ++ ;
 8001d72:	bf84      	itt	hi
 8001d74:	f10c 0201 	addhi.w	r2, ip, #1
 8001d78:	67c2      	strhi	r2, [r0, #124]	; 0x7c
	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8001d7a:	2914      	cmp	r1, #20
 8001d7c:	bf08      	it	eq
 8001d7e:	4649      	moveq	r1, r9
 8001d80:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
				task->mode = TASK_MODE_WAIT ;
 8001d84:	f884 9008 	strb.w	r9, [r4, #8]
		if(task_executed && (task != TASK_get_task(TASK_SCHEDULER)) && (task != TASK_get_task(TASK_EVENT_CHECK)))
 8001d88:	2000      	movs	r0, #0
 8001d8a:	f000 fc89 	bl	80026a0 <TASK_get_task>
 8001d8e:	4284      	cmp	r4, r0
 8001d90:	d004      	beq.n	8001d9c <SCHEDULER_run+0xe4>
 8001d92:	2002      	movs	r0, #2
 8001d94:	f000 fc84 	bl	80026a0 <TASK_get_task>
 8001d98:	4284      	cmp	r4, r0
 8001d9a:	d108      	bne.n	8001dae <SCHEDULER_run+0xf6>
 8001d9c:	682b      	ldr	r3, [r5, #0]
 8001d9e:	f8d8 1000 	ldr.w	r1, [r8]
	return task_queu[++task_queu_position];
 8001da2:	3301      	adds	r3, #1
	while(task_queu_position < task_queu_size && task != NULL){
 8001da4:	428b      	cmp	r3, r1
	return task_queu[++task_queu_position];
 8001da6:	602b      	str	r3, [r5, #0]
 8001da8:	f856 4023 	ldr.w	r4, [r6, r3, lsl #2]
	while(task_queu_position < task_queu_size && task != NULL){
 8001dac:	d3a4      	bcc.n	8001cf8 <SCHEDULER_run+0x40>
}
 8001dae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if(current_time_us >= task->desired_next_start_us){
 8001db2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001db4:	4552      	cmp	r2, sl
 8001db6:	d899      	bhi.n	8001cec <SCHEDULER_run+0x34>
	if(task->process == NULL)
 8001db8:	f8d4 b004 	ldr.w	fp, [r4, #4]
 8001dbc:	69a1      	ldr	r1, [r4, #24]
 8001dbe:	edd4 7a03 	vldr	s15, [r4, #12]
 8001dc2:	f1bb 0f00 	cmp.w	fp, #0
 8001dc6:	d04e      	beq.n	8001e66 <SCHEDULER_run+0x1ae>
 8001dc8:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001dcc:	6a23      	ldr	r3, [r4, #32]
 8001dce:	6fa0      	ldr	r0, [r4, #120]	; 0x78
 8001dd0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001dd4:	ebaa 0303 	sub.w	r3, sl, r3
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 8001dd8:	f8d2 c028 	ldr.w	ip, [r2, #40]	; 0x28
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001ddc:	6293      	str	r3, [r2, #40]	; 0x28
 8001dde:	181a      	adds	r2, r3, r0
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8001de0:	eba2 020c 	sub.w	r2, r2, ip
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001de4:	fba7 c002 	umull	ip, r0, r7, r2
 8001de8:	0900      	lsrs	r0, r0, #4
		if(task->real_period_us_average_array[task->average_index] > task->desired_period_us)
 8001dea:	428b      	cmp	r3, r1
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8001dec:	67a2      	str	r2, [r4, #120]	; 0x78
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001dee:	61e0      	str	r0, [r4, #28]
		if(task->real_period_us_average_array[task->average_index] > task->desired_period_us)
 8001df0:	f240 8084 	bls.w	8001efc <SCHEDULER_run+0x244>
			task->lag_average += (float)(task->real_period_us_average_array[task->average_index] - task->desired_period_us) * 0.5f ;
 8001df4:	1a5b      	subs	r3, r3, r1
 8001df6:	ee07 3a10 	vmov	s14, r3
 8001dfa:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001dfe:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001e02:	eee7 7a26 	vfma.f32	s15, s14, s13
	task->process(current_time_us);
 8001e06:	4650      	mov	r0, sl
	task->last_execution_us = current_time_us ;
 8001e08:	f8c4 a020 	str.w	sl, [r4, #32]
 8001e0c:	edc4 7a03 	vstr	s15, [r4, #12]
	task->process(current_time_us);
 8001e10:	47d8      	blx	fp
	current_time_us = TIME_us();
 8001e12:	f000 fc4d 	bl	80026b0 <TIME_us>
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001e16:	e9d4 3133 	ldrd	r3, r1, [r4, #204]	; 0xcc
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001e1a:	6a22      	ldr	r2, [r4, #32]
	current_time_us = TIME_us();
 8001e1c:	4682      	mov	sl, r0
 8001e1e:	eb04 0081 	add.w	r0, r4, r1, lsl #2
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001e22:	ebaa 0c02 	sub.w	ip, sl, r2
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001e26:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001e28:	f8c0 c07c 	str.w	ip, [r0, #124]	; 0x7c
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001e2c:	1a9b      	subs	r3, r3, r2
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001e2e:	6962      	ldr	r2, [r4, #20]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 8001e30:	4463      	add	r3, ip
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001e32:	4562      	cmp	r2, ip
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 8001e34:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001e38:	fba7 e303 	umull	lr, r3, r7, r3
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001e3c:	bf38      	it	cc
 8001e3e:	4662      	movcc	r2, ip
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001e40:	091b      	lsrs	r3, r3, #4
	if(task->duration_us_average_array[task->average_index] > 1000)
 8001e42:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001e46:	e9c4 3204 	strd	r3, r2, [r4, #16]
		task->duration_us_average_array[task->average_index] ++ ;
 8001e4a:	bf84      	itt	hi
 8001e4c:	f10c 0201 	addhi.w	r2, ip, #1
 8001e50:	67c2      	strhi	r2, [r0, #124]	; 0x7c
	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8001e52:	3101      	adds	r1, #1
 8001e54:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
 8001e58:	2914      	cmp	r1, #20
 8001e5a:	edd4 7a03 	vldr	s15, [r4, #12]
 8001e5e:	69a1      	ldr	r1, [r4, #24]
		task->average_index = 0 ;
 8001e60:	bf08      	it	eq
 8001e62:	f8c4 90d0 	streq.w	r9, [r4, #208]	; 0xd0
					task->desired_next_start_us = task->desired_period_us - (int32_t)task->lag_average + current_time_us ;
 8001e66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e6a:	eb0a 0301 	add.w	r3, sl, r1
 8001e6e:	ee17 2a90 	vmov	r2, s15
 8001e72:	1a9b      	subs	r3, r3, r2
 8001e74:	6263      	str	r3, [r4, #36]	; 0x24
 8001e76:	e787      	b.n	8001d88 <SCHEDULER_run+0xd0>
	if(task->process == NULL)
 8001e78:	6861      	ldr	r1, [r4, #4]
 8001e7a:	2900      	cmp	r1, #0
 8001e7c:	d084      	beq.n	8001d88 <SCHEDULER_run+0xd0>
 8001e7e:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001e82:	6a23      	ldr	r3, [r4, #32]
 8001e84:	f8d4 c078 	ldr.w	ip, [r4, #120]	; 0x78
 8001e88:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8001e8c:	ebaa 0303 	sub.w	r3, sl, r3
	task->real_period_us_average_sum -= task->real_period_us_average_array[task->average_index];
 8001e90:	6a90      	ldr	r0, [r2, #40]	; 0x28
	task->real_period_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001e92:	6293      	str	r3, [r2, #40]	; 0x28
 8001e94:	4463      	add	r3, ip
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8001e96:	1a1b      	subs	r3, r3, r0
	task->real_period_us = task->real_period_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001e98:	fba7 0203 	umull	r0, r2, r7, r3
 8001e9c:	0912      	lsrs	r2, r2, #4
	task->last_execution_us = current_time_us ;
 8001e9e:	e9c4 2a07 	strd	r2, sl, [r4, #28]
	task->real_period_us_average_sum += task->real_period_us_average_array[task->average_index] ;
 8001ea2:	67a3      	str	r3, [r4, #120]	; 0x78
	task->process(current_time_us);
 8001ea4:	4650      	mov	r0, sl
 8001ea6:	4788      	blx	r1
	current_time_us = TIME_us();
 8001ea8:	f000 fc02 	bl	80026b0 <TIME_us>
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001eac:	f8d4 10d0 	ldr.w	r1, [r4, #208]	; 0xd0
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001eb0:	6a22      	ldr	r2, [r4, #32]
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001eb2:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
	current_time_us = TIME_us();
 8001eb6:	4682      	mov	sl, r0
 8001eb8:	eb04 0081 	add.w	r0, r4, r1, lsl #2
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001ebc:	ebaa 0c02 	sub.w	ip, sl, r2
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001ec0:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
	task->duration_us_average_array[task->average_index] = current_time_us - task->last_execution_us ;
 8001ec2:	f8c0 c07c 	str.w	ip, [r0, #124]	; 0x7c
	task->duration_us_average_sum -= task->duration_us_average_array[task->average_index];
 8001ec6:	1a9b      	subs	r3, r3, r2
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001ec8:	6962      	ldr	r2, [r4, #20]
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 8001eca:	4463      	add	r3, ip
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001ecc:	4562      	cmp	r2, ip
	task->duration_us_average_sum += task->duration_us_average_array[task->average_index];
 8001ece:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001ed2:	fba7 e303 	umull	lr, r3, r7, r3
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001ed6:	bf38      	it	cc
 8001ed8:	4662      	movcc	r2, ip
	task->duration_us = task->duration_us_average_sum / TASK_STAT_AVERAGE_OVER ;
 8001eda:	091b      	lsrs	r3, r3, #4
	if(task->duration_us_average_array[task->average_index] > 1000)
 8001edc:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8001ee0:	f101 0101 	add.w	r1, r1, #1
	task->duration_us_worst = MAX(task->duration_us_average_array[task->average_index] , task->duration_us_worst);
 8001ee4:	e9c4 3204 	strd	r3, r2, [r4, #16]
		task->duration_us_average_array[task->average_index] ++ ;
 8001ee8:	bf84      	itt	hi
 8001eea:	f10c 0201 	addhi.w	r2, ip, #1
 8001eee:	67c2      	strhi	r2, [r0, #124]	; 0x7c
	if(++task->average_index == TASK_STAT_AVERAGE_OVER)
 8001ef0:	2914      	cmp	r1, #20
 8001ef2:	bf08      	it	eq
 8001ef4:	4649      	moveq	r1, r9
 8001ef6:	f8c4 10d0 	str.w	r1, [r4, #208]	; 0xd0
 8001efa:	e745      	b.n	8001d88 <SCHEDULER_run+0xd0>
			task->lag_average -= (float)(task->desired_period_us - task->real_period_us_average_array[task->average_index]) * 0.5f ;
 8001efc:	1acb      	subs	r3, r1, r3
 8001efe:	ee07 3a10 	vmov	s14, r3
 8001f02:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001f06:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8001f0a:	eee7 7a66 	vfms.f32	s15, s14, s13
 8001f0e:	e77a      	b.n	8001e06 <SCHEDULER_run+0x14e>
 8001f10:	20001bb4 	.word	0x20001bb4
 8001f14:	20001b7c 	.word	0x20001b7c
 8001f18:	cccccccd 	.word	0xcccccccd
 8001f1c:	20001bb8 	.word	0x20001bb8

08001f20 <SCHEDULER_task>:
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001f20:	480b      	ldr	r0, [pc, #44]	; (8001f50 <SCHEDULER_task+0x30>)
 8001f22:	7803      	ldrb	r3, [r0, #0]
 8001f24:	b18b      	cbz	r3, 8001f4a <SCHEDULER_task+0x2a>
void SCHEDULER_task(void){
 8001f26:	b430      	push	{r4, r5}
 8001f28:	4d0a      	ldr	r5, [pc, #40]	; (8001f54 <SCHEDULER_task+0x34>)
 8001f2a:	4c0b      	ldr	r4, [pc, #44]	; (8001f58 <SCHEDULER_task+0x38>)
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001f2c:	2300      	movs	r3, #0
		task_to_change[t]->mode = change_mode[t] ;
 8001f2e:	5ce2      	ldrb	r2, [r4, r3]
 8001f30:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8001f34:	b2d2      	uxtb	r2, r2
 8001f36:	720a      	strb	r2, [r1, #8]
	for(uint8_t t = 0; t < task_to_moove_counter; t++)
 8001f38:	3301      	adds	r3, #1
 8001f3a:	7802      	ldrb	r2, [r0, #0]
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	429a      	cmp	r2, r3
 8001f40:	d8f5      	bhi.n	8001f2e <SCHEDULER_task+0xe>
	task_to_moove_counter = 0 ;
 8001f42:	2300      	movs	r3, #0
 8001f44:	7003      	strb	r3, [r0, #0]
}
 8001f46:	bc30      	pop	{r4, r5}
 8001f48:	4770      	bx	lr
	task_to_moove_counter = 0 ;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	7003      	strb	r3, [r0, #0]
 8001f4e:	4770      	bx	lr
 8001f50:	20001bf4 	.word	0x20001bf4
 8001f54:	20001bbc 	.word	0x20001bbc
 8001f58:	20001b6c 	.word	0x20001b6c

08001f5c <SCHEDULER_get_cpu_load>:
	for(uint32_t t = 2; t < task_queu_size; t++)
 8001f5c:	4b7a      	ldr	r3, [pc, #488]	; (8002148 <SCHEDULER_get_cpu_load+0x1ec>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	2a02      	cmp	r2, #2
 8001f62:	f240 80ee 	bls.w	8002142 <SCHEDULER_get_cpu_load+0x1e6>
		if(task_queu[t]->real_period_us)
 8001f66:	4979      	ldr	r1, [pc, #484]	; (800214c <SCHEDULER_get_cpu_load+0x1f0>)
 8001f68:	688b      	ldr	r3, [r1, #8]
 8001f6a:	69d8      	ldr	r0, [r3, #28]
float SCHEDULER_get_cpu_load(void){
 8001f6c:	b410      	push	{r4}
		if(task_queu[t]->real_period_us)
 8001f6e:	2800      	cmp	r0, #0
 8001f70:	f040 80ad 	bne.w	80020ce <SCHEDULER_get_cpu_load+0x172>
	float load_pourcentage = 0 ;
 8001f74:	ed9f 0a76 	vldr	s0, [pc, #472]	; 8002150 <SCHEDULER_get_cpu_load+0x1f4>
	for(uint32_t t = 2; t < task_queu_size; t++)
 8001f78:	2a03      	cmp	r2, #3
 8001f7a:	f000 80a1 	beq.w	80020c0 <SCHEDULER_get_cpu_load+0x164>
		if(task_queu[t]->real_period_us)
 8001f7e:	68cb      	ldr	r3, [r1, #12]
 8001f80:	69d8      	ldr	r0, [r3, #28]
 8001f82:	b160      	cbz	r0, 8001f9e <SCHEDULER_get_cpu_load+0x42>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 8001f84:	691c      	ldr	r4, [r3, #16]
 8001f86:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8001f8a:	fb03 f304 	mul.w	r3, r3, r4
 8001f8e:	fbb3 f3f0 	udiv	r3, r3, r0
 8001f92:	ee07 3a90 	vmov	s15, r3
 8001f96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001f9a:	ee30 0a27 	vadd.f32	s0, s0, s15
	for(uint32_t t = 2; t < task_queu_size; t++)
 8001f9e:	2a04      	cmp	r2, #4
 8001fa0:	f000 808e 	beq.w	80020c0 <SCHEDULER_get_cpu_load+0x164>
		if(task_queu[t]->real_period_us)
 8001fa4:	690b      	ldr	r3, [r1, #16]
 8001fa6:	69d8      	ldr	r0, [r3, #28]
 8001fa8:	b160      	cbz	r0, 8001fc4 <SCHEDULER_get_cpu_load+0x68>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 8001faa:	691c      	ldr	r4, [r3, #16]
 8001fac:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8001fb0:	fb03 f304 	mul.w	r3, r3, r4
 8001fb4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fb8:	ee07 3a90 	vmov	s15, r3
 8001fbc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fc0:	ee30 0a27 	vadd.f32	s0, s0, s15
	for(uint32_t t = 2; t < task_queu_size; t++)
 8001fc4:	2a05      	cmp	r2, #5
 8001fc6:	d07b      	beq.n	80020c0 <SCHEDULER_get_cpu_load+0x164>
		if(task_queu[t]->real_period_us)
 8001fc8:	694b      	ldr	r3, [r1, #20]
 8001fca:	69d8      	ldr	r0, [r3, #28]
 8001fcc:	b160      	cbz	r0, 8001fe8 <SCHEDULER_get_cpu_load+0x8c>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 8001fce:	691c      	ldr	r4, [r3, #16]
 8001fd0:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8001fd4:	fb03 f304 	mul.w	r3, r3, r4
 8001fd8:	fbb3 f3f0 	udiv	r3, r3, r0
 8001fdc:	ee07 3a90 	vmov	s15, r3
 8001fe0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001fe4:	ee30 0a27 	vadd.f32	s0, s0, s15
	for(uint32_t t = 2; t < task_queu_size; t++)
 8001fe8:	2a06      	cmp	r2, #6
 8001fea:	d069      	beq.n	80020c0 <SCHEDULER_get_cpu_load+0x164>
		if(task_queu[t]->real_period_us)
 8001fec:	698b      	ldr	r3, [r1, #24]
 8001fee:	69d8      	ldr	r0, [r3, #28]
 8001ff0:	b160      	cbz	r0, 800200c <SCHEDULER_get_cpu_load+0xb0>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 8001ff2:	691c      	ldr	r4, [r3, #16]
 8001ff4:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8001ff8:	fb03 f304 	mul.w	r3, r3, r4
 8001ffc:	fbb3 f3f0 	udiv	r3, r3, r0
 8002000:	ee07 3a90 	vmov	s15, r3
 8002004:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002008:	ee30 0a27 	vadd.f32	s0, s0, s15
	for(uint32_t t = 2; t < task_queu_size; t++)
 800200c:	2a07      	cmp	r2, #7
 800200e:	d057      	beq.n	80020c0 <SCHEDULER_get_cpu_load+0x164>
		if(task_queu[t]->real_period_us)
 8002010:	69cb      	ldr	r3, [r1, #28]
 8002012:	69d8      	ldr	r0, [r3, #28]
 8002014:	2800      	cmp	r0, #0
 8002016:	d16a      	bne.n	80020ee <SCHEDULER_get_cpu_load+0x192>
	for(uint32_t t = 2; t < task_queu_size; t++)
 8002018:	2a08      	cmp	r2, #8
 800201a:	d051      	beq.n	80020c0 <SCHEDULER_get_cpu_load+0x164>
		if(task_queu[t]->real_period_us)
 800201c:	6a0b      	ldr	r3, [r1, #32]
 800201e:	69d8      	ldr	r0, [r3, #28]
 8002020:	2800      	cmp	r0, #0
 8002022:	d172      	bne.n	800210a <SCHEDULER_get_cpu_load+0x1ae>
	for(uint32_t t = 2; t < task_queu_size; t++)
 8002024:	2a09      	cmp	r2, #9
 8002026:	d04b      	beq.n	80020c0 <SCHEDULER_get_cpu_load+0x164>
		if(task_queu[t]->real_period_us)
 8002028:	6a4b      	ldr	r3, [r1, #36]	; 0x24
 800202a:	69d8      	ldr	r0, [r3, #28]
 800202c:	2800      	cmp	r0, #0
 800202e:	d17a      	bne.n	8002126 <SCHEDULER_get_cpu_load+0x1ca>
	for(uint32_t t = 2; t < task_queu_size; t++)
 8002030:	2a0a      	cmp	r2, #10
 8002032:	d045      	beq.n	80020c0 <SCHEDULER_get_cpu_load+0x164>
		if(task_queu[t]->real_period_us)
 8002034:	6a8b      	ldr	r3, [r1, #40]	; 0x28
 8002036:	69d8      	ldr	r0, [r3, #28]
 8002038:	b160      	cbz	r0, 8002054 <SCHEDULER_get_cpu_load+0xf8>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 800203a:	691c      	ldr	r4, [r3, #16]
 800203c:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8002040:	fb03 f304 	mul.w	r3, r3, r4
 8002044:	fbb3 f3f0 	udiv	r3, r3, r0
 8002048:	ee07 3a90 	vmov	s15, r3
 800204c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002050:	ee30 0a27 	vadd.f32	s0, s0, s15
	for(uint32_t t = 2; t < task_queu_size; t++)
 8002054:	2a0b      	cmp	r2, #11
 8002056:	d033      	beq.n	80020c0 <SCHEDULER_get_cpu_load+0x164>
		if(task_queu[t]->real_period_us)
 8002058:	6acb      	ldr	r3, [r1, #44]	; 0x2c
 800205a:	69d8      	ldr	r0, [r3, #28]
 800205c:	b160      	cbz	r0, 8002078 <SCHEDULER_get_cpu_load+0x11c>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 800205e:	691c      	ldr	r4, [r3, #16]
 8002060:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8002064:	fb03 f304 	mul.w	r3, r3, r4
 8002068:	fbb3 f3f0 	udiv	r3, r3, r0
 800206c:	ee07 3a90 	vmov	s15, r3
 8002070:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002074:	ee30 0a27 	vadd.f32	s0, s0, s15
	for(uint32_t t = 2; t < task_queu_size; t++)
 8002078:	2a0c      	cmp	r2, #12
 800207a:	d021      	beq.n	80020c0 <SCHEDULER_get_cpu_load+0x164>
		if(task_queu[t]->real_period_us)
 800207c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 800207e:	69d8      	ldr	r0, [r3, #28]
 8002080:	b160      	cbz	r0, 800209c <SCHEDULER_get_cpu_load+0x140>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 8002082:	691c      	ldr	r4, [r3, #16]
 8002084:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8002088:	fb03 f304 	mul.w	r3, r3, r4
 800208c:	fbb3 f3f0 	udiv	r3, r3, r0
 8002090:	ee07 3a90 	vmov	s15, r3
 8002094:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002098:	ee30 0a27 	vadd.f32	s0, s0, s15
	for(uint32_t t = 2; t < task_queu_size; t++)
 800209c:	2a0d      	cmp	r2, #13
 800209e:	d00f      	beq.n	80020c0 <SCHEDULER_get_cpu_load+0x164>
		if(task_queu[t]->real_period_us)
 80020a0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 80020a2:	69da      	ldr	r2, [r3, #28]
 80020a4:	b162      	cbz	r2, 80020c0 <SCHEDULER_get_cpu_load+0x164>
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 80020a6:	6919      	ldr	r1, [r3, #16]
 80020a8:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80020ac:	fb03 f301 	mul.w	r3, r3, r1
 80020b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80020b4:	ee07 3a90 	vmov	s15, r3
 80020b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020bc:	ee30 0a27 	vadd.f32	s0, s0, s15
 80020c0:	eddf 7a24 	vldr	s15, [pc, #144]	; 8002154 <SCHEDULER_get_cpu_load+0x1f8>
}
 80020c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80020c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80020cc:	4770      	bx	lr
			load_pourcentage += task_queu[t]->duration_us * 51200 / task_queu[t]->real_period_us ;
 80020ce:	691c      	ldr	r4, [r3, #16]
 80020d0:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8002150 <SCHEDULER_get_cpu_load+0x1f4>
 80020d4:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80020d8:	fb03 f304 	mul.w	r3, r3, r4
 80020dc:	fbb3 f3f0 	udiv	r3, r3, r0
 80020e0:	ee00 3a10 	vmov	s0, r3
 80020e4:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80020e8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80020ec:	e744      	b.n	8001f78 <SCHEDULER_get_cpu_load+0x1c>
 80020ee:	691c      	ldr	r4, [r3, #16]
 80020f0:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 80020f4:	fb03 f304 	mul.w	r3, r3, r4
 80020f8:	fbb3 f3f0 	udiv	r3, r3, r0
 80020fc:	ee07 3a90 	vmov	s15, r3
 8002100:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002104:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002108:	e786      	b.n	8002018 <SCHEDULER_get_cpu_load+0xbc>
 800210a:	691c      	ldr	r4, [r3, #16]
 800210c:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 8002110:	fb03 f304 	mul.w	r3, r3, r4
 8002114:	fbb3 f3f0 	udiv	r3, r3, r0
 8002118:	ee07 3a90 	vmov	s15, r3
 800211c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002120:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002124:	e77e      	b.n	8002024 <SCHEDULER_get_cpu_load+0xc8>
 8002126:	691c      	ldr	r4, [r3, #16]
 8002128:	f44f 4348 	mov.w	r3, #51200	; 0xc800
 800212c:	fb03 f304 	mul.w	r3, r3, r4
 8002130:	fbb3 f3f0 	udiv	r3, r3, r0
 8002134:	ee07 3a90 	vmov	s15, r3
 8002138:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800213c:	ee30 0a27 	vadd.f32	s0, s0, s15
 8002140:	e776      	b.n	8002030 <SCHEDULER_get_cpu_load+0xd4>
	for(uint32_t t = 2; t < task_queu_size; t++)
 8002142:	ed9f 0a03 	vldr	s0, [pc, #12]	; 8002150 <SCHEDULER_get_cpu_load+0x1f4>
}
 8002146:	4770      	bx	lr
 8002148:	20001bb8 	.word	0x20001bb8
 800214c:	20001b7c 	.word	0x20001b7c
 8002150:	00000000 	.word	0x00000000
 8002154:	3b000000 	.word	0x3b000000

08002158 <SCHEDULER_enable_task>:




//Activation ou désactivation par ajout ou suppression dans la queu dans la queu
void SCHEDULER_enable_task(task_ids_t id, bool_e enable){
 8002158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if(enable)
 800215c:	2900      	cmp	r1, #0
 800215e:	d15c      	bne.n	800221a <SCHEDULER_enable_task+0xc2>
		queu_add(TASK_get_task(id));
	else
		queu_remove(TASK_get_task(id));
 8002160:	f000 fa9e 	bl	80026a0 <TASK_get_task>
//	memset(task_queu, 0, sizeof(task_queu));
//	task_queu_size = 0 ;
//}

static bool_e queu_contains(task_t * task){
	if(task == NULL)
 8002164:	2800      	cmp	r0, #0
 8002166:	d056      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		return FALSE ;

	for(uint32_t t = 0; t < task_queu_size; t++)
 8002168:	4f93      	ldr	r7, [pc, #588]	; (80023b8 <SCHEDULER_enable_task+0x260>)
 800216a:	683d      	ldr	r5, [r7, #0]
 800216c:	2d00      	cmp	r5, #0
 800216e:	d052      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 8002170:	4c92      	ldr	r4, [pc, #584]	; (80023bc <SCHEDULER_enable_task+0x264>)
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	4298      	cmp	r0, r3
 8002176:	f000 818b 	beq.w	8002490 <SCHEDULER_enable_task+0x338>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800217a:	2d01      	cmp	r5, #1
 800217c:	d94b      	bls.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 800217e:	6863      	ldr	r3, [r4, #4]
 8002180:	4298      	cmp	r0, r3
 8002182:	f000 811d 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8002186:	2d02      	cmp	r5, #2
 8002188:	d045      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 800218a:	68a3      	ldr	r3, [r4, #8]
 800218c:	4298      	cmp	r0, r3
 800218e:	f000 8117 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8002192:	2d03      	cmp	r5, #3
 8002194:	d03f      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 8002196:	68e3      	ldr	r3, [r4, #12]
 8002198:	4298      	cmp	r0, r3
 800219a:	f000 8111 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800219e:	2d04      	cmp	r5, #4
 80021a0:	d039      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 80021a2:	6923      	ldr	r3, [r4, #16]
 80021a4:	4298      	cmp	r0, r3
 80021a6:	f000 810b 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80021aa:	2d05      	cmp	r5, #5
 80021ac:	d033      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 80021ae:	6963      	ldr	r3, [r4, #20]
 80021b0:	4298      	cmp	r0, r3
 80021b2:	f000 8105 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80021b6:	2d06      	cmp	r5, #6
 80021b8:	d02d      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 80021ba:	69a3      	ldr	r3, [r4, #24]
 80021bc:	4298      	cmp	r0, r3
 80021be:	f000 80ff 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80021c2:	2d07      	cmp	r5, #7
 80021c4:	d027      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 80021c6:	69e3      	ldr	r3, [r4, #28]
 80021c8:	4298      	cmp	r0, r3
 80021ca:	f000 80f9 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80021ce:	2d08      	cmp	r5, #8
 80021d0:	d021      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 80021d2:	6a23      	ldr	r3, [r4, #32]
 80021d4:	4298      	cmp	r0, r3
 80021d6:	f000 80f3 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80021da:	2d09      	cmp	r5, #9
 80021dc:	d01b      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 80021de:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80021e0:	4298      	cmp	r0, r3
 80021e2:	f000 80ed 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80021e6:	2d0a      	cmp	r5, #10
 80021e8:	d015      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 80021ea:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80021ec:	4298      	cmp	r0, r3
 80021ee:	f000 80e7 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80021f2:	2d0b      	cmp	r5, #11
 80021f4:	d00f      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 80021f6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80021f8:	4298      	cmp	r0, r3
 80021fa:	f000 80e1 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80021fe:	2d0c      	cmp	r5, #12
 8002200:	d009      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 8002202:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002204:	4298      	cmp	r0, r3
 8002206:	f000 80db 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800220a:	2d0d      	cmp	r5, #13
 800220c:	d003      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 800220e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002210:	4298      	cmp	r0, r3
 8002212:	f000 80d5 	beq.w	80023c0 <SCHEDULER_enable_task+0x268>
}
 8002216:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		queu_add(TASK_get_task(id));
 800221a:	f000 fa41 	bl	80026a0 <TASK_get_task>
	if(task == NULL)
 800221e:	4605      	mov	r5, r0
 8002220:	2800      	cmp	r0, #0
 8002222:	d0f8      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8002224:	4f64      	ldr	r7, [pc, #400]	; (80023b8 <SCHEDULER_enable_task+0x260>)
		if(task_queu[t] == task)
 8002226:	4c65      	ldr	r4, [pc, #404]	; (80023bc <SCHEDULER_enable_task+0x264>)
	for(uint32_t t = 0; t < task_queu_size; t++)
 8002228:	683e      	ldr	r6, [r7, #0]
 800222a:	2e00      	cmp	r6, #0
 800222c:	d041      	beq.n	80022b2 <SCHEDULER_enable_task+0x15a>
		if(task_queu[t] == task)
 800222e:	6823      	ldr	r3, [r4, #0]
 8002230:	4298      	cmp	r0, r3
 8002232:	d0f0      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8002234:	2e01      	cmp	r6, #1
 8002236:	f240 811d 	bls.w	8002474 <SCHEDULER_enable_task+0x31c>
		if(task_queu[t] == task)
 800223a:	6863      	ldr	r3, [r4, #4]
 800223c:	4298      	cmp	r0, r3
 800223e:	d0ea      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8002240:	2e02      	cmp	r6, #2
 8002242:	d036      	beq.n	80022b2 <SCHEDULER_enable_task+0x15a>
		if(task_queu[t] == task)
 8002244:	68a3      	ldr	r3, [r4, #8]
 8002246:	4298      	cmp	r0, r3
 8002248:	d0e5      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800224a:	2e03      	cmp	r6, #3
 800224c:	d031      	beq.n	80022b2 <SCHEDULER_enable_task+0x15a>
		if(task_queu[t] == task)
 800224e:	68e3      	ldr	r3, [r4, #12]
 8002250:	4298      	cmp	r0, r3
 8002252:	d0e0      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8002254:	2e04      	cmp	r6, #4
 8002256:	d02c      	beq.n	80022b2 <SCHEDULER_enable_task+0x15a>
		if(task_queu[t] == task)
 8002258:	6923      	ldr	r3, [r4, #16]
 800225a:	4298      	cmp	r0, r3
 800225c:	d0db      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800225e:	2e05      	cmp	r6, #5
 8002260:	d027      	beq.n	80022b2 <SCHEDULER_enable_task+0x15a>
		if(task_queu[t] == task)
 8002262:	6963      	ldr	r3, [r4, #20]
 8002264:	4298      	cmp	r0, r3
 8002266:	d0d6      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8002268:	2e06      	cmp	r6, #6
 800226a:	d022      	beq.n	80022b2 <SCHEDULER_enable_task+0x15a>
		if(task_queu[t] == task)
 800226c:	69a3      	ldr	r3, [r4, #24]
 800226e:	4298      	cmp	r0, r3
 8002270:	d0d1      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8002272:	2e07      	cmp	r6, #7
 8002274:	d01d      	beq.n	80022b2 <SCHEDULER_enable_task+0x15a>
		if(task_queu[t] == task)
 8002276:	69e3      	ldr	r3, [r4, #28]
 8002278:	4298      	cmp	r0, r3
 800227a:	d0cc      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800227c:	2e08      	cmp	r6, #8
 800227e:	d018      	beq.n	80022b2 <SCHEDULER_enable_task+0x15a>
		if(task_queu[t] == task)
 8002280:	6a23      	ldr	r3, [r4, #32]
 8002282:	4298      	cmp	r0, r3
 8002284:	d0c7      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8002286:	2e09      	cmp	r6, #9
 8002288:	d013      	beq.n	80022b2 <SCHEDULER_enable_task+0x15a>
		if(task_queu[t] == task)
 800228a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800228c:	4298      	cmp	r0, r3
 800228e:	d0c2      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 8002290:	2e0a      	cmp	r6, #10
 8002292:	d00e      	beq.n	80022b2 <SCHEDULER_enable_task+0x15a>
		if(task_queu[t] == task)
 8002294:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8002296:	4298      	cmp	r0, r3
 8002298:	d0bd      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 800229a:	2e0b      	cmp	r6, #11
 800229c:	d009      	beq.n	80022b2 <SCHEDULER_enable_task+0x15a>
		if(task_queu[t] == task)
 800229e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80022a0:	4298      	cmp	r0, r3
 80022a2:	d0b8      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80022a4:	2e0c      	cmp	r6, #12
 80022a6:	d004      	beq.n	80022b2 <SCHEDULER_enable_task+0x15a>
		if(task_queu[t] == task)
 80022a8:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80022aa:	4298      	cmp	r0, r3
 80022ac:	d0b3      	beq.n	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t++)
 80022ae:	2e0d      	cmp	r6, #13
 80022b0:	d1b1      	bne.n	8002216 <SCHEDULER_enable_task+0xbe>


	uint32_t t = 0 ;
	while(t < TASK_COUNT)
	{
		if(task_queu[t] == NULL)
 80022b2:	6823      	ldr	r3, [r4, #0]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	f000 80e6 	beq.w	8002486 <SCHEDULER_enable_task+0x32e>
		{
			task_queu[t] = task ;
			task_queu_size ++ ;
			return TRUE;
		}
		else if(task->static_priority > task_queu[t]->static_priority){
 80022ba:	781a      	ldrb	r2, [r3, #0]
 80022bc:	782b      	ldrb	r3, [r5, #0]
 80022be:	429a      	cmp	r2, r3
 80022c0:	f0c0 80f6 	bcc.w	80024b0 <SCHEDULER_enable_task+0x358>
		if(task_queu[t] == NULL)
 80022c4:	6862      	ldr	r2, [r4, #4]
 80022c6:	2a00      	cmp	r2, #0
 80022c8:	f000 80f6 	beq.w	80024b8 <SCHEDULER_enable_task+0x360>
		else if(task->static_priority > task_queu[t]->static_priority){
 80022cc:	7812      	ldrb	r2, [r2, #0]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	f0c0 80f4 	bcc.w	80024bc <SCHEDULER_enable_task+0x364>
		if(task_queu[t] == NULL)
 80022d4:	68a2      	ldr	r2, [r4, #8]
 80022d6:	2a00      	cmp	r2, #0
 80022d8:	f000 80f6 	beq.w	80024c8 <SCHEDULER_enable_task+0x370>
		else if(task->static_priority > task_queu[t]->static_priority){
 80022dc:	7812      	ldrb	r2, [r2, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	f0c0 80f4 	bcc.w	80024cc <SCHEDULER_enable_task+0x374>
		if(task_queu[t] == NULL)
 80022e4:	68e2      	ldr	r2, [r4, #12]
 80022e6:	2a00      	cmp	r2, #0
 80022e8:	f000 80f4 	beq.w	80024d4 <SCHEDULER_enable_task+0x37c>
		else if(task->static_priority > task_queu[t]->static_priority){
 80022ec:	7812      	ldrb	r2, [r2, #0]
 80022ee:	429a      	cmp	r2, r3
 80022f0:	f0c0 80f2 	bcc.w	80024d8 <SCHEDULER_enable_task+0x380>
		if(task_queu[t] == NULL)
 80022f4:	6922      	ldr	r2, [r4, #16]
 80022f6:	2a00      	cmp	r2, #0
 80022f8:	f000 80f4 	beq.w	80024e4 <SCHEDULER_enable_task+0x38c>
		else if(task->static_priority > task_queu[t]->static_priority){
 80022fc:	7812      	ldrb	r2, [r2, #0]
 80022fe:	429a      	cmp	r2, r3
 8002300:	f0c0 80f2 	bcc.w	80024e8 <SCHEDULER_enable_task+0x390>
		if(task_queu[t] == NULL)
 8002304:	6962      	ldr	r2, [r4, #20]
 8002306:	2a00      	cmp	r2, #0
 8002308:	f000 80f8 	beq.w	80024fc <SCHEDULER_enable_task+0x3a4>
		else if(task->static_priority > task_queu[t]->static_priority){
 800230c:	7812      	ldrb	r2, [r2, #0]
 800230e:	429a      	cmp	r2, r3
 8002310:	f0c0 80f0 	bcc.w	80024f4 <SCHEDULER_enable_task+0x39c>
		if(task_queu[t] == NULL)
 8002314:	69a2      	ldr	r2, [r4, #24]
 8002316:	2a00      	cmp	r2, #0
 8002318:	f000 80f6 	beq.w	8002508 <SCHEDULER_enable_task+0x3b0>
		else if(task->static_priority > task_queu[t]->static_priority){
 800231c:	7812      	ldrb	r2, [r2, #0]
 800231e:	429a      	cmp	r2, r3
 8002320:	f0c0 80ee 	bcc.w	8002500 <SCHEDULER_enable_task+0x3a8>
		if(task_queu[t] == NULL)
 8002324:	69e2      	ldr	r2, [r4, #28]
 8002326:	2a00      	cmp	r2, #0
 8002328:	f000 80f2 	beq.w	8002510 <SCHEDULER_enable_task+0x3b8>
		else if(task->static_priority > task_queu[t]->static_priority){
 800232c:	7812      	ldrb	r2, [r2, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	f0c0 80f0 	bcc.w	8002514 <SCHEDULER_enable_task+0x3bc>
		if(task_queu[t] == NULL)
 8002334:	6a22      	ldr	r2, [r4, #32]
 8002336:	2a00      	cmp	r2, #0
 8002338:	f000 80f0 	beq.w	800251c <SCHEDULER_enable_task+0x3c4>
		else if(task->static_priority > task_queu[t]->static_priority){
 800233c:	7812      	ldrb	r2, [r2, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	f0c0 809c 	bcc.w	800247c <SCHEDULER_enable_task+0x324>
		if(task_queu[t] == NULL)
 8002344:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002346:	2a00      	cmp	r2, #0
 8002348:	f000 80f0 	beq.w	800252c <SCHEDULER_enable_task+0x3d4>
		else if(task->static_priority > task_queu[t]->static_priority){
 800234c:	7812      	ldrb	r2, [r2, #0]
 800234e:	429a      	cmp	r2, r3
 8002350:	f0c0 80e8 	bcc.w	8002524 <SCHEDULER_enable_task+0x3cc>
		if(task_queu[t] == NULL)
 8002354:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8002356:	2a00      	cmp	r2, #0
 8002358:	f000 80f0 	beq.w	800253c <SCHEDULER_enable_task+0x3e4>
		else if(task->static_priority > task_queu[t]->static_priority){
 800235c:	7812      	ldrb	r2, [r2, #0]
 800235e:	429a      	cmp	r2, r3
 8002360:	f0c0 80e8 	bcc.w	8002534 <SCHEDULER_enable_task+0x3dc>
		if(task_queu[t] == NULL)
 8002364:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8002366:	2a00      	cmp	r2, #0
 8002368:	f000 80ee 	beq.w	8002548 <SCHEDULER_enable_task+0x3f0>
		else if(task->static_priority > task_queu[t]->static_priority){
 800236c:	7812      	ldrb	r2, [r2, #0]
 800236e:	429a      	cmp	r2, r3
 8002370:	f0c0 80e6 	bcc.w	8002540 <SCHEDULER_enable_task+0x3e8>
		if(task_queu[t] == NULL)
 8002374:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002376:	2a00      	cmp	r2, #0
 8002378:	f000 8084 	beq.w	8002484 <SCHEDULER_enable_task+0x32c>
		else if(task->static_priority > task_queu[t]->static_priority){
 800237c:	7812      	ldrb	r2, [r2, #0]
 800237e:	429a      	cmp	r2, r3
 8002380:	f0c0 80e6 	bcc.w	8002550 <SCHEDULER_enable_task+0x3f8>
		if(task_queu[t] == NULL)
 8002384:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8002386:	2a00      	cmp	r2, #0
 8002388:	f000 80e0 	beq.w	800254c <SCHEDULER_enable_task+0x3f4>
		else if(task->static_priority > task_queu[t]->static_priority){
 800238c:	7812      	ldrb	r2, [r2, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	f4bf af41 	bcs.w	8002216 <SCHEDULER_enable_task+0xbe>
 8002394:	f04f 080d 	mov.w	r8, #13
 8002398:	200e      	movs	r0, #14
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 800239a:	eba6 0208 	sub.w	r2, r6, r8
 800239e:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 80023a2:	0092      	lsls	r2, r2, #2
 80023a4:	eb04 0188 	add.w	r1, r4, r8, lsl #2
			task_queu[t] = task ;
			task_queu_size ++ ;
 80023a8:	3601      	adds	r6, #1
			memmove(&task_queu[t+1], &task_queu[t], sizeof(task) * (task_queu_size - t));
 80023aa:	f003 ffee 	bl	800638a <memmove>
			task_queu_size ++ ;
 80023ae:	603e      	str	r6, [r7, #0]
			task_queu[t] = task ;
 80023b0:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
 80023b4:	e72f      	b.n	8002216 <SCHEDULER_enable_task+0xbe>
 80023b6:	bf00      	nop
 80023b8:	20001bb8 	.word	0x20001bb8
 80023bc:	20001b7c 	.word	0x20001b7c
static bool_e queu_remove(task_t * task){
	if(!queu_contains(task) || task == NULL)
		return FALSE ;

	for(uint32_t t = 0; t < task_queu_size; t ++){
		if(task == task_queu[t]){
 80023c0:	6863      	ldr	r3, [r4, #4]
 80023c2:	4298      	cmp	r0, r3
 80023c4:	d068      	beq.n	8002498 <SCHEDULER_enable_task+0x340>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80023c6:	2d02      	cmp	r5, #2
 80023c8:	f43f af25 	beq.w	8002216 <SCHEDULER_enable_task+0xbe>
		if(task == task_queu[t]){
 80023cc:	68a3      	ldr	r3, [r4, #8]
 80023ce:	4298      	cmp	r0, r3
 80023d0:	d064      	beq.n	800249c <SCHEDULER_enable_task+0x344>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80023d2:	2d03      	cmp	r5, #3
 80023d4:	f43f af1f 	beq.w	8002216 <SCHEDULER_enable_task+0xbe>
		if(task == task_queu[t]){
 80023d8:	68e3      	ldr	r3, [r4, #12]
 80023da:	4298      	cmp	r0, r3
 80023dc:	d060      	beq.n	80024a0 <SCHEDULER_enable_task+0x348>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80023de:	2d04      	cmp	r5, #4
 80023e0:	f43f af19 	beq.w	8002216 <SCHEDULER_enable_task+0xbe>
		if(task == task_queu[t]){
 80023e4:	6923      	ldr	r3, [r4, #16]
 80023e6:	4298      	cmp	r0, r3
 80023e8:	d05c      	beq.n	80024a4 <SCHEDULER_enable_task+0x34c>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80023ea:	2d05      	cmp	r5, #5
 80023ec:	f43f af13 	beq.w	8002216 <SCHEDULER_enable_task+0xbe>
		if(task == task_queu[t]){
 80023f0:	6963      	ldr	r3, [r4, #20]
 80023f2:	4298      	cmp	r0, r3
 80023f4:	d058      	beq.n	80024a8 <SCHEDULER_enable_task+0x350>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80023f6:	2d06      	cmp	r5, #6
 80023f8:	f43f af0d 	beq.w	8002216 <SCHEDULER_enable_task+0xbe>
		if(task == task_queu[t]){
 80023fc:	69a3      	ldr	r3, [r4, #24]
 80023fe:	4298      	cmp	r0, r3
 8002400:	d054      	beq.n	80024ac <SCHEDULER_enable_task+0x354>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8002402:	2d07      	cmp	r5, #7
 8002404:	f43f af07 	beq.w	8002216 <SCHEDULER_enable_task+0xbe>
		if(task == task_queu[t]){
 8002408:	69e3      	ldr	r3, [r4, #28]
 800240a:	4298      	cmp	r0, r3
 800240c:	d05a      	beq.n	80024c4 <SCHEDULER_enable_task+0x36c>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 800240e:	2d08      	cmp	r5, #8
 8002410:	f43f af01 	beq.w	8002216 <SCHEDULER_enable_task+0xbe>
		if(task == task_queu[t]){
 8002414:	6a23      	ldr	r3, [r4, #32]
 8002416:	4298      	cmp	r0, r3
 8002418:	d062      	beq.n	80024e0 <SCHEDULER_enable_task+0x388>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 800241a:	2d09      	cmp	r5, #9
 800241c:	f43f aefb 	beq.w	8002216 <SCHEDULER_enable_task+0xbe>
		if(task == task_queu[t]){
 8002420:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002422:	4298      	cmp	r0, r3
 8002424:	d064      	beq.n	80024f0 <SCHEDULER_enable_task+0x398>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8002426:	2d0a      	cmp	r5, #10
 8002428:	f43f aef5 	beq.w	8002216 <SCHEDULER_enable_task+0xbe>
		if(task == task_queu[t]){
 800242c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800242e:	4298      	cmp	r0, r3
 8002430:	d06c      	beq.n	800250c <SCHEDULER_enable_task+0x3b4>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8002432:	2d0b      	cmp	r5, #11
 8002434:	f43f aeef 	beq.w	8002216 <SCHEDULER_enable_task+0xbe>
		if(task == task_queu[t]){
 8002438:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800243a:	4298      	cmp	r0, r3
 800243c:	d070      	beq.n	8002520 <SCHEDULER_enable_task+0x3c8>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 800243e:	2d0c      	cmp	r5, #12
 8002440:	f43f aee9 	beq.w	8002216 <SCHEDULER_enable_task+0xbe>
		if(task == task_queu[t]){
 8002444:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002446:	4298      	cmp	r0, r3
 8002448:	d072      	beq.n	8002530 <SCHEDULER_enable_task+0x3d8>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 800244a:	2d0d      	cmp	r5, #13
 800244c:	f43f aee3 	beq.w	8002216 <SCHEDULER_enable_task+0xbe>
		if(task == task_queu[t]){
 8002450:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002452:	4298      	cmp	r0, r3
 8002454:	f47f aedf 	bne.w	8002216 <SCHEDULER_enable_task+0xbe>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8002458:	220d      	movs	r2, #13
 800245a:	1c51      	adds	r1, r2, #1
 800245c:	0089      	lsls	r1, r1, #2
 800245e:	1f08      	subs	r0, r1, #4
 8002460:	1aaa      	subs	r2, r5, r2
 8002462:	4420      	add	r0, r4
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 8002464:	0092      	lsls	r2, r2, #2
 8002466:	4421      	add	r1, r4
			task_queu_size -- ;
 8002468:	3d01      	subs	r5, #1
			memmove(&task_queu[t], &task_queu[t+1], sizeof(task) * (task_queu_size - t));
 800246a:	f003 ff8e 	bl	800638a <memmove>
			task_queu_size -- ;
 800246e:	603d      	str	r5, [r7, #0]
}
 8002470:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if(queu_contains(task) || task_queu_size >= TASK_COUNT || task == NULL)
 8002474:	2e0d      	cmp	r6, #13
 8002476:	f67f af1c 	bls.w	80022b2 <SCHEDULER_enable_task+0x15a>
 800247a:	e6cc      	b.n	8002216 <SCHEDULER_enable_task+0xbe>
		else if(task->static_priority > task_queu[t]->static_priority){
 800247c:	f04f 0808 	mov.w	r8, #8
 8002480:	2009      	movs	r0, #9
 8002482:	e78a      	b.n	800239a <SCHEDULER_enable_task+0x242>
		if(task_queu[t] == NULL)
 8002484:	230c      	movs	r3, #12
			task_queu_size ++ ;
 8002486:	3601      	adds	r6, #1
 8002488:	603e      	str	r6, [r7, #0]
			task_queu[t] = task ;
 800248a:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 800248e:	e6c2      	b.n	8002216 <SCHEDULER_enable_task+0xbe>
		if(task_queu[t] == task)
 8002490:	462a      	mov	r2, r5
 8002492:	4620      	mov	r0, r4
 8002494:	2104      	movs	r1, #4
 8002496:	e7e5      	b.n	8002464 <SCHEDULER_enable_task+0x30c>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8002498:	2201      	movs	r2, #1
 800249a:	e7de      	b.n	800245a <SCHEDULER_enable_task+0x302>
 800249c:	2202      	movs	r2, #2
 800249e:	e7dc      	b.n	800245a <SCHEDULER_enable_task+0x302>
 80024a0:	2203      	movs	r2, #3
 80024a2:	e7da      	b.n	800245a <SCHEDULER_enable_task+0x302>
 80024a4:	2204      	movs	r2, #4
 80024a6:	e7d8      	b.n	800245a <SCHEDULER_enable_task+0x302>
 80024a8:	2205      	movs	r2, #5
 80024aa:	e7d6      	b.n	800245a <SCHEDULER_enable_task+0x302>
 80024ac:	2206      	movs	r2, #6
 80024ae:	e7d4      	b.n	800245a <SCHEDULER_enable_task+0x302>
	uint32_t t = 0 ;
 80024b0:	f04f 0800 	mov.w	r8, #0
		else if(task->static_priority > task_queu[t]->static_priority){
 80024b4:	2001      	movs	r0, #1
 80024b6:	e770      	b.n	800239a <SCHEDULER_enable_task+0x242>
		if(task_queu[t] == NULL)
 80024b8:	2301      	movs	r3, #1
 80024ba:	e7e4      	b.n	8002486 <SCHEDULER_enable_task+0x32e>
		else if(task->static_priority > task_queu[t]->static_priority){
 80024bc:	f04f 0801 	mov.w	r8, #1
 80024c0:	2002      	movs	r0, #2
 80024c2:	e76a      	b.n	800239a <SCHEDULER_enable_task+0x242>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80024c4:	2207      	movs	r2, #7
 80024c6:	e7c8      	b.n	800245a <SCHEDULER_enable_task+0x302>
		if(task_queu[t] == NULL)
 80024c8:	2302      	movs	r3, #2
 80024ca:	e7dc      	b.n	8002486 <SCHEDULER_enable_task+0x32e>
		else if(task->static_priority > task_queu[t]->static_priority){
 80024cc:	f04f 0802 	mov.w	r8, #2
 80024d0:	2003      	movs	r0, #3
 80024d2:	e762      	b.n	800239a <SCHEDULER_enable_task+0x242>
		if(task_queu[t] == NULL)
 80024d4:	2303      	movs	r3, #3
 80024d6:	e7d6      	b.n	8002486 <SCHEDULER_enable_task+0x32e>
		else if(task->static_priority > task_queu[t]->static_priority){
 80024d8:	f04f 0803 	mov.w	r8, #3
 80024dc:	2004      	movs	r0, #4
 80024de:	e75c      	b.n	800239a <SCHEDULER_enable_task+0x242>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80024e0:	2208      	movs	r2, #8
 80024e2:	e7ba      	b.n	800245a <SCHEDULER_enable_task+0x302>
		if(task_queu[t] == NULL)
 80024e4:	2304      	movs	r3, #4
 80024e6:	e7ce      	b.n	8002486 <SCHEDULER_enable_task+0x32e>
		else if(task->static_priority > task_queu[t]->static_priority){
 80024e8:	f04f 0804 	mov.w	r8, #4
 80024ec:	2005      	movs	r0, #5
 80024ee:	e754      	b.n	800239a <SCHEDULER_enable_task+0x242>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 80024f0:	2209      	movs	r2, #9
 80024f2:	e7b2      	b.n	800245a <SCHEDULER_enable_task+0x302>
		else if(task->static_priority > task_queu[t]->static_priority){
 80024f4:	f04f 0805 	mov.w	r8, #5
 80024f8:	2006      	movs	r0, #6
 80024fa:	e74e      	b.n	800239a <SCHEDULER_enable_task+0x242>
		if(task_queu[t] == NULL)
 80024fc:	2305      	movs	r3, #5
 80024fe:	e7c2      	b.n	8002486 <SCHEDULER_enable_task+0x32e>
		else if(task->static_priority > task_queu[t]->static_priority){
 8002500:	f04f 0806 	mov.w	r8, #6
 8002504:	2007      	movs	r0, #7
 8002506:	e748      	b.n	800239a <SCHEDULER_enable_task+0x242>
		if(task_queu[t] == NULL)
 8002508:	2306      	movs	r3, #6
 800250a:	e7bc      	b.n	8002486 <SCHEDULER_enable_task+0x32e>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 800250c:	220a      	movs	r2, #10
 800250e:	e7a4      	b.n	800245a <SCHEDULER_enable_task+0x302>
		if(task_queu[t] == NULL)
 8002510:	2307      	movs	r3, #7
 8002512:	e7b8      	b.n	8002486 <SCHEDULER_enable_task+0x32e>
		else if(task->static_priority > task_queu[t]->static_priority){
 8002514:	f04f 0807 	mov.w	r8, #7
 8002518:	2008      	movs	r0, #8
 800251a:	e73e      	b.n	800239a <SCHEDULER_enable_task+0x242>
		if(task_queu[t] == NULL)
 800251c:	2308      	movs	r3, #8
 800251e:	e7b2      	b.n	8002486 <SCHEDULER_enable_task+0x32e>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8002520:	220b      	movs	r2, #11
 8002522:	e79a      	b.n	800245a <SCHEDULER_enable_task+0x302>
		else if(task->static_priority > task_queu[t]->static_priority){
 8002524:	f04f 0809 	mov.w	r8, #9
 8002528:	200a      	movs	r0, #10
 800252a:	e736      	b.n	800239a <SCHEDULER_enable_task+0x242>
		if(task_queu[t] == NULL)
 800252c:	2309      	movs	r3, #9
 800252e:	e7aa      	b.n	8002486 <SCHEDULER_enable_task+0x32e>
	for(uint32_t t = 0; t < task_queu_size; t ++){
 8002530:	220c      	movs	r2, #12
 8002532:	e792      	b.n	800245a <SCHEDULER_enable_task+0x302>
		else if(task->static_priority > task_queu[t]->static_priority){
 8002534:	f04f 080a 	mov.w	r8, #10
 8002538:	200b      	movs	r0, #11
 800253a:	e72e      	b.n	800239a <SCHEDULER_enable_task+0x242>
		if(task_queu[t] == NULL)
 800253c:	230a      	movs	r3, #10
 800253e:	e7a2      	b.n	8002486 <SCHEDULER_enable_task+0x32e>
		else if(task->static_priority > task_queu[t]->static_priority){
 8002540:	f04f 080b 	mov.w	r8, #11
 8002544:	200c      	movs	r0, #12
 8002546:	e728      	b.n	800239a <SCHEDULER_enable_task+0x242>
		if(task_queu[t] == NULL)
 8002548:	230b      	movs	r3, #11
 800254a:	e79c      	b.n	8002486 <SCHEDULER_enable_task+0x32e>
 800254c:	230d      	movs	r3, #13
 800254e:	e79a      	b.n	8002486 <SCHEDULER_enable_task+0x32e>
		else if(task->static_priority > task_queu[t]->static_priority){
 8002550:	f04f 080c 	mov.w	r8, #12
 8002554:	200d      	movs	r0, #13
 8002556:	e720      	b.n	800239a <SCHEDULER_enable_task+0x242>

08002558 <SCHEDULER_task_set_mode>:
void SCHEDULER_task_set_mode(task_ids_t id, task_mode_e mode){
 8002558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800255a:	460f      	mov	r7, r1
  __ASM volatile ("cpsid i" : : : "memory");
 800255c:	b672      	cpsid	i
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 800255e:	4d08      	ldr	r5, [pc, #32]	; (8002580 <SCHEDULER_task_set_mode+0x28>)
	change_mode[task_to_moove_counter++] = mode ;
 8002560:	4e08      	ldr	r6, [pc, #32]	; (8002584 <SCHEDULER_task_set_mode+0x2c>)
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 8002562:	782c      	ldrb	r4, [r5, #0]
 8002564:	f000 f89c 	bl	80026a0 <TASK_get_task>
	change_mode[task_to_moove_counter++] = mode ;
 8002568:	782b      	ldrb	r3, [r5, #0]
 800256a:	b2db      	uxtb	r3, r3
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	702a      	strb	r2, [r5, #0]
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 8002572:	b2e4      	uxtb	r4, r4
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <SCHEDULER_task_set_mode+0x30>)
	change_mode[task_to_moove_counter++] = mode ;
 8002576:	54f7      	strb	r7, [r6, r3]
	task_to_change[task_to_moove_counter] = TASK_get_task(id);
 8002578:	f842 0024 	str.w	r0, [r2, r4, lsl #2]
  __ASM volatile ("cpsie i" : : : "memory");
 800257c:	b662      	cpsie	i
}
 800257e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002580:	20001bf4 	.word	0x20001bf4
 8002584:	20001b6c 	.word	0x20001b6c
 8002588:	20001bbc 	.word	0x20001bbc

0800258c <SCHEDULER_reschedule_task>:
void SCHEDULER_reschedule_task(task_ids_t id, uint32_t new_period_us){
 800258c:	b510      	push	{r4, lr}
 800258e:	460c      	mov	r4, r1
	task_t * task = TASK_get_task(id);
 8002590:	f000 f886 	bl	80026a0 <TASK_get_task>
	task->desired_period_us = new_period_us ;
 8002594:	6184      	str	r4, [r0, #24]
}
 8002596:	bd10      	pop	{r4, pc}

08002598 <process_printf>:

	//printf("%f\t%f\n", sys->orientation.angular_position[ORIENTATION_ROLL], sys->orientation.angular_velocity[ORIENTATION_ROLL]);

	//printf("%f\t%f\t%f\n", sys->sensors.acc.raw[0], sys->sensors.acc.raw[1], sys->sensors.acc.raw[2]);
	//printf("%f\t%f\t%f\n", sys->sensors.gyro.raw[0], sys->sensors.gyro.raw[1], sys->sensors.gyro.raw[2]);
}
 8002598:	4770      	bx	lr
 800259a:	bf00      	nop

0800259c <process_gyro_update>:


void process_gyro_update(uint32_t current_time_us){
	GYRO_ACC_update_dma(&sys->sensors.gyro);
 800259c:	4b01      	ldr	r3, [pc, #4]	; (80025a4 <process_gyro_update+0x8>)
 800259e:	6818      	ldr	r0, [r3, #0]
 80025a0:	f000 b97a 	b.w	8002898 <GYRO_ACC_update_dma>
 80025a4:	20001bf8 	.word	0x20001bf8

080025a8 <process_gyro_filter>:
}

void process_gyro_filter(uint32_t current_time_us){
	end_time_filtering_gyro = current_time_us ;

	GYRO_process_lpf(&sys->sensors.gyro);
 80025a8:	4b01      	ldr	r3, [pc, #4]	; (80025b0 <process_gyro_filter+0x8>)
 80025aa:	6818      	ldr	r0, [r3, #0]
 80025ac:	f000 b984 	b.w	80028b8 <GYRO_process_lpf>
 80025b0:	20001bf8 	.word	0x20001bf8

080025b4 <process_acc_filter>:
void process_acc_update(uint32_t current_time_us){
	//ACC_update(&sys->sensors.acc);
}

void process_acc_filter(uint32_t current_time_us){
	ACC_process_lpf(&sys->sensors.acc);
 80025b4:	4b02      	ldr	r3, [pc, #8]	; (80025c0 <process_acc_filter+0xc>)
 80025b6:	6818      	ldr	r0, [r3, #0]
 80025b8:	3074      	adds	r0, #116	; 0x74
 80025ba:	f000 b905 	b.w	80027c8 <ACC_process_lpf>
 80025be:	bf00      	nop
 80025c0:	20001bf8 	.word	0x20001bf8

080025c4 <process_event_main>:
}

void process_event_main(uint32_t current_time_us){
	UNUSED(current_time_us);
	EVENT_process(FALSE);
 80025c4:	2000      	movs	r0, #0
 80025c6:	f7ff ba39 	b.w	8001a3c <EVENT_process>
 80025ca:	bf00      	nop

080025cc <process_orientation_update>:
}

void process_orientation_update(uint32_t current_time_us){
 80025cc:	b510      	push	{r4, lr}
	ORIENTATION_Update(&sys->orientation);
 80025ce:	4c07      	ldr	r4, [pc, #28]	; (80025ec <process_orientation_update+0x20>)
 80025d0:	6820      	ldr	r0, [r4, #0]
 80025d2:	f500 70ae 	add.w	r0, r0, #348	; 0x15c
 80025d6:	f7ff f859 	bl	800168c <ORIENTATION_Update>
	REGULATION_ORIENTATION_Process();
 80025da:	f000 f8b1 	bl	8002740 <REGULATION_ORIENTATION_Process>
	MOTORS_Change_output(&sys->prop.motors);
 80025de:	6820      	ldr	r0, [r4, #0]
}
 80025e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	MOTORS_Change_output(&sys->prop.motors);
 80025e4:	f500 7051 	add.w	r0, r0, #836	; 0x344
 80025e8:	f003 bdaa 	b.w	8006140 <MOTORS_Change_output>
 80025ec:	20001bf8 	.word	0x20001bf8

080025f0 <process_task_scheduler>:

void process_task_scheduler(uint32_t current_time_us){
	SCHEDULER_task();
 80025f0:	f7ff bc96 	b.w	8001f20 <SCHEDULER_task>

080025f4 <process_telemetry>:
}

void process_telemetry(uint32_t current_time_us){
	TELEMETRY_Process(current_time_us);
 80025f4:	f000 bf9a 	b.w	800352c <TELEMETRY_Process>

080025f8 <process_logger>:
}
void process_logger(uint32_t current_time_us){
	DATA_LOGGER_Main();
 80025f8:	f7fe be32 	b.w	8001260 <DATA_LOGGER_Main>

080025fc <process_high_lvl>:
}

void process_high_lvl(uint32_t current_time_us){
	HIGH_LVL_Main(current_time_us);
 80025fc:	f7ff b8fa 	b.w	80017f4 <HIGH_LVL_Main>

08002600 <process_stuff_made_here>:
}



void process_stuff_made_here(uint32_t current_time_us){
	if(sys->simulate)
 8002600:	4b04      	ldr	r3, [pc, #16]	; (8002614 <process_stuff_made_here+0x14>)
 8002602:	6818      	ldr	r0, [r3, #0]
 8002604:	f8d0 36c0 	ldr.w	r3, [r0, #1728]	; 0x6c0
 8002608:	b903      	cbnz	r3, 800260c <process_stuff_made_here+0xc>
		STATE_SPACE_Step(&sys->state_space);
}
 800260a:	4770      	bx	lr
		STATE_SPACE_Step(&sys->state_space);
 800260c:	f500 60d4 	add.w	r0, r0, #1696	; 0x6a0
 8002610:	f000 bb92 	b.w	8002d38 <STATE_SPACE_Step>
 8002614:	20001bf8 	.word	0x20001bf8

08002618 <process_self_test>:

void process_self_test(uint32_t current_time_us){
 8002618:	b510      	push	{r4, lr}
	sys->soft.cpu_load = SCHEDULER_get_cpu_load();
 800261a:	4b03      	ldr	r3, [pc, #12]	; (8002628 <process_self_test+0x10>)
 800261c:	681c      	ldr	r4, [r3, #0]
 800261e:	f7ff fc9d 	bl	8001f5c <SCHEDULER_get_cpu_load>
 8002622:	ed84 0ad0 	vstr	s0, [r4, #832]	; 0x340
}
 8002626:	bd10      	pop	{r4, pc}
 8002628:	20001bf8 	.word	0x20001bf8

0800262c <process_acc_update>:
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop

08002630 <tasks_init>:
void tasks_init(system_t * sys_){
 8002630:	b508      	push	{r3, lr}
	sys = sys_ ;
 8002632:	4b1a      	ldr	r3, [pc, #104]	; (800269c <tasks_init+0x6c>)
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 8002634:	2101      	movs	r1, #1
	sys = sys_ ;
 8002636:	6018      	str	r0, [r3, #0]
	SCHEDULER_enable_task(TASK_SCHEDULER, TRUE);
 8002638:	2000      	movs	r0, #0
 800263a:	f7ff fd8d 	bl	8002158 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_PRINTF, TRUE);
 800263e:	2101      	movs	r1, #1
 8002640:	4608      	mov	r0, r1
 8002642:	f7ff fd89 	bl	8002158 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_EVENT_CHECK, TRUE);
 8002646:	2101      	movs	r1, #1
 8002648:	2002      	movs	r0, #2
 800264a:	f7ff fd85 	bl	8002158 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_TELEMETRIE, TRUE);
 800264e:	2101      	movs	r1, #1
 8002650:	2009      	movs	r0, #9
 8002652:	f7ff fd81 	bl	8002158 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_LOGGER, TRUE);
 8002656:	2101      	movs	r1, #1
 8002658:	200a      	movs	r0, #10
 800265a:	f7ff fd7d 	bl	8002158 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ORIENTATION_UPDATE, TRUE);
 800265e:	2101      	movs	r1, #1
 8002660:	200c      	movs	r0, #12
 8002662:	f7ff fd79 	bl	8002158 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_UPDATE, FALSE);
 8002666:	2100      	movs	r1, #0
 8002668:	2005      	movs	r0, #5
 800266a:	f7ff fd75 	bl	8002158 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_GYRO_FILTER, TRUE);
 800266e:	2101      	movs	r1, #1
 8002670:	2006      	movs	r0, #6
 8002672:	f7ff fd71 	bl	8002158 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_ACC_FILTER, TRUE);
 8002676:	2101      	movs	r1, #1
 8002678:	2008      	movs	r0, #8
 800267a:	f7ff fd6d 	bl	8002158 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_HIGH_LVL, TRUE);
 800267e:	2101      	movs	r1, #1
 8002680:	2004      	movs	r0, #4
 8002682:	f7ff fd69 	bl	8002158 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_MONITORING, TRUE);
 8002686:	2101      	movs	r1, #1
 8002688:	200b      	movs	r0, #11
 800268a:	f7ff fd65 	bl	8002158 <SCHEDULER_enable_task>
	SCHEDULER_enable_task(TASK_STUFF_MADE_HERE, TRUE);
 800268e:	2101      	movs	r1, #1
 8002690:	200d      	movs	r0, #13
}
 8002692:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SCHEDULER_enable_task(TASK_STUFF_MADE_HERE, TRUE);
 8002696:	f7ff bd5f 	b.w	8002158 <SCHEDULER_enable_task>
 800269a:	bf00      	nop
 800269c:	20001bf8 	.word	0x20001bf8

080026a0 <TASK_get_task>:

};


task_t * TASK_get_task(task_ids_t id){
	return &tasks[id];
 80026a0:	4b02      	ldr	r3, [pc, #8]	; (80026ac <TASK_get_task+0xc>)
 80026a2:	22d4      	movs	r2, #212	; 0xd4
}
 80026a4:	fb02 3000 	mla	r0, r2, r0, r3
 80026a8:	4770      	bx	lr
 80026aa:	bf00      	nop
 80026ac:	20000ac4 	.word	0x20000ac4

080026b0 <TIME_us>:

#include "time.h"


uint32_t TIME_us(void)
{
 80026b0:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
 80026b2:	b672      	cpsid	i

	uint32_t t_us;
	static uint32_t previous_t_us = 0;
	__disable_irq();
	t_us = HAL_GetTick() * 1000 + 1000 - SysTick->VAL / 168;
 80026b4:	f001 f8ba 	bl	800382c <HAL_GetTick>
 80026b8:	4b0a      	ldr	r3, [pc, #40]	; (80026e4 <TIME_us+0x34>)
 80026ba:	490b      	ldr	r1, [pc, #44]	; (80026e8 <TIME_us+0x38>)
 80026bc:	689a      	ldr	r2, [r3, #8]
 80026be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026c2:	08d2      	lsrs	r2, r2, #3
 80026c4:	fb00 3003 	mla	r0, r0, r3, r3
 80026c8:	fba1 3202 	umull	r3, r2, r1, r2
 80026cc:	eba0 0052 	sub.w	r0, r0, r2, lsr #1
  __ASM volatile ("cpsie i" : : : "memory");
 80026d0:	b662      	cpsie	i
	__enable_irq();

	//Parfois la hal_get_tick ne s est pas encore fait incrémenter, donc si notre miros actuel  est plus petit qu'avant on ajoute 1000µs (soit la ms qui n a pas été incrémenté)
	if(previous_t_us > t_us)
 80026d2:	4b06      	ldr	r3, [pc, #24]	; (80026ec <TIME_us+0x3c>)
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	4282      	cmp	r2, r0
		t_us += 1000;
 80026d8:	bf88      	it	hi
 80026da:	f500 707a 	addhi.w	r0, r0, #1000	; 0x3e8
	previous_t_us = t_us ;
 80026de:	6018      	str	r0, [r3, #0]

	return t_us;
}
 80026e0:	bd08      	pop	{r3, pc}
 80026e2:	bf00      	nop
 80026e4:	e000e010 	.word	0xe000e010
 80026e8:	18618619 	.word	0x18618619
 80026ec:	20001bfc 	.word	0x20001bfc

080026f0 <REGULATION_ORIENTATION_Init>:
//	------------------------------	Angular Pos Regulation settings	-----------------------------------------
float filter_pid_angle[3] = {1.0f, 0.0f, 0.0f};
float pid_angle_settings[PID_NB_SETTINGS] = {6.0f, 0.0f, 0.0f, REGU_ORIENTATION_FREQUENCY, 500};


void REGULATION_ORIENTATION_Init(regu_orientation_t * regu_orientation_, orientation_t * orientation_, int16_t * output){
 80026f0:	b570      	push	{r4, r5, r6, lr}
	orientation = orientation_ ;
	regu_orientation = regu_orientation_ ;
	regu_orientation->mode = REGULATION_MODE_OFF ;
 80026f2:	2500      	movs	r5, #0
	regu_orientation = regu_orientation_ ;
 80026f4:	4e0a      	ldr	r6, [pc, #40]	; (8002720 <REGULATION_ORIENTATION_Init+0x30>)
	regu_orientation->output = output ;
 80026f6:	f8c0 20ac 	str.w	r2, [r0, #172]	; 0xac
	regu_orientation->mode = REGULATION_MODE_OFF ;
 80026fa:	7105      	strb	r5, [r0, #4]
void REGULATION_ORIENTATION_Init(regu_orientation_t * regu_orientation_, orientation_t * orientation_, int16_t * output){
 80026fc:	4604      	mov	r4, r0


	//Init PID angular speed
	PID_init(&regu_orientation->pid_angular_speed, pid_velocity_settings, FILTER_SECOND_ORDER, filter_pid_velocity);
 80026fe:	4b09      	ldr	r3, [pc, #36]	; (8002724 <REGULATION_ORIENTATION_Init+0x34>)
 8002700:	4909      	ldr	r1, [pc, #36]	; (8002728 <REGULATION_ORIENTATION_Init+0x38>)
	regu_orientation = regu_orientation_ ;
 8002702:	6034      	str	r4, [r6, #0]
	PID_init(&regu_orientation->pid_angular_speed, pid_velocity_settings, FILTER_SECOND_ORDER, filter_pid_velocity);
 8002704:	3008      	adds	r0, #8
 8002706:	2201      	movs	r2, #1
 8002708:	f003 fd4c 	bl	80061a4 <PID_init>

	//Init PID angular position
	PID_init(&regu_orientation->pid_angular_pos, pid_angle_settings, FILTER_FIRST_ORDER, filter_pid_angle);
 800270c:	6830      	ldr	r0, [r6, #0]
 800270e:	4b07      	ldr	r3, [pc, #28]	; (800272c <REGULATION_ORIENTATION_Init+0x3c>)
 8002710:	4907      	ldr	r1, [pc, #28]	; (8002730 <REGULATION_ORIENTATION_Init+0x40>)
 8002712:	462a      	mov	r2, r5
 8002714:	3054      	adds	r0, #84	; 0x54


}
 8002716:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	PID_init(&regu_orientation->pid_angular_pos, pid_angle_settings, FILTER_FIRST_ORDER, filter_pid_angle);
 800271a:	f003 bd43 	b.w	80061a4 <PID_init>
 800271e:	bf00      	nop
 8002720:	20001c00 	.word	0x20001c00
 8002724:	20001668 	.word	0x20001668
 8002728:	20001688 	.word	0x20001688
 800272c:	2000165c 	.word	0x2000165c
 8002730:	20001674 	.word	0x20001674

08002734 <REGULATION_ORIENTATION_Set_Regulation_Mode>:

void REGULATION_ORIENTATION_Set_Regulation_Mode(regulation_mode_e regu_mode){
	regu_orientation->mode = regu_mode;
 8002734:	4b01      	ldr	r3, [pc, #4]	; (800273c <REGULATION_ORIENTATION_Set_Regulation_Mode+0x8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	7118      	strb	r0, [r3, #4]
}
 800273a:	4770      	bx	lr
 800273c:	20001c00 	.word	0x20001c00

08002740 <REGULATION_ORIENTATION_Process>:

void REGULATION_ORIENTATION_Process(void){

	switch(regu_orientation->mode){
 8002740:	4b08      	ldr	r3, [pc, #32]	; (8002764 <REGULATION_ORIENTATION_Process+0x24>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	791a      	ldrb	r2, [r3, #4]
 8002746:	b142      	cbz	r2, 800275a <REGULATION_ORIENTATION_Process+0x1a>
 8002748:	2a01      	cmp	r2, #1
 800274a:	d105      	bne.n	8002758 <REGULATION_ORIENTATION_Process+0x18>
		case REGULATION_MODE_OFF:
			*regu_orientation->output = 0;
			break;
		case REGULATION_MODE_MANUAL:
			*regu_orientation->output = regu_orientation->motor_consigne;
 800274c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8002750:	f9b3 30a8 	ldrsh.w	r3, [r3, #168]	; 0xa8
 8002754:	8013      	strh	r3, [r2, #0]
			break;
	}

}
 8002756:	4770      	bx	lr
 8002758:	4770      	bx	lr
			*regu_orientation->output = 0;
 800275a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800275e:	801a      	strh	r2, [r3, #0]
			break;
 8002760:	4770      	bx	lr
 8002762:	bf00      	nop
 8002764:	20001c00 	.word	0x20001c00

08002768 <acc_data_callback>:
	//We warn the system that new data are available
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
}

static void acc_data_callback(void){
	EVENT_Set_flag(FLAG_ACC_DATA_READY);
 8002768:	2006      	movs	r0, #6
 800276a:	f7ff b9d5 	b.w	8001b18 <EVENT_Set_flag>
 800276e:	bf00      	nop

08002770 <ACC_init>:
void ACC_init(acc_t * acc, mpu_t * mpu){
 8002770:	b538      	push	{r3, r4, r5, lr}
	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_SECOND_ORDER);
 8002772:	2201      	movs	r2, #1
void ACC_init(acc_t * acc, mpu_t * mpu){
 8002774:	4604      	mov	r4, r0
 8002776:	460d      	mov	r5, r1
	FILTER_init(&acc->filters[ACC_AXE_X], filter_config, FILTER_SECOND_ORDER);
 8002778:	3020      	adds	r0, #32
 800277a:	4911      	ldr	r1, [pc, #68]	; (80027c0 <ACC_init+0x50>)
 800277c:	f003 fc86 	bl	800608c <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Y], filter_config, FILTER_SECOND_ORDER);
 8002780:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8002784:	2201      	movs	r2, #1
 8002786:	490e      	ldr	r1, [pc, #56]	; (80027c0 <ACC_init+0x50>)
 8002788:	f003 fc80 	bl	800608c <FILTER_init>
	FILTER_init(&acc->filters[ACC_AXE_Z], filter_config, FILTER_SECOND_ORDER);
 800278c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002790:	2201      	movs	r2, #1
 8002792:	490b      	ldr	r1, [pc, #44]	; (80027c0 <ACC_init+0x50>)
 8002794:	f003 fc7a 	bl	800608c <FILTER_init>
	acc->offsets[0] = 0.0 ;
 8002798:	2300      	movs	r3, #0
	acc->raw = acc->mpu->acc ;
 800279a:	f105 0248 	add.w	r2, r5, #72	; 0x48
 800279e:	6062      	str	r2, [r4, #4]
	acc->mpu = mpu ;
 80027a0:	6025      	str	r5, [r4, #0]
	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 80027a2:	4628      	mov	r0, r5
	acc->offsets[0] = 0.0 ;
 80027a4:	6163      	str	r3, [r4, #20]
	acc->offsets[1] = 0.0 ;
 80027a6:	61a3      	str	r3, [r4, #24]
	acc->offsets[2] = 0.0 ;
 80027a8:	61e3      	str	r3, [r4, #28]
	switch(MPU_init_acc(acc->mpu, MPU_ACC_4G, acc_data_callback)){
 80027aa:	4a06      	ldr	r2, [pc, #24]	; (80027c4 <ACC_init+0x54>)
 80027ac:	2101      	movs	r1, #1
 80027ae:	f000 f961 	bl	8002a74 <MPU_init_acc>
 80027b2:	b100      	cbz	r0, 80027b6 <ACC_init+0x46>
}
 80027b4:	bd38      	pop	{r3, r4, r5, pc}
			EVENT_Set_flag(FLAG_ACC_OK);
 80027b6:	2004      	movs	r0, #4
}
 80027b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			EVENT_Set_flag(FLAG_ACC_OK);
 80027bc:	f7ff b9ac 	b.w	8001b18 <EVENT_Set_flag>
 80027c0:	2000169c 	.word	0x2000169c
 80027c4:	08002769 	.word	0x08002769

080027c8 <ACC_process_lpf>:
	acc->raw[0] -= acc->offsets[0];
 80027c8:	6843      	ldr	r3, [r0, #4]
 80027ca:	edd0 6a05 	vldr	s13, [r0, #20]
 80027ce:	ed93 0a00 	vldr	s0, [r3]
	acc->raw[1] -= acc->offsets[1];
 80027d2:	ed93 7a01 	vldr	s14, [r3, #4]
	acc->raw[2] -= acc->offsets[2];
 80027d6:	edd3 7a02 	vldr	s15, [r3, #8]
	acc->raw[0] -= acc->offsets[0];
 80027da:	ee30 0a66 	vsub.f32	s0, s0, s13
void ACC_process_lpf(acc_t * acc){
 80027de:	b510      	push	{r4, lr}
 80027e0:	4604      	mov	r4, r0
	acc->raw[0] -= acc->offsets[0];
 80027e2:	ed83 0a00 	vstr	s0, [r3]
	acc->raw[1] -= acc->offsets[1];
 80027e6:	edd4 6a06 	vldr	s13, [r4, #24]
 80027ea:	ee37 7a66 	vsub.f32	s14, s14, s13
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 80027ee:	3020      	adds	r0, #32
	acc->raw[1] -= acc->offsets[1];
 80027f0:	ed83 7a01 	vstr	s14, [r3, #4]
	acc->raw[2] -= acc->offsets[2];
 80027f4:	ed94 7a07 	vldr	s14, [r4, #28]
 80027f8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80027fc:	edc3 7a02 	vstr	s15, [r3, #8]
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 8002800:	f003 fc4c 	bl	800609c <FILTER_process>
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 8002804:	6863      	ldr	r3, [r4, #4]
	acc->filtered[ACC_AXE_X] = FILTER_process(&acc->filters[ACC_AXE_X], acc->raw[ACC_AXE_X]);
 8002806:	ed84 0a02 	vstr	s0, [r4, #8]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 800280a:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 800280e:	ed93 0a01 	vldr	s0, [r3, #4]
 8002812:	f003 fc43 	bl	800609c <FILTER_process>
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 8002816:	6863      	ldr	r3, [r4, #4]
	acc->filtered[ACC_AXE_Y] = FILTER_process(&acc->filters[ACC_AXE_Y], acc->raw[ACC_AXE_Y]);
 8002818:	ed84 0a03 	vstr	s0, [r4, #12]
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 800281c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002820:	ed93 0a02 	vldr	s0, [r3, #8]
 8002824:	f003 fc3a 	bl	800609c <FILTER_process>
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 8002828:	2007      	movs	r0, #7
	acc->filtered[ACC_AXE_Z] = FILTER_process(&acc->filters[ACC_AXE_Z], acc->raw[ACC_AXE_Z]);
 800282a:	ed84 0a04 	vstr	s0, [r4, #16]
}
 800282e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	EVENT_Set_flag(FLAG_ACC_FILTERED_DATA_READY);
 8002832:	f7ff b971 	b.w	8001b18 <EVENT_Set_flag>
 8002836:	bf00      	nop

08002838 <gyro_data_callback>:
	//We warn the system that we ve got new data ready to be used :)
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
}

static void gyro_data_callback(void){
	EVENT_Set_flag(FLAG_GYRO_DATA_READY);
 8002838:	2002      	movs	r0, #2
 800283a:	f7ff b96d 	b.w	8001b18 <EVENT_Set_flag>
 800283e:	bf00      	nop

08002840 <GYRO_init>:
void GYRO_init(gyro_t * gyro, mpu_t * mpu){
 8002840:	b538      	push	{r3, r4, r5, lr}
	FILTER_init(&gyro->filters[ORIENTATION_ROLL], filter, FILTER_SECOND_ORDER);
 8002842:	2201      	movs	r2, #1
void GYRO_init(gyro_t * gyro, mpu_t * mpu){
 8002844:	4604      	mov	r4, r0
 8002846:	460d      	mov	r5, r1
	FILTER_init(&gyro->filters[ORIENTATION_ROLL], filter, FILTER_SECOND_ORDER);
 8002848:	3020      	adds	r0, #32
 800284a:	4911      	ldr	r1, [pc, #68]	; (8002890 <GYRO_init+0x50>)
 800284c:	f003 fc1e 	bl	800608c <FILTER_init>
	FILTER_init(&gyro->filters[ORIENTATION_PITCH], filter, FILTER_SECOND_ORDER);
 8002850:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 8002854:	2201      	movs	r2, #1
 8002856:	490e      	ldr	r1, [pc, #56]	; (8002890 <GYRO_init+0x50>)
 8002858:	f003 fc18 	bl	800608c <FILTER_init>
	FILTER_init(&gyro->filters[ORIENTATION_YAW], filter, FILTER_SECOND_ORDER);
 800285c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002860:	2201      	movs	r2, #1
 8002862:	490b      	ldr	r1, [pc, #44]	; (8002890 <GYRO_init+0x50>)
 8002864:	f003 fc12 	bl	800608c <FILTER_init>
	gyro->offsets[ORIENTATION_ROLL] = 0.0f;
 8002868:	2300      	movs	r3, #0
	gyro->raw = gyro->mpu->gyro ;
 800286a:	f105 0224 	add.w	r2, r5, #36	; 0x24
 800286e:	6062      	str	r2, [r4, #4]
	gyro->mpu = mpu ;
 8002870:	6025      	str	r5, [r4, #0]
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 8002872:	4628      	mov	r0, r5
	gyro->offsets[ORIENTATION_ROLL] = 0.0f;
 8002874:	6163      	str	r3, [r4, #20]
	gyro->offsets[ORIENTATION_PITCH] = 0.0f ;
 8002876:	61a3      	str	r3, [r4, #24]
	gyro->offsets[ORIENTATION_YAW] = 0.0f ;
 8002878:	61e3      	str	r3, [r4, #28]
	switch(MPU_init_gyro(gyro->mpu, MPU_GYRO_2000s, gyro_data_callback)){
 800287a:	4a06      	ldr	r2, [pc, #24]	; (8002894 <GYRO_init+0x54>)
 800287c:	2103      	movs	r1, #3
 800287e:	f000 f8a3 	bl	80029c8 <MPU_init_gyro>
 8002882:	b100      	cbz	r0, 8002886 <GYRO_init+0x46>
}
 8002884:	bd38      	pop	{r3, r4, r5, pc}
 8002886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			EVENT_Set_flag(FLAG_GYRO_OK);
 800288a:	f7ff b945 	b.w	8001b18 <EVENT_Set_flag>
 800288e:	bf00      	nop
 8002890:	200016a8 	.word	0x200016a8
 8002894:	08002839 	.word	0x08002839

08002898 <GYRO_ACC_update_dma>:
void GYRO_ACC_update_dma(gyro_t * gyro){
 8002898:	b508      	push	{r3, lr}
	switch(MPU_update_all_dma(gyro->mpu)){
 800289a:	6800      	ldr	r0, [r0, #0]
 800289c:	f000 f93c 	bl	8002b18 <MPU_update_all_dma>
 80028a0:	2802      	cmp	r0, #2
 80028a2:	d000      	beq.n	80028a6 <GYRO_ACC_update_dma+0xe>
}
 80028a4:	bd08      	pop	{r3, pc}
			EVENT_Clean_flag(FLAG_GYRO_OK);
 80028a6:	2000      	movs	r0, #0
 80028a8:	f7ff f946 	bl	8001b38 <EVENT_Clean_flag>
			EVENT_Clean_flag(FLAG_ACC_OK);
 80028ac:	2004      	movs	r0, #4
}
 80028ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
			EVENT_Clean_flag(FLAG_ACC_OK);
 80028b2:	f7ff b941 	b.w	8001b38 <EVENT_Clean_flag>
 80028b6:	bf00      	nop

080028b8 <GYRO_process_lpf>:
	gyro->raw[0] -= gyro->offsets[0];
 80028b8:	6843      	ldr	r3, [r0, #4]
 80028ba:	edd0 6a05 	vldr	s13, [r0, #20]
 80028be:	ed93 0a00 	vldr	s0, [r3]
	gyro->raw[1] -= gyro->offsets[1];
 80028c2:	ed93 7a01 	vldr	s14, [r3, #4]
	gyro->raw[2] -= gyro->offsets[2];
 80028c6:	edd3 7a02 	vldr	s15, [r3, #8]
	gyro->raw[0] -= gyro->offsets[0];
 80028ca:	ee30 0a66 	vsub.f32	s0, s0, s13
void GYRO_process_lpf(gyro_t * gyro){
 80028ce:	b510      	push	{r4, lr}
 80028d0:	4604      	mov	r4, r0
	gyro->raw[0] -= gyro->offsets[0];
 80028d2:	ed83 0a00 	vstr	s0, [r3]
	gyro->raw[1] -= gyro->offsets[1];
 80028d6:	edd4 6a06 	vldr	s13, [r4, #24]
 80028da:	ee37 7a66 	vsub.f32	s14, s14, s13
	gyro->filtered[0] =  FILTER_process(&gyro->filters[0], gyro->raw[0]);
 80028de:	3020      	adds	r0, #32
	gyro->raw[1] -= gyro->offsets[1];
 80028e0:	ed83 7a01 	vstr	s14, [r3, #4]
	gyro->raw[2] -= gyro->offsets[2];
 80028e4:	ed94 7a07 	vldr	s14, [r4, #28]
 80028e8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028ec:	edc3 7a02 	vstr	s15, [r3, #8]
	gyro->filtered[0] =  FILTER_process(&gyro->filters[0], gyro->raw[0]);
 80028f0:	f003 fbd4 	bl	800609c <FILTER_process>
	gyro->filtered[1] =  FILTER_process(&gyro->filters[1], gyro->raw[1]);
 80028f4:	6863      	ldr	r3, [r4, #4]
	gyro->filtered[0] =  FILTER_process(&gyro->filters[0], gyro->raw[0]);
 80028f6:	ed84 0a02 	vstr	s0, [r4, #8]
	gyro->filtered[1] =  FILTER_process(&gyro->filters[1], gyro->raw[1]);
 80028fa:	f104 003c 	add.w	r0, r4, #60	; 0x3c
 80028fe:	ed93 0a01 	vldr	s0, [r3, #4]
 8002902:	f003 fbcb 	bl	800609c <FILTER_process>
	gyro->filtered[2] =  FILTER_process(&gyro->filters[2], gyro->raw[2]);
 8002906:	6863      	ldr	r3, [r4, #4]
	gyro->filtered[1] =  FILTER_process(&gyro->filters[1], gyro->raw[1]);
 8002908:	ed84 0a03 	vstr	s0, [r4, #12]
	gyro->filtered[2] =  FILTER_process(&gyro->filters[2], gyro->raw[2]);
 800290c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8002910:	ed93 0a02 	vldr	s0, [r3, #8]
 8002914:	f003 fbc2 	bl	800609c <FILTER_process>
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 8002918:	2003      	movs	r0, #3
	gyro->filtered[2] =  FILTER_process(&gyro->filters[2], gyro->raw[2]);
 800291a:	ed84 0a04 	vstr	s0, [r4, #16]
}
 800291e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	EVENT_Set_flag(FLAG_GYRO_FILTERED_DATA_READY);
 8002922:	f7ff b8f9 	b.w	8001b18 <EVENT_Set_flag>
 8002926:	bf00      	nop

08002928 <MPU_init>:
 */
sensor_request_e MPU_init(mpu_t * mpu, I2C_HandleTypeDef * hi2c){


	//Requiert un SPI pour fonctionner
	if(hi2c == NULL)
 8002928:	2900      	cmp	r1, #0
 800292a:	d045      	beq.n	80029b8 <MPU_init+0x90>
sensor_request_e MPU_init(mpu_t * mpu, I2C_HandleTypeDef * hi2c){
 800292c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800292e:	4604      	mov	r4, r0
 8002930:	b087      	sub	sp, #28
	mpu->gyro_data = &mpu->data[8] ;
	mpu->acc_data = &mpu->data[0] ;


	//Application des paramètres de connexion
	mpu->hi2c = hi2c ;
 8002932:	6021      	str	r1, [r4, #0]
 8002934:	460b      	mov	r3, r1

	mpu->adresse = MPU6050_I2C_ADDR ;

	mpu_handlers[mpu_init_compteur] = mpu ;
 8002936:	4821      	ldr	r0, [pc, #132]	; (80029bc <MPU_init+0x94>)
 8002938:	f8df c088 	ldr.w	ip, [pc, #136]	; 80029c4 <MPU_init+0x9c>
 800293c:	7802      	ldrb	r2, [r0, #0]
	I2C_handlers[mpu_init_compteur++] = hi2c ;
 800293e:	4f20      	ldr	r7, [pc, #128]	; (80029c0 <MPU_init+0x98>)
	mpu_handlers[mpu_init_compteur] = mpu ;
 8002940:	f84c 4022 	str.w	r4, [ip, r2, lsl #2]

	//Wakeup mpu
	uint8_t wakeup_data = 0x80 ;
 8002944:	a906      	add	r1, sp, #24
 8002946:	2580      	movs	r5, #128	; 0x80
 8002948:	f801 5d02 	strb.w	r5, [r1, #-2]!
	I2C_handlers[mpu_init_compteur++] = hi2c ;
 800294c:	1c56      	adds	r6, r2, #1

	mpu->hal_state = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &wakeup_data, 1, 10);
 800294e:	9100      	str	r1, [sp, #0]
	mpu->state = SENSOR_NOT_INIT ;
 8002950:	2501      	movs	r5, #1
	mpu->gyro_data = &mpu->data[8] ;
 8002952:	f104 0110 	add.w	r1, r4, #16
	mpu->state = SENSOR_NOT_INIT ;
 8002956:	7165      	strb	r5, [r4, #5]
	mpu->hal_state = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &wakeup_data, 1, 10);
 8002958:	9501      	str	r5, [sp, #4]
	I2C_handlers[mpu_init_compteur++] = hi2c ;
 800295a:	7006      	strb	r6, [r0, #0]
	mpu->gyro_data = &mpu->data[8] ;
 800295c:	61a1      	str	r1, [r4, #24]
	mpu->acc_data = &mpu->data[0] ;
 800295e:	f104 0008 	add.w	r0, r4, #8
	mpu->adresse = MPU6050_I2C_ADDR ;
 8002962:	21d0      	movs	r1, #208	; 0xd0
	mpu->hal_state = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &wakeup_data, 1, 10);
 8002964:	260a      	movs	r6, #10
	mpu->adresse = MPU6050_I2C_ADDR ;
 8002966:	71e1      	strb	r1, [r4, #7]
	mpu->acc_data = &mpu->data[0] ;
 8002968:	63e0      	str	r0, [r4, #60]	; 0x3c
	mpu->hal_state = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &wakeup_data, 1, 10);
 800296a:	9602      	str	r6, [sp, #8]
 800296c:	4618      	mov	r0, r3
	I2C_handlers[mpu_init_compteur++] = hi2c ;
 800296e:	f847 3022 	str.w	r3, [r7, r2, lsl #2]
	mpu->hal_state = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &wakeup_data, 1, 10);
 8002972:	462b      	mov	r3, r5
 8002974:	226b      	movs	r2, #107	; 0x6b
 8002976:	f001 fd8d 	bl	8004494 <HAL_I2C_Mem_Write>
 800297a:	7120      	strb	r0, [r4, #4]

	HAL_Delay(15);
 800297c:	200f      	movs	r0, #15
 800297e:	f000 ff5b 	bl	8003838 <HAL_Delay>

	//Clock select
	uint8_t mpu_clock_sel_pll_gyroz = 0x03;
 8002982:	aa06      	add	r2, sp, #24
 8002984:	2303      	movs	r3, #3
 8002986:	f802 3d01 	strb.w	r3, [r2, #-1]!
	mpu->hal_state = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_PWR_MGMT_1, I2C_MEMADD_SIZE_8BIT, &mpu_clock_sel_pll_gyroz, 1, 10);
 800298a:	79e1      	ldrb	r1, [r4, #7]
 800298c:	6820      	ldr	r0, [r4, #0]
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	462b      	mov	r3, r5
 8002992:	226b      	movs	r2, #107	; 0x6b
 8002994:	e9cd 5601 	strd	r5, r6, [sp, #4]
 8002998:	f001 fd7c 	bl	8004494 <HAL_I2C_Mem_Write>
 800299c:	7120      	strb	r0, [r4, #4]


	HAL_Delay(15);
 800299e:	200f      	movs	r0, #15
 80029a0:	f000 ff4a 	bl	8003838 <HAL_Delay>


	//Pour l'init on ne s'occupe pas des cas HAL busy etc, c'est bon ou c'est pas bon c est tout^^
	if(mpu->hal_state != HAL_OK){
 80029a4:	7920      	ldrb	r0, [r4, #4]
 80029a6:	b910      	cbnz	r0, 80029ae <MPU_init+0x86>
		mpu->state = SENSOR_ERROR ;
		return SENSOR_REQUEST_FAIL ;
	}

	mpu->state = SENSOR_IDDLE ;
 80029a8:	7160      	strb	r0, [r4, #5]
	return SENSOR_REQUEST_OK;
}
 80029aa:	b007      	add	sp, #28
 80029ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		mpu->state = SENSOR_ERROR ;
 80029ae:	2304      	movs	r3, #4
		return SENSOR_REQUEST_FAIL ;
 80029b0:	2002      	movs	r0, #2
		mpu->state = SENSOR_ERROR ;
 80029b2:	7163      	strb	r3, [r4, #5]
}
 80029b4:	b007      	add	sp, #28
 80029b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return SENSOR_REQUEST_FAIL ;
 80029b8:	2002      	movs	r0, #2
}
 80029ba:	4770      	bx	lr
 80029bc:	20001c0c 	.word	0x20001c0c
 80029c0:	20001c04 	.word	0x20001c04
 80029c4:	20001c08 	.word	0x20001c08

080029c8 <MPU_init_gyro>:

	mpu->gyro_range = gyro_range ;
	mpu->gyro_data_callback = gyro_data_callback ;

	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 80029c8:	7943      	ldrb	r3, [r0, #5]
	mpu->gyro_data_callback = gyro_data_callback ;
 80029ca:	6382      	str	r2, [r0, #56]	; 0x38
	mpu->gyro_range = gyro_range ;
 80029cc:	f880 1030 	strb.w	r1, [r0, #48]	; 0x30
	if(mpu->state != SENSOR_IDDLE)
 80029d0:	b9fb      	cbnz	r3, 8002a12 <MPU_init_gyro+0x4a>
sensor_request_e MPU_init_gyro(mpu_t * mpu, MPU_gyro_range_e gyro_range, void (*gyro_data_callback)){
 80029d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029d4:	b087      	sub	sp, #28
		return SENSOR_REQUEST_FAIL ;


	//Configuration de la sensi du gyro dans le mpu
	uint8_t temp ;
	mpu->hal_state = HAL_I2C_Mem_Read(mpu->hi2c, mpu->adresse, MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
 80029d6:	2601      	movs	r6, #1
 80029d8:	f10d 0217 	add.w	r2, sp, #23
 80029dc:	2702      	movs	r7, #2
 80029de:	460d      	mov	r5, r1
 80029e0:	4604      	mov	r4, r0
 80029e2:	79c1      	ldrb	r1, [r0, #7]
 80029e4:	6800      	ldr	r0, [r0, #0]
 80029e6:	9200      	str	r2, [sp, #0]
 80029e8:	4633      	mov	r3, r6
 80029ea:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80029ee:	221b      	movs	r2, #27
 80029f0:	f001 fe40 	bl	8004674 <HAL_I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)gyro_range << 3;
 80029f4:	f89d 3017 	ldrb.w	r3, [sp, #23]
	mpu->hal_state = HAL_I2C_Mem_Read(mpu->hi2c, mpu->adresse, MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
 80029f8:	7120      	strb	r0, [r4, #4]
	temp = (temp & 0xE7) | (uint8_t)gyro_range << 3;
 80029fa:	f023 0318 	bic.w	r3, r3, #24
 80029fe:	ea43 03c5 	orr.w	r3, r3, r5, lsl #3
 8002a02:	f88d 3017 	strb.w	r3, [sp, #23]
	if(mpu->hal_state == HAL_OK)
 8002a06:	b130      	cbz	r0, 8002a16 <MPU_init_gyro+0x4e>



	if(mpu->hal_state != HAL_OK)
	{
		mpu->state = SENSOR_ERROR ;
 8002a08:	2304      	movs	r3, #4
 8002a0a:	7163      	strb	r3, [r4, #5]
		return SENSOR_REQUEST_FAIL ;
 8002a0c:	2002      	movs	r0, #2
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
			break;
	}

	return SENSOR_REQUEST_OK;
}
 8002a0e:	b007      	add	sp, #28
 8002a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return SENSOR_REQUEST_FAIL ;
 8002a12:	2002      	movs	r0, #2
}
 8002a14:	4770      	bx	lr
		mpu->hal_state = HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_GYRO_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
 8002a16:	f10d 0317 	add.w	r3, sp, #23
 8002a1a:	79e1      	ldrb	r1, [r4, #7]
 8002a1c:	6820      	ldr	r0, [r4, #0]
 8002a1e:	9300      	str	r3, [sp, #0]
 8002a20:	e9cd 6701 	strd	r6, r7, [sp, #4]
 8002a24:	4633      	mov	r3, r6
 8002a26:	221b      	movs	r2, #27
 8002a28:	f001 fd34 	bl	8004494 <HAL_I2C_Mem_Write>
 8002a2c:	7120      	strb	r0, [r4, #4]
	if(mpu->hal_state != HAL_OK)
 8002a2e:	2800      	cmp	r0, #0
 8002a30:	d1ea      	bne.n	8002a08 <MPU_init_gyro+0x40>
	switch(gyro_range){
 8002a32:	2d03      	cmp	r5, #3
 8002a34:	d813      	bhi.n	8002a5e <MPU_init_gyro+0x96>
 8002a36:	e8df f005 	tbb	[pc, r5]
 8002a3a:	0a0e      	.short	0x0a0e
 8002a3c:	0206      	.short	0x0206
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_2000 ;
 8002a3e:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <MPU_init_gyro+0x9c>)
 8002a40:	6363      	str	r3, [r4, #52]	; 0x34
	return SENSOR_REQUEST_OK;
 8002a42:	2000      	movs	r0, #0
			break;
 8002a44:	e7e3      	b.n	8002a0e <MPU_init_gyro+0x46>
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_1000 ;
 8002a46:	4b08      	ldr	r3, [pc, #32]	; (8002a68 <MPU_init_gyro+0xa0>)
 8002a48:	6363      	str	r3, [r4, #52]	; 0x34
	return SENSOR_REQUEST_OK;
 8002a4a:	2000      	movs	r0, #0
			break;
 8002a4c:	e7df      	b.n	8002a0e <MPU_init_gyro+0x46>
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_500 ;
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <MPU_init_gyro+0xa4>)
 8002a50:	6363      	str	r3, [r4, #52]	; 0x34
	return SENSOR_REQUEST_OK;
 8002a52:	2000      	movs	r0, #0
			break;
 8002a54:	e7db      	b.n	8002a0e <MPU_init_gyro+0x46>
			mpu->gyro_sensi = (float)1 / MPU6050_GYRO_SENS_250 ;
 8002a56:	4b06      	ldr	r3, [pc, #24]	; (8002a70 <MPU_init_gyro+0xa8>)
 8002a58:	6363      	str	r3, [r4, #52]	; 0x34
	return SENSOR_REQUEST_OK;
 8002a5a:	2000      	movs	r0, #0
			break;
 8002a5c:	e7d7      	b.n	8002a0e <MPU_init_gyro+0x46>
	return SENSOR_REQUEST_OK;
 8002a5e:	2000      	movs	r0, #0
 8002a60:	e7d5      	b.n	8002a0e <MPU_init_gyro+0x46>
 8002a62:	bf00      	nop
 8002a64:	3d79c190 	.word	0x3d79c190
 8002a68:	3cf9c190 	.word	0x3cf9c190
 8002a6c:	3c7a232d 	.word	0x3c7a232d
 8002a70:	3bfa232d 	.word	0x3bfa232d

08002a74 <MPU_init_acc>:
 */
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
	mpu->acc_range = acc_range ;
	mpu->acc_data_callback = acc_data_callback ;
	//Si mpu non utilisable
	if(mpu->state != SENSOR_IDDLE)
 8002a74:	7943      	ldrb	r3, [r0, #5]
	mpu->acc_data_callback = acc_data_callback ;
 8002a76:	65c2      	str	r2, [r0, #92]	; 0x5c
	mpu->acc_range = acc_range ;
 8002a78:	f880 1054 	strb.w	r1, [r0, #84]	; 0x54
	if(mpu->state != SENSOR_IDDLE)
 8002a7c:	bb5b      	cbnz	r3, 8002ad6 <MPU_init_acc+0x62>
sensor_request_e MPU_init_acc(mpu_t * mpu, MPU_acc_range_e acc_range, void (*acc_data_callback)){
 8002a7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002a82:	b087      	sub	sp, #28
		return SENSOR_REQUEST_FAIL ;


	//Configuration de la sensi de l'acc dans le mpu
	uint8_t temp ;
	HAL_I2C_Mem_Read(mpu->hi2c, mpu->adresse, MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
 8002a84:	2701      	movs	r7, #1
 8002a86:	f04f 0902 	mov.w	r9, #2
 8002a8a:	f10d 0617 	add.w	r6, sp, #23
 8002a8e:	4688      	mov	r8, r1
 8002a90:	4604      	mov	r4, r0
 8002a92:	79c1      	ldrb	r1, [r0, #7]
 8002a94:	6800      	ldr	r0, [r0, #0]
 8002a96:	9600      	str	r6, [sp, #0]
 8002a98:	463b      	mov	r3, r7
 8002a9a:	221c      	movs	r2, #28
 8002a9c:	e9cd 7901 	strd	r7, r9, [sp, #4]
 8002aa0:	f001 fde8 	bl	8004674 <HAL_I2C_Mem_Read>
	temp = (temp & 0xE7) | (uint8_t)acc_range << 3;
 8002aa4:	f89d 5017 	ldrb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
 8002aa8:	79e1      	ldrb	r1, [r4, #7]
 8002aaa:	6820      	ldr	r0, [r4, #0]
 8002aac:	f8cd 9008 	str.w	r9, [sp, #8]
	temp = (temp & 0xE7) | (uint8_t)acc_range << 3;
 8002ab0:	f025 0518 	bic.w	r5, r5, #24
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
 8002ab4:	463b      	mov	r3, r7
	temp = (temp & 0xE7) | (uint8_t)acc_range << 3;
 8002ab6:	ea45 05c8 	orr.w	r5, r5, r8, lsl #3
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
 8002aba:	e9cd 6700 	strd	r6, r7, [sp]
 8002abe:	221c      	movs	r2, #28
	temp = (temp & 0xE7) | (uint8_t)acc_range << 3;
 8002ac0:	f88d 5017 	strb.w	r5, [sp, #23]
	HAL_I2C_Mem_Write(mpu->hi2c, mpu->adresse, MPU6050_ACCEL_CONFIG, I2C_MEMADD_SIZE_8BIT, &temp, 1, 2);
 8002ac4:	f001 fce6 	bl	8004494 <HAL_I2C_Mem_Write>



	switch(acc_range){
 8002ac8:	f1b8 0f03 	cmp.w	r8, #3
 8002acc:	d821      	bhi.n	8002b12 <MPU_init_acc+0x9e>
 8002ace:	e8df f008 	tbb	[pc, r8]
 8002ad2:	120b      	.short	0x120b
 8002ad4:	0419      	.short	0x0419
		return SENSOR_REQUEST_FAIL ;
 8002ad6:	2002      	movs	r0, #2
		case MPU_ACC_16G :
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
			break;
	}
	return SENSOR_REQUEST_OK;
}
 8002ad8:	4770      	bx	lr
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 8002ada:	f04f 5368 	mov.w	r3, #973078528	; 0x3a000000
	return SENSOR_REQUEST_OK;
 8002ade:	2000      	movs	r0, #0
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_16 ;
 8002ae0:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8002ae2:	b007      	add	sp, #28
 8002ae4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 8002ae8:	f04f 5362 	mov.w	r3, #947912704	; 0x38800000
	return SENSOR_REQUEST_OK;
 8002aec:	2000      	movs	r0, #0
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_2 ;
 8002aee:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8002af0:	b007      	add	sp, #28
 8002af2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 8002af6:	f04f 5364 	mov.w	r3, #956301312	; 0x39000000
	return SENSOR_REQUEST_OK;
 8002afa:	2000      	movs	r0, #0
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_4 ;
 8002afc:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8002afe:	b007      	add	sp, #28
 8002b00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 8002b04:	f04f 5366 	mov.w	r3, #964689920	; 0x39800000
	return SENSOR_REQUEST_OK;
 8002b08:	2000      	movs	r0, #0
			mpu->acc_sensi = (float)1 / MPU6050_ACCE_SENS_8 ;
 8002b0a:	65a3      	str	r3, [r4, #88]	; 0x58
}
 8002b0c:	b007      	add	sp, #28
 8002b0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return SENSOR_REQUEST_OK;
 8002b12:	2000      	movs	r0, #0
 8002b14:	e7e5      	b.n	8002ae2 <MPU_init_acc+0x6e>
 8002b16:	bf00      	nop

08002b18 <MPU_update_all_dma>:
 */




sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 8002b18:	b510      	push	{r4, lr}

	mpu->hal_state = HAL_I2C_Mem_Read_DMA(mpu->hi2c, mpu->adresse, MPU6050_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, mpu->data, 14);
 8002b1a:	4603      	mov	r3, r0
sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 8002b1c:	b082      	sub	sp, #8
	mpu->hal_state = HAL_I2C_Mem_Read_DMA(mpu->hi2c, mpu->adresse, MPU6050_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, mpu->data, 14);
 8002b1e:	79c1      	ldrb	r1, [r0, #7]
sensor_request_e MPU_update_all_dma(mpu_t * mpu){
 8002b20:	4604      	mov	r4, r0
	mpu->hal_state = HAL_I2C_Mem_Read_DMA(mpu->hi2c, mpu->adresse, MPU6050_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, mpu->data, 14);
 8002b22:	f853 0b08 	ldr.w	r0, [r3], #8
 8002b26:	9300      	str	r3, [sp, #0]
 8002b28:	230e      	movs	r3, #14
 8002b2a:	9301      	str	r3, [sp, #4]
 8002b2c:	223b      	movs	r2, #59	; 0x3b
 8002b2e:	2301      	movs	r3, #1
 8002b30:	f001 ff28 	bl	8004984 <HAL_I2C_Mem_Read_DMA>
 8002b34:	7120      	strb	r0, [r4, #4]

	if(mpu->hal_state == HAL_OK)
 8002b36:	b138      	cbz	r0, 8002b48 <MPU_update_all_dma+0x30>
	{
		mpu->state = SENSOR_BUSY ;
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
	}
	else if(mpu->hal_state == HAL_BUSY)
 8002b38:	2802      	cmp	r0, #2
	{
		return SENSOR_REQUEST_BUSY;
	}
	else
	{
		mpu->state = SENSOR_ERROR ;
 8002b3a:	bf1b      	ittet	ne
 8002b3c:	2304      	movne	r3, #4
		return SENSOR_REQUEST_FAIL ;
 8002b3e:	2002      	movne	r0, #2
		return SENSOR_REQUEST_BUSY;
 8002b40:	2001      	moveq	r0, #1
		mpu->state = SENSOR_ERROR ;
 8002b42:	7163      	strbne	r3, [r4, #5]
	}

	return SENSOR_REQUEST_OK;
}
 8002b44:	b002      	add	sp, #8
 8002b46:	bd10      	pop	{r4, pc}
		mpu->state = SENSOR_BUSY ;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	7163      	strb	r3, [r4, #5]
		mpu->dma_state = MPU_DMA_ACC_AND_GYRO_IN_PROGRESS;
 8002b4c:	71a3      	strb	r3, [r4, #6]
}
 8002b4e:	b002      	add	sp, #8
 8002b50:	bd10      	pop	{r4, pc}
 8002b52:	bf00      	nop

08002b54 <HAL_I2C_MemRxCpltCallback>:



void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
	if(hi2c == I2C_handlers[0])
 8002b54:	4b6b      	ldr	r3, [pc, #428]	; (8002d04 <HAL_I2C_MemRxCpltCallback+0x1b0>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	4283      	cmp	r3, r0
 8002b5a:	d000      	beq.n	8002b5e <HAL_I2C_MemRxCpltCallback+0xa>
 8002b5c:	4770      	bx	lr
		MPU_dma_transmit_complete(mpu_handlers[0]);
 8002b5e:	4b6a      	ldr	r3, [pc, #424]	; (8002d08 <HAL_I2C_MemRxCpltCallback+0x1b4>)
{
 8002b60:	b570      	push	{r4, r5, r6, lr}
		MPU_dma_transmit_complete(mpu_handlers[0]);
 8002b62:	681c      	ldr	r4, [r3, #0]
	switch(mpu->dma_state){
 8002b64:	79a3      	ldrb	r3, [r4, #6]
 8002b66:	2b02      	cmp	r3, #2
 8002b68:	f000 8098 	beq.w	8002c9c <HAL_I2C_MemRxCpltCallback+0x148>
 8002b6c:	2b03      	cmp	r3, #3
 8002b6e:	d033      	beq.n	8002bd8 <HAL_I2C_MemRxCpltCallback+0x84>
 8002b70:	2b01      	cmp	r3, #1
 8002b72:	d12e      	bne.n	8002bd2 <HAL_I2C_MemRxCpltCallback+0x7e>
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[0] << 8 | mpu->gyro_data[1]);
 8002b74:	69a5      	ldr	r5, [r4, #24]
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8002b76:	ed94 6a0d 	vldr	s12, [r4, #52]	; 0x34
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[0] << 8 | mpu->gyro_data[1]);
 8002b7a:	782a      	ldrb	r2, [r5, #0]
 8002b7c:	786b      	ldrb	r3, [r5, #1]
			mpu->gyro_data_callback();
 8002b7e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[0] << 8 | mpu->gyro_data[1]);
 8002b80:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	83a3      	strh	r3, [r4, #28]
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[2] << 8 | mpu->gyro_data[3]);
 8002b88:	78a8      	ldrb	r0, [r5, #2]
 8002b8a:	78ea      	ldrb	r2, [r5, #3]
 8002b8c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002b90:	b212      	sxth	r2, r2
 8002b92:	83e2      	strh	r2, [r4, #30]
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[4] << 8 | mpu->gyro_data[5]);
 8002b94:	792e      	ldrb	r6, [r5, #4]
 8002b96:	7968      	ldrb	r0, [r5, #5]
 8002b98:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8002b9c:	b200      	sxth	r0, r0
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8002b9e:	ee07 0a90 	vmov	s15, r0
 8002ba2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8002ba6:	ee07 2a90 	vmov	s15, r2
 8002baa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8002bae:	ee07 3a90 	vmov	s15, r3
 8002bb2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8002bb6:	ee66 6a86 	vmul.f32	s13, s13, s12
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8002bba:	ee27 7a06 	vmul.f32	s14, s14, s12
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8002bbe:	ee67 7a86 	vmul.f32	s15, s15, s12
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[4] << 8 | mpu->gyro_data[5]);
 8002bc2:	8420      	strh	r0, [r4, #32]
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8002bc4:	edc4 6a0b 	vstr	s13, [r4, #44]	; 0x2c
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8002bc8:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8002bcc:	edc4 7a09 	vstr	s15, [r4, #36]	; 0x24
			mpu->gyro_data_callback();
 8002bd0:	4788      	blx	r1
	mpu->dma_state = MPU_DMA_IDDLE ;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	71a3      	strb	r3, [r4, #6]
}
 8002bd6:	bd70      	pop	{r4, r5, r6, pc}
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[0] << 8 | mpu->gyro_data[1]);
 8002bd8:	69a5      	ldr	r5, [r4, #24]
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8002bda:	edd4 5a0d 	vldr	s11, [r4, #52]	; 0x34
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[0] << 8 | mpu->gyro_data[1]);
 8002bde:	782b      	ldrb	r3, [r5, #0]
 8002be0:	786a      	ldrb	r2, [r5, #1]
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[0] << 8 | mpu->acc_data[1]);
 8002be2:	6be0      	ldr	r0, [r4, #60]	; 0x3c
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8002be4:	ed94 6a16 	vldr	s12, [r4, #88]	; 0x58
	mpu->gyro_raw[GYRO_AXE_X] = (int16_t)(mpu->gyro_data[0] << 8 | mpu->gyro_data[1]);
 8002be8:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8002bec:	b212      	sxth	r2, r2
 8002bee:	83a2      	strh	r2, [r4, #28]
	mpu->gyro_raw[GYRO_AXE_Y] = (int16_t)(mpu->gyro_data[2] << 8 | mpu->gyro_data[3]);
 8002bf0:	78a9      	ldrb	r1, [r5, #2]
 8002bf2:	78eb      	ldrb	r3, [r5, #3]
 8002bf4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002bf8:	b21b      	sxth	r3, r3
 8002bfa:	83e3      	strh	r3, [r4, #30]
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[4] << 8 | mpu->gyro_data[5]);
 8002bfc:	792e      	ldrb	r6, [r5, #4]
 8002bfe:	7969      	ldrb	r1, [r5, #5]
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8002c00:	ee07 2a10 	vmov	s14, r2
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[4] << 8 | mpu->gyro_data[5]);
 8002c04:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
 8002c08:	b209      	sxth	r1, r1
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8002c0a:	ee07 1a90 	vmov	s15, r1
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8002c0e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8002c12:	ee07 3a10 	vmov	s14, r3
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8002c16:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8002c1a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8002c1e:	ee67 7aa5 	vmul.f32	s15, s15, s11
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8002c22:	ee66 6aa5 	vmul.f32	s13, s13, s11
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8002c26:	ee27 7a25 	vmul.f32	s14, s14, s11
	mpu->gyro_raw[GYRO_AXE_Z] = (int16_t)(mpu->gyro_data[4] << 8 | mpu->gyro_data[5]);
 8002c2a:	8421      	strh	r1, [r4, #32]
	mpu->gyro[GYRO_AXE_Z] = (float)mpu->gyro_raw[GYRO_AXE_Z] * mpu->gyro_sensi ;
 8002c2c:	edc4 7a0b 	vstr	s15, [r4, #44]	; 0x2c
	mpu->gyro[GYRO_AXE_X] = (float)mpu->gyro_raw[GYRO_AXE_X] * mpu->gyro_sensi ;
 8002c30:	edc4 6a09 	vstr	s13, [r4, #36]	; 0x24
	mpu->gyro[GYRO_AXE_Y] = (float)mpu->gyro_raw[GYRO_AXE_Y] * mpu->gyro_sensi ;
 8002c34:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[0] << 8 | mpu->acc_data[1]);
 8002c38:	7802      	ldrb	r2, [r0, #0]
 8002c3a:	7843      	ldrb	r3, [r0, #1]
			mpu->gyro_data_callback();
 8002c3c:	6ba1      	ldr	r1, [r4, #56]	; 0x38
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[0] << 8 | mpu->acc_data[1]);
 8002c3e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002c42:	b21b      	sxth	r3, r3
 8002c44:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[2] << 8 | mpu->acc_data[3]);
 8002c48:	7885      	ldrb	r5, [r0, #2]
 8002c4a:	78c2      	ldrb	r2, [r0, #3]
 8002c4c:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8002c50:	b212      	sxth	r2, r2
 8002c52:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[4] << 8 | mpu->acc_data[5]);
 8002c56:	7905      	ldrb	r5, [r0, #4]
 8002c58:	7940      	ldrb	r0, [r0, #5]
 8002c5a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
 8002c5e:	b200      	sxth	r0, r0
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 8002c60:	ee07 0a90 	vmov	s15, r0
 8002c64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 8002c68:	ee07 2a90 	vmov	s15, r2
 8002c6c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8002c70:	ee07 3a90 	vmov	s15, r3
 8002c74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 8002c78:	ee66 6a86 	vmul.f32	s13, s13, s12
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 8002c7c:	ee27 7a06 	vmul.f32	s14, s14, s12
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8002c80:	ee67 7a86 	vmul.f32	s15, s15, s12
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[4] << 8 | mpu->acc_data[5]);
 8002c84:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 8002c88:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 8002c8c:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8002c90:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
			mpu->gyro_data_callback();
 8002c94:	4788      	blx	r1
			mpu->acc_data_callback();
 8002c96:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8002c98:	4798      	blx	r3
 8002c9a:	e79a      	b.n	8002bd2 <HAL_I2C_MemRxCpltCallback+0x7e>
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[0] << 8 | mpu->acc_data[1]);
 8002c9c:	6be5      	ldr	r5, [r4, #60]	; 0x3c
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8002c9e:	ed94 6a16 	vldr	s12, [r4, #88]	; 0x58
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[0] << 8 | mpu->acc_data[1]);
 8002ca2:	782a      	ldrb	r2, [r5, #0]
 8002ca4:	786b      	ldrb	r3, [r5, #1]
			mpu->acc_data_callback();
 8002ca6:	6de1      	ldr	r1, [r4, #92]	; 0x5c
	mpu->acc_raw[ACC_AXE_X] = (int16_t)(mpu->acc_data[0] << 8 | mpu->acc_data[1]);
 8002ca8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002cac:	b21b      	sxth	r3, r3
 8002cae:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
	mpu->acc_raw[ACC_AXE_Y] = (int16_t)(mpu->acc_data[2] << 8 | mpu->acc_data[3]);
 8002cb2:	78a8      	ldrb	r0, [r5, #2]
 8002cb4:	78ea      	ldrb	r2, [r5, #3]
 8002cb6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
 8002cba:	b212      	sxth	r2, r2
 8002cbc:	f8a4 2042 	strh.w	r2, [r4, #66]	; 0x42
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[4] << 8 | mpu->acc_data[5]);
 8002cc0:	792e      	ldrb	r6, [r5, #4]
 8002cc2:	7968      	ldrb	r0, [r5, #5]
 8002cc4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
 8002cc8:	b200      	sxth	r0, r0
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 8002cca:	ee07 0a90 	vmov	s15, r0
 8002cce:	eef8 6ae7 	vcvt.f32.s32	s13, s15
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 8002cd2:	ee07 2a90 	vmov	s15, r2
 8002cd6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 8002ce2:	ee66 6a86 	vmul.f32	s13, s13, s12
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 8002ce6:	ee27 7a06 	vmul.f32	s14, s14, s12
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8002cea:	ee67 7a86 	vmul.f32	s15, s15, s12
	mpu->acc_raw[ACC_AXE_Z] = (int16_t)(mpu->acc_data[4] << 8 | mpu->acc_data[5]);
 8002cee:	f8a4 0044 	strh.w	r0, [r4, #68]	; 0x44
	mpu->acc[ACC_AXE_Z] = (float)mpu->acc_raw[ACC_AXE_Z] * mpu->acc_sensi ;
 8002cf2:	edc4 6a14 	vstr	s13, [r4, #80]	; 0x50
	mpu->acc[ACC_AXE_Y] = (float)mpu->acc_raw[ACC_AXE_Y] * mpu->acc_sensi ;
 8002cf6:	ed84 7a13 	vstr	s14, [r4, #76]	; 0x4c
	mpu->acc[ACC_AXE_X] = (float)mpu->acc_raw[ACC_AXE_X] * mpu->acc_sensi ;
 8002cfa:	edc4 7a12 	vstr	s15, [r4, #72]	; 0x48
			mpu->acc_data_callback();
 8002cfe:	4788      	blx	r1
 8002d00:	e767      	b.n	8002bd2 <HAL_I2C_MemRxCpltCallback+0x7e>
 8002d02:	bf00      	nop
 8002d04:	20001c04 	.word	0x20001c04
 8002d08:	20001c08 	.word	0x20001c08

08002d0c <STATE_SPACE_Init>:
	//State space matrix
	ss->A = A ;

	//Set state vector initial values

	for(int i = 0; i < A->numCols; i++)
 8002d0c:	884b      	ldrh	r3, [r1, #2]
void STATE_SPACE_Init(state_space_t * ss, arm_matrix_instance_f32 * A, float32_t * init_value){
 8002d0e:	b510      	push	{r4, lr}
 8002d10:	4604      	mov	r4, r0
	ss->A = A ;
 8002d12:	6001      	str	r1, [r0, #0]
	for(int i = 0; i < A->numCols; i++)
 8002d14:	b12b      	cbz	r3, 8002d22 <STATE_SPACE_Init+0x16>
		ss->X_array[i] = init_value[i];
 8002d16:	6811      	ldr	r1, [r2, #0]
 8002d18:	6141      	str	r1, [r0, #20]
	for(int i = 0; i < A->numCols; i++)
 8002d1a:	2b01      	cmp	r3, #1
		ss->X_array[i] = init_value[i];
 8002d1c:	bf84      	itt	hi
 8002d1e:	6852      	ldrhi	r2, [r2, #4]
 8002d20:	6182      	strhi	r2, [r0, #24]
	arm_mat_init_f32(&ss->X, A->numCols, 1, ss->X_array);
 8002d22:	4619      	mov	r1, r3
 8002d24:	2201      	movs	r2, #1
 8002d26:	f104 0314 	add.w	r3, r4, #20
 8002d2a:	f104 000c 	add.w	r0, r4, #12
 8002d2e:	f003 faf3 	bl	8006318 <arm_mat_init_f32>


	//Arm error set to false
	ss->arm_error = 0;
 8002d32:	2300      	movs	r3, #0
 8002d34:	7723      	strb	r3, [r4, #28]


}
 8002d36:	bd10      	pop	{r4, pc}

08002d38 <STATE_SPACE_Step>:
void STATE_SPACE_Step(state_space_t * ss){

	if(arm_mat_mult_f32(ss->A, &ss->X, &ss->X) != ARM_MATH_SUCCESS){
 8002d38:	f100 020c 	add.w	r2, r0, #12
void STATE_SPACE_Step(state_space_t * ss){
 8002d3c:	b510      	push	{r4, lr}
	if(arm_mat_mult_f32(ss->A, &ss->X, &ss->X) != ARM_MATH_SUCCESS){
 8002d3e:	4611      	mov	r1, r2
void STATE_SPACE_Step(state_space_t * ss){
 8002d40:	4604      	mov	r4, r0
	if(arm_mat_mult_f32(ss->A, &ss->X, &ss->X) != ARM_MATH_SUCCESS){
 8002d42:	6800      	ldr	r0, [r0, #0]
 8002d44:	f003 fa42 	bl	80061cc <arm_mat_mult_f32>
 8002d48:	b108      	cbz	r0, 8002d4e <STATE_SPACE_Step+0x16>
		ss->arm_error = 1 ;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	7723      	strb	r3, [r4, #28]
	}
}
 8002d4e:	bd10      	pop	{r4, pc}

08002d50 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002d50:	b510      	push	{r4, lr}
 8002d52:	b082      	sub	sp, #8

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002d54:	2400      	movs	r4, #0
 8002d56:	4b1c      	ldr	r3, [pc, #112]	; (8002dc8 <MX_DMA_Init+0x78>)
 8002d58:	9400      	str	r4, [sp, #0]
 8002d5a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d5c:	f442 1200 	orr.w	r2, r2, #2097152	; 0x200000
 8002d60:	631a      	str	r2, [r3, #48]	; 0x30
 8002d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d64:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002d68:	9200      	str	r2, [sp, #0]
 8002d6a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d6c:	9401      	str	r4, [sp, #4]
 8002d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d70:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8002d74:	631a      	str	r2, [r3, #48]	; 0x30
 8002d76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d78:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d7c:	4622      	mov	r2, r4
 8002d7e:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d80:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d82:	200b      	movs	r0, #11
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002d84:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002d86:	f000 fd7b 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002d8a:	200b      	movs	r0, #11
 8002d8c:	f000 fdae 	bl	80038ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8002d90:	4622      	mov	r2, r4
 8002d92:	4621      	mov	r1, r4
 8002d94:	2011      	movs	r0, #17
 8002d96:	f000 fd73 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002d9a:	2011      	movs	r0, #17
 8002d9c:	f000 fda6 	bl	80038ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002da0:	4622      	mov	r2, r4
 8002da2:	4621      	mov	r1, r4
 8002da4:	203a      	movs	r0, #58	; 0x3a
 8002da6:	f000 fd6b 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002daa:	203a      	movs	r0, #58	; 0x3a
 8002dac:	f000 fd9e 	bl	80038ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 0, 0);
 8002db0:	4622      	mov	r2, r4
 8002db2:	4621      	mov	r1, r4
 8002db4:	2046      	movs	r0, #70	; 0x46
 8002db6:	f000 fd63 	bl	8003880 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002dba:	2046      	movs	r0, #70	; 0x46

}
 8002dbc:	b002      	add	sp, #8
 8002dbe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8002dc2:	f000 bd93 	b.w	80038ec <HAL_NVIC_EnableIRQ>
 8002dc6:	bf00      	nop
 8002dc8:	40023800 	.word	0x40023800

08002dcc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002dcc:	b084      	sub	sp, #16

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002dce:	4b11      	ldr	r3, [pc, #68]	; (8002e14 <MX_GPIO_Init+0x48>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	9201      	str	r2, [sp, #4]
 8002dd4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dd6:	f041 0110 	orr.w	r1, r1, #16
 8002dda:	6319      	str	r1, [r3, #48]	; 0x30
 8002ddc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dde:	f001 0110 	and.w	r1, r1, #16
 8002de2:	9101      	str	r1, [sp, #4]
 8002de4:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002de6:	9202      	str	r2, [sp, #8]
 8002de8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dea:	f041 0101 	orr.w	r1, r1, #1
 8002dee:	6319      	str	r1, [r3, #48]	; 0x30
 8002df0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002df2:	f001 0101 	and.w	r1, r1, #1
 8002df6:	9102      	str	r1, [sp, #8]
 8002df8:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfa:	9203      	str	r2, [sp, #12]
 8002dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dfe:	f042 0202 	orr.w	r2, r2, #2
 8002e02:	631a      	str	r2, [r3, #48]	; 0x30
 8002e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	9303      	str	r3, [sp, #12]
 8002e0c:	9b03      	ldr	r3, [sp, #12]

}
 8002e0e:	b004      	add	sp, #16
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	40023800 	.word	0x40023800

08002e18 <MX_I2C1_Init>:

/* I2C1 init function */
void MX_I2C1_Init(void)
{

  hi2c1.Instance = I2C1;
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <MX_I2C1_Init+0x34>)
 8002e1a:	4a0d      	ldr	r2, [pc, #52]	; (8002e50 <MX_I2C1_Init+0x38>)
{
 8002e1c:	b510      	push	{r4, lr}
  hi2c1.Init.ClockSpeed = 400000;
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e1e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
  hi2c1.Init.ClockSpeed = 400000;
 8002e22:	4c0c      	ldr	r4, [pc, #48]	; (8002e54 <MX_I2C1_Init+0x3c>)
  hi2c1.Instance = I2C1;
 8002e24:	601a      	str	r2, [r3, #0]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e26:	4618      	mov	r0, r3
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e28:	2200      	movs	r2, #0
  hi2c1.Init.ClockSpeed = 400000;
 8002e2a:	605c      	str	r4, [r3, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e2c:	6119      	str	r1, [r3, #16]
  hi2c1.Init.OwnAddress1 = 0;
 8002e2e:	e9c3 2202 	strd	r2, r2, [r3, #8]
  hi2c1.Init.OwnAddress2 = 0;
 8002e32:	e9c3 2205 	strd	r2, r2, [r3, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e36:	e9c3 2207 	strd	r2, r2, [r3, #28]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002e3a:	f001 fa6b 	bl	8004314 <HAL_I2C_Init>
 8002e3e:	b900      	cbnz	r0, 8002e42 <MX_I2C1_Init+0x2a>
  {
    Error_Handler();
  }

}
 8002e40:	bd10      	pop	{r4, pc}
 8002e42:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 8002e46:	f000 b943 	b.w	80030d0 <Error_Handler>
 8002e4a:	bf00      	nop
 8002e4c:	20001c8c 	.word	0x20001c8c
 8002e50:	40005400 	.word	0x40005400
 8002e54:	00061a80 	.word	0x00061a80

08002e58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002e58:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(i2cHandle->Instance==I2C1)
 8002e5a:	6802      	ldr	r2, [r0, #0]
 8002e5c:	4b33      	ldr	r3, [pc, #204]	; (8002f2c <HAL_I2C_MspInit+0xd4>)
{
 8002e5e:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e60:	2400      	movs	r4, #0
  if(i2cHandle->Instance==I2C1)
 8002e62:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e64:	e9cd 4403 	strd	r4, r4, [sp, #12]
 8002e68:	e9cd 4405 	strd	r4, r4, [sp, #20]
 8002e6c:	9407      	str	r4, [sp, #28]
  if(i2cHandle->Instance==I2C1)
 8002e6e:	d001      	beq.n	8002e74 <HAL_I2C_MspInit+0x1c>

  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002e70:	b009      	add	sp, #36	; 0x24
 8002e72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e74:	4f2e      	ldr	r7, [pc, #184]	; (8002f30 <HAL_I2C_MspInit+0xd8>)
 8002e76:	9401      	str	r4, [sp, #4]
 8002e78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e7a:	f043 0302 	orr.w	r3, r3, #2
 8002e7e:	633b      	str	r3, [r7, #48]	; 0x30
 8002e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e82:	f003 0302 	and.w	r3, r3, #2
 8002e86:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e88:	f44f 7340 	mov.w	r3, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e8c:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002e8e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e90:	2212      	movs	r2, #18
 8002e92:	2301      	movs	r3, #1
 8002e94:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e98:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	2503      	movs	r5, #3
 8002e9e:	4606      	mov	r6, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea0:	4824      	ldr	r0, [pc, #144]	; (8002f34 <HAL_I2C_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ea2:	e9cd 5306 	strd	r5, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ea6:	f000 ff0b 	bl	8003cc0 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eaa:	9402      	str	r4, [sp, #8]
 8002eac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002eae:	4d22      	ldr	r5, [pc, #136]	; (8002f38 <HAL_I2C_MspInit+0xe0>)
 8002eb0:	4922      	ldr	r1, [pc, #136]	; (8002f3c <HAL_I2C_MspInit+0xe4>)
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002eb2:	60ac      	str	r4, [r5, #8]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002eb4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8002eba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ebc:	60ec      	str	r4, [r5, #12]
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ebe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ec2:	9302      	str	r3, [sp, #8]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ec8:	f44f 6380 	mov.w	r3, #1024	; 0x400
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ecc:	9802      	ldr	r0, [sp, #8]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ece:	626c      	str	r4, [r5, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002ed0:	4628      	mov	r0, r5
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ed2:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002ed6:	e9c5 4407 	strd	r4, r4, [r5, #28]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002eda:	e9c5 1200 	strd	r1, r2, [r5]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ede:	612b      	str	r3, [r5, #16]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002ee0:	f000 fd2c 	bl	800393c <HAL_DMA_Init>
 8002ee4:	b9d8      	cbnz	r0, 8002f1e <HAL_I2C_MspInit+0xc6>
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002ee6:	4c16      	ldr	r4, [pc, #88]	; (8002f40 <HAL_I2C_MspInit+0xe8>)
 8002ee8:	4816      	ldr	r0, [pc, #88]	; (8002f44 <HAL_I2C_MspInit+0xec>)
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002eea:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002eec:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002ef0:	2140      	movs	r1, #64	; 0x40
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002ef2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8002ef6:	6020      	str	r0, [r4, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8002ef8:	6063      	str	r3, [r4, #4]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002efa:	4620      	mov	r0, r4
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002efc:	2300      	movs	r3, #0
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002efe:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002f00:	60a1      	str	r1, [r4, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002f02:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002f06:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002f0a:	e9c4 3307 	strd	r3, r3, [r4, #28]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002f0e:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8002f10:	f000 fd14 	bl	800393c <HAL_DMA_Init>
 8002f14:	b930      	cbnz	r0, 8002f24 <HAL_I2C_MspInit+0xcc>
    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8002f16:	6374      	str	r4, [r6, #52]	; 0x34
 8002f18:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8002f1a:	b009      	add	sp, #36	; 0x24
 8002f1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      Error_Handler();
 8002f1e:	f000 f8d7 	bl	80030d0 <Error_Handler>
 8002f22:	e7e0      	b.n	8002ee6 <HAL_I2C_MspInit+0x8e>
      Error_Handler();
 8002f24:	f000 f8d4 	bl	80030d0 <Error_Handler>
 8002f28:	e7f5      	b.n	8002f16 <HAL_I2C_MspInit+0xbe>
 8002f2a:	bf00      	nop
 8002f2c:	40005400 	.word	0x40005400
 8002f30:	40023800 	.word	0x40023800
 8002f34:	40020400 	.word	0x40020400
 8002f38:	20001ce0 	.word	0x20001ce0
 8002f3c:	40026010 	.word	0x40026010
 8002f40:	20001c2c 	.word	0x20001c2c
 8002f44:	400260a0 	.word	0x400260a0

08002f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f48:	b570      	push	{r4, r5, r6, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f4a:	2300      	movs	r3, #0
{
 8002f4c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f4e:	e9cd 330b 	strd	r3, r3, [sp, #44]	; 0x2c
 8002f52:	e9cd 3309 	strd	r3, r3, [sp, #36]	; 0x24
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f56:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8002f5a:	e9cd 3306 	strd	r3, r3, [sp, #24]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f5e:	4920      	ldr	r1, [pc, #128]	; (8002fe0 <SystemClock_Config+0x98>)
 8002f60:	9301      	str	r3, [sp, #4]
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f62:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f64:	9303      	str	r3, [sp, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f68:	4a1e      	ldr	r2, [pc, #120]	; (8002fe4 <SystemClock_Config+0x9c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8002f6a:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8002f6e:	6408      	str	r0, [r1, #64]	; 0x40
 8002f70:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002f72:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8002f76:	9101      	str	r1, [sp, #4]
 8002f78:	9901      	ldr	r1, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f7a:	9302      	str	r3, [sp, #8]
 8002f7c:	6811      	ldr	r1, [r2, #0]
 8002f7e:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8002f82:	6011      	str	r1, [r2, #0]
 8002f84:	6812      	ldr	r2, [r2, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002f86:	930f      	str	r3, [sp, #60]	; 0x3c
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f88:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f8c:	2301      	movs	r3, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f8e:	2010      	movs	r0, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002f90:	2402      	movs	r4, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002f92:	9202      	str	r2, [sp, #8]
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002f94:	2108      	movs	r1, #8
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002f96:	22a8      	movs	r2, #168	; 0xa8
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002f98:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002f9a:	900c      	str	r0, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002f9c:	2304      	movs	r3, #4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002f9e:	a808      	add	r0, sp, #32
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002fa0:	9d02      	ldr	r5, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002fa2:	9408      	str	r4, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fa4:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002fa6:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002fa8:	e9cd 1210 	strd	r1, r2, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8002fac:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002fae:	f001 fe81 	bl	8004cb4 <HAL_RCC_OscConfig>
 8002fb2:	b108      	cbz	r0, 8002fb8 <SystemClock_Config+0x70>
  __ASM volatile ("cpsid i" : : : "memory");
 8002fb4:	b672      	cpsid	i
 8002fb6:	e7fe      	b.n	8002fb6 <SystemClock_Config+0x6e>
 8002fb8:	4603      	mov	r3, r0
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fba:	260f      	movs	r6, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002fbc:	f44f 55a0 	mov.w	r5, #5120	; 0x1400
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fc0:	f44f 5280 	mov.w	r2, #4096	; 0x1000

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002fc4:	a803      	add	r0, sp, #12
 8002fc6:	2105      	movs	r1, #5
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002fc8:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002fca:	9305      	str	r3, [sp, #20]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002fcc:	9603      	str	r6, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002fce:	e9cd 5206 	strd	r5, r2, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002fd2:	f002 f883 	bl	80050dc <HAL_RCC_ClockConfig>
 8002fd6:	b108      	cbz	r0, 8002fdc <SystemClock_Config+0x94>
 8002fd8:	b672      	cpsid	i
 8002fda:	e7fe      	b.n	8002fda <SystemClock_Config+0x92>
  {
    Error_Handler();
  }
}
 8002fdc:	b014      	add	sp, #80	; 0x50
 8002fde:	bd70      	pop	{r4, r5, r6, pc}
 8002fe0:	40023800 	.word	0x40023800
 8002fe4:	40007000 	.word	0x40007000

08002fe8 <main>:
{
 8002fe8:	b508      	push	{r3, lr}
  HAL_Init();
 8002fea:	f000 fbf9 	bl	80037e0 <HAL_Init>
  SystemClock_Config();
 8002fee:	f7ff ffab 	bl	8002f48 <SystemClock_Config>
  MX_GPIO_Init();
 8002ff2:	f7ff feeb 	bl	8002dcc <MX_GPIO_Init>
  MX_DMA_Init();
 8002ff6:	f7ff feab 	bl	8002d50 <MX_DMA_Init>
  MX_I2C1_Init();
 8002ffa:	f7ff ff0d 	bl	8002e18 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 8002ffe:	f000 f9b1 	bl	8003364 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8003002:	f000 f8fd 	bl	8003200 <MX_TIM1_Init>
	HAL_Delay(200);	//Let the time for the components to start
 8003006:	20c8      	movs	r0, #200	; 0xc8
 8003008:	f000 fc16 	bl	8003838 <HAL_Delay>
	MPU_init(&sys.sensors.mpu, &hi2c1);
 800300c:	4924      	ldr	r1, [pc, #144]	; (80030a0 <main+0xb8>)
 800300e:	4825      	ldr	r0, [pc, #148]	; (80030a4 <main+0xbc>)
 8003010:	f7ff fc8a 	bl	8002928 <MPU_init>
	HAL_Delay(20);	//Let the time for the components to start
 8003014:	2014      	movs	r0, #20
 8003016:	f000 fc0f 	bl	8003838 <HAL_Delay>
	GYRO_init(&sys.sensors.gyro, &sys.sensors.mpu);
 800301a:	4922      	ldr	r1, [pc, #136]	; (80030a4 <main+0xbc>)
 800301c:	f1a1 00e8 	sub.w	r0, r1, #232	; 0xe8
 8003020:	f7ff fc0e 	bl	8002840 <GYRO_init>
	HAL_Delay(20);	//Let the time for the components to start
 8003024:	2014      	movs	r0, #20
 8003026:	f000 fc07 	bl	8003838 <HAL_Delay>
	ACC_init(&sys.sensors.acc, &sys.sensors.mpu);
 800302a:	491e      	ldr	r1, [pc, #120]	; (80030a4 <main+0xbc>)
 800302c:	f1a1 0074 	sub.w	r0, r1, #116	; 0x74
 8003030:	f7ff fb9e 	bl	8002770 <ACC_init>
	ORIENTATION_Init(&sys.orientation, &sys.sensors.gyro, &sys.sensors.acc, GYRO_FREQUENCY);
 8003034:	4a1c      	ldr	r2, [pc, #112]	; (80030a8 <main+0xc0>)
 8003036:	f1a2 0174 	sub.w	r1, r2, #116	; 0x74
 800303a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 800303e:	f501 70ae 	add.w	r0, r1, #348	; 0x15c
 8003042:	f7fe fac1 	bl	80015c8 <ORIENTATION_Init>
	TELEMETRY_Init(&sys.telemetry, &huart1);
 8003046:	4919      	ldr	r1, [pc, #100]	; (80030ac <main+0xc4>)
 8003048:	4819      	ldr	r0, [pc, #100]	; (80030b0 <main+0xc8>)
 800304a:	f000 fa51 	bl	80034f0 <TELEMETRY_Init>
	DATA_LOGGER_Init(&sys);
 800304e:	4819      	ldr	r0, [pc, #100]	; (80030b4 <main+0xcc>)
 8003050:	f7fd ff26 	bl	8000ea0 <DATA_LOGGER_Init>
	REGULATION_ORIENTATION_Init(&sys.regulation, &sys.orientation, &sys.prop.thrust_consigne[0]);
 8003054:	4a18      	ldr	r2, [pc, #96]	; (80030b8 <main+0xd0>)
 8003056:	f5a2 71fc 	sub.w	r1, r2, #504	; 0x1f8
 800305a:	f501 7098 	add.w	r0, r1, #304	; 0x130
 800305e:	f7ff fb47 	bl	80026f0 <REGULATION_ORIENTATION_Init>
	HIGH_LVL_Init(&sys);
 8003062:	4814      	ldr	r0, [pc, #80]	; (80030b4 <main+0xcc>)
 8003064:	f7fe fbb6 	bl	80017d4 <HIGH_LVL_Init>
	MOTORS_Init(&sys.prop.motors, &htim1, sys.prop.thrust_consigne, TRUE);
 8003068:	4a13      	ldr	r2, [pc, #76]	; (80030b8 <main+0xd0>)
 800306a:	4914      	ldr	r1, [pc, #80]	; (80030bc <main+0xd4>)
 800306c:	f1a2 0010 	sub.w	r0, r2, #16
 8003070:	2301      	movs	r3, #1
 8003072:	f003 f843 	bl	80060fc <MOTORS_Init>
	arm_mat_init_f32(&A, 2, 2, A_array);
 8003076:	2202      	movs	r2, #2
 8003078:	4611      	mov	r1, r2
 800307a:	4b11      	ldr	r3, [pc, #68]	; (80030c0 <main+0xd8>)
 800307c:	4811      	ldr	r0, [pc, #68]	; (80030c4 <main+0xdc>)
 800307e:	f003 f94b 	bl	8006318 <arm_mat_init_f32>
	STATE_SPACE_Init(&sys.state_space, &A, X_init);
 8003082:	4a11      	ldr	r2, [pc, #68]	; (80030c8 <main+0xe0>)
 8003084:	490f      	ldr	r1, [pc, #60]	; (80030c4 <main+0xdc>)
 8003086:	4811      	ldr	r0, [pc, #68]	; (80030cc <main+0xe4>)
 8003088:	f7ff fe40 	bl	8002d0c <STATE_SPACE_Init>
	SCHEDULER_init(&sys);
 800308c:	4809      	ldr	r0, [pc, #36]	; (80030b4 <main+0xcc>)
 800308e:	f7fe fe09 	bl	8001ca4 <SCHEDULER_init>
	EVENT_init(&sys);
 8003092:	4808      	ldr	r0, [pc, #32]	; (80030b4 <main+0xcc>)
 8003094:	f7fe fccc 	bl	8001a30 <EVENT_init>
	  SCHEDULER_run();
 8003098:	f7fe fe0e 	bl	8001cb8 <SCHEDULER_run>
 800309c:	e7fc      	b.n	8003098 <main+0xb0>
 800309e:	bf00      	nop
 80030a0:	20001c8c 	.word	0x20001c8c
 80030a4:	20001e28 	.word	0x20001e28
 80030a8:	20001db4 	.word	0x20001db4
 80030ac:	20002504 	.word	0x20002504
 80030b0:	2000209c 	.word	0x2000209c
 80030b4:	20001d40 	.word	0x20001d40
 80030b8:	20002094 	.word	0x20002094
 80030bc:	20002404 	.word	0x20002404
 80030c0:	200016b4 	.word	0x200016b4
 80030c4:	20001c10 	.word	0x20001c10
 80030c8:	200016c4 	.word	0x200016c4
 80030cc:	200023e0 	.word	0x200023e0

080030d0 <Error_Handler>:
 80030d0:	b672      	cpsid	i
 80030d2:	e7fe      	b.n	80030d2 <Error_Handler+0x2>

080030d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d6:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <HAL_MspInit+0x34>)
 80030d8:	2100      	movs	r1, #0
 80030da:	9100      	str	r1, [sp, #0]
 80030dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030e2:	645a      	str	r2, [r3, #68]	; 0x44
 80030e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80030e6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80030ea:	9200      	str	r2, [sp, #0]
 80030ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030ee:	9101      	str	r1, [sp, #4]
 80030f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030f2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80030f6:	641a      	str	r2, [r3, #64]	; 0x40
 80030f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003102:	b002      	add	sp, #8
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40023800 	.word	0x40023800

0800310c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800310c:	e7fe      	b.n	800310c <NMI_Handler>
 800310e:	bf00      	nop

08003110 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003110:	e7fe      	b.n	8003110 <HardFault_Handler>
 8003112:	bf00      	nop

08003114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003114:	e7fe      	b.n	8003114 <MemManage_Handler>
 8003116:	bf00      	nop

08003118 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003118:	e7fe      	b.n	8003118 <BusFault_Handler>
 800311a:	bf00      	nop

0800311c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800311c:	e7fe      	b.n	800311c <UsageFault_Handler>
 800311e:	bf00      	nop

08003120 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003120:	4770      	bx	lr
 8003122:	bf00      	nop

08003124 <DebugMon_Handler>:
 8003124:	4770      	bx	lr
 8003126:	bf00      	nop

08003128 <PendSV_Handler>:
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop

0800312c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800312c:	f000 bb72 	b.w	8003814 <HAL_IncTick>

08003130 <DMA1_Stream0_IRQHandler>:
void DMA1_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003130:	4801      	ldr	r0, [pc, #4]	; (8003138 <DMA1_Stream0_IRQHandler+0x8>)
 8003132:	f000 bced 	b.w	8003b10 <HAL_DMA_IRQHandler>
 8003136:	bf00      	nop
 8003138:	20001ce0 	.word	0x20001ce0

0800313c <DMA1_Stream6_IRQHandler>:
void DMA1_Stream6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800313c:	4801      	ldr	r0, [pc, #4]	; (8003144 <DMA1_Stream6_IRQHandler+0x8>)
 800313e:	f000 bce7 	b.w	8003b10 <HAL_DMA_IRQHandler>
 8003142:	bf00      	nop
 8003144:	20001c2c 	.word	0x20001c2c

08003148 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003148:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800314a:	4c0a      	ldr	r4, [pc, #40]	; (8003174 <USART1_IRQHandler+0x2c>)
{
 800314c:	b082      	sub	sp, #8
  HAL_UART_IRQHandler(&huart1);
 800314e:	4620      	mov	r0, r4
 8003150:	f002 fed6 	bl	8005f00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
	if(__HAL_UART_GET_FLAG(&huart1, UART_FLAG_IDLE)){
 8003154:	6823      	ldr	r3, [r4, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	06db      	lsls	r3, r3, #27
 800315a:	d509      	bpl.n	8003170 <USART1_IRQHandler+0x28>
	  TELEMETRY_Idle_Line_Detection();
 800315c:	f000 fae2 	bl	8003724 <TELEMETRY_Idle_Line_Detection>
	  __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8003160:	6823      	ldr	r3, [r4, #0]
 8003162:	2200      	movs	r2, #0
 8003164:	9201      	str	r2, [sp, #4]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	9201      	str	r2, [sp, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	9301      	str	r3, [sp, #4]
 800316e:	9b01      	ldr	r3, [sp, #4]
	}
  /* USER CODE END USART1_IRQn 1 */
}
 8003170:	b002      	add	sp, #8
 8003172:	bd10      	pop	{r4, pc}
 8003174:	20002504 	.word	0x20002504

08003178 <DMA2_Stream2_IRQHandler>:
void DMA2_Stream2_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003178:	4801      	ldr	r0, [pc, #4]	; (8003180 <DMA2_Stream2_IRQHandler+0x8>)
 800317a:	f000 bcc9 	b.w	8003b10 <HAL_DMA_IRQHandler>
 800317e:	bf00      	nop
 8003180:	200024a4 	.word	0x200024a4

08003184 <DMA2_Stream7_IRQHandler>:
void DMA2_Stream7_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003184:	4801      	ldr	r0, [pc, #4]	; (800318c <DMA2_Stream7_IRQHandler+0x8>)
 8003186:	f000 bcc3 	b.w	8003b10 <HAL_DMA_IRQHandler>
 800318a:	bf00      	nop
 800318c:	20002444 	.word	0x20002444

08003190 <HAL_UART_TxCpltCallback>:
}

/* USER CODE BEGIN 1 */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 if(huart == &huart1){
 8003190:	4b02      	ldr	r3, [pc, #8]	; (800319c <HAL_UART_TxCpltCallback+0xc>)
 8003192:	4283      	cmp	r3, r0
 8003194:	d000      	beq.n	8003198 <HAL_UART_TxCpltCallback+0x8>
	 TELEMETRY_TxCpltCallback();
 }
}
 8003196:	4770      	bx	lr
	 TELEMETRY_TxCpltCallback();
 8003198:	f000 bad2 	b.w	8003740 <TELEMETRY_TxCpltCallback>
 800319c:	20002504 	.word	0x20002504

080031a0 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031a0:	490c      	ldr	r1, [pc, #48]	; (80031d4 <_sbrk+0x34>)
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a2:	4a0d      	ldr	r2, [pc, #52]	; (80031d8 <_sbrk+0x38>)
  if (NULL == __sbrk_heap_end)
 80031a4:	680b      	ldr	r3, [r1, #0]
{
 80031a6:	b510      	push	{r4, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031a8:	4c0c      	ldr	r4, [pc, #48]	; (80031dc <_sbrk+0x3c>)
 80031aa:	1b12      	subs	r2, r2, r4
  if (NULL == __sbrk_heap_end)
 80031ac:	b12b      	cbz	r3, 80031ba <_sbrk+0x1a>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031ae:	4418      	add	r0, r3
 80031b0:	4290      	cmp	r0, r2
 80031b2:	d807      	bhi.n	80031c4 <_sbrk+0x24>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 80031b4:	6008      	str	r0, [r1, #0]

  return (void *)prev_heap_end;
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	bd10      	pop	{r4, pc}
    __sbrk_heap_end = &_end;
 80031ba:	4b09      	ldr	r3, [pc, #36]	; (80031e0 <_sbrk+0x40>)
 80031bc:	600b      	str	r3, [r1, #0]
  if (__sbrk_heap_end + incr > max_heap)
 80031be:	4418      	add	r0, r3
 80031c0:	4290      	cmp	r0, r2
 80031c2:	d9f7      	bls.n	80031b4 <_sbrk+0x14>
    errno = ENOMEM;
 80031c4:	f003 f8ac 	bl	8006320 <__errno>
 80031c8:	230c      	movs	r3, #12
 80031ca:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80031cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80031d0:	4618      	mov	r0, r3
 80031d2:	bd10      	pop	{r4, pc}
 80031d4:	20001c18 	.word	0x20001c18
 80031d8:	20020000 	.word	0x20020000
 80031dc:	00000400 	.word	0x00000400
 80031e0:	20002550 	.word	0x20002550

080031e4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031e4:	4b05      	ldr	r3, [pc, #20]	; (80031fc <SystemInit+0x18>)
 80031e6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031ea:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031ee:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 80031f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80031f6:	6099      	str	r1, [r3, #8]
#endif
}
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	e000ed00 	.word	0xe000ed00

08003200 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003200:	b530      	push	{r4, r5, lr}
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003202:	2400      	movs	r4, #0
{
 8003204:	b09d      	sub	sp, #116	; 0x74
  TIM_MasterConfigTypeDef sMasterConfig = {0};
  TIM_OC_InitTypeDef sConfigOC = {0};
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};

  htim1.Instance = TIM1;
 8003206:	4d48      	ldr	r5, [pc, #288]	; (8003328 <MX_TIM1_Init+0x128>)
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003208:	9405      	str	r4, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800320a:	4621      	mov	r1, r4
 800320c:	2220      	movs	r2, #32
 800320e:	a814      	add	r0, sp, #80	; 0x50
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003210:	9404      	str	r4, [sp, #16]
 8003212:	e9cd 4406 	strd	r4, r4, [sp, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003216:	9402      	str	r4, [sp, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003218:	940d      	str	r4, [sp, #52]	; 0x34
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800321a:	9403      	str	r4, [sp, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800321c:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
 8003220:	e9cd 4410 	strd	r4, r4, [sp, #64]	; 0x40
 8003224:	e9cd 4412 	strd	r4, r4, [sp, #72]	; 0x48
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003228:	f003 f8c8 	bl	80063bc <memset>
  htim1.Instance = TIM1;
 800322c:	483f      	ldr	r0, [pc, #252]	; (800332c <MX_TIM1_Init+0x12c>)
 800322e:	6028      	str	r0, [r5, #0]
  htim1.Init.Prescaler = 167;
 8003230:	21a7      	movs	r1, #167	; 0xa7
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim1.Init.Period = 3999;
 8003232:	f640 729f 	movw	r2, #3999	; 0xf9f
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim1.Init.RepetitionCounter = 0;
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003236:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003238:	4628      	mov	r0, r5
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800323a:	60ac      	str	r4, [r5, #8]
  htim1.Init.RepetitionCounter = 0;
 800323c:	e9c5 4404 	strd	r4, r4, [r5, #16]
  htim1.Init.Prescaler = 167;
 8003240:	6069      	str	r1, [r5, #4]
  htim1.Init.Period = 3999;
 8003242:	60ea      	str	r2, [r5, #12]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003244:	61ab      	str	r3, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8003246:	f002 f807 	bl	8005258 <HAL_TIM_Base_Init>
 800324a:	2800      	cmp	r0, #0
 800324c:	d14f      	bne.n	80032ee <MX_TIM1_Init+0xee>
  {
    Error_Handler();
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800324e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003252:	a904      	add	r1, sp, #16
 8003254:	4834      	ldr	r0, [pc, #208]	; (8003328 <MX_TIM1_Init+0x128>)
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003256:	9304      	str	r3, [sp, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003258:	f002 fa3c 	bl	80056d4 <HAL_TIM_ConfigClockSource>
 800325c:	2800      	cmp	r0, #0
 800325e:	d143      	bne.n	80032e8 <MX_TIM1_Init+0xe8>
  {
    Error_Handler();
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8003260:	4831      	ldr	r0, [pc, #196]	; (8003328 <MX_TIM1_Init+0x128>)
 8003262:	f002 f87f 	bl	8005364 <HAL_TIM_PWM_Init>
 8003266:	2800      	cmp	r0, #0
 8003268:	d13b      	bne.n	80032e2 <MX_TIM1_Init+0xe2>
  {
    Error_Handler();
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800326a:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800326c:	a902      	add	r1, sp, #8
 800326e:	482e      	ldr	r0, [pc, #184]	; (8003328 <MX_TIM1_Init+0x128>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003270:	e9cd 3302 	strd	r3, r3, [sp, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8003274:	f002 fad4 	bl	8005820 <HAL_TIMEx_MasterConfigSynchronization>
 8003278:	bb80      	cbnz	r0, 80032dc <MX_TIM1_Init+0xdc>
  {
    Error_Handler();
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
  sConfigOC.Pulse = 999;
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800327a:	2300      	movs	r3, #0
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800327c:	2060      	movs	r0, #96	; 0x60
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800327e:	461a      	mov	r2, r3
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8003280:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8003284:	e9cd 3311 	strd	r3, r3, [sp, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8003288:	9313      	str	r3, [sp, #76]	; 0x4c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800328a:	900d      	str	r0, [sp, #52]	; 0x34
  sConfigOC.Pulse = 999;
 800328c:	f240 33e7 	movw	r3, #999	; 0x3e7
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003290:	a90d      	add	r1, sp, #52	; 0x34
 8003292:	4825      	ldr	r0, [pc, #148]	; (8003328 <MX_TIM1_Init+0x128>)
  sConfigOC.Pulse = 999;
 8003294:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003296:	f002 f913 	bl	80054c0 <HAL_TIM_PWM_ConfigChannel>
 800329a:	b9e0      	cbnz	r0, 80032d6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800329c:	2300      	movs	r3, #0
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
  sBreakDeadTimeConfig.DeadTime = 0;
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800329e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032a2:	a914      	add	r1, sp, #80	; 0x50
 80032a4:	4820      	ldr	r0, [pc, #128]	; (8003328 <MX_TIM1_Init+0x128>)
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80032a6:	9318      	str	r3, [sp, #96]	; 0x60
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80032a8:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  sBreakDeadTimeConfig.DeadTime = 0;
 80032ac:	e9cd 3316 	strd	r3, r3, [sp, #88]	; 0x58
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80032b0:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80032b2:	9219      	str	r2, [sp, #100]	; 0x64
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80032b4:	f002 fafa 	bl	80058ac <HAL_TIMEx_ConfigBreakDeadTime>
 80032b8:	b108      	cbz	r0, 80032be <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 80032ba:	f7ff ff09 	bl	80030d0 <Error_Handler>
}
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(timHandle->Instance==TIM1)
 80032be:	6829      	ldr	r1, [r5, #0]
 80032c0:	4a1a      	ldr	r2, [pc, #104]	; (800332c <MX_TIM1_Init+0x12c>)
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c2:	2300      	movs	r3, #0
  if(timHandle->Instance==TIM1)
 80032c4:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032c6:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80032ca:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80032ce:	930c      	str	r3, [sp, #48]	; 0x30
  if(timHandle->Instance==TIM1)
 80032d0:	d010      	beq.n	80032f4 <MX_TIM1_Init+0xf4>
}
 80032d2:	b01d      	add	sp, #116	; 0x74
 80032d4:	bd30      	pop	{r4, r5, pc}
    Error_Handler();
 80032d6:	f7ff fefb 	bl	80030d0 <Error_Handler>
 80032da:	e7df      	b.n	800329c <MX_TIM1_Init+0x9c>
    Error_Handler();
 80032dc:	f7ff fef8 	bl	80030d0 <Error_Handler>
 80032e0:	e7cb      	b.n	800327a <MX_TIM1_Init+0x7a>
    Error_Handler();
 80032e2:	f7ff fef5 	bl	80030d0 <Error_Handler>
 80032e6:	e7c0      	b.n	800326a <MX_TIM1_Init+0x6a>
    Error_Handler();
 80032e8:	f7ff fef2 	bl	80030d0 <Error_Handler>
 80032ec:	e7b8      	b.n	8003260 <MX_TIM1_Init+0x60>
    Error_Handler();
 80032ee:	f7ff feef 	bl	80030d0 <Error_Handler>
 80032f2:	e7ac      	b.n	800324e <MX_TIM1_Init+0x4e>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032f4:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80032fc:	480c      	ldr	r0, [pc, #48]	; (8003330 <MX_TIM1_Init+0x130>)
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80032fe:	f043 0310 	orr.w	r3, r3, #16
 8003302:	6313      	str	r3, [r2, #48]	; 0x30
 8003304:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003306:	f003 0310 	and.w	r3, r3, #16
 800330a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800330c:	2202      	movs	r2, #2
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800330e:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003310:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8003312:	f44f 7400 	mov.w	r4, #512	; 0x200
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003316:	9d01      	ldr	r5, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003318:	930c      	str	r3, [sp, #48]	; 0x30
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800331a:	e9cd 4208 	strd	r4, r2, [sp, #32]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800331e:	f000 fccf 	bl	8003cc0 <HAL_GPIO_Init>
}
 8003322:	b01d      	add	sp, #116	; 0x74
 8003324:	bd30      	pop	{r4, r5, pc}
 8003326:	bf00      	nop
 8003328:	20002404 	.word	0x20002404
 800332c:	40010000 	.word	0x40010000
 8003330:	40021000 	.word	0x40021000

08003334 <HAL_TIM_Base_MspInit>:
  if(tim_baseHandle->Instance==TIM1)
 8003334:	6802      	ldr	r2, [r0, #0]
 8003336:	4b0a      	ldr	r3, [pc, #40]	; (8003360 <HAL_TIM_Base_MspInit+0x2c>)
 8003338:	429a      	cmp	r2, r3
 800333a:	d000      	beq.n	800333e <HAL_TIM_Base_MspInit+0xa>
 800333c:	4770      	bx	lr
{
 800333e:	b082      	sub	sp, #8
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003340:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
 8003344:	2200      	movs	r2, #0
 8003346:	9201      	str	r2, [sp, #4]
 8003348:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800334a:	f042 0201 	orr.w	r2, r2, #1
 800334e:	645a      	str	r2, [r3, #68]	; 0x44
 8003350:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003352:	f003 0301 	and.w	r3, r3, #1
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	9b01      	ldr	r3, [sp, #4]
}
 800335a:	b002      	add	sp, #8
 800335c:	4770      	bx	lr
 800335e:	bf00      	nop
 8003360:	40010000 	.word	0x40010000

08003364 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 8003364:	4b0b      	ldr	r3, [pc, #44]	; (8003394 <MX_USART1_UART_Init+0x30>)
 8003366:	4a0c      	ldr	r2, [pc, #48]	; (8003398 <MX_USART1_UART_Init+0x34>)
{
 8003368:	b510      	push	{r4, lr}
  huart1.Init.BaudRate = 500000;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 800336a:	210c      	movs	r1, #12
  huart1.Init.BaudRate = 500000;
 800336c:	4c0b      	ldr	r4, [pc, #44]	; (800339c <MX_USART1_UART_Init+0x38>)
  huart1.Instance = USART1;
 800336e:	601a      	str	r2, [r3, #0]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003370:	4618      	mov	r0, r3
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003372:	2200      	movs	r2, #0
  huart1.Init.BaudRate = 500000;
 8003374:	605c      	str	r4, [r3, #4]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003376:	6159      	str	r1, [r3, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003378:	e9c3 2202 	strd	r2, r2, [r3, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800337c:	611a      	str	r2, [r3, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800337e:	e9c3 2206 	strd	r2, r2, [r3, #24]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003382:	f002 fabd 	bl	8005900 <HAL_UART_Init>
 8003386:	b900      	cbnz	r0, 800338a <MX_USART1_UART_Init+0x26>
  {
    Error_Handler();
  }

}
 8003388:	bd10      	pop	{r4, pc}
 800338a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    Error_Handler();
 800338e:	f7ff be9f 	b.w	80030d0 <Error_Handler>
 8003392:	bf00      	nop
 8003394:	20002504 	.word	0x20002504
 8003398:	40011000 	.word	0x40011000
 800339c:	0007a120 	.word	0x0007a120

080033a0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80033a0:	b570      	push	{r4, r5, r6, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(uartHandle->Instance==USART1)
 80033a2:	6802      	ldr	r2, [r0, #0]
 80033a4:	4b37      	ldr	r3, [pc, #220]	; (8003484 <HAL_UART_MspInit+0xe4>)
{
 80033a6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a8:	2400      	movs	r4, #0
  if(uartHandle->Instance==USART1)
 80033aa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033ac:	e9cd 4403 	strd	r4, r4, [sp, #12]
 80033b0:	e9cd 4405 	strd	r4, r4, [sp, #20]
 80033b4:	9407      	str	r4, [sp, #28]
  if(uartHandle->Instance==USART1)
 80033b6:	d001      	beq.n	80033bc <HAL_UART_MspInit+0x1c>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80033b8:	b008      	add	sp, #32
 80033ba:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 80033bc:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 80033c0:	9401      	str	r4, [sp, #4]
 80033c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80033c4:	4d30      	ldr	r5, [pc, #192]	; (8003488 <HAL_UART_MspInit+0xe8>)
    __HAL_RCC_USART1_CLK_ENABLE();
 80033c6:	f042 0210 	orr.w	r2, r2, #16
 80033ca:	645a      	str	r2, [r3, #68]	; 0x44
 80033cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033ce:	f002 0210 	and.w	r2, r2, #16
 80033d2:	9201      	str	r2, [sp, #4]
 80033d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033d6:	9402      	str	r4, [sp, #8]
 80033d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033da:	f042 0202 	orr.w	r2, r2, #2
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80033e8:	23c0      	movs	r3, #192	; 0xc0
 80033ea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ec:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033ee:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f0:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033f2:	f04f 0c03 	mov.w	ip, #3
 80033f6:	2307      	movs	r3, #7
 80033f8:	4606      	mov	r6, r0
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033fa:	4824      	ldr	r0, [pc, #144]	; (800348c <HAL_UART_MspInit+0xec>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033fc:	9a02      	ldr	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80033fe:	e9cd c306 	strd	ip, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003402:	f000 fc5d 	bl	8003cc0 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003406:	4822      	ldr	r0, [pc, #136]	; (8003490 <HAL_UART_MspInit+0xf0>)
 8003408:	6028      	str	r0, [r5, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800340a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800340e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003412:	f44f 7380 	mov.w	r3, #256	; 0x100
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003416:	4628      	mov	r0, r5
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003418:	60ac      	str	r4, [r5, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800341a:	60ec      	str	r4, [r5, #12]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800341c:	e9c5 4405 	strd	r4, r4, [r5, #20]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003420:	e9c5 4408 	strd	r4, r4, [r5, #32]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003424:	6069      	str	r1, [r5, #4]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003426:	612a      	str	r2, [r5, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003428:	61eb      	str	r3, [r5, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800342a:	f000 fa87 	bl	800393c <HAL_DMA_Init>
 800342e:	bb18      	cbnz	r0, 8003478 <HAL_UART_MspInit+0xd8>
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003430:	4c18      	ldr	r4, [pc, #96]	; (8003494 <HAL_UART_MspInit+0xf4>)
 8003432:	4819      	ldr	r0, [pc, #100]	; (8003498 <HAL_UART_MspInit+0xf8>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003434:	6375      	str	r5, [r6, #52]	; 0x34
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003436:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800343a:	2140      	movs	r1, #64	; 0x40
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800343c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8003440:	6020      	str	r0, [r4, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8003442:	6063      	str	r3, [r4, #4]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003444:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003446:	2300      	movs	r3, #0
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8003448:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800344a:	60a1      	str	r1, [r4, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800344c:	e9c4 3203 	strd	r3, r2, [r4, #12]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003450:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003454:	e9c4 3307 	strd	r3, r3, [r4, #28]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003458:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800345a:	f000 fa6f 	bl	800393c <HAL_DMA_Init>
 800345e:	b970      	cbnz	r0, 800347e <HAL_UART_MspInit+0xde>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003460:	2200      	movs	r2, #0
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003462:	6334      	str	r4, [r6, #48]	; 0x30
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003464:	4611      	mov	r1, r2
 8003466:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8003468:	63a6      	str	r6, [r4, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800346a:	f000 fa09 	bl	8003880 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800346e:	2025      	movs	r0, #37	; 0x25
 8003470:	f000 fa3c 	bl	80038ec <HAL_NVIC_EnableIRQ>
}
 8003474:	b008      	add	sp, #32
 8003476:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003478:	f7ff fe2a 	bl	80030d0 <Error_Handler>
 800347c:	e7d8      	b.n	8003430 <HAL_UART_MspInit+0x90>
      Error_Handler();
 800347e:	f7ff fe27 	bl	80030d0 <Error_Handler>
 8003482:	e7ed      	b.n	8003460 <HAL_UART_MspInit+0xc0>
 8003484:	40011000 	.word	0x40011000
 8003488:	200024a4 	.word	0x200024a4
 800348c:	40020400 	.word	0x40020400
 8003490:	40026440 	.word	0x40026440
 8003494:	20002444 	.word	0x20002444
 8003498:	400264b8 	.word	0x400264b8

0800349c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800349c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034d4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80034a0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80034a2:	e003      	b.n	80034ac <LoopCopyDataInit>

080034a4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80034a4:	4b0c      	ldr	r3, [pc, #48]	; (80034d8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80034a6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80034a8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80034aa:	3104      	adds	r1, #4

080034ac <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80034ac:	480b      	ldr	r0, [pc, #44]	; (80034dc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80034ae:	4b0c      	ldr	r3, [pc, #48]	; (80034e0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80034b0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80034b2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80034b4:	d3f6      	bcc.n	80034a4 <CopyDataInit>
  ldr  r2, =_sbss
 80034b6:	4a0b      	ldr	r2, [pc, #44]	; (80034e4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80034b8:	e002      	b.n	80034c0 <LoopFillZerobss>

080034ba <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80034ba:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80034bc:	f842 3b04 	str.w	r3, [r2], #4

080034c0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80034c2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80034c4:	d3f9      	bcc.n	80034ba <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80034c6:	f7ff fe8d 	bl	80031e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034ca:	f002 ff2f 	bl	800632c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034ce:	f7ff fd8b 	bl	8002fe8 <main>
  bx  lr    
 80034d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80034d4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80034d8:	08008db4 	.word	0x08008db4
  ldr  r0, =_sdata
 80034dc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80034e0:	200018c0 	.word	0x200018c0
  ldr  r2, =_sbss
 80034e4:	200018c0 	.word	0x200018c0
  ldr  r3, = _ebss
 80034e8:	2000254c 	.word	0x2000254c

080034ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80034ec:	e7fe      	b.n	80034ec <ADC_IRQHandler>
	...

080034f0 <TELEMETRY_Init>:
	}
	return nb;
}

void TELEMETRY_Init(telemetry_t * telem_, UART_HandleTypeDef * huart)
{
 80034f0:	b510      	push	{r4, lr}
	telem = telem_ ;
 80034f2:	4c0c      	ldr	r4, [pc, #48]	; (8003524 <TELEMETRY_Init+0x34>)
	telem->huart = huart ;
 80034f4:	6001      	str	r1, [r0, #0]
{
 80034f6:	4603      	mov	r3, r0

	//On envoit un premier message qui sert sutout à éviter que les premiers octet utiles soient perdu
	static uint8_t hey_msg[] = "Hey it s me Theo...\n";
	HAL_UART_Transmit_DMA(telem->huart, hey_msg, 20);
 80034f8:	2214      	movs	r2, #20
 80034fa:	4608      	mov	r0, r1
 80034fc:	490a      	ldr	r1, [pc, #40]	; (8003528 <TELEMETRY_Init+0x38>)
	telem = telem_ ;
 80034fe:	6023      	str	r3, [r4, #0]
	HAL_UART_Transmit_DMA(telem->huart, hey_msg, 20);
 8003500:	f002 fbca 	bl	8005c98 <HAL_UART_Transmit_DMA>

	//Activation de l'it "idle" qui préviendra de la fin de la récéption d'un message
	__HAL_UART_ENABLE_IT(telem->huart, UART_IT_IDLE);
 8003504:	6821      	ldr	r1, [r4, #0]
 8003506:	6808      	ldr	r0, [r1, #0]
 8003508:	6802      	ldr	r2, [r0, #0]
 800350a:	68d3      	ldr	r3, [r2, #12]
 800350c:	f043 0310 	orr.w	r3, r3, #16
 8003510:	60d3      	str	r3, [r2, #12]
	//On lance la récéption en DMA
	HAL_UART_Receive_DMA(telem->huart, telem->buffer_rx, LEN_RX_BUFFER);
 8003512:	f501 71a0 	add.w	r1, r1, #320	; 0x140
 8003516:	f44f 7200 	mov.w	r2, #512	; 0x200
}
 800351a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	HAL_UART_Receive_DMA(telem->huart, telem->buffer_rx, LEN_RX_BUFFER);
 800351e:	f002 bbf7 	b.w	8005d10 <HAL_UART_Receive_DMA>
 8003522:	bf00      	nop
 8003524:	20001c1c 	.word	0x20001c1c
 8003528:	200016d0 	.word	0x200016d0

0800352c <TELEMETRY_Process>:


void TELEMETRY_Process(uint32_t time_us){
 800352c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	//	--------------------	Transmission	------------------------
	//Ce qui suit vide le buffer en transmettant on contenu en respectant la limite
	//de vitesse maximum
	if(telem->index_write_tx != telem->index_read_tx && telem->transmission_state == TRANSMISSION_IDLE)
 800352e:	4d42      	ldr	r5, [pc, #264]	; (8003638 <TELEMETRY_Process+0x10c>)
 8003530:	682b      	ldr	r3, [r5, #0]
 8003532:	f8b3 113e 	ldrh.w	r1, [r3, #318]	; 0x13e
 8003536:	f8b3 213c 	ldrh.w	r2, [r3, #316]	; 0x13c
 800353a:	428a      	cmp	r2, r1
 800353c:	d002      	beq.n	8003544 <TELEMETRY_Process+0x18>
 800353e:	f893 213b 	ldrb.w	r2, [r3, #315]	; 0x13b
 8003542:	b30a      	cbz	r2, 8003588 <TELEMETRY_Process+0x5c>
	if(telem->index_write_rx > telem->index_read_rx){
 8003544:	f8b3 1340 	ldrh.w	r1, [r3, #832]	; 0x340
 8003548:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
 800354c:	428a      	cmp	r2, r1
 800354e:	d210      	bcs.n	8003572 <TELEMETRY_Process+0x46>
		nb = telem->index_write_rx - telem->index_read_rx ;
 8003550:	f8b3 4340 	ldrh.w	r4, [r3, #832]	; 0x340
 8003554:	1aa4      	subs	r4, r4, r2
 8003556:	b2a4      	uxth	r4, r4
	}

	//	---------------------	Reception	-------------------------------

	uint16_t bytes_avaibles = get_nb_bytes_available(telem);
	if(bytes_avaibles > 2)	//Minimum trois octets pour faire quoi que ce soit
 8003558:	2c02      	cmp	r4, #2
 800355a:	d909      	bls.n	8003570 <TELEMETRY_Process+0x44>
	{
		uint16_t bytes_used = 1 ;
		if(telem->buffer_rx[telem->index_read_rx] == '$')	//Détection de début de séquence
 800355c:	1899      	adds	r1, r3, r2
		{
			//Number of byte recquiered including the '$' and the checksum to use the current frame we are on
			data_t * current_data = DATA_LOGGER_Get_Data(telem->buffer_rx[(telem->index_read_rx+1)%LEN_RX_BUFFER]);
 800355e:	3201      	adds	r2, #1
		if(telem->buffer_rx[telem->index_read_rx] == '$')	//Détection de début de séquence
 8003560:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 8003564:	2924      	cmp	r1, #36	; 0x24
 8003566:	d02d      	beq.n	80035c4 <TELEMETRY_Process+0x98>
			{
				DATA_LOGGER_Reception(&telem->buffer_rx[(telem->index_read_rx+1)%LEN_RX_BUFFER]);
			}
		}
		telem->index_read_rx += bytes_used ;
		telem->index_read_rx = telem->index_read_rx % LEN_RX_BUFFER ;
 8003568:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800356c:	f8a3 2342 	strh.w	r2, [r3, #834]	; 0x342
	}

}
 8003570:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	else if(telem->index_write_rx < telem->index_read_rx){
 8003572:	f8b3 1340 	ldrh.w	r1, [r3, #832]	; 0x340
 8003576:	428a      	cmp	r2, r1
 8003578:	d9fa      	bls.n	8003570 <TELEMETRY_Process+0x44>
		nb = LEN_RX_BUFFER - telem->index_read_rx + telem->index_write_rx ;
 800357a:	f8b3 4340 	ldrh.w	r4, [r3, #832]	; 0x340
 800357e:	f504 7400 	add.w	r4, r4, #512	; 0x200
 8003582:	1aa4      	subs	r4, r4, r2
 8003584:	b2a4      	uxth	r4, r4
 8003586:	e7e7      	b.n	8003558 <TELEMETRY_Process+0x2c>
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 8003588:	185a      	adds	r2, r3, r1
		telem->transmission_state = TRANSMISSION_IN_PROGRESS;
 800358a:	2001      	movs	r0, #1
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 800358c:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
		telem->transmission_state = TRANSMISSION_IN_PROGRESS;
 8003590:	f883 013b 	strb.w	r0, [r3, #315]	; 0x13b
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 8003594:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8003598:	f892 2131 	ldrb.w	r2, [r2, #305]	; 0x131
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	3105      	adds	r1, #5
 80035a0:	f002 fb7a 	bl	8005c98 <HAL_UART_Transmit_DMA>
		telem->index_read_tx ++ ;
 80035a4:	682b      	ldr	r3, [r5, #0]
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 80035a6:	4925      	ldr	r1, [pc, #148]	; (800363c <TELEMETRY_Process+0x110>)
		telem->index_read_tx ++ ;
 80035a8:	f8b3 213e 	ldrh.w	r2, [r3, #318]	; 0x13e
 80035ac:	3201      	adds	r2, #1
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 80035ae:	b292      	uxth	r2, r2
 80035b0:	fba1 0102 	umull	r0, r1, r1, r2
 80035b4:	08c9      	lsrs	r1, r1, #3
 80035b6:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 80035ba:	eba2 0241 	sub.w	r2, r2, r1, lsl #1
 80035be:	f8a3 213e 	strh.w	r2, [r3, #318]	; 0x13e
 80035c2:	e7bf      	b.n	8003544 <TELEMETRY_Process+0x18>
			data_t * current_data = DATA_LOGGER_Get_Data(telem->buffer_rx[(telem->index_read_rx+1)%LEN_RX_BUFFER]);
 80035c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035c8:	4413      	add	r3, r2
 80035ca:	f893 0140 	ldrb.w	r0, [r3, #320]	; 0x140
 80035ce:	f7fd fff3 	bl	80015b8 <DATA_LOGGER_Get_Data>
			uint16_t bytes_recquired = (current_data->format / 20) + 3 ;
 80035d2:	4b1a      	ldr	r3, [pc, #104]	; (800363c <TELEMETRY_Process+0x110>)
 80035d4:	7a40      	ldrb	r0, [r0, #9]
 80035d6:	fba3 3000 	umull	r3, r0, r3, r0
 80035da:	0900      	lsrs	r0, r0, #4
 80035dc:	1cc6      	adds	r6, r0, #3
			if(bytes_recquired > bytes_avaibles)
 80035de:	42a6      	cmp	r6, r4
 80035e0:	d8c6      	bhi.n	8003570 <TELEMETRY_Process+0x44>
				checksum += telem->buffer_rx[(telem->index_read_rx+1+b)%LEN_RX_BUFFER];
 80035e2:	682b      	ldr	r3, [r5, #0]
 80035e4:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
 80035e8:	f102 0c01 	add.w	ip, r2, #1
 80035ec:	f102 0e02 	add.w	lr, r2, #2
 80035f0:	4661      	mov	r1, ip
 80035f2:	4486      	add	lr, r0
			uint16_t checksum = 0 ;
 80035f4:	2700      	movs	r7, #0
				checksum += telem->buffer_rx[(telem->index_read_rx+1+b)%LEN_RX_BUFFER];
 80035f6:	f3c1 0408 	ubfx	r4, r1, #0, #9
 80035fa:	441c      	add	r4, r3
 80035fc:	3101      	adds	r1, #1
 80035fe:	f894 0140 	ldrb.w	r0, [r4, #320]	; 0x140
			for(uint16_t b = 0; b < len_frame; b++)
 8003602:	458e      	cmp	lr, r1
				checksum += telem->buffer_rx[(telem->index_read_rx+1+b)%LEN_RX_BUFFER];
 8003604:	4438      	add	r0, r7
 8003606:	b287      	uxth	r7, r0
			for(uint16_t b = 0; b < len_frame; b++)
 8003608:	d1f5      	bne.n	80035f6 <TELEMETRY_Process+0xca>
			if(checksum % 256 == telem->buffer_rx[(telem->index_read_rx + bytes_recquired-1)%LEN_RX_BUFFER])
 800360a:	4432      	add	r2, r6
 800360c:	1e51      	subs	r1, r2, #1
 800360e:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8003612:	4419      	add	r1, r3
 8003614:	b2f8      	uxtb	r0, r7
 8003616:	f891 1140 	ldrb.w	r1, [r1, #320]	; 0x140
 800361a:	4281      	cmp	r1, r0
 800361c:	d1a4      	bne.n	8003568 <TELEMETRY_Process+0x3c>
				DATA_LOGGER_Reception(&telem->buffer_rx[(telem->index_read_rx+1)%LEN_RX_BUFFER]);
 800361e:	f3cc 0008 	ubfx	r0, ip, #0, #9
 8003622:	f500 70a0 	add.w	r0, r0, #320	; 0x140
 8003626:	4418      	add	r0, r3
 8003628:	f7fd ff80 	bl	800152c <DATA_LOGGER_Reception>
 800362c:	682b      	ldr	r3, [r5, #0]
 800362e:	f8b3 2342 	ldrh.w	r2, [r3, #834]	; 0x342
 8003632:	4432      	add	r2, r6
 8003634:	e798      	b.n	8003568 <TELEMETRY_Process+0x3c>
 8003636:	bf00      	nop
 8003638:	20001c1c 	.word	0x20001c1c
 800363c:	cccccccd 	.word	0xcccccccd

08003640 <TELEMETRY_Send_Data>:


void TELEMETRY_Send_Data(uint8_t * data, uint8_t len){
 8003640:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003644:	b088      	sub	sp, #32
	uint8_t to_send[SIZE_PORTION_BUFFER];
	uint32_t checksum = 0 ;


	to_send[0] = '$';
 8003646:	2324      	movs	r3, #36	; 0x24
 8003648:	f88d 3000 	strb.w	r3, [sp]

	for(uint8_t b = 0; b < len; b++){
 800364c:	460d      	mov	r5, r1
 800364e:	2900      	cmp	r1, #0
 8003650:	d061      	beq.n	8003716 <TELEMETRY_Send_Data+0xd6>
 8003652:	4669      	mov	r1, sp
 8003654:	1e6e      	subs	r6, r5, #1
 8003656:	fa50 f686 	uxtab	r6, r0, r6
 800365a:	460c      	mov	r4, r1
 800365c:	3801      	subs	r0, #1
	uint32_t checksum = 0 ;
 800365e:	2200      	movs	r2, #0
		to_send[1 + b] = data[b];
 8003660:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 8003664:	f804 3f01 	strb.w	r3, [r4, #1]!
	for(uint8_t b = 0; b < len; b++){
 8003668:	4286      	cmp	r6, r0
		checksum += (uint32_t)to_send[1 + b];
 800366a:	441a      	add	r2, r3
	for(uint8_t b = 0; b < len; b++){
 800366c:	d1f8      	bne.n	8003660 <TELEMETRY_Send_Data+0x20>
 800366e:	b2d3      	uxtb	r3, r2

void TELEMETRY_Send_Data_Raw(uint8_t * data, uint8_t len){

	//Copie du tableau dans le buffer
	for(uint8_t c = 0; c < len; c++)
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 8003670:	4e2a      	ldr	r6, [pc, #168]	; (800371c <TELEMETRY_Send_Data+0xdc>)
	//On enregistre la taille de la donnée
	telem->len_portion_tx[telem->index_write_tx] = len ;

	//Incrémentation de l'index
	telem->index_write_tx ++ ;
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 8003672:	4c2b      	ldr	r4, [pc, #172]	; (8003720 <TELEMETRY_Send_Data+0xe0>)
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 8003674:	6837      	ldr	r7, [r6, #0]
 8003676:	f8b7 813c 	ldrh.w	r8, [r7, #316]	; 0x13c
 800367a:	1c6a      	adds	r2, r5, #1
 800367c:	ebc8 1008 	rsb	r0, r8, r8, lsl #4
	to_send[1 + len] = (uint8_t)(checksum % 256) ;
 8003680:	f10d 0c20 	add.w	ip, sp, #32
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 8003684:	2dfe      	cmp	r5, #254	; 0xfe
	to_send[1 + len] = (uint8_t)(checksum % 256) ;
 8003686:	44ac      	add	ip, r5
		telem->buffer_tx[telem->index_write_tx*SIZE_PORTION_BUFFER + c] = data[c];
 8003688:	b2d2      	uxtb	r2, r2
 800368a:	eb07 0040 	add.w	r0, r7, r0, lsl #1
 800368e:	f102 0201 	add.w	r2, r2, #1
 8003692:	f100 0005 	add.w	r0, r0, #5
 8003696:	bf08      	it	eq
 8003698:	2201      	moveq	r2, #1
	to_send[1 + len] = (uint8_t)(checksum % 256) ;
 800369a:	f80c 3c1f 	strb.w	r3, [ip, #-31]
 800369e:	f002 fe69 	bl	8006374 <memcpy>
	telem->index_write_tx ++ ;
 80036a2:	f108 0301 	add.w	r3, r8, #1
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	fba4 1203 	umull	r1, r2, r4, r3
	telem->len_portion_tx[telem->index_write_tx] = len ;
 80036ac:	44b8      	add	r8, r7
	TELEMETRY_Send_Data_Raw(to_send, len+2);
 80036ae:	3502      	adds	r5, #2
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 80036b0:	08d2      	lsrs	r2, r2, #3
	telem->len_portion_tx[telem->index_write_tx] = len ;
 80036b2:	f888 5131 	strb.w	r5, [r8, #305]	; 0x131
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 80036b6:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80036ba:	eba3 0342 	sub.w	r3, r3, r2, lsl #1

	//Si la transmission est au repos, on relance la transmission
	if(telem->index_write_tx != telem->index_read_tx && telem->transmission_state == TRANSMISSION_IDLE)
 80036be:	f8b7 113e 	ldrh.w	r1, [r7, #318]	; 0x13e
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 80036c2:	b29b      	uxth	r3, r3
	if(telem->index_write_tx != telem->index_read_tx && telem->transmission_state == TRANSMISSION_IDLE)
 80036c4:	428b      	cmp	r3, r1
	telem->index_write_tx = telem->index_write_tx % NB_PORTION_BUFFER ;
 80036c6:	f8a7 313c 	strh.w	r3, [r7, #316]	; 0x13c
	if(telem->index_write_tx != telem->index_read_tx && telem->transmission_state == TRANSMISSION_IDLE)
 80036ca:	d002      	beq.n	80036d2 <TELEMETRY_Send_Data+0x92>
 80036cc:	f897 313b 	ldrb.w	r3, [r7, #315]	; 0x13b
 80036d0:	b113      	cbz	r3, 80036d8 <TELEMETRY_Send_Data+0x98>
}
 80036d2:	b008      	add	sp, #32
 80036d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	{

		telem->transmission_state = TRANSMISSION_IN_PROGRESS;
		//On transmet les données
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 80036d8:	187b      	adds	r3, r7, r1
		telem->transmission_state = TRANSMISSION_IN_PROGRESS;
 80036da:	2201      	movs	r2, #1
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 80036dc:	ebc1 1101 	rsb	r1, r1, r1, lsl #4
		telem->transmission_state = TRANSMISSION_IN_PROGRESS;
 80036e0:	f887 213b 	strb.w	r2, [r7, #315]	; 0x13b
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 80036e4:	eb07 0141 	add.w	r1, r7, r1, lsl #1
 80036e8:	f893 2131 	ldrb.w	r2, [r3, #305]	; 0x131
 80036ec:	6838      	ldr	r0, [r7, #0]
 80036ee:	3105      	adds	r1, #5
 80036f0:	f002 fad2 	bl	8005c98 <HAL_UART_Transmit_DMA>
		//Incrémentation de l'index
		telem->index_read_tx ++ ;
 80036f4:	6832      	ldr	r2, [r6, #0]
 80036f6:	f8b2 313e 	ldrh.w	r3, [r2, #318]	; 0x13e
 80036fa:	3301      	adds	r3, #1
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 80036fc:	b29b      	uxth	r3, r3
 80036fe:	fba4 1403 	umull	r1, r4, r4, r3
 8003702:	08e4      	lsrs	r4, r4, #3
 8003704:	eb04 0484 	add.w	r4, r4, r4, lsl #2
 8003708:	eba3 0444 	sub.w	r4, r3, r4, lsl #1
 800370c:	f8a2 413e 	strh.w	r4, [r2, #318]	; 0x13e
}
 8003710:	b008      	add	sp, #32
 8003712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for(uint8_t b = 0; b < len; b++){
 8003716:	460b      	mov	r3, r1
 8003718:	4669      	mov	r1, sp
 800371a:	e7a9      	b.n	8003670 <TELEMETRY_Send_Data+0x30>
 800371c:	20001c1c 	.word	0x20001c1c
 8003720:	cccccccd 	.word	0xcccccccd

08003724 <TELEMETRY_Idle_Line_Detection>:

}

void TELEMETRY_Idle_Line_Detection(void){
	//On met à jour l'index d'écriture du buffer rx
	telem->index_write_rx = LEN_RX_BUFFER - telem->huart->hdmarx->Instance->NDTR ;
 8003724:	4b05      	ldr	r3, [pc, #20]	; (800373c <TELEMETRY_Idle_Line_Detection+0x18>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	6813      	ldr	r3, [r2, #0]
 800372a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8003734:	b29b      	uxth	r3, r3
 8003736:	f8a2 3340 	strh.w	r3, [r2, #832]	; 0x340
}
 800373a:	4770      	bx	lr
 800373c:	20001c1c 	.word	0x20001c1c

08003740 <TELEMETRY_TxCpltCallback>:

void TELEMETRY_TxCpltCallback(void){
 8003740:	b510      	push	{r4, lr}
	//Si on a encore des données à envoyer
	if(telem->index_write_tx != telem->index_read_tx){
 8003742:	4c13      	ldr	r4, [pc, #76]	; (8003790 <TELEMETRY_TxCpltCallback+0x50>)
 8003744:	6823      	ldr	r3, [r4, #0]
 8003746:	f8b3 213e 	ldrh.w	r2, [r3, #318]	; 0x13e
 800374a:	f8b3 113c 	ldrh.w	r1, [r3, #316]	; 0x13c
 800374e:	4291      	cmp	r1, r2
 8003750:	d103      	bne.n	800375a <TELEMETRY_TxCpltCallback+0x1a>
		//Incrémentation de l'index
		telem->index_read_tx ++ ;
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
	}
	else
		telem->transmission_state = TRANSMISSION_IDLE ;
 8003752:	2200      	movs	r2, #0
 8003754:	f883 213b 	strb.w	r2, [r3, #315]	; 0x13b
}
 8003758:	bd10      	pop	{r4, pc}
		HAL_UART_Transmit_DMA(telem->huart, &telem->buffer_tx[SIZE_PORTION_BUFFER*telem->index_read_tx], telem->len_portion_tx[telem->index_read_tx]);
 800375a:	ebc2 1102 	rsb	r1, r2, r2, lsl #4
 800375e:	441a      	add	r2, r3
 8003760:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 8003764:	3105      	adds	r1, #5
 8003766:	f892 2131 	ldrb.w	r2, [r2, #305]	; 0x131
 800376a:	6818      	ldr	r0, [r3, #0]
 800376c:	f002 fa94 	bl	8005c98 <HAL_UART_Transmit_DMA>
		telem->index_read_tx ++ ;
 8003770:	6821      	ldr	r1, [r4, #0]
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 8003772:	4a08      	ldr	r2, [pc, #32]	; (8003794 <TELEMETRY_TxCpltCallback+0x54>)
		telem->index_read_tx ++ ;
 8003774:	f8b1 313e 	ldrh.w	r3, [r1, #318]	; 0x13e
 8003778:	3301      	adds	r3, #1
		telem->index_read_tx = telem->index_read_tx % NB_PORTION_BUFFER ;
 800377a:	b29b      	uxth	r3, r3
 800377c:	fba2 0203 	umull	r0, r2, r2, r3
 8003780:	08d2      	lsrs	r2, r2, #3
 8003782:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8003786:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800378a:	f8a1 313e 	strh.w	r3, [r1, #318]	; 0x13e
}
 800378e:	bd10      	pop	{r4, pc}
 8003790:	20001c1c 	.word	0x20001c1c
 8003794:	cccccccd 	.word	0xcccccccd

08003798 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003798:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800379a:	4a0e      	ldr	r2, [pc, #56]	; (80037d4 <HAL_InitTick+0x3c>)
 800379c:	4b0e      	ldr	r3, [pc, #56]	; (80037d8 <HAL_InitTick+0x40>)
 800379e:	7812      	ldrb	r2, [r2, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
{
 80037a2:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80037a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80037a8:	fbb0 f0f2 	udiv	r0, r0, r2
 80037ac:	fbb3 f0f0 	udiv	r0, r3, r0
 80037b0:	f000 f8aa 	bl	8003908 <HAL_SYSTICK_Config>
 80037b4:	b908      	cbnz	r0, 80037ba <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80037b6:	2d0f      	cmp	r5, #15
 80037b8:	d901      	bls.n	80037be <HAL_InitTick+0x26>
    return HAL_ERROR;
 80037ba:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80037bc:	bd38      	pop	{r3, r4, r5, pc}
 80037be:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80037c0:	4602      	mov	r2, r0
 80037c2:	4629      	mov	r1, r5
 80037c4:	f04f 30ff 	mov.w	r0, #4294967295
 80037c8:	f000 f85a 	bl	8003880 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80037cc:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_InitTick+0x44>)
 80037ce:	4620      	mov	r0, r4
 80037d0:	601d      	str	r5, [r3, #0]
}
 80037d2:	bd38      	pop	{r3, r4, r5, pc}
 80037d4:	200016e5 	.word	0x200016e5
 80037d8:	200016cc 	.word	0x200016cc
 80037dc:	200016e8 	.word	0x200016e8

080037e0 <HAL_Init>:
{
 80037e0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_Init+0x30>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ea:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80037ec:	681a      	ldr	r2, [r3, #0]
 80037ee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80037f2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80037fa:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80037fc:	2003      	movs	r0, #3
 80037fe:	f000 f82d 	bl	800385c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003802:	2000      	movs	r0, #0
 8003804:	f7ff ffc8 	bl	8003798 <HAL_InitTick>
  HAL_MspInit();
 8003808:	f7ff fc64 	bl	80030d4 <HAL_MspInit>
}
 800380c:	2000      	movs	r0, #0
 800380e:	bd08      	pop	{r3, pc}
 8003810:	40023c00 	.word	0x40023c00

08003814 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003814:	4a03      	ldr	r2, [pc, #12]	; (8003824 <HAL_IncTick+0x10>)
 8003816:	4b04      	ldr	r3, [pc, #16]	; (8003828 <HAL_IncTick+0x14>)
 8003818:	6811      	ldr	r1, [r2, #0]
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	440b      	add	r3, r1
 800381e:	6013      	str	r3, [r2, #0]
}
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20002544 	.word	0x20002544
 8003828:	200016e5 	.word	0x200016e5

0800382c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800382c:	4b01      	ldr	r3, [pc, #4]	; (8003834 <HAL_GetTick+0x8>)
 800382e:	6818      	ldr	r0, [r3, #0]
}
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	20002544 	.word	0x20002544

08003838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800383c:	f7ff fff6 	bl	800382c <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003840:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 8003842:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 8003844:	d002      	beq.n	800384c <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8003846:	4b04      	ldr	r3, [pc, #16]	; (8003858 <HAL_Delay+0x20>)
 8003848:	781b      	ldrb	r3, [r3, #0]
 800384a:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 800384c:	f7ff ffee 	bl	800382c <HAL_GetTick>
 8003850:	1b40      	subs	r0, r0, r5
 8003852:	42a0      	cmp	r0, r4
 8003854:	d3fa      	bcc.n	800384c <HAL_Delay+0x14>
  {
  }
}
 8003856:	bd38      	pop	{r3, r4, r5, pc}
 8003858:	200016e5 	.word	0x200016e5

0800385c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800385c:	4a07      	ldr	r2, [pc, #28]	; (800387c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800385e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003860:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8003864:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003866:	0200      	lsls	r0, r0, #8
 8003868:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800386c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8003870:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8003874:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8003876:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8003878:	4770      	bx	lr
 800387a:	bf00      	nop
 800387c:	e000ed00 	.word	0xe000ed00

08003880 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003880:	4b18      	ldr	r3, [pc, #96]	; (80038e4 <HAL_NVIC_SetPriority+0x64>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003888:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800388a:	f1c3 0507 	rsb	r5, r3, #7
 800388e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003890:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003894:	bf28      	it	cs
 8003896:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003898:	2c06      	cmp	r4, #6
 800389a:	d919      	bls.n	80038d0 <HAL_NVIC_SetPriority+0x50>
 800389c:	3b03      	subs	r3, #3
 800389e:	f04f 34ff 	mov.w	r4, #4294967295
 80038a2:	409c      	lsls	r4, r3
 80038a4:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80038a8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ac:	40aa      	lsls	r2, r5
 80038ae:	ea21 0102 	bic.w	r1, r1, r2
 80038b2:	fa01 f203 	lsl.w	r2, r1, r3
 80038b6:	4322      	orrs	r2, r4
 80038b8:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 80038ba:	2800      	cmp	r0, #0
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	db0a      	blt.n	80038d6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80038c4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80038c8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80038cc:	bc30      	pop	{r4, r5}
 80038ce:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80038d0:	2400      	movs	r4, #0
 80038d2:	4623      	mov	r3, r4
 80038d4:	e7e8      	b.n	80038a8 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d6:	4b04      	ldr	r3, [pc, #16]	; (80038e8 <HAL_NVIC_SetPriority+0x68>)
 80038d8:	f000 000f 	and.w	r0, r0, #15
 80038dc:	4403      	add	r3, r0
 80038de:	761a      	strb	r2, [r3, #24]
 80038e0:	bc30      	pop	{r4, r5}
 80038e2:	4770      	bx	lr
 80038e4:	e000ed00 	.word	0xe000ed00
 80038e8:	e000ecfc 	.word	0xe000ecfc

080038ec <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80038ec:	2800      	cmp	r0, #0
 80038ee:	db07      	blt.n	8003900 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80038f0:	f000 011f 	and.w	r1, r0, #31
 80038f4:	2301      	movs	r3, #1
 80038f6:	0940      	lsrs	r0, r0, #5
 80038f8:	4a02      	ldr	r2, [pc, #8]	; (8003904 <HAL_NVIC_EnableIRQ+0x18>)
 80038fa:	408b      	lsls	r3, r1
 80038fc:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	e000e100 	.word	0xe000e100

08003908 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003908:	3801      	subs	r0, #1
 800390a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800390e:	d20e      	bcs.n	800392e <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003910:	4b08      	ldr	r3, [pc, #32]	; (8003934 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003912:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003914:	4c08      	ldr	r4, [pc, #32]	; (8003938 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003916:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003918:	20f0      	movs	r0, #240	; 0xf0
 800391a:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800391e:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003920:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003922:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003924:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003926:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 8003928:	f85d 4b04 	ldr.w	r4, [sp], #4
 800392c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800392e:	2001      	movs	r0, #1
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	e000e010 	.word	0xe000e010
 8003938:	e000ed00 	.word	0xe000ed00

0800393c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800393c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800393e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8003940:	f7ff ff74 	bl	800382c <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003944:	2c00      	cmp	r4, #0
 8003946:	d054      	beq.n	80039f2 <HAL_DMA_Init+0xb6>
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003948:	2202      	movs	r2, #2
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800394a:	6823      	ldr	r3, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 800394c:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8003950:	681a      	ldr	r2, [r3, #0]
  __HAL_UNLOCK(hdma);
 8003952:	2100      	movs	r1, #0
  __HAL_DMA_DISABLE(hdma);
 8003954:	f022 0201 	bic.w	r2, r2, #1
  __HAL_UNLOCK(hdma);
 8003958:	f884 1034 	strb.w	r1, [r4, #52]	; 0x34
 800395c:	4605      	mov	r5, r0
  __HAL_DMA_DISABLE(hdma);
 800395e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003960:	e005      	b.n	800396e <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003962:	f7ff ff63 	bl	800382c <HAL_GetTick>
 8003966:	1b40      	subs	r0, r0, r5
 8003968:	2805      	cmp	r0, #5
 800396a:	d83b      	bhi.n	80039e4 <HAL_DMA_Init+0xa8>
 800396c:	6823      	ldr	r3, [r4, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	07d1      	lsls	r1, r2, #31
 8003972:	d4f6      	bmi.n	8003962 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003974:	e9d4 2601 	ldrd	r2, r6, [r4, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003978:	e9d4 5103 	ldrd	r5, r1, [r4, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800397c:	4332      	orrs	r2, r6
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800397e:	6960      	ldr	r0, [r4, #20]
  tmp = hdma->Instance->CR;
 8003980:	681f      	ldr	r7, [r3, #0]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003982:	432a      	orrs	r2, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003984:	e9d4 6506 	ldrd	r6, r5, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003988:	430a      	orrs	r2, r1
 800398a:	4302      	orrs	r2, r0
          hdma->Init.Mode                | hdma->Init.Priority;
 800398c:	6a21      	ldr	r1, [r4, #32]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800398e:	4835      	ldr	r0, [pc, #212]	; (8003a64 <HAL_DMA_Init+0x128>)
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003990:	4332      	orrs	r2, r6
 8003992:	432a      	orrs	r2, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8003994:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003996:	6a61      	ldr	r1, [r4, #36]	; 0x24
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003998:	4038      	ands	r0, r7
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800399a:	2904      	cmp	r1, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800399c:	ea42 0200 	orr.w	r2, r2, r0
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039a0:	d029      	beq.n	80039f6 <HAL_DMA_Init+0xba>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039a2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039a4:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039a6:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039aa:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	482e      	ldr	r0, [pc, #184]	; (8003a68 <HAL_DMA_Init+0x12c>)
  hdma->Instance->FCR = tmp;
 80039b0:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80039b2:	3a10      	subs	r2, #16
 80039b4:	fba0 1202 	umull	r1, r2, r0, r2
 80039b8:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80039ba:	492c      	ldr	r1, [pc, #176]	; (8003a6c <HAL_DMA_Init+0x130>)
 80039bc:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80039c0:	5c89      	ldrb	r1, [r1, r2]
 80039c2:	65e1      	str	r1, [r4, #92]	; 0x5c
 80039c4:	f023 0303 	bic.w	r3, r3, #3
  
  if (stream_number > 3U)
 80039c8:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80039ca:	bf88      	it	hi
 80039cc:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039ce:	223f      	movs	r2, #63	; 0x3f
 80039d0:	408a      	lsls	r2, r1
  hdma->State = HAL_DMA_STATE_READY;
 80039d2:	2501      	movs	r5, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039d4:	2100      	movs	r1, #0
 80039d6:	65a3      	str	r3, [r4, #88]	; 0x58
  return HAL_OK;
 80039d8:	4608      	mov	r0, r1
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039da:	609a      	str	r2, [r3, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80039dc:	6561      	str	r1, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 80039de:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
}
 80039e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039e4:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80039e6:	2220      	movs	r2, #32
 80039e8:	6562      	str	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 80039ea:	4618      	mov	r0, r3
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80039ec:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 80039f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80039f2:	2001      	movs	r0, #1
}
 80039f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80039f6:	e9d4 010b 	ldrd	r0, r1, [r4, #44]	; 0x2c
 80039fa:	4301      	orrs	r1, r0
 80039fc:	430a      	orrs	r2, r1
    tmp |= hdma->Init.FIFOThreshold;
 80039fe:	6aa5      	ldr	r5, [r4, #40]	; 0x28
  hdma->Instance->CR = tmp;  
 8003a00:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8003a02:	695a      	ldr	r2, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8003a04:	f045 0104 	orr.w	r1, r5, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003a08:	f022 0207 	bic.w	r2, r2, #7
    tmp |= hdma->Init.FIFOThreshold;
 8003a0c:	4311      	orrs	r1, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003a0e:	2800      	cmp	r0, #0
 8003a10:	d0cc      	beq.n	80039ac <HAL_DMA_Init+0x70>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003a12:	b17e      	cbz	r6, 8003a34 <HAL_DMA_Init+0xf8>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003a14:	f5b6 5f00 	cmp.w	r6, #8192	; 0x2000
 8003a18:	d016      	beq.n	8003a48 <HAL_DMA_Init+0x10c>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003a1a:	2d02      	cmp	r5, #2
 8003a1c:	d903      	bls.n	8003a26 <HAL_DMA_Init+0xea>
 8003a1e:	2d03      	cmp	r5, #3
 8003a20:	d1c4      	bne.n	80039ac <HAL_DMA_Init+0x70>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003a22:	01c2      	lsls	r2, r0, #7
 8003a24:	d5c2      	bpl.n	80039ac <HAL_DMA_Init+0x70>
        hdma->State = HAL_DMA_STATE_READY;
 8003a26:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003a28:	2240      	movs	r2, #64	; 0x40
 8003a2a:	6562      	str	r2, [r4, #84]	; 0x54
        return HAL_ERROR; 
 8003a2c:	4618      	mov	r0, r3
        hdma->State = HAL_DMA_STATE_READY;
 8003a2e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8003a32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch (tmp)
 8003a34:	2d01      	cmp	r5, #1
 8003a36:	d003      	beq.n	8003a40 <HAL_DMA_Init+0x104>
 8003a38:	d3f3      	bcc.n	8003a22 <HAL_DMA_Init+0xe6>
 8003a3a:	2d02      	cmp	r5, #2
 8003a3c:	d1b6      	bne.n	80039ac <HAL_DMA_Init+0x70>
 8003a3e:	e7f0      	b.n	8003a22 <HAL_DMA_Init+0xe6>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003a40:	f1b0 7fc0 	cmp.w	r0, #25165824	; 0x1800000
 8003a44:	d1b2      	bne.n	80039ac <HAL_DMA_Init+0x70>
 8003a46:	e7ee      	b.n	8003a26 <HAL_DMA_Init+0xea>
    switch (tmp)
 8003a48:	2d03      	cmp	r5, #3
 8003a4a:	d8af      	bhi.n	80039ac <HAL_DMA_Init+0x70>
 8003a4c:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <HAL_DMA_Init+0x118>)
 8003a4e:	f852 f025 	ldr.w	pc, [r2, r5, lsl #2]
 8003a52:	bf00      	nop
 8003a54:	08003a27 	.word	0x08003a27
 8003a58:	08003a23 	.word	0x08003a23
 8003a5c:	08003a27 	.word	0x08003a27
 8003a60:	08003a41 	.word	0x08003a41
 8003a64:	f010803f 	.word	0xf010803f
 8003a68:	aaaaaaab 	.word	0xaaaaaaab
 8003a6c:	08008b08 	.word	0x08008b08

08003a70 <HAL_DMA_Start_IT>:
{
 8003a70:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(hdma);
 8003a72:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
 8003a76:	2c01      	cmp	r4, #1
 8003a78:	d035      	beq.n	8003ae6 <HAL_DMA_Start_IT+0x76>
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a7a:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a7e:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8003a80:	2501      	movs	r5, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a82:	42ac      	cmp	r4, r5
  __HAL_LOCK(hdma);
 8003a84:	f880 5034 	strb.w	r5, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a88:	d127      	bne.n	8003ada <HAL_DMA_Start_IT+0x6a>
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a8a:	6804      	ldr	r4, [r0, #0]
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a8c:	2702      	movs	r7, #2
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a8e:	2500      	movs	r5, #0
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a90:	f880 7035 	strb.w	r7, [r0, #53]	; 0x35
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a94:	6545      	str	r5, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a96:	6825      	ldr	r5, [r4, #0]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a98:	6887      	ldr	r7, [r0, #8]
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a9a:	f425 2580 	bic.w	r5, r5, #262144	; 0x40000
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a9e:	2f40      	cmp	r7, #64	; 0x40
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003aa0:	6025      	str	r5, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8003aa2:	6063      	str	r3, [r4, #4]
    hdma->Instance->PAR = DstAddress;
 8003aa4:	bf0a      	itet	eq
 8003aa6:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8003aa8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = SrcAddress;
 8003aaa:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003aac:	6dc1      	ldr	r1, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = DstAddress;
 8003aae:	bf18      	it	ne
 8003ab0:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ab2:	233f      	movs	r3, #63	; 0x3f
 8003ab4:	408b      	lsls	r3, r1
    if(hdma->XferHalfCpltCallback != NULL)
 8003ab6:	6c02      	ldr	r2, [r0, #64]	; 0x40
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ab8:	60b3      	str	r3, [r6, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003aba:	6823      	ldr	r3, [r4, #0]
 8003abc:	f043 0316 	orr.w	r3, r3, #22
 8003ac0:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8003ac2:	b11a      	cbz	r2, 8003acc <HAL_DMA_Start_IT+0x5c>
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ac4:	6823      	ldr	r3, [r4, #0]
 8003ac6:	f043 0308 	orr.w	r3, r3, #8
 8003aca:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8003acc:	6823      	ldr	r3, [r4, #0]
 8003ace:	f043 0301 	orr.w	r3, r3, #1
 8003ad2:	6023      	str	r3, [r4, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ad4:	2000      	movs	r0, #0
}
 8003ad6:	bcf0      	pop	{r4, r5, r6, r7}
 8003ad8:	4770      	bx	lr
    __HAL_UNLOCK(hdma);	  
 8003ada:	2300      	movs	r3, #0
 8003adc:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8003ae0:	bcf0      	pop	{r4, r5, r6, r7}
    status = HAL_BUSY;
 8003ae2:	2002      	movs	r0, #2
}
 8003ae4:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8003ae6:	2002      	movs	r0, #2
}
 8003ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8003aea:	4770      	bx	lr

08003aec <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003aec:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	d003      	beq.n	8003afc <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003af4:	2380      	movs	r3, #128	; 0x80
 8003af6:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8003af8:	2001      	movs	r0, #1
 8003afa:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8003afc:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8003afe:	2305      	movs	r3, #5
 8003b00:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8003b04:	6813      	ldr	r3, [r2, #0]
 8003b06:	f023 0301 	bic.w	r3, r3, #1
 8003b0a:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8003b0c:	2000      	movs	r0, #0
}
 8003b0e:	4770      	bx	lr

08003b10 <HAL_DMA_IRQHandler>:
{
 8003b10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b12:	b083      	sub	sp, #12
  __IO uint32_t count = 0U;
 8003b14:	2300      	movs	r3, #0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b16:	6d87      	ldr	r7, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8003b18:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b1a:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8003b1c:	683d      	ldr	r5, [r7, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b1e:	4965      	ldr	r1, [pc, #404]	; (8003cb4 <HAL_DMA_IRQHandler+0x1a4>)
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b20:	2208      	movs	r2, #8
 8003b22:	409a      	lsls	r2, r3
 8003b24:	422a      	tst	r2, r5
{
 8003b26:	4604      	mov	r4, r0
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b28:	680e      	ldr	r6, [r1, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b2a:	d003      	beq.n	8003b34 <HAL_DMA_IRQHandler+0x24>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b2c:	6801      	ldr	r1, [r0, #0]
 8003b2e:	6808      	ldr	r0, [r1, #0]
 8003b30:	0740      	lsls	r0, r0, #29
 8003b32:	d459      	bmi.n	8003be8 <HAL_DMA_IRQHandler+0xd8>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b34:	2201      	movs	r2, #1
 8003b36:	409a      	lsls	r2, r3
 8003b38:	422a      	tst	r2, r5
 8003b3a:	d003      	beq.n	8003b44 <HAL_DMA_IRQHandler+0x34>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003b3c:	6821      	ldr	r1, [r4, #0]
 8003b3e:	6949      	ldr	r1, [r1, #20]
 8003b40:	0608      	lsls	r0, r1, #24
 8003b42:	d474      	bmi.n	8003c2e <HAL_DMA_IRQHandler+0x11e>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b44:	2204      	movs	r2, #4
 8003b46:	409a      	lsls	r2, r3
 8003b48:	422a      	tst	r2, r5
 8003b4a:	d003      	beq.n	8003b54 <HAL_DMA_IRQHandler+0x44>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003b4c:	6821      	ldr	r1, [r4, #0]
 8003b4e:	6809      	ldr	r1, [r1, #0]
 8003b50:	0789      	lsls	r1, r1, #30
 8003b52:	d466      	bmi.n	8003c22 <HAL_DMA_IRQHandler+0x112>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003b54:	2210      	movs	r2, #16
 8003b56:	409a      	lsls	r2, r3
 8003b58:	422a      	tst	r2, r5
 8003b5a:	d003      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x54>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003b5c:	6821      	ldr	r1, [r4, #0]
 8003b5e:	6808      	ldr	r0, [r1, #0]
 8003b60:	0700      	lsls	r0, r0, #28
 8003b62:	d44b      	bmi.n	8003bfc <HAL_DMA_IRQHandler+0xec>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003b64:	2220      	movs	r2, #32
 8003b66:	409a      	lsls	r2, r3
 8003b68:	422a      	tst	r2, r5
 8003b6a:	d014      	beq.n	8003b96 <HAL_DMA_IRQHandler+0x86>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003b6c:	6821      	ldr	r1, [r4, #0]
 8003b6e:	6808      	ldr	r0, [r1, #0]
 8003b70:	06c0      	lsls	r0, r0, #27
 8003b72:	d510      	bpl.n	8003b96 <HAL_DMA_IRQHandler+0x86>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003b74:	60ba      	str	r2, [r7, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003b76:	f894 2035 	ldrb.w	r2, [r4, #53]	; 0x35
 8003b7a:	2a05      	cmp	r2, #5
 8003b7c:	d063      	beq.n	8003c46 <HAL_DMA_IRQHandler+0x136>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b7e:	680b      	ldr	r3, [r1, #0]
 8003b80:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b84:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003b86:	d07e      	beq.n	8003c86 <HAL_DMA_IRQHandler+0x176>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003b88:	0319      	lsls	r1, r3, #12
 8003b8a:	f140 8089 	bpl.w	8003ca0 <HAL_DMA_IRQHandler+0x190>
        if(hdma->XferCpltCallback != NULL)
 8003b8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003b90:	b10b      	cbz	r3, 8003b96 <HAL_DMA_IRQHandler+0x86>
          hdma->XferCpltCallback(hdma);
 8003b92:	4620      	mov	r0, r4
 8003b94:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b96:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b98:	b323      	cbz	r3, 8003be4 <HAL_DMA_IRQHandler+0xd4>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b9a:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8003b9c:	07da      	lsls	r2, r3, #31
 8003b9e:	d51a      	bpl.n	8003bd6 <HAL_DMA_IRQHandler+0xc6>
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ba0:	2305      	movs	r3, #5
      __HAL_DMA_DISABLE(hdma);
 8003ba2:	6822      	ldr	r2, [r4, #0]
      hdma->State = HAL_DMA_STATE_ABORT;
 8003ba4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8003ba8:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003baa:	4943      	ldr	r1, [pc, #268]	; (8003cb8 <HAL_DMA_IRQHandler+0x1a8>)
      __HAL_DMA_DISABLE(hdma);
 8003bac:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bb0:	fba1 1606 	umull	r1, r6, r1, r6
      __HAL_DMA_DISABLE(hdma);
 8003bb4:	6013      	str	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003bb6:	0ab6      	lsrs	r6, r6, #10
 8003bb8:	e002      	b.n	8003bc0 <HAL_DMA_IRQHandler+0xb0>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003bba:	6813      	ldr	r3, [r2, #0]
 8003bbc:	07db      	lsls	r3, r3, #31
 8003bbe:	d504      	bpl.n	8003bca <HAL_DMA_IRQHandler+0xba>
        if (++count > timeout)
 8003bc0:	9b01      	ldr	r3, [sp, #4]
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	42b3      	cmp	r3, r6
 8003bc6:	9301      	str	r3, [sp, #4]
 8003bc8:	d9f7      	bls.n	8003bba <HAL_DMA_IRQHandler+0xaa>
      __HAL_UNLOCK(hdma);
 8003bca:	2200      	movs	r2, #0
      hdma->State = HAL_DMA_STATE_READY;
 8003bcc:	2301      	movs	r3, #1
      __HAL_UNLOCK(hdma);
 8003bce:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
      hdma->State = HAL_DMA_STATE_READY;
 8003bd2:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
    if(hdma->XferErrorCallback != NULL)
 8003bd6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8003bd8:	b123      	cbz	r3, 8003be4 <HAL_DMA_IRQHandler+0xd4>
      hdma->XferErrorCallback(hdma);
 8003bda:	4620      	mov	r0, r4
}
 8003bdc:	b003      	add	sp, #12
 8003bde:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
      hdma->XferErrorCallback(hdma);
 8003be2:	4718      	bx	r3
}
 8003be4:	b003      	add	sp, #12
 8003be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003be8:	6808      	ldr	r0, [r1, #0]
 8003bea:	f020 0004 	bic.w	r0, r0, #4
 8003bee:	6008      	str	r0, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003bf0:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003bf2:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003bf4:	f042 0201 	orr.w	r2, r2, #1
 8003bf8:	6562      	str	r2, [r4, #84]	; 0x54
 8003bfa:	e79b      	b.n	8003b34 <HAL_DMA_IRQHandler+0x24>
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003bfc:	60ba      	str	r2, [r7, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003bfe:	680a      	ldr	r2, [r1, #0]
 8003c00:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c04:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c06:	d118      	bne.n	8003c3a <HAL_DMA_IRQHandler+0x12a>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c08:	05d2      	lsls	r2, r2, #23
 8003c0a:	d403      	bmi.n	8003c14 <HAL_DMA_IRQHandler+0x104>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c0c:	680a      	ldr	r2, [r1, #0]
 8003c0e:	f022 0208 	bic.w	r2, r2, #8
 8003c12:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 8003c14:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003c16:	2a00      	cmp	r2, #0
 8003c18:	d0a4      	beq.n	8003b64 <HAL_DMA_IRQHandler+0x54>
          hdma->XferHalfCpltCallback(hdma);
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	4790      	blx	r2
 8003c1e:	6de3      	ldr	r3, [r4, #92]	; 0x5c
 8003c20:	e7a0      	b.n	8003b64 <HAL_DMA_IRQHandler+0x54>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003c22:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003c24:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003c26:	f042 0204 	orr.w	r2, r2, #4
 8003c2a:	6562      	str	r2, [r4, #84]	; 0x54
 8003c2c:	e792      	b.n	8003b54 <HAL_DMA_IRQHandler+0x44>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003c2e:	60ba      	str	r2, [r7, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003c30:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8003c32:	f042 0202 	orr.w	r2, r2, #2
 8003c36:	6562      	str	r2, [r4, #84]	; 0x54
 8003c38:	e784      	b.n	8003b44 <HAL_DMA_IRQHandler+0x34>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c3a:	0311      	lsls	r1, r2, #12
 8003c3c:	d5ea      	bpl.n	8003c14 <HAL_DMA_IRQHandler+0x104>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c3e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003c40:	2a00      	cmp	r2, #0
 8003c42:	d1ea      	bne.n	8003c1a <HAL_DMA_IRQHandler+0x10a>
 8003c44:	e78e      	b.n	8003b64 <HAL_DMA_IRQHandler+0x54>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c46:	680a      	ldr	r2, [r1, #0]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c48:	6c20      	ldr	r0, [r4, #64]	; 0x40
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003c4a:	f022 0216 	bic.w	r2, r2, #22
 8003c4e:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003c50:	694a      	ldr	r2, [r1, #20]
 8003c52:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003c56:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003c58:	b338      	cbz	r0, 8003caa <HAL_DMA_IRQHandler+0x19a>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c5a:	680a      	ldr	r2, [r1, #0]
 8003c5c:	f022 0208 	bic.w	r2, r2, #8
 8003c60:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c62:	223f      	movs	r2, #63	; 0x3f
        if(hdma->XferAbortCallback != NULL)
 8003c64:	6d21      	ldr	r1, [r4, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
        __HAL_UNLOCK(hdma);
 8003c6a:	2000      	movs	r0, #0
        hdma->State = HAL_DMA_STATE_READY;
 8003c6c:	2201      	movs	r2, #1
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003c6e:	60bb      	str	r3, [r7, #8]
        __HAL_UNLOCK(hdma);
 8003c70:	f884 0034 	strb.w	r0, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_READY;
 8003c74:	f884 2035 	strb.w	r2, [r4, #53]	; 0x35
        if(hdma->XferAbortCallback != NULL)
 8003c78:	2900      	cmp	r1, #0
 8003c7a:	d0b3      	beq.n	8003be4 <HAL_DMA_IRQHandler+0xd4>
          hdma->XferAbortCallback(hdma);
 8003c7c:	4620      	mov	r0, r4
}
 8003c7e:	b003      	add	sp, #12
 8003c80:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
          hdma->XferAbortCallback(hdma);
 8003c84:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c86:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8003c8a:	d180      	bne.n	8003b8e <HAL_DMA_IRQHandler+0x7e>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c8c:	680a      	ldr	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 8003c8e:	2001      	movs	r0, #1
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003c90:	f022 0210 	bic.w	r2, r2, #16
 8003c94:	600a      	str	r2, [r1, #0]
          __HAL_UNLOCK(hdma);
 8003c96:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
          hdma->State = HAL_DMA_STATE_READY;
 8003c9a:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
 8003c9e:	e776      	b.n	8003b8e <HAL_DMA_IRQHandler+0x7e>
          if(hdma->XferM1CpltCallback != NULL)
 8003ca0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	f47f af75 	bne.w	8003b92 <HAL_DMA_IRQHandler+0x82>
 8003ca8:	e775      	b.n	8003b96 <HAL_DMA_IRQHandler+0x86>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003caa:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8003cac:	2a00      	cmp	r2, #0
 8003cae:	d1d4      	bne.n	8003c5a <HAL_DMA_IRQHandler+0x14a>
 8003cb0:	e7d7      	b.n	8003c62 <HAL_DMA_IRQHandler+0x152>
 8003cb2:	bf00      	nop
 8003cb4:	200016cc 	.word	0x200016cc
 8003cb8:	1b4e81b5 	.word	0x1b4e81b5

08003cbc <HAL_DMA_GetError>:
  return hdma->ErrorCode;
 8003cbc:	6d40      	ldr	r0, [r0, #84]	; 0x54
}
 8003cbe:	4770      	bx	lr

08003cc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cc4:	f8d1 8000 	ldr.w	r8, [r1]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003cc8:	f8df e1f4 	ldr.w	lr, [pc, #500]	; 8003ec0 <HAL_GPIO_Init+0x200>
{
 8003ccc:	b083      	sub	sp, #12
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cce:	2400      	movs	r4, #0
 8003cd0:	e003      	b.n	8003cda <HAL_GPIO_Init+0x1a>
 8003cd2:	3401      	adds	r4, #1
 8003cd4:	2c10      	cmp	r4, #16
 8003cd6:	f000 808c 	beq.w	8003df2 <HAL_GPIO_Init+0x132>
    ioposition = 0x01U << position;
 8003cda:	2301      	movs	r3, #1
 8003cdc:	40a3      	lsls	r3, r4
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cde:	ea08 0203 	and.w	r2, r8, r3
    if(iocurrent == ioposition)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d1f5      	bne.n	8003cd2 <HAL_GPIO_Init+0x12>
 8003ce6:	e9d1 6501 	ldrd	r6, r5, [r1, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003cea:	f026 0910 	bic.w	r9, r6, #16
 8003cee:	ea4f 0c44 	mov.w	ip, r4, lsl #1
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	f109 37ff 	add.w	r7, r9, #4294967295
 8003cf8:	fa03 f30c 	lsl.w	r3, r3, ip
 8003cfc:	2f01      	cmp	r7, #1
 8003cfe:	ea6f 0303 	mvn.w	r3, r3
 8003d02:	fa05 f50c 	lsl.w	r5, r5, ip
 8003d06:	d977      	bls.n	8003df8 <HAL_GPIO_Init+0x138>
      temp = GPIOx->PUPDR;
 8003d08:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d0a:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d0c:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8003d0e:	60c5      	str	r5, [r0, #12]
      temp = GPIOx->MODER;
 8003d10:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d12:	f006 0503 	and.w	r5, r6, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d16:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d18:	fa05 f30c 	lsl.w	r3, r5, ip
 8003d1c:	433b      	orrs	r3, r7
      GPIOx->MODER = temp;
 8003d1e:	6003      	str	r3, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d20:	00f3      	lsls	r3, r6, #3
 8003d22:	d5d6      	bpl.n	8003cd2 <HAL_GPIO_Init+0x12>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d24:	4d5f      	ldr	r5, [pc, #380]	; (8003ea4 <HAL_GPIO_Init+0x1e4>)
 8003d26:	2300      	movs	r3, #0
 8003d28:	9301      	str	r3, [sp, #4]
 8003d2a:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d30:	646b      	str	r3, [r5, #68]	; 0x44
 8003d32:	6c6d      	ldr	r5, [r5, #68]	; 0x44
 8003d34:	f024 0303 	bic.w	r3, r4, #3
 8003d38:	f405 4580 	and.w	r5, r5, #16384	; 0x4000
 8003d3c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003d40:	9501      	str	r5, [sp, #4]
 8003d42:	f503 339c 	add.w	r3, r3, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d46:	f004 0503 	and.w	r5, r4, #3
 8003d4a:	ea4f 0985 	mov.w	r9, r5, lsl #2
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d4e:	4d56      	ldr	r5, [pc, #344]	; (8003ea8 <HAL_GPIO_Init+0x1e8>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d50:	9f01      	ldr	r7, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8003d52:	f8d3 c008 	ldr.w	ip, [r3, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d56:	270f      	movs	r7, #15
 8003d58:	fa07 f709 	lsl.w	r7, r7, r9
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d5c:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003d5e:	ea2c 0707 	bic.w	r7, ip, r7
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003d62:	d01f      	beq.n	8003da4 <HAL_GPIO_Init+0xe4>
 8003d64:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8003d68:	42a8      	cmp	r0, r5
 8003d6a:	d076      	beq.n	8003e5a <HAL_GPIO_Init+0x19a>
 8003d6c:	4d4f      	ldr	r5, [pc, #316]	; (8003eac <HAL_GPIO_Init+0x1ec>)
 8003d6e:	42a8      	cmp	r0, r5
 8003d70:	d079      	beq.n	8003e66 <HAL_GPIO_Init+0x1a6>
 8003d72:	4d4f      	ldr	r5, [pc, #316]	; (8003eb0 <HAL_GPIO_Init+0x1f0>)
 8003d74:	42a8      	cmp	r0, r5
 8003d76:	d07c      	beq.n	8003e72 <HAL_GPIO_Init+0x1b2>
 8003d78:	4d4e      	ldr	r5, [pc, #312]	; (8003eb4 <HAL_GPIO_Init+0x1f4>)
 8003d7a:	42a8      	cmp	r0, r5
 8003d7c:	d07f      	beq.n	8003e7e <HAL_GPIO_Init+0x1be>
 8003d7e:	4d4e      	ldr	r5, [pc, #312]	; (8003eb8 <HAL_GPIO_Init+0x1f8>)
 8003d80:	42a8      	cmp	r0, r5
 8003d82:	f000 8082 	beq.w	8003e8a <HAL_GPIO_Init+0x1ca>
 8003d86:	4d4d      	ldr	r5, [pc, #308]	; (8003ebc <HAL_GPIO_Init+0x1fc>)
 8003d88:	42a8      	cmp	r0, r5
 8003d8a:	f000 8084 	beq.w	8003e96 <HAL_GPIO_Init+0x1d6>
 8003d8e:	f8df c134 	ldr.w	ip, [pc, #308]	; 8003ec4 <HAL_GPIO_Init+0x204>
 8003d92:	4560      	cmp	r0, ip
 8003d94:	bf0c      	ite	eq
 8003d96:	f04f 0c07 	moveq.w	ip, #7
 8003d9a:	f04f 0c08 	movne.w	ip, #8
 8003d9e:	fa0c f509 	lsl.w	r5, ip, r9
 8003da2:	432f      	orrs	r7, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003da4:	609f      	str	r7, [r3, #8]
        temp = EXTI->IMR;
 8003da6:	f8de 3000 	ldr.w	r3, [lr]
        temp &= ~((uint32_t)iocurrent);
 8003daa:	43d5      	mvns	r5, r2
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dac:	03f7      	lsls	r7, r6, #15
        temp &= ~((uint32_t)iocurrent);
 8003dae:	bf54      	ite	pl
 8003db0:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8003db2:	4313      	orrmi	r3, r2
        }
        EXTI->IMR = temp;
 8003db4:	f8ce 3000 	str.w	r3, [lr]

        temp = EXTI->EMR;
 8003db8:	f8de 3004 	ldr.w	r3, [lr, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003dbc:	03b7      	lsls	r7, r6, #14
        temp &= ~((uint32_t)iocurrent);
 8003dbe:	bf54      	ite	pl
 8003dc0:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8003dc2:	4313      	orrmi	r3, r2
        }
        EXTI->EMR = temp;
 8003dc4:	f8ce 3004 	str.w	r3, [lr, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003dc8:	f8de 3008 	ldr.w	r3, [lr, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003dcc:	02f7      	lsls	r7, r6, #11
        temp &= ~((uint32_t)iocurrent);
 8003dce:	bf54      	ite	pl
 8003dd0:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8003dd2:	4313      	orrmi	r3, r2
        }
        EXTI->RTSR = temp;
 8003dd4:	f8ce 3008 	str.w	r3, [lr, #8]

        temp = EXTI->FTSR;
 8003dd8:	f8de 300c 	ldr.w	r3, [lr, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003ddc:	02b6      	lsls	r6, r6, #10
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dde:	f104 0401 	add.w	r4, r4, #1
        temp &= ~((uint32_t)iocurrent);
 8003de2:	bf54      	ite	pl
 8003de4:	402b      	andpl	r3, r5
        {
          temp |= iocurrent;
 8003de6:	4313      	orrmi	r3, r2
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003de8:	2c10      	cmp	r4, #16
        }
        EXTI->FTSR = temp;
 8003dea:	f8ce 300c 	str.w	r3, [lr, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003dee:	f47f af74 	bne.w	8003cda <HAL_GPIO_Init+0x1a>
      }
    }
  }
}
 8003df2:	b003      	add	sp, #12
 8003df4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->OSPEEDR; 
 8003df8:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dfa:	ea07 0a03 	and.w	sl, r7, r3
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dfe:	68cf      	ldr	r7, [r1, #12]
 8003e00:	fa07 f70c 	lsl.w	r7, r7, ip
 8003e04:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8003e08:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8003e0a:	f8d0 a004 	ldr.w	sl, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e0e:	f3c6 1700 	ubfx	r7, r6, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003e12:	ea2a 0a02 	bic.w	sl, sl, r2
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e16:	40a7      	lsls	r7, r4
 8003e18:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OTYPER = temp;
 8003e1c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8003e1e:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e20:	401f      	ands	r7, r3
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e22:	433d      	orrs	r5, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e24:	f1b9 0f02 	cmp.w	r9, #2
      GPIOx->PUPDR = temp;
 8003e28:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003e2a:	f47f af71 	bne.w	8003d10 <HAL_GPIO_Init+0x50>
        temp = GPIOx->AFR[position >> 3U];
 8003e2e:	ea4f 09d4 	mov.w	r9, r4, lsr #3
 8003e32:	eb00 0989 	add.w	r9, r0, r9, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e36:	f004 0707 	and.w	r7, r4, #7
        temp = GPIOx->AFR[position >> 3U];
 8003e3a:	f8d9 5020 	ldr.w	r5, [r9, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e3e:	00bf      	lsls	r7, r7, #2
 8003e40:	f04f 0b0f 	mov.w	fp, #15
 8003e44:	fa0b fb07 	lsl.w	fp, fp, r7
 8003e48:	ea25 0a0b 	bic.w	sl, r5, fp
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e4c:	690d      	ldr	r5, [r1, #16]
 8003e4e:	40bd      	lsls	r5, r7
 8003e50:	ea45 050a 	orr.w	r5, r5, sl
        GPIOx->AFR[position >> 3U] = temp;
 8003e54:	f8c9 5020 	str.w	r5, [r9, #32]
 8003e58:	e75a      	b.n	8003d10 <HAL_GPIO_Init+0x50>
 8003e5a:	f04f 0c01 	mov.w	ip, #1
 8003e5e:	fa0c f509 	lsl.w	r5, ip, r9
 8003e62:	432f      	orrs	r7, r5
 8003e64:	e79e      	b.n	8003da4 <HAL_GPIO_Init+0xe4>
 8003e66:	f04f 0c02 	mov.w	ip, #2
 8003e6a:	fa0c f509 	lsl.w	r5, ip, r9
 8003e6e:	432f      	orrs	r7, r5
 8003e70:	e798      	b.n	8003da4 <HAL_GPIO_Init+0xe4>
 8003e72:	f04f 0c03 	mov.w	ip, #3
 8003e76:	fa0c f509 	lsl.w	r5, ip, r9
 8003e7a:	432f      	orrs	r7, r5
 8003e7c:	e792      	b.n	8003da4 <HAL_GPIO_Init+0xe4>
 8003e7e:	f04f 0c04 	mov.w	ip, #4
 8003e82:	fa0c f509 	lsl.w	r5, ip, r9
 8003e86:	432f      	orrs	r7, r5
 8003e88:	e78c      	b.n	8003da4 <HAL_GPIO_Init+0xe4>
 8003e8a:	f04f 0c05 	mov.w	ip, #5
 8003e8e:	fa0c f509 	lsl.w	r5, ip, r9
 8003e92:	432f      	orrs	r7, r5
 8003e94:	e786      	b.n	8003da4 <HAL_GPIO_Init+0xe4>
 8003e96:	f04f 0c06 	mov.w	ip, #6
 8003e9a:	fa0c f509 	lsl.w	r5, ip, r9
 8003e9e:	432f      	orrs	r7, r5
 8003ea0:	e780      	b.n	8003da4 <HAL_GPIO_Init+0xe4>
 8003ea2:	bf00      	nop
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40020000 	.word	0x40020000
 8003eac:	40020800 	.word	0x40020800
 8003eb0:	40020c00 	.word	0x40020c00
 8003eb4:	40021000 	.word	0x40021000
 8003eb8:	40021400 	.word	0x40021400
 8003ebc:	40021800 	.word	0x40021800
 8003ec0:	40013c00 	.word	0x40013c00
 8003ec4:	40021c00 	.word	0x40021c00

08003ec8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003ec8:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8003ecc:	4604      	mov	r4, r0
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ece:	6800      	ldr	r0, [r0, #0]
{
 8003ed0:	b082      	sub	sp, #8
 8003ed2:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed4:	6801      	ldr	r1, [r0, #0]
{
 8003ed6:	9d08      	ldr	r5, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ed8:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 8003edc:	4616      	mov	r6, r2
 8003ede:	461f      	mov	r7, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee0:	6001      	str	r1, [r0, #0]
 8003ee2:	1c6a      	adds	r2, r5, #1
 8003ee4:	d140      	bne.n	8003f68 <I2C_RequestMemoryWrite+0xa0>
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ee6:	6943      	ldr	r3, [r0, #20]
 8003ee8:	07db      	lsls	r3, r3, #31
 8003eea:	d5fc      	bpl.n	8003ee6 <I2C_RequestMemoryWrite+0x1e>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003eec:	f009 01fe 	and.w	r1, r9, #254	; 0xfe
 8003ef0:	6101      	str	r1, [r0, #16]
 8003ef2:	1c6b      	adds	r3, r5, #1
 8003ef4:	d014      	beq.n	8003f20 <I2C_RequestMemoryWrite+0x58>
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003ef6:	6943      	ldr	r3, [r0, #20]
 8003ef8:	079b      	lsls	r3, r3, #30
 8003efa:	d414      	bmi.n	8003f26 <I2C_RequestMemoryWrite+0x5e>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003efc:	6943      	ldr	r3, [r0, #20]
 8003efe:	055a      	lsls	r2, r3, #21
 8003f00:	d456      	bmi.n	8003fb0 <I2C_RequestMemoryWrite+0xe8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f02:	f7ff fc93 	bl	800382c <HAL_GetTick>
 8003f06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f08:	1ac0      	subs	r0, r0, r3
 8003f0a:	4285      	cmp	r5, r0
 8003f0c:	f0c0 80a0 	bcc.w	8004050 <I2C_RequestMemoryWrite+0x188>
 8003f10:	2d00      	cmp	r5, #0
 8003f12:	f000 809d 	beq.w	8004050 <I2C_RequestMemoryWrite+0x188>
 8003f16:	6820      	ldr	r0, [r4, #0]
 8003f18:	e7eb      	b.n	8003ef2 <I2C_RequestMemoryWrite+0x2a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f1a:	6943      	ldr	r3, [r0, #20]
 8003f1c:	055a      	lsls	r2, r3, #21
 8003f1e:	d447      	bmi.n	8003fb0 <I2C_RequestMemoryWrite+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003f20:	6943      	ldr	r3, [r0, #20]
 8003f22:	0799      	lsls	r1, r3, #30
 8003f24:	d5f9      	bpl.n	8003f1a <I2C_RequestMemoryWrite+0x52>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f26:	2300      	movs	r3, #0
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	6943      	ldr	r3, [r0, #20]
 8003f2c:	9301      	str	r3, [sp, #4]
 8003f2e:	6983      	ldr	r3, [r0, #24]
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	9b01      	ldr	r3, [sp, #4]
 8003f34:	1c6a      	adds	r2, r5, #1
 8003f36:	d003      	beq.n	8003f40 <I2C_RequestMemoryWrite+0x78>
 8003f38:	e06c      	b.n	8004014 <I2C_RequestMemoryWrite+0x14c>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f3a:	6943      	ldr	r3, [r0, #20]
 8003f3c:	0559      	lsls	r1, r3, #21
 8003f3e:	d44f      	bmi.n	8003fe0 <I2C_RequestMemoryWrite+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f40:	6943      	ldr	r3, [r0, #20]
 8003f42:	061b      	lsls	r3, r3, #24
 8003f44:	d5f9      	bpl.n	8003f3a <I2C_RequestMemoryWrite+0x72>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f46:	2f01      	cmp	r7, #1
 8003f48:	d00a      	beq.n	8003f60 <I2C_RequestMemoryWrite+0x98>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f4a:	0a33      	lsrs	r3, r6, #8
 8003f4c:	6103      	str	r3, [r0, #16]
 8003f4e:	1c6f      	adds	r7, r5, #1
 8003f50:	d003      	beq.n	8003f5a <I2C_RequestMemoryWrite+0x92>
 8003f52:	e06e      	b.n	8004032 <I2C_RequestMemoryWrite+0x16a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f54:	6943      	ldr	r3, [r0, #20]
 8003f56:	055a      	lsls	r2, r3, #21
 8003f58:	d442      	bmi.n	8003fe0 <I2C_RequestMemoryWrite+0x118>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f5a:	6943      	ldr	r3, [r0, #20]
 8003f5c:	0619      	lsls	r1, r3, #24
 8003f5e:	d5f9      	bpl.n	8003f54 <I2C_RequestMemoryWrite+0x8c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f60:	b2f6      	uxtb	r6, r6
 8003f62:	6106      	str	r6, [r0, #16]
  return HAL_OK;
 8003f64:	2000      	movs	r0, #0
 8003f66:	e01c      	b.n	8003fa2 <I2C_RequestMemoryWrite+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f68:	6943      	ldr	r3, [r0, #20]
 8003f6a:	07d9      	lsls	r1, r3, #31
 8003f6c:	d4be      	bmi.n	8003eec <I2C_RequestMemoryWrite+0x24>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f6e:	f7ff fc5d 	bl	800382c <HAL_GetTick>
 8003f72:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003f74:	1ac0      	subs	r0, r0, r3
 8003f76:	4285      	cmp	r5, r0
 8003f78:	6820      	ldr	r0, [r4, #0]
 8003f7a:	d301      	bcc.n	8003f80 <I2C_RequestMemoryWrite+0xb8>
 8003f7c:	2d00      	cmp	r5, #0
 8003f7e:	d1b0      	bne.n	8003ee2 <I2C_RequestMemoryWrite+0x1a>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f80:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f82:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003f84:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003f86:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003f8a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8003f90:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003f94:	f043 0320 	orr.w	r3, r3, #32
 8003f98:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f9a:	6803      	ldr	r3, [r0, #0]
 8003f9c:	05d9      	lsls	r1, r3, #23
 8003f9e:	d403      	bmi.n	8003fa8 <I2C_RequestMemoryWrite+0xe0>
    return HAL_TIMEOUT;
 8003fa0:	2003      	movs	r0, #3
}
 8003fa2:	b002      	add	sp, #8
 8003fa4:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003fa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003fac:	6423      	str	r3, [r4, #64]	; 0x40
 8003fae:	e7f7      	b.n	8003fa0 <I2C_RequestMemoryWrite+0xd8>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb0:	6803      	ldr	r3, [r0, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fb2:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fb4:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fbc:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fbe:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fc0:	6145      	str	r5, [r0, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003fc2:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003fc4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fc8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fcc:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8003fce:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd2:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 8003fd6:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fd8:	6423      	str	r3, [r4, #64]	; 0x40
}
 8003fda:	b002      	add	sp, #8
 8003fdc:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fe0:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fe2:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fe4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 8003fe8:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fea:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ff0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ff4:	6c23      	ldr	r3, [r4, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ffa:	f043 0304 	orr.w	r3, r3, #4
 8003ffe:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004000:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004002:	2b04      	cmp	r3, #4
 8004004:	d104      	bne.n	8004010 <I2C_RequestMemoryWrite+0x148>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004006:	6822      	ldr	r2, [r4, #0]
 8004008:	6813      	ldr	r3, [r2, #0]
 800400a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800400e:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 8004010:	2001      	movs	r0, #1
 8004012:	e7c6      	b.n	8003fa2 <I2C_RequestMemoryWrite+0xda>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004014:	6943      	ldr	r3, [r0, #20]
 8004016:	061a      	lsls	r2, r3, #24
 8004018:	d495      	bmi.n	8003f46 <I2C_RequestMemoryWrite+0x7e>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800401a:	6943      	ldr	r3, [r0, #20]
 800401c:	0559      	lsls	r1, r3, #21
 800401e:	d4df      	bmi.n	8003fe0 <I2C_RequestMemoryWrite+0x118>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004020:	f7ff fc04 	bl	800382c <HAL_GetTick>
 8004024:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004026:	1ac0      	subs	r0, r0, r3
 8004028:	4285      	cmp	r5, r0
 800402a:	d320      	bcc.n	800406e <I2C_RequestMemoryWrite+0x1a6>
 800402c:	b1fd      	cbz	r5, 800406e <I2C_RequestMemoryWrite+0x1a6>
 800402e:	6820      	ldr	r0, [r4, #0]
 8004030:	e780      	b.n	8003f34 <I2C_RequestMemoryWrite+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004032:	6943      	ldr	r3, [r0, #20]
 8004034:	061b      	lsls	r3, r3, #24
 8004036:	d493      	bmi.n	8003f60 <I2C_RequestMemoryWrite+0x98>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004038:	6943      	ldr	r3, [r0, #20]
 800403a:	055b      	lsls	r3, r3, #21
 800403c:	d4d0      	bmi.n	8003fe0 <I2C_RequestMemoryWrite+0x118>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800403e:	f7ff fbf5 	bl	800382c <HAL_GetTick>
 8004042:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004044:	1ac0      	subs	r0, r0, r3
 8004046:	4285      	cmp	r5, r0
 8004048:	d311      	bcc.n	800406e <I2C_RequestMemoryWrite+0x1a6>
 800404a:	b185      	cbz	r5, 800406e <I2C_RequestMemoryWrite+0x1a6>
 800404c:	6820      	ldr	r0, [r4, #0]
 800404e:	e77e      	b.n	8003f4e <I2C_RequestMemoryWrite+0x86>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004050:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8004052:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004054:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004056:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800405a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800405e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004060:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004064:	f043 0320 	orr.w	r3, r3, #32
 8004068:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 800406a:	2001      	movs	r0, #1
 800406c:	e799      	b.n	8003fa2 <I2C_RequestMemoryWrite+0xda>
        hi2c->PreviousState     = I2C_STATE_NONE;
 800406e:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004070:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004072:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004074:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004078:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800407c:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800407e:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004082:	f043 0320 	orr.w	r3, r3, #32
 8004086:	6423      	str	r3, [r4, #64]	; 0x40
 8004088:	e7ba      	b.n	8004000 <I2C_RequestMemoryWrite+0x138>
 800408a:	bf00      	nop

0800408c <I2C_RequestMemoryRead>:
{
 800408c:	e92d 42f0 	stmdb	sp!, {r4, r5, r6, r7, r9, lr}
 8004090:	4604      	mov	r4, r0
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004092:	6800      	ldr	r0, [r0, #0]
{
 8004094:	4689      	mov	r9, r1
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004096:	6801      	ldr	r1, [r0, #0]
 8004098:	f441 6180 	orr.w	r1, r1, #1024	; 0x400
 800409c:	6001      	str	r1, [r0, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800409e:	6801      	ldr	r1, [r0, #0]
{
 80040a0:	b082      	sub	sp, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a2:	f441 7180 	orr.w	r1, r1, #256	; 0x100
{
 80040a6:	9d08      	ldr	r5, [sp, #32]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040a8:	6001      	str	r1, [r0, #0]
{
 80040aa:	4616      	mov	r6, r2
 80040ac:	461f      	mov	r7, r3
 80040ae:	1c6b      	adds	r3, r5, #1
 80040b0:	d15a      	bne.n	8004168 <I2C_RequestMemoryRead+0xdc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040b2:	6943      	ldr	r3, [r0, #20]
 80040b4:	07d9      	lsls	r1, r3, #31
 80040b6:	d5fc      	bpl.n	80040b2 <I2C_RequestMemoryRead+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040b8:	fa5f f989 	uxtb.w	r9, r9
 80040bc:	f009 03fe 	and.w	r3, r9, #254	; 0xfe
 80040c0:	6103      	str	r3, [r0, #16]
 80040c2:	1c69      	adds	r1, r5, #1
 80040c4:	d014      	beq.n	80040f0 <I2C_RequestMemoryRead+0x64>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040c6:	6943      	ldr	r3, [r0, #20]
 80040c8:	0799      	lsls	r1, r3, #30
 80040ca:	d414      	bmi.n	80040f6 <I2C_RequestMemoryRead+0x6a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040cc:	6943      	ldr	r3, [r0, #20]
 80040ce:	055b      	lsls	r3, r3, #21
 80040d0:	d46e      	bmi.n	80041b0 <I2C_RequestMemoryRead+0x124>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d2:	f7ff fbab 	bl	800382c <HAL_GetTick>
 80040d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040d8:	1ac0      	subs	r0, r0, r3
 80040da:	4285      	cmp	r5, r0
 80040dc:	f0c0 80e8 	bcc.w	80042b0 <I2C_RequestMemoryRead+0x224>
 80040e0:	2d00      	cmp	r5, #0
 80040e2:	f000 80e5 	beq.w	80042b0 <I2C_RequestMemoryRead+0x224>
 80040e6:	6820      	ldr	r0, [r4, #0]
 80040e8:	e7eb      	b.n	80040c2 <I2C_RequestMemoryRead+0x36>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80040ea:	6943      	ldr	r3, [r0, #20]
 80040ec:	055b      	lsls	r3, r3, #21
 80040ee:	d45f      	bmi.n	80041b0 <I2C_RequestMemoryRead+0x124>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80040f0:	6943      	ldr	r3, [r0, #20]
 80040f2:	079a      	lsls	r2, r3, #30
 80040f4:	d5f9      	bpl.n	80040ea <I2C_RequestMemoryRead+0x5e>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040f6:	2300      	movs	r3, #0
 80040f8:	9301      	str	r3, [sp, #4]
 80040fa:	6943      	ldr	r3, [r0, #20]
 80040fc:	9301      	str	r3, [sp, #4]
 80040fe:	6983      	ldr	r3, [r0, #24]
 8004100:	9301      	str	r3, [sp, #4]
 8004102:	9b01      	ldr	r3, [sp, #4]
 8004104:	1c6b      	adds	r3, r5, #1
 8004106:	d003      	beq.n	8004110 <I2C_RequestMemoryRead+0x84>
 8004108:	e084      	b.n	8004214 <I2C_RequestMemoryRead+0x188>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800410a:	6943      	ldr	r3, [r0, #20]
 800410c:	055a      	lsls	r2, r3, #21
 800410e:	d467      	bmi.n	80041e0 <I2C_RequestMemoryRead+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004110:	6943      	ldr	r3, [r0, #20]
 8004112:	0619      	lsls	r1, r3, #24
 8004114:	d5f9      	bpl.n	800410a <I2C_RequestMemoryRead+0x7e>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004116:	2f01      	cmp	r7, #1
 8004118:	f040 808d 	bne.w	8004236 <I2C_RequestMemoryRead+0x1aa>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800411c:	b2f6      	uxtb	r6, r6
 800411e:	6106      	str	r6, [r0, #16]
 8004120:	1c6b      	adds	r3, r5, #1
 8004122:	d003      	beq.n	800412c <I2C_RequestMemoryRead+0xa0>
 8004124:	e094      	b.n	8004250 <I2C_RequestMemoryRead+0x1c4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004126:	6943      	ldr	r3, [r0, #20]
 8004128:	055e      	lsls	r6, r3, #21
 800412a:	d459      	bmi.n	80041e0 <I2C_RequestMemoryRead+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800412c:	6943      	ldr	r3, [r0, #20]
 800412e:	061f      	lsls	r7, r3, #24
 8004130:	d5f9      	bpl.n	8004126 <I2C_RequestMemoryRead+0x9a>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004132:	6803      	ldr	r3, [r0, #0]
 8004134:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004138:	6003      	str	r3, [r0, #0]
 800413a:	1c6b      	adds	r3, r5, #1
 800413c:	f040 80a8 	bne.w	8004290 <I2C_RequestMemoryRead+0x204>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004140:	6943      	ldr	r3, [r0, #20]
 8004142:	07df      	lsls	r7, r3, #31
 8004144:	d5fc      	bpl.n	8004140 <I2C_RequestMemoryRead+0xb4>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004146:	f049 0901 	orr.w	r9, r9, #1
 800414a:	f8c0 9010 	str.w	r9, [r0, #16]
 800414e:	1c6a      	adds	r2, r5, #1
 8004150:	d003      	beq.n	800415a <I2C_RequestMemoryRead+0xce>
 8004152:	e0ca      	b.n	80042ea <I2C_RequestMemoryRead+0x25e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004154:	6943      	ldr	r3, [r0, #20]
 8004156:	055b      	lsls	r3, r3, #21
 8004158:	d42a      	bmi.n	80041b0 <I2C_RequestMemoryRead+0x124>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800415a:	6943      	ldr	r3, [r0, #20]
 800415c:	43db      	mvns	r3, r3
 800415e:	f013 0302 	ands.w	r3, r3, #2
 8004162:	d1f7      	bne.n	8004154 <I2C_RequestMemoryRead+0xc8>
  return HAL_OK;
 8004164:	4618      	mov	r0, r3
 8004166:	e01c      	b.n	80041a2 <I2C_RequestMemoryRead+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004168:	6943      	ldr	r3, [r0, #20]
 800416a:	07da      	lsls	r2, r3, #31
 800416c:	d4a4      	bmi.n	80040b8 <I2C_RequestMemoryRead+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800416e:	f7ff fb5d 	bl	800382c <HAL_GetTick>
 8004172:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004174:	1ac0      	subs	r0, r0, r3
 8004176:	4285      	cmp	r5, r0
 8004178:	6820      	ldr	r0, [r4, #0]
 800417a:	d301      	bcc.n	8004180 <I2C_RequestMemoryRead+0xf4>
 800417c:	2d00      	cmp	r5, #0
 800417e:	d196      	bne.n	80040ae <I2C_RequestMemoryRead+0x22>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004180:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004182:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004184:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004186:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800418a:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800418e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004190:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004194:	f043 0320 	orr.w	r3, r3, #32
 8004198:	6423      	str	r3, [r4, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800419a:	6803      	ldr	r3, [r0, #0]
 800419c:	05da      	lsls	r2, r3, #23
 800419e:	d403      	bmi.n	80041a8 <I2C_RequestMemoryRead+0x11c>
    return HAL_TIMEOUT;
 80041a0:	2003      	movs	r0, #3
}
 80041a2:	b002      	add	sp, #8
 80041a4:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041a8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80041ac:	6423      	str	r3, [r4, #64]	; 0x40
 80041ae:	e7f7      	b.n	80041a0 <I2C_RequestMemoryRead+0x114>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b0:	6803      	ldr	r3, [r0, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80041b2:	2200      	movs	r2, #0
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041b8:	f46f 6580 	mvn.w	r5, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 80041bc:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041be:	6003      	str	r3, [r0, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041c0:	6145      	str	r5, [r0, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80041c2:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80041c4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041c8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80041ce:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041d2:	f043 0304 	orr.w	r3, r3, #4
 80041d6:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80041d8:	2001      	movs	r0, #1
}
 80041da:	b002      	add	sp, #8
 80041dc:	e8bd 82f0 	ldmia.w	sp!, {r4, r5, r6, r7, r9, pc}
    hi2c->PreviousState       = I2C_STATE_NONE;
 80041e0:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80041e2:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041e4:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80041e8:	6141      	str	r1, [r0, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80041ea:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80041ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041f0:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041f4:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80041f6:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80041fa:	f043 0304 	orr.w	r3, r3, #4
 80041fe:	6423      	str	r3, [r4, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004200:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004202:	2b04      	cmp	r3, #4
 8004204:	d1e8      	bne.n	80041d8 <I2C_RequestMemoryRead+0x14c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004206:	6822      	ldr	r2, [r4, #0]
 8004208:	6813      	ldr	r3, [r2, #0]
 800420a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800420e:	6013      	str	r3, [r2, #0]
    return HAL_ERROR;
 8004210:	2001      	movs	r0, #1
 8004212:	e7c6      	b.n	80041a2 <I2C_RequestMemoryRead+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004214:	6943      	ldr	r3, [r0, #20]
 8004216:	061b      	lsls	r3, r3, #24
 8004218:	f53f af7d 	bmi.w	8004116 <I2C_RequestMemoryRead+0x8a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800421c:	6943      	ldr	r3, [r0, #20]
 800421e:	055a      	lsls	r2, r3, #21
 8004220:	d4de      	bmi.n	80041e0 <I2C_RequestMemoryRead+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004222:	f7ff fb03 	bl	800382c <HAL_GetTick>
 8004226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004228:	1ac0      	subs	r0, r0, r3
 800422a:	4285      	cmp	r5, r0
 800422c:	d34f      	bcc.n	80042ce <I2C_RequestMemoryRead+0x242>
 800422e:	2d00      	cmp	r5, #0
 8004230:	d04d      	beq.n	80042ce <I2C_RequestMemoryRead+0x242>
 8004232:	6820      	ldr	r0, [r4, #0]
 8004234:	e766      	b.n	8004104 <I2C_RequestMemoryRead+0x78>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004236:	0a33      	lsrs	r3, r6, #8
 8004238:	6103      	str	r3, [r0, #16]
 800423a:	1c6a      	adds	r2, r5, #1
 800423c:	d003      	beq.n	8004246 <I2C_RequestMemoryRead+0x1ba>
 800423e:	e017      	b.n	8004270 <I2C_RequestMemoryRead+0x1e4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004240:	6943      	ldr	r3, [r0, #20]
 8004242:	055f      	lsls	r7, r3, #21
 8004244:	d4cc      	bmi.n	80041e0 <I2C_RequestMemoryRead+0x154>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004246:	6943      	ldr	r3, [r0, #20]
 8004248:	061b      	lsls	r3, r3, #24
 800424a:	f53f af67 	bmi.w	800411c <I2C_RequestMemoryRead+0x90>
 800424e:	e7f7      	b.n	8004240 <I2C_RequestMemoryRead+0x1b4>
 8004250:	6943      	ldr	r3, [r0, #20]
 8004252:	0619      	lsls	r1, r3, #24
 8004254:	f53f af6d 	bmi.w	8004132 <I2C_RequestMemoryRead+0xa6>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004258:	6943      	ldr	r3, [r0, #20]
 800425a:	055a      	lsls	r2, r3, #21
 800425c:	d4c0      	bmi.n	80041e0 <I2C_RequestMemoryRead+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425e:	f7ff fae5 	bl	800382c <HAL_GetTick>
 8004262:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004264:	1ac0      	subs	r0, r0, r3
 8004266:	4285      	cmp	r5, r0
 8004268:	d331      	bcc.n	80042ce <I2C_RequestMemoryRead+0x242>
 800426a:	b385      	cbz	r5, 80042ce <I2C_RequestMemoryRead+0x242>
 800426c:	6820      	ldr	r0, [r4, #0]
 800426e:	e757      	b.n	8004120 <I2C_RequestMemoryRead+0x94>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004270:	6943      	ldr	r3, [r0, #20]
 8004272:	0619      	lsls	r1, r3, #24
 8004274:	f53f af52 	bmi.w	800411c <I2C_RequestMemoryRead+0x90>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004278:	6943      	ldr	r3, [r0, #20]
 800427a:	0559      	lsls	r1, r3, #21
 800427c:	d4b0      	bmi.n	80041e0 <I2C_RequestMemoryRead+0x154>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800427e:	f7ff fad5 	bl	800382c <HAL_GetTick>
 8004282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004284:	1ac0      	subs	r0, r0, r3
 8004286:	4285      	cmp	r5, r0
 8004288:	d321      	bcc.n	80042ce <I2C_RequestMemoryRead+0x242>
 800428a:	b305      	cbz	r5, 80042ce <I2C_RequestMemoryRead+0x242>
 800428c:	6820      	ldr	r0, [r4, #0]
 800428e:	e7d4      	b.n	800423a <I2C_RequestMemoryRead+0x1ae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004290:	6943      	ldr	r3, [r0, #20]
 8004292:	07de      	lsls	r6, r3, #31
 8004294:	f53f af57 	bmi.w	8004146 <I2C_RequestMemoryRead+0xba>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004298:	f7ff fac8 	bl	800382c <HAL_GetTick>
 800429c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800429e:	1ac0      	subs	r0, r0, r3
 80042a0:	4285      	cmp	r5, r0
 80042a2:	6820      	ldr	r0, [r4, #0]
 80042a4:	f4ff af6c 	bcc.w	8004180 <I2C_RequestMemoryRead+0xf4>
 80042a8:	2d00      	cmp	r5, #0
 80042aa:	f47f af46 	bne.w	800413a <I2C_RequestMemoryRead+0xae>
 80042ae:	e767      	b.n	8004180 <I2C_RequestMemoryRead+0xf4>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042b0:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80042b2:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80042b4:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80042b6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042ba:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042be:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80042c0:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042c4:	f043 0320 	orr.w	r3, r3, #32
 80042c8:	6423      	str	r3, [r4, #64]	; 0x40
    return HAL_ERROR;
 80042ca:	2001      	movs	r0, #1
 80042cc:	e769      	b.n	80041a2 <I2C_RequestMemoryRead+0x116>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042ce:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80042d0:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80042d2:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80042d4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042d8:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042dc:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80042de:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042e2:	f043 0320 	orr.w	r3, r3, #32
 80042e6:	6423      	str	r3, [r4, #64]	; 0x40
 80042e8:	e78a      	b.n	8004200 <I2C_RequestMemoryRead+0x174>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042ea:	6943      	ldr	r3, [r0, #20]
 80042ec:	43db      	mvns	r3, r3
 80042ee:	f013 0302 	ands.w	r3, r3, #2
 80042f2:	f43f af37 	beq.w	8004164 <I2C_RequestMemoryRead+0xd8>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042f6:	6943      	ldr	r3, [r0, #20]
 80042f8:	0559      	lsls	r1, r3, #21
 80042fa:	f53f af59 	bmi.w	80041b0 <I2C_RequestMemoryRead+0x124>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042fe:	f7ff fa95 	bl	800382c <HAL_GetTick>
 8004302:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004304:	1ac0      	subs	r0, r0, r3
 8004306:	4285      	cmp	r5, r0
 8004308:	d3d2      	bcc.n	80042b0 <I2C_RequestMemoryRead+0x224>
 800430a:	2d00      	cmp	r5, #0
 800430c:	d0d0      	beq.n	80042b0 <I2C_RequestMemoryRead+0x224>
 800430e:	6820      	ldr	r0, [r4, #0]
 8004310:	e71d      	b.n	800414e <I2C_RequestMemoryRead+0xc2>
 8004312:	bf00      	nop

08004314 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8004314:	2800      	cmp	r0, #0
 8004316:	f000 809f 	beq.w	8004458 <HAL_I2C_Init+0x144>
{
 800431a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800431c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004320:	4604      	mov	r4, r0
 8004322:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004326:	2b00      	cmp	r3, #0
 8004328:	f000 808f 	beq.w	800444a <HAL_I2C_Init+0x136>
  __HAL_I2C_DISABLE(hi2c);
 800432c:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800432e:	2224      	movs	r2, #36	; 0x24
 8004330:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	f022 0201 	bic.w	r2, r2, #1
 800433a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004342:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004344:	681a      	ldr	r2, [r3, #0]
 8004346:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800434a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800434c:	f000 ff64 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004350:	6861      	ldr	r1, [r4, #4]
 8004352:	4b4b      	ldr	r3, [pc, #300]	; (8004480 <HAL_I2C_Init+0x16c>)
 8004354:	4299      	cmp	r1, r3
 8004356:	d84b      	bhi.n	80043f0 <HAL_I2C_Init+0xdc>
 8004358:	4b4a      	ldr	r3, [pc, #296]	; (8004484 <HAL_I2C_Init+0x170>)
 800435a:	4298      	cmp	r0, r3
 800435c:	d97a      	bls.n	8004454 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800435e:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8004360:	4b49      	ldr	r3, [pc, #292]	; (8004488 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004362:	6855      	ldr	r5, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 8004364:	fba3 6300 	umull	r6, r3, r3, r0
 8004368:	0c9b      	lsrs	r3, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800436a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800436e:	431d      	orrs	r5, r3
 8004370:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004372:	6a15      	ldr	r5, [r2, #32]
 8004374:	3301      	adds	r3, #1
 8004376:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800437a:	432b      	orrs	r3, r5
 800437c:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800437e:	69d5      	ldr	r5, [r2, #28]
 8004380:	0049      	lsls	r1, r1, #1
 8004382:	1e43      	subs	r3, r0, #1
 8004384:	fbb3 f3f1 	udiv	r3, r3, r1
 8004388:	3301      	adds	r3, #1
 800438a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800438e:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 8004392:	2b04      	cmp	r3, #4
 8004394:	bf38      	it	cc
 8004396:	2304      	movcc	r3, #4
 8004398:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 800439c:	432b      	orrs	r3, r5
 800439e:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043a0:	e9d4 3507 	ldrd	r3, r5, [r4, #28]
 80043a4:	6810      	ldr	r0, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043a6:	6921      	ldr	r1, [r4, #16]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043a8:	f020 00c0 	bic.w	r0, r0, #192	; 0xc0
 80043ac:	432b      	orrs	r3, r5
 80043ae:	4303      	orrs	r3, r0
 80043b0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043b2:	6890      	ldr	r0, [r2, #8]
 80043b4:	68e5      	ldr	r5, [r4, #12]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043b6:	6963      	ldr	r3, [r4, #20]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043b8:	f420 4003 	bic.w	r0, r0, #33536	; 0x8300
 80043bc:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 80043c0:	4329      	orrs	r1, r5
 80043c2:	4301      	orrs	r1, r0
 80043c4:	6091      	str	r1, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043c6:	68d1      	ldr	r1, [r2, #12]
 80043c8:	69a0      	ldr	r0, [r4, #24]
 80043ca:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80043ce:	4303      	orrs	r3, r0
 80043d0:	430b      	orrs	r3, r1
 80043d2:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80043d4:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043d6:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 80043d8:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 80043dc:	2520      	movs	r5, #32
  __HAL_I2C_ENABLE(hi2c);
 80043de:	6011      	str	r1, [r2, #0]
  return HAL_OK;
 80043e0:	4618      	mov	r0, r3
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80043e2:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80043e4:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043e8:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043ea:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 80043ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80043f0:	4b26      	ldr	r3, [pc, #152]	; (800448c <HAL_I2C_Init+0x178>)
 80043f2:	4298      	cmp	r0, r3
 80043f4:	d92e      	bls.n	8004454 <HAL_I2C_Init+0x140>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043f6:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80043f8:	4b23      	ldr	r3, [pc, #140]	; (8004488 <HAL_I2C_Init+0x174>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80043fa:	6856      	ldr	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80043fc:	4f24      	ldr	r7, [pc, #144]	; (8004490 <HAL_I2C_Init+0x17c>)
  freqrange = I2C_FREQRANGE(pclk1);
 80043fe:	fba3 5300 	umull	r5, r3, r3, r0
 8004402:	0c9d      	lsrs	r5, r3, #18
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004404:	f026 063f 	bic.w	r6, r6, #63	; 0x3f
 8004408:	432e      	orrs	r6, r5
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800440a:	f44f 7396 	mov.w	r3, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800440e:	6056      	str	r6, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004410:	fb03 f305 	mul.w	r3, r3, r5
 8004414:	fba7 5303 	umull	r5, r3, r7, r3
 8004418:	6a15      	ldr	r5, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800441a:	68a6      	ldr	r6, [r4, #8]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800441c:	099b      	lsrs	r3, r3, #6
 800441e:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8004422:	3301      	adds	r3, #1
 8004424:	432b      	orrs	r3, r5
 8004426:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004428:	69d5      	ldr	r5, [r2, #28]
 800442a:	f425 454f 	bic.w	r5, r5, #52992	; 0xcf00
 800442e:	3801      	subs	r0, #1
 8004430:	f025 05ff 	bic.w	r5, r5, #255	; 0xff
 8004434:	b996      	cbnz	r6, 800445c <HAL_I2C_Init+0x148>
 8004436:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 800443a:	fbb0 f0f1 	udiv	r0, r0, r1
 800443e:	3001      	adds	r0, #1
 8004440:	f3c0 000b 	ubfx	r0, r0, #0, #12
 8004444:	b9c0      	cbnz	r0, 8004478 <HAL_I2C_Init+0x164>
 8004446:	2301      	movs	r3, #1
 8004448:	e7a8      	b.n	800439c <HAL_I2C_Init+0x88>
    hi2c->Lock = HAL_UNLOCKED;
 800444a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 800444e:	f7fe fd03 	bl	8002e58 <HAL_I2C_MspInit>
 8004452:	e76b      	b.n	800432c <HAL_I2C_Init+0x18>
    return HAL_ERROR;
 8004454:	2001      	movs	r0, #1
}
 8004456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8004458:	2001      	movs	r0, #1
}
 800445a:	4770      	bx	lr
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800445c:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004460:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8004464:	fbb0 f0f1 	udiv	r0, r0, r1
 8004468:	3001      	adds	r0, #1
 800446a:	f3c0 000b 	ubfx	r0, r0, #0, #12
 800446e:	2800      	cmp	r0, #0
 8004470:	d0e9      	beq.n	8004446 <HAL_I2C_Init+0x132>
 8004472:	f440 4340 	orr.w	r3, r0, #49152	; 0xc000
 8004476:	e791      	b.n	800439c <HAL_I2C_Init+0x88>
 8004478:	f440 4300 	orr.w	r3, r0, #32768	; 0x8000
 800447c:	e78e      	b.n	800439c <HAL_I2C_Init+0x88>
 800447e:	bf00      	nop
 8004480:	000186a0 	.word	0x000186a0
 8004484:	001e847f 	.word	0x001e847f
 8004488:	431bde83 	.word	0x431bde83
 800448c:	003d08ff 	.word	0x003d08ff
 8004490:	10624dd3 	.word	0x10624dd3

08004494 <HAL_I2C_Mem_Write>:
{
 8004494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004498:	4604      	mov	r4, r0
 800449a:	b083      	sub	sp, #12
 800449c:	4699      	mov	r9, r3
 800449e:	460f      	mov	r7, r1
 80044a0:	4690      	mov	r8, r2
 80044a2:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 80044a6:	9e0e      	ldr	r6, [sp, #56]	; 0x38
  uint32_t tickstart = HAL_GetTick();
 80044a8:	f7ff f9c0 	bl	800382c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80044ac:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80044b0:	2b20      	cmp	r3, #32
 80044b2:	d004      	beq.n	80044be <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 80044b4:	2702      	movs	r7, #2
}
 80044b6:	4638      	mov	r0, r7
 80044b8:	b003      	add	sp, #12
 80044ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044be:	4605      	mov	r5, r0
 80044c0:	e005      	b.n	80044ce <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044c2:	f7ff f9b3 	bl	800382c <HAL_GetTick>
 80044c6:	1b40      	subs	r0, r0, r5
 80044c8:	2819      	cmp	r0, #25
 80044ca:	f200 80a6 	bhi.w	800461a <HAL_I2C_Mem_Write+0x186>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044ce:	6822      	ldr	r2, [r4, #0]
 80044d0:	6993      	ldr	r3, [r2, #24]
 80044d2:	43db      	mvns	r3, r3
 80044d4:	f013 0b02 	ands.w	fp, r3, #2
 80044d8:	d0f3      	beq.n	80044c2 <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 80044da:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80044de:	2b01      	cmp	r3, #1
 80044e0:	d0e8      	beq.n	80044b4 <HAL_I2C_Mem_Write+0x20>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e2:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 80044e4:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044e6:	07d8      	lsls	r0, r3, #31
    __HAL_LOCK(hi2c);
 80044e8:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80044ec:	d402      	bmi.n	80044f4 <HAL_I2C_Mem_Write+0x60>
      __HAL_I2C_ENABLE(hi2c);
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	430b      	orrs	r3, r1
 80044f2:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f4:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80044f6:	485e      	ldr	r0, [pc, #376]	; (8004670 <HAL_I2C_Mem_Write+0x1dc>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044f8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044fc:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80044fe:	2321      	movs	r3, #33	; 0x21
 8004500:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004504:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004506:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004508:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800450c:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800450e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004512:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8004516:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004518:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800451a:	4639      	mov	r1, r7
 800451c:	e9cd 6500 	strd	r6, r5, [sp]
 8004520:	464b      	mov	r3, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004522:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004524:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 8004526:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800452a:	4620      	mov	r0, r4
 800452c:	f7ff fccc 	bl	8003ec8 <I2C_RequestMemoryWrite>
 8004530:	4607      	mov	r7, r0
 8004532:	2800      	cmp	r0, #0
 8004534:	d14f      	bne.n	80045d6 <HAL_I2C_Mem_Write+0x142>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	8d22      	ldrh	r2, [r4, #40]	; 0x28
    while (hi2c->XferSize > 0U)
 800453a:	b1f2      	cbz	r2, 800457a <HAL_I2C_Mem_Write+0xe6>
 800453c:	1c72      	adds	r2, r6, #1
 800453e:	d003      	beq.n	8004548 <HAL_I2C_Mem_Write+0xb4>
 8004540:	e04e      	b.n	80045e0 <HAL_I2C_Mem_Write+0x14c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004542:	695a      	ldr	r2, [r3, #20]
 8004544:	0551      	lsls	r1, r2, #21
 8004546:	d42e      	bmi.n	80045a6 <HAL_I2C_Mem_Write+0x112>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004548:	695a      	ldr	r2, [r3, #20]
 800454a:	0610      	lsls	r0, r2, #24
 800454c:	d5f9      	bpl.n	8004542 <HAL_I2C_Mem_Write+0xae>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800454e:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 8004552:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004556:	4660      	mov	r0, ip
      hi2c->XferSize--;
 8004558:	f10e 32ff 	add.w	r2, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800455c:	f810 1b01 	ldrb.w	r1, [r0], #1
 8004560:	6119      	str	r1, [r3, #16]
      hi2c->XferCount--;
 8004562:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8004564:	6260      	str	r0, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8004566:	3901      	subs	r1, #1
 8004568:	b289      	uxth	r1, r1
 800456a:	8561      	strh	r1, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800456c:	6959      	ldr	r1, [r3, #20]
      hi2c->XferSize--;
 800456e:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004570:	0748      	lsls	r0, r1, #29
      hi2c->XferSize--;
 8004572:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004574:	d5e1      	bpl.n	800453a <HAL_I2C_Mem_Write+0xa6>
 8004576:	2a00      	cmp	r2, #0
 8004578:	d140      	bne.n	80045fc <HAL_I2C_Mem_Write+0x168>
 800457a:	1c72      	adds	r2, r6, #1
 800457c:	d003      	beq.n	8004586 <HAL_I2C_Mem_Write+0xf2>
 800457e:	e05a      	b.n	8004636 <HAL_I2C_Mem_Write+0x1a2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004580:	695a      	ldr	r2, [r3, #20]
 8004582:	0551      	lsls	r1, r2, #21
 8004584:	d40f      	bmi.n	80045a6 <HAL_I2C_Mem_Write+0x112>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004586:	695a      	ldr	r2, [r3, #20]
 8004588:	0750      	lsls	r0, r2, #29
 800458a:	d5f9      	bpl.n	8004580 <HAL_I2C_Mem_Write+0xec>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800458c:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800458e:	2100      	movs	r1, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8004590:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004592:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004596:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 800459c:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80045a0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80045a4:	e787      	b.n	80044b6 <HAL_I2C_Mem_Write+0x22>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80045a6:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045a8:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80045ac:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80045ae:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80045b0:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80045b2:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80045bc:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80045c0:	f043 0304 	orr.w	r3, r3, #4
 80045c4:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80045c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80045c8:	2b04      	cmp	r3, #4
 80045ca:	d104      	bne.n	80045d6 <HAL_I2C_Mem_Write+0x142>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045cc:	6822      	ldr	r2, [r4, #0]
 80045ce:	6813      	ldr	r3, [r2, #0]
 80045d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045d4:	6013      	str	r3, [r2, #0]
      return HAL_ERROR;
 80045d6:	2701      	movs	r7, #1
}
 80045d8:	4638      	mov	r0, r7
 80045da:	b003      	add	sp, #12
 80045dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045e0:	695a      	ldr	r2, [r3, #20]
 80045e2:	0612      	lsls	r2, r2, #24
 80045e4:	d4b3      	bmi.n	800454e <HAL_I2C_Mem_Write+0xba>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80045e6:	695a      	ldr	r2, [r3, #20]
 80045e8:	0551      	lsls	r1, r2, #21
 80045ea:	d4dc      	bmi.n	80045a6 <HAL_I2C_Mem_Write+0x112>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ec:	f7ff f91e 	bl	800382c <HAL_GetTick>
 80045f0:	1b40      	subs	r0, r0, r5
 80045f2:	4286      	cmp	r6, r0
 80045f4:	d32d      	bcc.n	8004652 <HAL_I2C_Mem_Write+0x1be>
 80045f6:	b366      	cbz	r6, 8004652 <HAL_I2C_Mem_Write+0x1be>
 80045f8:	6823      	ldr	r3, [r4, #0]
 80045fa:	e79f      	b.n	800453c <HAL_I2C_Mem_Write+0xa8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045fc:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8004600:	611a      	str	r2, [r3, #16]
        hi2c->XferCount--;
 8004602:	8d60      	ldrh	r0, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8004604:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 8004608:	3801      	subs	r0, #1
        hi2c->XferSize--;
 800460a:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 800460c:	f10c 0102 	add.w	r1, ip, #2
        hi2c->XferCount--;
 8004610:	b280      	uxth	r0, r0
        hi2c->XferSize--;
 8004612:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004614:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004616:	8560      	strh	r0, [r4, #42]	; 0x2a
 8004618:	e78f      	b.n	800453a <HAL_I2C_Mem_Write+0xa6>
        hi2c->State             = HAL_I2C_STATE_READY;
 800461a:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 800461c:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004620:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004624:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004628:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 800462a:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800462e:	f043 0320 	orr.w	r3, r3, #32
 8004632:	6423      	str	r3, [r4, #64]	; 0x40
 8004634:	e73e      	b.n	80044b4 <HAL_I2C_Mem_Write+0x20>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004636:	695a      	ldr	r2, [r3, #20]
 8004638:	0752      	lsls	r2, r2, #29
 800463a:	d4a7      	bmi.n	800458c <HAL_I2C_Mem_Write+0xf8>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800463c:	695a      	ldr	r2, [r3, #20]
 800463e:	0551      	lsls	r1, r2, #21
 8004640:	d4b1      	bmi.n	80045a6 <HAL_I2C_Mem_Write+0x112>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004642:	f7ff f8f3 	bl	800382c <HAL_GetTick>
 8004646:	1b40      	subs	r0, r0, r5
 8004648:	4286      	cmp	r6, r0
 800464a:	d302      	bcc.n	8004652 <HAL_I2C_Mem_Write+0x1be>
 800464c:	b10e      	cbz	r6, 8004652 <HAL_I2C_Mem_Write+0x1be>
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	e793      	b.n	800457a <HAL_I2C_Mem_Write+0xe6>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004652:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8004654:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004656:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004658:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800465c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004660:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004662:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004666:	f043 0320 	orr.w	r3, r3, #32
 800466a:	6423      	str	r3, [r4, #64]	; 0x40
 800466c:	e7ab      	b.n	80045c6 <HAL_I2C_Mem_Write+0x132>
 800466e:	bf00      	nop
 8004670:	ffff0000 	.word	0xffff0000

08004674 <HAL_I2C_Mem_Read>:
{
 8004674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004678:	4604      	mov	r4, r0
 800467a:	b087      	sub	sp, #28
 800467c:	4699      	mov	r9, r3
 800467e:	460f      	mov	r7, r1
 8004680:	4690      	mov	r8, r2
 8004682:	f8bd a044 	ldrh.w	sl, [sp, #68]	; 0x44
 8004686:	9d12      	ldr	r5, [sp, #72]	; 0x48
  uint32_t tickstart = HAL_GetTick();
 8004688:	f7ff f8d0 	bl	800382c <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 800468c:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8004690:	2b20      	cmp	r3, #32
 8004692:	d004      	beq.n	800469e <HAL_I2C_Mem_Read+0x2a>
      return HAL_BUSY;
 8004694:	2702      	movs	r7, #2
}
 8004696:	4638      	mov	r0, r7
 8004698:	b007      	add	sp, #28
 800469a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800469e:	4606      	mov	r6, r0
 80046a0:	e004      	b.n	80046ac <HAL_I2C_Mem_Read+0x38>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a2:	f7ff f8c3 	bl	800382c <HAL_GetTick>
 80046a6:	1b80      	subs	r0, r0, r6
 80046a8:	2819      	cmp	r0, #25
 80046aa:	d84a      	bhi.n	8004742 <HAL_I2C_Mem_Read+0xce>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80046ac:	6822      	ldr	r2, [r4, #0]
 80046ae:	6993      	ldr	r3, [r2, #24]
 80046b0:	43db      	mvns	r3, r3
 80046b2:	f013 0b02 	ands.w	fp, r3, #2
 80046b6:	d0f4      	beq.n	80046a2 <HAL_I2C_Mem_Read+0x2e>
    __HAL_LOCK(hi2c);
 80046b8:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d0e9      	beq.n	8004694 <HAL_I2C_Mem_Read+0x20>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046c0:	6813      	ldr	r3, [r2, #0]
    __HAL_LOCK(hi2c);
 80046c2:	2101      	movs	r1, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046c4:	07db      	lsls	r3, r3, #31
    __HAL_LOCK(hi2c);
 80046c6:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80046ca:	d402      	bmi.n	80046d2 <HAL_I2C_Mem_Read+0x5e>
      __HAL_I2C_ENABLE(hi2c);
 80046cc:	6813      	ldr	r3, [r2, #0]
 80046ce:	430b      	orrs	r3, r1
 80046d0:	6013      	str	r3, [r2, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d2:	6813      	ldr	r3, [r2, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80046d4:	48a2      	ldr	r0, [pc, #648]	; (8004960 <HAL_I2C_Mem_Read+0x2ec>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80046d6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046da:	6013      	str	r3, [r2, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80046dc:	2322      	movs	r3, #34	; 0x22
 80046de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e2:	2240      	movs	r2, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046e4:	2300      	movs	r3, #0
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80046e6:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046ea:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80046ec:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80046f0:	f8b4 c02a 	ldrh.w	ip, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80046f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80046f6:	6263      	str	r3, [r4, #36]	; 0x24
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80046f8:	4639      	mov	r1, r7
 80046fa:	e9cd 5600 	strd	r5, r6, [sp]
 80046fe:	464b      	mov	r3, r9
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004700:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004702:	4642      	mov	r2, r8
    hi2c->XferSize    = hi2c->XferCount;
 8004704:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004708:	4620      	mov	r0, r4
 800470a:	f7ff fcbf 	bl	800408c <I2C_RequestMemoryRead>
 800470e:	4607      	mov	r7, r0
 8004710:	b9a8      	cbnz	r0, 800473e <HAL_I2C_Mem_Read+0xca>
    if (hi2c->XferSize == 0U)
 8004712:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004714:	6823      	ldr	r3, [r4, #0]
 8004716:	bb12      	cbnz	r2, 800475e <HAL_I2C_Mem_Read+0xea>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004718:	9002      	str	r0, [sp, #8]
 800471a:	695a      	ldr	r2, [r3, #20]
 800471c:	9202      	str	r2, [sp, #8]
 800471e:	699a      	ldr	r2, [r3, #24]
 8004720:	9202      	str	r2, [sp, #8]
 8004722:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004724:	681a      	ldr	r2, [r3, #0]
 8004726:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800472a:	601a      	str	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800472c:	2300      	movs	r3, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800472e:	2220      	movs	r2, #32
 8004730:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8004734:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004738:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800473c:	e7ab      	b.n	8004696 <HAL_I2C_Mem_Read+0x22>
      return HAL_ERROR;
 800473e:	2701      	movs	r7, #1
 8004740:	e7a9      	b.n	8004696 <HAL_I2C_Mem_Read+0x22>
        hi2c->State             = HAL_I2C_STATE_READY;
 8004742:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004744:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004748:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800474c:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004750:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004752:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004756:	f043 0320 	orr.w	r3, r3, #32
 800475a:	6423      	str	r3, [r4, #64]	; 0x40
 800475c:	e79a      	b.n	8004694 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 800475e:	2a01      	cmp	r2, #1
 8004760:	f000 8091 	beq.w	8004886 <HAL_I2C_Mem_Read+0x212>
    else if (hi2c->XferSize == 2U)
 8004764:	2a02      	cmp	r2, #2
 8004766:	f000 80fd 	beq.w	8004964 <HAL_I2C_Mem_Read+0x2f0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800476a:	9005      	str	r0, [sp, #20]
 800476c:	6959      	ldr	r1, [r3, #20]
 800476e:	9105      	str	r1, [sp, #20]
 8004770:	6999      	ldr	r1, [r3, #24]
 8004772:	9105      	str	r1, [sp, #20]
 8004774:	9905      	ldr	r1, [sp, #20]
      if (hi2c->XferSize <= 3U)
 8004776:	2a03      	cmp	r2, #3
 8004778:	d848      	bhi.n	800480c <HAL_I2C_Mem_Read+0x198>
        if (hi2c->XferSize == 1U)
 800477a:	2a01      	cmp	r2, #1
 800477c:	f000 80bc 	beq.w	80048f8 <HAL_I2C_Mem_Read+0x284>
        else if (hi2c->XferSize == 2U)
 8004780:	2a02      	cmp	r2, #2
 8004782:	d074      	beq.n	800486e <HAL_I2C_Mem_Read+0x1fa>
 8004784:	1c68      	adds	r0, r5, #1
 8004786:	f040 808d 	bne.w	80048a4 <HAL_I2C_Mem_Read+0x230>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	0751      	lsls	r1, r2, #29
 800478e:	d5fc      	bpl.n	800478a <HAL_I2C_Mem_Read+0x116>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004790:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004792:	6a61      	ldr	r1, [r4, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004794:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004798:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 800479e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80047a0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047a2:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80047a8:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80047aa:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80047ac:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80047ae:	6261      	str	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047b0:	8522      	strh	r2, [r4, #40]	; 0x28
 80047b2:	1c68      	adds	r0, r5, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	f040 8081 	bne.w	80048bc <HAL_I2C_Mem_Read+0x248>
 80047ba:	6953      	ldr	r3, [r2, #20]
 80047bc:	0759      	lsls	r1, r3, #29
 80047be:	d5fc      	bpl.n	80047ba <HAL_I2C_Mem_Read+0x146>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c0:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047c2:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047c8:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ca:	6913      	ldr	r3, [r2, #16]
 80047cc:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 80047ce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80047d0:	6a60      	ldr	r0, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047d2:	8d21      	ldrh	r1, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047d4:	6822      	ldr	r2, [r4, #0]
          hi2c->XferCount--;
 80047d6:	3b01      	subs	r3, #1
 80047d8:	b29b      	uxth	r3, r3
 80047da:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047dc:	6912      	ldr	r2, [r2, #16]
          hi2c->pBuffPtr++;
 80047de:	f100 0c01 	add.w	ip, r0, #1
          hi2c->XferSize--;
 80047e2:	1e4b      	subs	r3, r1, #1
          hi2c->pBuffPtr++;
 80047e4:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047e8:	8523      	strh	r3, [r4, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047ea:	7042      	strb	r2, [r0, #1]
          hi2c->XferSize--;
 80047ec:	8d22      	ldrh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80047ee:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 80047f0:	6a61      	ldr	r1, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80047f2:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 80047f4:	3b01      	subs	r3, #1
          hi2c->XferSize--;
 80047f6:	b292      	uxth	r2, r2
          hi2c->XferCount--;
 80047f8:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 80047fa:	3101      	adds	r1, #1
          hi2c->XferSize--;
 80047fc:	8522      	strh	r2, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80047fe:	8563      	strh	r3, [r4, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8004800:	6261      	str	r1, [r4, #36]	; 0x24
    while (hi2c->XferSize > 0U)
 8004802:	2a00      	cmp	r2, #0
 8004804:	d092      	beq.n	800472c <HAL_I2C_Mem_Read+0xb8>
      if (hi2c->XferSize <= 3U)
 8004806:	2a03      	cmp	r2, #3
 8004808:	6823      	ldr	r3, [r4, #0]
 800480a:	d9b6      	bls.n	800477a <HAL_I2C_Mem_Read+0x106>
 800480c:	b955      	cbnz	r5, 8004824 <HAL_I2C_Mem_Read+0x1b0>
 800480e:	e098      	b.n	8004942 <HAL_I2C_Mem_Read+0x2ce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004810:	695a      	ldr	r2, [r3, #20]
 8004812:	06d2      	lsls	r2, r2, #27
 8004814:	f100 8082 	bmi.w	800491c <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004818:	f7ff f808 	bl	800382c <HAL_GetTick>
 800481c:	1b80      	subs	r0, r0, r6
 800481e:	4285      	cmp	r5, r0
 8004820:	d358      	bcc.n	80048d4 <HAL_I2C_Mem_Read+0x260>
 8004822:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004824:	695a      	ldr	r2, [r3, #20]
 8004826:	0651      	lsls	r1, r2, #25
 8004828:	d5f2      	bpl.n	8004810 <HAL_I2C_Mem_Read+0x19c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800482a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	7013      	strb	r3, [r2, #0]
        hi2c->XferCount--;
 8004830:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004832:	6823      	ldr	r3, [r4, #0]
        hi2c->XferSize--;
 8004834:	8d22      	ldrh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 8004836:	6a60      	ldr	r0, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8004838:	3901      	subs	r1, #1
 800483a:	b289      	uxth	r1, r1
 800483c:	8561      	strh	r1, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800483e:	6959      	ldr	r1, [r3, #20]
        hi2c->XferSize--;
 8004840:	3a01      	subs	r2, #1
 8004842:	b292      	uxth	r2, r2
        hi2c->pBuffPtr++;
 8004844:	f100 0c01 	add.w	ip, r0, #1
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004848:	0749      	lsls	r1, r1, #29
        hi2c->XferSize--;
 800484a:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->pBuffPtr++;
 800484c:	f8c4 c024 	str.w	ip, [r4, #36]	; 0x24
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004850:	d5d7      	bpl.n	8004802 <HAL_I2C_Mem_Read+0x18e>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004852:	691b      	ldr	r3, [r3, #16]
 8004854:	7043      	strb	r3, [r0, #1]
 8004856:	e7c9      	b.n	80047ec <HAL_I2C_Mem_Read+0x178>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	0752      	lsls	r2, r2, #29
 800485c:	d40c      	bmi.n	8004878 <HAL_I2C_Mem_Read+0x204>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800485e:	f7fe ffe5 	bl	800382c <HAL_GetTick>
 8004862:	1b80      	subs	r0, r0, r6
 8004864:	4285      	cmp	r5, r0
 8004866:	d335      	bcc.n	80048d4 <HAL_I2C_Mem_Read+0x260>
 8004868:	2d00      	cmp	r5, #0
 800486a:	d033      	beq.n	80048d4 <HAL_I2C_Mem_Read+0x260>
 800486c:	6823      	ldr	r3, [r4, #0]
 800486e:	1c68      	adds	r0, r5, #1
 8004870:	d1f2      	bne.n	8004858 <HAL_I2C_Mem_Read+0x1e4>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004872:	695a      	ldr	r2, [r3, #20]
 8004874:	0751      	lsls	r1, r2, #29
 8004876:	d5fc      	bpl.n	8004872 <HAL_I2C_Mem_Read+0x1fe>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004878:	681a      	ldr	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487a:	6a61      	ldr	r1, [r4, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004880:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	e7a2      	b.n	80047cc <HAL_I2C_Mem_Read+0x158>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004886:	6819      	ldr	r1, [r3, #0]
 8004888:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800488c:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800488e:	9003      	str	r0, [sp, #12]
 8004890:	6959      	ldr	r1, [r3, #20]
 8004892:	9103      	str	r1, [sp, #12]
 8004894:	6999      	ldr	r1, [r3, #24]
 8004896:	9103      	str	r1, [sp, #12]
 8004898:	9903      	ldr	r1, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800489a:	6819      	ldr	r1, [r3, #0]
 800489c:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 80048a0:	6019      	str	r1, [r3, #0]
 80048a2:	e768      	b.n	8004776 <HAL_I2C_Mem_Read+0x102>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048a4:	695a      	ldr	r2, [r3, #20]
 80048a6:	0752      	lsls	r2, r2, #29
 80048a8:	f53f af72 	bmi.w	8004790 <HAL_I2C_Mem_Read+0x11c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048ac:	f7fe ffbe 	bl	800382c <HAL_GetTick>
 80048b0:	1b80      	subs	r0, r0, r6
 80048b2:	4285      	cmp	r5, r0
 80048b4:	d30e      	bcc.n	80048d4 <HAL_I2C_Mem_Read+0x260>
 80048b6:	b16d      	cbz	r5, 80048d4 <HAL_I2C_Mem_Read+0x260>
 80048b8:	6823      	ldr	r3, [r4, #0]
 80048ba:	e763      	b.n	8004784 <HAL_I2C_Mem_Read+0x110>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80048bc:	6953      	ldr	r3, [r2, #20]
 80048be:	075b      	lsls	r3, r3, #29
 80048c0:	f53f af7e 	bmi.w	80047c0 <HAL_I2C_Mem_Read+0x14c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048c4:	f7fe ffb2 	bl	800382c <HAL_GetTick>
 80048c8:	1b80      	subs	r0, r0, r6
 80048ca:	4285      	cmp	r5, r0
 80048cc:	d302      	bcc.n	80048d4 <HAL_I2C_Mem_Read+0x260>
 80048ce:	2d00      	cmp	r5, #0
 80048d0:	f47f af6f 	bne.w	80047b2 <HAL_I2C_Mem_Read+0x13e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048d4:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 80048d6:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 80048d8:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80048da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80048de:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80048e4:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 80048e8:	2701      	movs	r7, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048ea:	f043 0320 	orr.w	r3, r3, #32
}
 80048ee:	4638      	mov	r0, r7
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80048f0:	6423      	str	r3, [r4, #64]	; 0x40
}
 80048f2:	b007      	add	sp, #28
 80048f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80048f8:	b94d      	cbnz	r5, 800490e <HAL_I2C_Mem_Read+0x29a>
 80048fa:	e02c      	b.n	8004956 <HAL_I2C_Mem_Read+0x2e2>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048fc:	695a      	ldr	r2, [r3, #20]
 80048fe:	06d1      	lsls	r1, r2, #27
 8004900:	d40c      	bmi.n	800491c <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004902:	f7fe ff93 	bl	800382c <HAL_GetTick>
 8004906:	1b80      	subs	r0, r0, r6
 8004908:	4285      	cmp	r5, r0
 800490a:	d3e3      	bcc.n	80048d4 <HAL_I2C_Mem_Read+0x260>
 800490c:	6823      	ldr	r3, [r4, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800490e:	695a      	ldr	r2, [r3, #20]
 8004910:	0650      	lsls	r0, r2, #25
 8004912:	d5f3      	bpl.n	80048fc <HAL_I2C_Mem_Read+0x288>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004914:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004916:	691b      	ldr	r3, [r3, #16]
 8004918:	7013      	strb	r3, [r2, #0]
 800491a:	e767      	b.n	80047ec <HAL_I2C_Mem_Read+0x178>
      hi2c->PreviousState       = I2C_STATE_NONE;
 800491c:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800491e:	f06f 0010 	mvn.w	r0, #16
      hi2c->State               = HAL_I2C_STATE_READY;
 8004922:	2120      	movs	r1, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004924:	6158      	str	r0, [r3, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004926:	6322      	str	r2, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004928:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800492c:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004930:	6c23      	ldr	r3, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8004932:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
          return HAL_ERROR;
 8004936:	2701      	movs	r7, #1
}
 8004938:	4638      	mov	r0, r7
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800493a:	6423      	str	r3, [r4, #64]	; 0x40
}
 800493c:	b007      	add	sp, #28
 800493e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004942:	695a      	ldr	r2, [r3, #20]
 8004944:	0650      	lsls	r0, r2, #25
 8004946:	f53f af70 	bmi.w	800482a <HAL_I2C_Mem_Read+0x1b6>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800494a:	695a      	ldr	r2, [r3, #20]
 800494c:	06d0      	lsls	r0, r2, #27
 800494e:	d4e5      	bmi.n	800491c <HAL_I2C_Mem_Read+0x2a8>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004950:	f7fe ff6c 	bl	800382c <HAL_GetTick>
 8004954:	e7be      	b.n	80048d4 <HAL_I2C_Mem_Read+0x260>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004956:	695a      	ldr	r2, [r3, #20]
 8004958:	0652      	lsls	r2, r2, #25
 800495a:	d5f6      	bpl.n	800494a <HAL_I2C_Mem_Read+0x2d6>
 800495c:	e7da      	b.n	8004914 <HAL_I2C_Mem_Read+0x2a0>
 800495e:	bf00      	nop
 8004960:	ffff0000 	.word	0xffff0000
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004964:	6819      	ldr	r1, [r3, #0]
 8004966:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800496a:	6019      	str	r1, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800496c:	6819      	ldr	r1, [r3, #0]
 800496e:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004972:	6019      	str	r1, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004974:	9004      	str	r0, [sp, #16]
 8004976:	6959      	ldr	r1, [r3, #20]
 8004978:	9104      	str	r1, [sp, #16]
 800497a:	6999      	ldr	r1, [r3, #24]
 800497c:	9104      	str	r1, [sp, #16]
 800497e:	9904      	ldr	r1, [sp, #16]
 8004980:	e6f9      	b.n	8004776 <HAL_I2C_Mem_Read+0x102>
 8004982:	bf00      	nop

08004984 <HAL_I2C_Mem_Read_DMA>:
{
 8004984:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004988:	b086      	sub	sp, #24
 800498a:	4604      	mov	r4, r0
 800498c:	4698      	mov	r8, r3
 800498e:	460e      	mov	r6, r1
 8004990:	4617      	mov	r7, r2
 8004992:	f8bd 503c 	ldrh.w	r5, [sp, #60]	; 0x3c
  uint32_t tickstart = HAL_GetTick();
 8004996:	f7fe ff49 	bl	800382c <HAL_GetTick>
  __IO uint32_t count = 0U;
 800499a:	2300      	movs	r3, #0
 800499c:	9303      	str	r3, [sp, #12]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800499e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 80049a2:	2b20      	cmp	r3, #32
 80049a4:	d127      	bne.n	80049f6 <HAL_I2C_Mem_Read_DMA+0x72>
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80049a6:	4b65      	ldr	r3, [pc, #404]	; (8004b3c <HAL_I2C_Mem_Read_DMA+0x1b8>)
 80049a8:	4a65      	ldr	r2, [pc, #404]	; (8004b40 <HAL_I2C_Mem_Read_DMA+0x1bc>)
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	08db      	lsrs	r3, r3, #3
 80049ae:	fba2 2303 	umull	r2, r3, r2, r3
 80049b2:	0a1b      	lsrs	r3, r3, #8
 80049b4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80049b8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80049bc:	4681      	mov	r9, r0
 80049be:	9303      	str	r3, [sp, #12]
 80049c0:	e003      	b.n	80049ca <HAL_I2C_Mem_Read_DMA+0x46>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80049c2:	6821      	ldr	r1, [r4, #0]
 80049c4:	698b      	ldr	r3, [r1, #24]
 80049c6:	079a      	lsls	r2, r3, #30
 80049c8:	d519      	bpl.n	80049fe <HAL_I2C_Mem_Read_DMA+0x7a>
      count--;
 80049ca:	9b03      	ldr	r3, [sp, #12]
 80049cc:	3b01      	subs	r3, #1
 80049ce:	9303      	str	r3, [sp, #12]
      if (count == 0U)
 80049d0:	9b03      	ldr	r3, [sp, #12]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f5      	bne.n	80049c2 <HAL_I2C_Mem_Read_DMA+0x3e>
        hi2c->State               = HAL_I2C_STATE_READY;
 80049d6:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049d8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80049da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80049e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049e8:	f042 0220 	orr.w	r2, r2, #32
        return HAL_ERROR;
 80049ec:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049ee:	6422      	str	r2, [r4, #64]	; 0x40
}
 80049f0:	b006      	add	sp, #24
 80049f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    return HAL_BUSY;
 80049f6:	2002      	movs	r0, #2
}
 80049f8:	b006      	add	sp, #24
 80049fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    __HAL_LOCK(hi2c);
 80049fe:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8004a02:	2b01      	cmp	r3, #1
 8004a04:	d0f7      	beq.n	80049f6 <HAL_I2C_Mem_Read_DMA+0x72>
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a06:	680b      	ldr	r3, [r1, #0]
    __HAL_LOCK(hi2c);
 8004a08:	2201      	movs	r2, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a0a:	07db      	lsls	r3, r3, #31
    __HAL_LOCK(hi2c);
 8004a0c:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a10:	d402      	bmi.n	8004a18 <HAL_I2C_Mem_Read_DMA+0x94>
      __HAL_I2C_ENABLE(hi2c);
 8004a12:	680b      	ldr	r3, [r1, #0]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	600b      	str	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a18:	680b      	ldr	r3, [r1, #0]
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a1a:	4a4a      	ldr	r2, [pc, #296]	; (8004b44 <HAL_I2C_Mem_Read_DMA+0x1c0>)
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a1c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a20:	600b      	str	r3, [r1, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a22:	2022      	movs	r0, #34	; 0x22
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a24:	2340      	movs	r3, #64	; 0x40
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a26:	f04f 0a00 	mov.w	sl, #0
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004a2a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004a2e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a32:	f8c4 a040 	str.w	sl, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8004a36:	8565      	strh	r5, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004a38:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8004a3a:	980e      	ldr	r0, [sp, #56]	; 0x38
 8004a3c:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004a42:	62e2      	str	r2, [r4, #44]	; 0x2c
    if (hi2c->XferSize > 0U)
 8004a44:	b1eb      	cbz	r3, 8004a82 <HAL_I2C_Mem_Read_DMA+0xfe>
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004a46:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004a48:	4d3f      	ldr	r5, [pc, #252]	; (8004b48 <HAL_I2C_Mem_Read_DMA+0x1c4>)
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004a4a:	4a40      	ldr	r2, [pc, #256]	; (8004b4c <HAL_I2C_Mem_Read_DMA+0x1c8>)
      hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 8004a4c:	63c5      	str	r5, [r0, #60]	; 0x3c
      hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8004a4e:	64c2      	str	r2, [r0, #76]	; 0x4c
      hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8004a50:	f8c0 a040 	str.w	sl, [r0, #64]	; 0x40
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004a54:	3110      	adds	r1, #16
      hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 8004a56:	e9c0 aa11 	strd	sl, sl, [r0, #68]	; 0x44
      hi2c->hdmarx->XferAbortCallback = NULL;
 8004a5a:	f8c0 a050 	str.w	sl, [r0, #80]	; 0x50
      dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 8004a5e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a60:	f7ff f806 	bl	8003a70 <HAL_DMA_Start_IT>
      if (dmaxferstatus == HAL_OK)
 8004a64:	4605      	mov	r5, r0
 8004a66:	b350      	cbz	r0, 8004abe <HAL_I2C_Mem_Read_DMA+0x13a>
        hi2c->State     = HAL_I2C_STATE_READY;
 8004a68:	2320      	movs	r3, #32
 8004a6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8004a6e:	f884 a03e 	strb.w	sl, [r4, #62]	; 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a72:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8004a74:	f884 a03c 	strb.w	sl, [r4, #60]	; 0x3c
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004a78:	f043 0310 	orr.w	r3, r3, #16
 8004a7c:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 8004a7e:	2001      	movs	r0, #1
 8004a80:	e7ba      	b.n	80049f8 <HAL_I2C_Mem_Read_DMA+0x74>
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004a82:	2023      	movs	r0, #35	; 0x23
 8004a84:	9000      	str	r0, [sp, #0]
 8004a86:	f8cd 9004 	str.w	r9, [sp, #4]
 8004a8a:	4643      	mov	r3, r8
 8004a8c:	463a      	mov	r2, r7
 8004a8e:	4631      	mov	r1, r6
 8004a90:	4620      	mov	r0, r4
 8004a92:	f7ff fafb 	bl	800408c <I2C_RequestMemoryRead>
 8004a96:	b980      	cbnz	r0, 8004aba <HAL_I2C_Mem_Read_DMA+0x136>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a98:	6823      	ldr	r3, [r4, #0]
 8004a9a:	9005      	str	r0, [sp, #20]
 8004a9c:	695a      	ldr	r2, [r3, #20]
 8004a9e:	9205      	str	r2, [sp, #20]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	9205      	str	r2, [sp, #20]
 8004aa4:	9a05      	ldr	r2, [sp, #20]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aa6:	681a      	ldr	r2, [r3, #0]
      hi2c->State = HAL_I2C_STATE_READY;
 8004aa8:	2120      	movs	r1, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aaa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004aae:	601a      	str	r2, [r3, #0]
      __HAL_UNLOCK(hi2c);
 8004ab0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
      hi2c->State = HAL_I2C_STATE_READY;
 8004ab4:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
 8004ab8:	e79e      	b.n	80049f8 <HAL_I2C_Mem_Read_DMA+0x74>
        return HAL_ERROR;
 8004aba:	2001      	movs	r0, #1
 8004abc:	e79c      	b.n	80049f8 <HAL_I2C_Mem_Read_DMA+0x74>
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8004abe:	2023      	movs	r0, #35	; 0x23
 8004ac0:	9000      	str	r0, [sp, #0]
 8004ac2:	f8cd 9004 	str.w	r9, [sp, #4]
 8004ac6:	4643      	mov	r3, r8
 8004ac8:	463a      	mov	r2, r7
 8004aca:	4631      	mov	r1, r6
 8004acc:	4620      	mov	r0, r4
 8004ace:	f7ff fadd 	bl	800408c <I2C_RequestMemoryRead>
 8004ad2:	b9c8      	cbnz	r0, 8004b08 <HAL_I2C_Mem_Read_DMA+0x184>
        if (hi2c->XferSize == 1U)
 8004ad4:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8004ad6:	6823      	ldr	r3, [r4, #0]
 8004ad8:	2a01      	cmp	r2, #1
 8004ada:	d029      	beq.n	8004b30 <HAL_I2C_Mem_Read_DMA+0x1ac>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004adc:	685a      	ldr	r2, [r3, #4]
 8004ade:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004ae2:	605a      	str	r2, [r3, #4]
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae4:	2100      	movs	r1, #0
 8004ae6:	9104      	str	r1, [sp, #16]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	9204      	str	r2, [sp, #16]
 8004aec:	699a      	ldr	r2, [r3, #24]
 8004aee:	9204      	str	r2, [sp, #16]
 8004af0:	9a04      	ldr	r2, [sp, #16]
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004af2:	685a      	ldr	r2, [r3, #4]
        __HAL_UNLOCK(hi2c);
 8004af4:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 8004af8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004afc:	605a      	str	r2, [r3, #4]
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 8004afe:	685a      	ldr	r2, [r3, #4]
 8004b00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b04:	605a      	str	r2, [r3, #4]
 8004b06:	e777      	b.n	80049f8 <HAL_I2C_Mem_Read_DMA+0x74>
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8004b08:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8004b0a:	f7fe ffef 	bl	8003aec <HAL_DMA_Abort_IT>
          if (hi2c->hdmarx != NULL)
 8004b0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b10:	b103      	cbz	r3, 8004b14 <HAL_I2C_Mem_Read_DMA+0x190>
            hi2c->hdmarx->XferCpltCallback = NULL;
 8004b12:	63dd      	str	r5, [r3, #60]	; 0x3c
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b14:	6823      	ldr	r3, [r4, #0]
 8004b16:	681a      	ldr	r2, [r3, #0]
          hi2c->XferSize = 0U;
 8004b18:	2100      	movs	r1, #0
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b1e:	601a      	str	r2, [r3, #0]
          hi2c->XferCount = 0U;
 8004b20:	8561      	strh	r1, [r4, #42]	; 0x2a
          __HAL_I2C_DISABLE(hi2c);
 8004b22:	681a      	ldr	r2, [r3, #0]
          hi2c->XferSize = 0U;
 8004b24:	8521      	strh	r1, [r4, #40]	; 0x28
          __HAL_I2C_DISABLE(hi2c);
 8004b26:	f022 0201 	bic.w	r2, r2, #1
 8004b2a:	601a      	str	r2, [r3, #0]
          return HAL_ERROR;
 8004b2c:	2001      	movs	r0, #1
 8004b2e:	e763      	b.n	80049f8 <HAL_I2C_Mem_Read_DMA+0x74>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b36:	601a      	str	r2, [r3, #0]
 8004b38:	e7d4      	b.n	8004ae4 <HAL_I2C_Mem_Read_DMA+0x160>
 8004b3a:	bf00      	nop
 8004b3c:	200016cc 	.word	0x200016cc
 8004b40:	14f8b589 	.word	0x14f8b589
 8004b44:	ffff0000 	.word	0xffff0000
 8004b48:	08004ba5 	.word	0x08004ba5
 8004b4c:	08004b61 	.word	0x08004b61

08004b50 <HAL_I2C_MasterRxCpltCallback>:
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop

08004b54 <HAL_I2C_SlaveTxCpltCallback>:
 8004b54:	4770      	bx	lr
 8004b56:	bf00      	nop

08004b58 <HAL_I2C_SlaveRxCpltCallback>:
 8004b58:	4770      	bx	lr
 8004b5a:	bf00      	nop

08004b5c <HAL_I2C_ErrorCallback>:
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop

08004b60 <I2C_DMAError>:
{
 8004b60:	b510      	push	{r4, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004b62:	6b84      	ldr	r4, [r0, #56]	; 0x38
  if (hi2c->hdmatx != NULL)
 8004b64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004b66:	b10b      	cbz	r3, 8004b6c <I2C_DMAError+0xc>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004b68:	2200      	movs	r2, #0
 8004b6a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8004b6c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004b6e:	b10b      	cbz	r3, 8004b74 <I2C_DMAError+0x14>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004b70:	2200      	movs	r2, #0
 8004b72:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8004b74:	f7ff f8a2 	bl	8003cbc <HAL_DMA_GetError>
 8004b78:	2802      	cmp	r0, #2
 8004b7a:	d012      	beq.n	8004ba2 <I2C_DMAError+0x42>
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004b7c:	6821      	ldr	r1, [r4, #0]
 8004b7e:	680b      	ldr	r3, [r1, #0]
    hi2c->XferCount = 0U;
 8004b80:	2200      	movs	r2, #0
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    hi2c->State = HAL_I2C_STATE_READY;
 8004b86:	2020      	movs	r0, #32
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8004b88:	600b      	str	r3, [r1, #0]
    hi2c->XferCount = 0U;
 8004b8a:	8562      	strh	r2, [r4, #42]	; 0x2a
    hi2c->State = HAL_I2C_STATE_READY;
 8004b8c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b90:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8004b94:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004b96:	f043 0310 	orr.w	r3, r3, #16
 8004b9a:	6423      	str	r3, [r4, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004b9c:	4620      	mov	r0, r4
 8004b9e:	f7ff ffdd 	bl	8004b5c <HAL_I2C_ErrorCallback>
}
 8004ba2:	bd10      	pop	{r4, pc}

08004ba4 <I2C_DMAXferCplt>:
{
 8004ba4:	b570      	push	{r4, r5, r6, lr}
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004ba6:	6b84      	ldr	r4, [r0, #56]	; 0x38
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004ba8:	6823      	ldr	r3, [r4, #0]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004baa:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bae:	f894 003e 	ldrb.w	r0, [r4, #62]	; 0x3e
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004bb2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bb4:	6859      	ldr	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 8004bb6:	6b65      	ldr	r5, [r4, #52]	; 0x34
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bb8:	f421 7140 	bic.w	r1, r1, #768	; 0x300
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bbc:	b2d2      	uxtb	r2, r2
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004bbe:	b2c0      	uxtb	r0, r0
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bc0:	6059      	str	r1, [r3, #4]
  if (hi2c->hdmatx != NULL)
 8004bc2:	b10d      	cbz	r5, 8004bc8 <I2C_DMAXferCplt+0x24>
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004bc4:	2100      	movs	r1, #0
 8004bc6:	63e9      	str	r1, [r5, #60]	; 0x3c
  if (hi2c->hdmarx != NULL)
 8004bc8:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004bca:	b109      	cbz	r1, 8004bd0 <I2C_DMAXferCplt+0x2c>
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004bcc:	2500      	movs	r5, #0
 8004bce:	63cd      	str	r5, [r1, #60]	; 0x3c
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004bd0:	f002 0121 	and.w	r1, r2, #33	; 0x21
 8004bd4:	2921      	cmp	r1, #33	; 0x21
 8004bd6:	d03e      	beq.n	8004c56 <I2C_DMAXferCplt+0xb2>
 8004bd8:	f002 0122 	and.w	r1, r2, #34	; 0x22
 8004bdc:	2922      	cmp	r1, #34	; 0x22
 8004bde:	d038      	beq.n	8004c52 <I2C_DMAXferCplt+0xae>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8004be0:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004be4:	2a00      	cmp	r2, #0
 8004be6:	d033      	beq.n	8004c50 <I2C_DMAXferCplt+0xac>
    if (hi2c->XferCount == (uint16_t)1)
 8004be8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8004bea:	b292      	uxth	r2, r2
 8004bec:	2a01      	cmp	r2, #1
 8004bee:	d103      	bne.n	8004bf8 <I2C_DMAXferCplt+0x54>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf6:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bf8:	685a      	ldr	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004bfa:	f516 3f80 	cmn.w	r6, #65536	; 0x10000
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004bfe:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004c02:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8004c04:	d006      	beq.n	8004c14 <I2C_DMAXferCplt+0x70>
 8004c06:	2e08      	cmp	r6, #8
 8004c08:	d004      	beq.n	8004c14 <I2C_DMAXferCplt+0x70>
 8004c0a:	f1b6 4f2a 	cmp.w	r6, #2852126720	; 0xaa000000
 8004c0e:	d001      	beq.n	8004c14 <I2C_DMAXferCplt+0x70>
 8004c10:	2e20      	cmp	r6, #32
 8004c12:	d103      	bne.n	8004c1c <I2C_DMAXferCplt+0x78>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c14:	681a      	ldr	r2, [r3, #0]
 8004c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c1a:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004c1c:	685a      	ldr	r2, [r3, #4]
 8004c1e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004c22:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c24:	685a      	ldr	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004c26:	2100      	movs	r1, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c2c:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 8004c2e:	8561      	strh	r1, [r4, #42]	; 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004c30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004c32:	bb33      	cbnz	r3, 8004c82 <I2C_DMAXferCplt+0xde>
      hi2c->State = HAL_I2C_STATE_READY;
 8004c34:	2220      	movs	r2, #32
 8004c36:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c3a:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8004c3e:	2a40      	cmp	r2, #64	; 0x40
 8004c40:	d018      	beq.n	8004c74 <I2C_DMAXferCplt+0xd0>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c42:	2212      	movs	r2, #18
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c48:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c4a:	6322      	str	r2, [r4, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c4c:	f7ff ff80 	bl	8004b50 <HAL_I2C_MasterRxCpltCallback>
}
 8004c50:	bd70      	pop	{r4, r5, r6, pc}
  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 8004c52:	2820      	cmp	r0, #32
 8004c54:	d1c4      	bne.n	8004be0 <I2C_DMAXferCplt+0x3c>
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c56:	6859      	ldr	r1, [r3, #4]
    hi2c->XferCount = 0U;
 8004c58:	2000      	movs	r0, #0
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c5a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c5e:	2a29      	cmp	r2, #41	; 0x29
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004c60:	6059      	str	r1, [r3, #4]
    hi2c->XferCount = 0U;
 8004c62:	8560      	strh	r0, [r4, #42]	; 0x2a
    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8004c64:	d011      	beq.n	8004c8a <I2C_DMAXferCplt+0xe6>
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004c66:	2a2a      	cmp	r2, #42	; 0x2a
 8004c68:	d019      	beq.n	8004c9e <I2C_DMAXferCplt+0xfa>
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004c6a:	685a      	ldr	r2, [r3, #4]
 8004c6c:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8004c70:	605a      	str	r2, [r3, #4]
}
 8004c72:	bd70      	pop	{r4, r5, r6, pc}
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c74:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004c78:	4620      	mov	r0, r4
        hi2c->PreviousState = I2C_STATE_NONE;
 8004c7a:	6323      	str	r3, [r4, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8004c7c:	f7fd ff6a 	bl	8002b54 <HAL_I2C_MemRxCpltCallback>
}
 8004c80:	bd70      	pop	{r4, r5, r6, pc}
      HAL_I2C_ErrorCallback(hi2c);
 8004c82:	4620      	mov	r0, r4
 8004c84:	f7ff ff6a 	bl	8004b5c <HAL_I2C_ErrorCallback>
}
 8004c88:	bd70      	pop	{r4, r5, r6, pc}
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c8a:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004c8c:	2221      	movs	r2, #33	; 0x21
 8004c8e:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c90:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c92:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004c96:	f7ff ff5d 	bl	8004b54 <HAL_I2C_SlaveTxCpltCallback>
 8004c9a:	6823      	ldr	r3, [r4, #0]
 8004c9c:	e7e5      	b.n	8004c6a <I2C_DMAXferCplt+0xc6>
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c9e:	2328      	movs	r3, #40	; 0x28
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004ca0:	2222      	movs	r2, #34	; 0x22
 8004ca2:	6322      	str	r2, [r4, #48]	; 0x30
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ca4:	4620      	mov	r0, r4
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ca6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004caa:	f7ff ff55 	bl	8004b58 <HAL_I2C_SlaveRxCpltCallback>
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	e7db      	b.n	8004c6a <I2C_DMAXferCplt+0xc6>
 8004cb2:	bf00      	nop

08004cb4 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004cb4:	2800      	cmp	r0, #0
 8004cb6:	f000 8132 	beq.w	8004f1e <HAL_RCC_OscConfig+0x26a>
{
 8004cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cbe:	6803      	ldr	r3, [r0, #0]
 8004cc0:	07dd      	lsls	r5, r3, #31
{
 8004cc2:	b082      	sub	sp, #8
 8004cc4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cc6:	d52f      	bpl.n	8004d28 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cc8:	49ac      	ldr	r1, [pc, #688]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
 8004cca:	688a      	ldr	r2, [r1, #8]
 8004ccc:	f002 020c 	and.w	r2, r2, #12
 8004cd0:	2a04      	cmp	r2, #4
 8004cd2:	f000 80ea 	beq.w	8004eaa <HAL_RCC_OscConfig+0x1f6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004cd6:	688a      	ldr	r2, [r1, #8]
 8004cd8:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004cdc:	2a08      	cmp	r2, #8
 8004cde:	f000 80e0 	beq.w	8004ea2 <HAL_RCC_OscConfig+0x1ee>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ce2:	6863      	ldr	r3, [r4, #4]
 8004ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ce8:	f000 80e9 	beq.w	8004ebe <HAL_RCC_OscConfig+0x20a>
 8004cec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004cf0:	f000 8178 	beq.w	8004fe4 <HAL_RCC_OscConfig+0x330>
 8004cf4:	4da1      	ldr	r5, [pc, #644]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
 8004cf6:	682a      	ldr	r2, [r5, #0]
 8004cf8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004cfc:	602a      	str	r2, [r5, #0]
 8004cfe:	682a      	ldr	r2, [r5, #0]
 8004d00:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004d04:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f040 80de 	bne.w	8004ec8 <HAL_RCC_OscConfig+0x214>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d0c:	f7fe fd8e 	bl	800382c <HAL_GetTick>
 8004d10:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d12:	e005      	b.n	8004d20 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004d14:	f7fe fd8a 	bl	800382c <HAL_GetTick>
 8004d18:	1b80      	subs	r0, r0, r6
 8004d1a:	2864      	cmp	r0, #100	; 0x64
 8004d1c:	f200 80f2 	bhi.w	8004f04 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004d20:	682b      	ldr	r3, [r5, #0]
 8004d22:	039b      	lsls	r3, r3, #14
 8004d24:	d4f6      	bmi.n	8004d14 <HAL_RCC_OscConfig+0x60>
 8004d26:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004d28:	079f      	lsls	r7, r3, #30
 8004d2a:	d475      	bmi.n	8004e18 <HAL_RCC_OscConfig+0x164>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d2c:	071a      	lsls	r2, r3, #28
 8004d2e:	d515      	bpl.n	8004d5c <HAL_RCC_OscConfig+0xa8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d30:	6963      	ldr	r3, [r4, #20]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 80a5 	beq.w	8004e82 <HAL_RCC_OscConfig+0x1ce>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d38:	4b91      	ldr	r3, [pc, #580]	; (8004f80 <HAL_RCC_OscConfig+0x2cc>)

      /* Get Start Tick*/
      tickstart = HAL_GetTick();

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d3a:	4d90      	ldr	r5, [pc, #576]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_ENABLE();
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8004d40:	f7fe fd74 	bl	800382c <HAL_GetTick>
 8004d44:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d46:	e005      	b.n	8004d54 <HAL_RCC_OscConfig+0xa0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d48:	f7fe fd70 	bl	800382c <HAL_GetTick>
 8004d4c:	1b80      	subs	r0, r0, r6
 8004d4e:	2802      	cmp	r0, #2
 8004d50:	f200 80d8 	bhi.w	8004f04 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d54:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004d56:	079b      	lsls	r3, r3, #30
 8004d58:	d5f6      	bpl.n	8004d48 <HAL_RCC_OscConfig+0x94>
 8004d5a:	6823      	ldr	r3, [r4, #0]
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d5c:	0758      	lsls	r0, r3, #29
 8004d5e:	d53b      	bpl.n	8004dd8 <HAL_RCC_OscConfig+0x124>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d60:	4a86      	ldr	r2, [pc, #536]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
 8004d62:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004d64:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004d68:	f040 80db 	bne.w	8004f22 <HAL_RCC_OscConfig+0x26e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d6c:	9301      	str	r3, [sp, #4]
 8004d6e:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d74:	6413      	str	r3, [r2, #64]	; 0x40
 8004d76:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d7c:	9301      	str	r3, [sp, #4]
 8004d7e:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004d80:	2601      	movs	r6, #1
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d82:	4d80      	ldr	r5, [pc, #512]	; (8004f84 <HAL_RCC_OscConfig+0x2d0>)
 8004d84:	682a      	ldr	r2, [r5, #0]
 8004d86:	05d1      	lsls	r1, r2, #23
 8004d88:	f140 80ac 	bpl.w	8004ee4 <HAL_RCC_OscConfig+0x230>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d8c:	68a3      	ldr	r3, [r4, #8]
 8004d8e:	2b01      	cmp	r3, #1
 8004d90:	f000 80c9 	beq.w	8004f26 <HAL_RCC_OscConfig+0x272>
 8004d94:	2b05      	cmp	r3, #5
 8004d96:	f000 812f 	beq.w	8004ff8 <HAL_RCC_OscConfig+0x344>
 8004d9a:	4d78      	ldr	r5, [pc, #480]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
 8004d9c:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004d9e:	f022 0201 	bic.w	r2, r2, #1
 8004da2:	672a      	str	r2, [r5, #112]	; 0x70
 8004da4:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8004da6:	f022 0204 	bic.w	r2, r2, #4
 8004daa:	672a      	str	r2, [r5, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	f040 80bf 	bne.w	8004f30 <HAL_RCC_OscConfig+0x27c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004db2:	f7fe fd3b 	bl	800382c <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004db6:	f241 3788 	movw	r7, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004dba:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dbc:	e006      	b.n	8004dcc <HAL_RCC_OscConfig+0x118>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004dbe:	f7fe fd35 	bl	800382c <HAL_GetTick>
 8004dc2:	eba0 0008 	sub.w	r0, r0, r8
 8004dc6:	42b8      	cmp	r0, r7
 8004dc8:	f200 809c 	bhi.w	8004f04 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dcc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004dce:	0798      	lsls	r0, r3, #30
 8004dd0:	d4f5      	bmi.n	8004dbe <HAL_RCC_OscConfig+0x10a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004dd2:	2e00      	cmp	r6, #0
 8004dd4:	f040 80dc 	bne.w	8004f90 <HAL_RCC_OscConfig+0x2dc>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004dd8:	69a0      	ldr	r0, [r4, #24]
 8004dda:	b1c8      	cbz	r0, 8004e10 <HAL_RCC_OscConfig+0x15c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ddc:	4d67      	ldr	r5, [pc, #412]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
 8004dde:	68aa      	ldr	r2, [r5, #8]
 8004de0:	f002 020c 	and.w	r2, r2, #12
 8004de4:	2a08      	cmp	r2, #8
 8004de6:	f000 80d9 	beq.w	8004f9c <HAL_RCC_OscConfig+0x2e8>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dea:	4a67      	ldr	r2, [pc, #412]	; (8004f88 <HAL_RCC_OscConfig+0x2d4>)
 8004dec:	2100      	movs	r1, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dee:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004df0:	6011      	str	r1, [r2, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004df2:	f000 810b 	beq.w	800500c <HAL_RCC_OscConfig+0x358>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df6:	f7fe fd19 	bl	800382c <HAL_GetTick>

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfa:	462c      	mov	r4, r5
        tickstart = HAL_GetTick();
 8004dfc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dfe:	e004      	b.n	8004e0a <HAL_RCC_OscConfig+0x156>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004e00:	f7fe fd14 	bl	800382c <HAL_GetTick>
 8004e04:	1b40      	subs	r0, r0, r5
 8004e06:	2802      	cmp	r0, #2
 8004e08:	d87c      	bhi.n	8004f04 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e0a:	6823      	ldr	r3, [r4, #0]
 8004e0c:	019b      	lsls	r3, r3, #6
 8004e0e:	d4f7      	bmi.n	8004e00 <HAL_RCC_OscConfig+0x14c>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004e10:	2000      	movs	r0, #0
}
 8004e12:	b002      	add	sp, #8
 8004e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e18:	4a58      	ldr	r2, [pc, #352]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
 8004e1a:	6891      	ldr	r1, [r2, #8]
 8004e1c:	f011 0f0c 	tst.w	r1, #12
 8004e20:	d024      	beq.n	8004e6c <HAL_RCC_OscConfig+0x1b8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e22:	6891      	ldr	r1, [r2, #8]
 8004e24:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e28:	2908      	cmp	r1, #8
 8004e2a:	d01c      	beq.n	8004e66 <HAL_RCC_OscConfig+0x1b2>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e2c:	68e3      	ldr	r3, [r4, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	f000 8092 	beq.w	8004f58 <HAL_RCC_OscConfig+0x2a4>
        __HAL_RCC_HSI_ENABLE();
 8004e34:	4b55      	ldr	r3, [pc, #340]	; (8004f8c <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e36:	4d51      	ldr	r5, [pc, #324]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_ENABLE();
 8004e38:	2201      	movs	r2, #1
 8004e3a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004e3c:	f7fe fcf6 	bl	800382c <HAL_GetTick>
 8004e40:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e42:	e004      	b.n	8004e4e <HAL_RCC_OscConfig+0x19a>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e44:	f7fe fcf2 	bl	800382c <HAL_GetTick>
 8004e48:	1b80      	subs	r0, r0, r6
 8004e4a:	2802      	cmp	r0, #2
 8004e4c:	d85a      	bhi.n	8004f04 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e4e:	682b      	ldr	r3, [r5, #0]
 8004e50:	0798      	lsls	r0, r3, #30
 8004e52:	d5f7      	bpl.n	8004e44 <HAL_RCC_OscConfig+0x190>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e54:	682b      	ldr	r3, [r5, #0]
 8004e56:	6922      	ldr	r2, [r4, #16]
 8004e58:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004e5c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004e60:	602b      	str	r3, [r5, #0]
 8004e62:	6823      	ldr	r3, [r4, #0]
 8004e64:	e762      	b.n	8004d2c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e66:	6852      	ldr	r2, [r2, #4]
 8004e68:	0256      	lsls	r6, r2, #9
 8004e6a:	d4df      	bmi.n	8004e2c <HAL_RCC_OscConfig+0x178>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e6c:	4a43      	ldr	r2, [pc, #268]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	0795      	lsls	r5, r2, #30
 8004e72:	d54b      	bpl.n	8004f0c <HAL_RCC_OscConfig+0x258>
 8004e74:	68e2      	ldr	r2, [r4, #12]
 8004e76:	2a01      	cmp	r2, #1
 8004e78:	d048      	beq.n	8004f0c <HAL_RCC_OscConfig+0x258>
        return HAL_ERROR;
 8004e7a:	2001      	movs	r0, #1
}
 8004e7c:	b002      	add	sp, #8
 8004e7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004e82:	4a3f      	ldr	r2, [pc, #252]	; (8004f80 <HAL_RCC_OscConfig+0x2cc>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e84:	4d3d      	ldr	r5, [pc, #244]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
      __HAL_RCC_LSI_DISABLE();
 8004e86:	6013      	str	r3, [r2, #0]
      tickstart = HAL_GetTick();
 8004e88:	f7fe fcd0 	bl	800382c <HAL_GetTick>
 8004e8c:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e8e:	e004      	b.n	8004e9a <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004e90:	f7fe fccc 	bl	800382c <HAL_GetTick>
 8004e94:	1b80      	subs	r0, r0, r6
 8004e96:	2802      	cmp	r0, #2
 8004e98:	d834      	bhi.n	8004f04 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004e9a:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 8004e9c:	079f      	lsls	r7, r3, #30
 8004e9e:	d4f7      	bmi.n	8004e90 <HAL_RCC_OscConfig+0x1dc>
 8004ea0:	e75b      	b.n	8004d5a <HAL_RCC_OscConfig+0xa6>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ea2:	684a      	ldr	r2, [r1, #4]
 8004ea4:	0250      	lsls	r0, r2, #9
 8004ea6:	f57f af1c 	bpl.w	8004ce2 <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eaa:	4a34      	ldr	r2, [pc, #208]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
 8004eac:	6812      	ldr	r2, [r2, #0]
 8004eae:	0391      	lsls	r1, r2, #14
 8004eb0:	f57f af3a 	bpl.w	8004d28 <HAL_RCC_OscConfig+0x74>
 8004eb4:	6862      	ldr	r2, [r4, #4]
 8004eb6:	2a00      	cmp	r2, #0
 8004eb8:	f47f af36 	bne.w	8004d28 <HAL_RCC_OscConfig+0x74>
 8004ebc:	e7dd      	b.n	8004e7a <HAL_RCC_OscConfig+0x1c6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ebe:	4a2f      	ldr	r2, [pc, #188]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
 8004ec0:	6813      	ldr	r3, [r2, #0]
 8004ec2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ec6:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004ec8:	f7fe fcb0 	bl	800382c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ecc:	4d2b      	ldr	r5, [pc, #172]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
        tickstart = HAL_GetTick();
 8004ece:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ed0:	e004      	b.n	8004edc <HAL_RCC_OscConfig+0x228>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ed2:	f7fe fcab 	bl	800382c <HAL_GetTick>
 8004ed6:	1b80      	subs	r0, r0, r6
 8004ed8:	2864      	cmp	r0, #100	; 0x64
 8004eda:	d813      	bhi.n	8004f04 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004edc:	682b      	ldr	r3, [r5, #0]
 8004ede:	039a      	lsls	r2, r3, #14
 8004ee0:	d5f7      	bpl.n	8004ed2 <HAL_RCC_OscConfig+0x21e>
 8004ee2:	e720      	b.n	8004d26 <HAL_RCC_OscConfig+0x72>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004ee4:	682a      	ldr	r2, [r5, #0]
 8004ee6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004eea:	602a      	str	r2, [r5, #0]
      tickstart = HAL_GetTick();
 8004eec:	f7fe fc9e 	bl	800382c <HAL_GetTick>
 8004ef0:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ef2:	682b      	ldr	r3, [r5, #0]
 8004ef4:	05da      	lsls	r2, r3, #23
 8004ef6:	f53f af49 	bmi.w	8004d8c <HAL_RCC_OscConfig+0xd8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004efa:	f7fe fc97 	bl	800382c <HAL_GetTick>
 8004efe:	1bc0      	subs	r0, r0, r7
 8004f00:	2802      	cmp	r0, #2
 8004f02:	d9f6      	bls.n	8004ef2 <HAL_RCC_OscConfig+0x23e>
            return HAL_TIMEOUT;
 8004f04:	2003      	movs	r0, #3
}
 8004f06:	b002      	add	sp, #8
 8004f08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f0c:	491b      	ldr	r1, [pc, #108]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
 8004f0e:	6920      	ldr	r0, [r4, #16]
 8004f10:	680a      	ldr	r2, [r1, #0]
 8004f12:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8004f16:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004f1a:	600a      	str	r2, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f1c:	e706      	b.n	8004d2c <HAL_RCC_OscConfig+0x78>
    return HAL_ERROR;
 8004f1e:	2001      	movs	r0, #1
}
 8004f20:	4770      	bx	lr
    FlagStatus       pwrclkchanged = RESET;
 8004f22:	2600      	movs	r6, #0
 8004f24:	e72d      	b.n	8004d82 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004f26:	4a15      	ldr	r2, [pc, #84]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
 8004f28:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004f2a:	f043 0301 	orr.w	r3, r3, #1
 8004f2e:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004f30:	f7fe fc7c 	bl	800382c <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f34:	4d11      	ldr	r5, [pc, #68]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
      tickstart = HAL_GetTick();
 8004f36:	4680      	mov	r8, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f38:	f241 3788 	movw	r7, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f3c:	e005      	b.n	8004f4a <HAL_RCC_OscConfig+0x296>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f3e:	f7fe fc75 	bl	800382c <HAL_GetTick>
 8004f42:	eba0 0008 	sub.w	r0, r0, r8
 8004f46:	42b8      	cmp	r0, r7
 8004f48:	d8dc      	bhi.n	8004f04 <HAL_RCC_OscConfig+0x250>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004f4a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8004f4c:	079b      	lsls	r3, r3, #30
 8004f4e:	d5f6      	bpl.n	8004f3e <HAL_RCC_OscConfig+0x28a>
    if(pwrclkchanged == SET)
 8004f50:	2e00      	cmp	r6, #0
 8004f52:	f43f af41 	beq.w	8004dd8 <HAL_RCC_OscConfig+0x124>
 8004f56:	e01b      	b.n	8004f90 <HAL_RCC_OscConfig+0x2dc>
        __HAL_RCC_HSI_DISABLE();
 8004f58:	4a0c      	ldr	r2, [pc, #48]	; (8004f8c <HAL_RCC_OscConfig+0x2d8>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f5a:	4d08      	ldr	r5, [pc, #32]	; (8004f7c <HAL_RCC_OscConfig+0x2c8>)
        __HAL_RCC_HSI_DISABLE();
 8004f5c:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004f5e:	f7fe fc65 	bl	800382c <HAL_GetTick>
 8004f62:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f64:	e004      	b.n	8004f70 <HAL_RCC_OscConfig+0x2bc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f66:	f7fe fc61 	bl	800382c <HAL_GetTick>
 8004f6a:	1b80      	subs	r0, r0, r6
 8004f6c:	2802      	cmp	r0, #2
 8004f6e:	d8c9      	bhi.n	8004f04 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f70:	682b      	ldr	r3, [r5, #0]
 8004f72:	0799      	lsls	r1, r3, #30
 8004f74:	d4f7      	bmi.n	8004f66 <HAL_RCC_OscConfig+0x2b2>
 8004f76:	6823      	ldr	r3, [r4, #0]
 8004f78:	e6d8      	b.n	8004d2c <HAL_RCC_OscConfig+0x78>
 8004f7a:	bf00      	nop
 8004f7c:	40023800 	.word	0x40023800
 8004f80:	42470e80 	.word	0x42470e80
 8004f84:	40007000 	.word	0x40007000
 8004f88:	42470060 	.word	0x42470060
 8004f8c:	42470000 	.word	0x42470000
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f90:	4a35      	ldr	r2, [pc, #212]	; (8005068 <HAL_RCC_OscConfig+0x3b4>)
 8004f92:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f98:	6413      	str	r3, [r2, #64]	; 0x40
 8004f9a:	e71d      	b.n	8004dd8 <HAL_RCC_OscConfig+0x124>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f9c:	2801      	cmp	r0, #1
 8004f9e:	f43f af6d 	beq.w	8004e7c <HAL_RCC_OscConfig+0x1c8>
        pll_config = RCC->PLLCFGR;
 8004fa2:	686b      	ldr	r3, [r5, #4]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa4:	69e2      	ldr	r2, [r4, #28]
 8004fa6:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
 8004faa:	4291      	cmp	r1, r2
 8004fac:	f47f af65 	bne.w	8004e7a <HAL_RCC_OscConfig+0x1c6>
 8004fb0:	6a22      	ldr	r2, [r4, #32]
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fb2:	f003 013f 	and.w	r1, r3, #63	; 0x3f
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fb6:	4291      	cmp	r1, r2
 8004fb8:	f47f af5f 	bne.w	8004e7a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fbc:	f647 72c0 	movw	r2, #32704	; 0x7fc0
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fc0:	6a61      	ldr	r1, [r4, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fc2:	401a      	ands	r2, r3
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fc4:	428a      	cmp	r2, r1
 8004fc6:	f47f af58 	bne.w	8004e7a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fca:	6aa2      	ldr	r2, [r4, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fcc:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004fd0:	4291      	cmp	r1, r2
 8004fd2:	f47f af52 	bne.w	8004e7a <HAL_RCC_OscConfig+0x1c6>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004fd6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004fd8:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
    return HAL_ERROR;
 8004fdc:	1a18      	subs	r0, r3, r0
 8004fde:	bf18      	it	ne
 8004fe0:	2001      	movne	r0, #1
 8004fe2:	e74b      	b.n	8004e7c <HAL_RCC_OscConfig+0x1c8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004fe4:	4b20      	ldr	r3, [pc, #128]	; (8005068 <HAL_RCC_OscConfig+0x3b4>)
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004fec:	601a      	str	r2, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004ff4:	601a      	str	r2, [r3, #0]
 8004ff6:	e767      	b.n	8004ec8 <HAL_RCC_OscConfig+0x214>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ff8:	4b1b      	ldr	r3, [pc, #108]	; (8005068 <HAL_RCC_OscConfig+0x3b4>)
 8004ffa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004ffc:	f042 0204 	orr.w	r2, r2, #4
 8005000:	671a      	str	r2, [r3, #112]	; 0x70
 8005002:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005004:	f042 0201 	orr.w	r2, r2, #1
 8005008:	671a      	str	r2, [r3, #112]	; 0x70
 800500a:	e791      	b.n	8004f30 <HAL_RCC_OscConfig+0x27c>
        tickstart = HAL_GetTick();
 800500c:	f7fe fc0e 	bl	800382c <HAL_GetTick>
 8005010:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005012:	e005      	b.n	8005020 <HAL_RCC_OscConfig+0x36c>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005014:	f7fe fc0a 	bl	800382c <HAL_GetTick>
 8005018:	1b80      	subs	r0, r0, r6
 800501a:	2802      	cmp	r0, #2
 800501c:	f63f af72 	bhi.w	8004f04 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005020:	682b      	ldr	r3, [r5, #0]
 8005022:	0199      	lsls	r1, r3, #6
 8005024:	d4f6      	bmi.n	8005014 <HAL_RCC_OscConfig+0x360>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005026:	e9d4 3607 	ldrd	r3, r6, [r4, #28]
 800502a:	e9d4 0209 	ldrd	r0, r2, [r4, #36]	; 0x24
 800502e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005030:	4c0d      	ldr	r4, [pc, #52]	; (8005068 <HAL_RCC_OscConfig+0x3b4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005032:	4333      	orrs	r3, r6
 8005034:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8005038:	0852      	lsrs	r2, r2, #1
 800503a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800503e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8005040:	490a      	ldr	r1, [pc, #40]	; (800506c <HAL_RCC_OscConfig+0x3b8>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005042:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8005046:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005048:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800504a:	600a      	str	r2, [r1, #0]
        tickstart = HAL_GetTick();
 800504c:	f7fe fbee 	bl	800382c <HAL_GetTick>
 8005050:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005052:	e005      	b.n	8005060 <HAL_RCC_OscConfig+0x3ac>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005054:	f7fe fbea 	bl	800382c <HAL_GetTick>
 8005058:	1b40      	subs	r0, r0, r5
 800505a:	2802      	cmp	r0, #2
 800505c:	f63f af52 	bhi.w	8004f04 <HAL_RCC_OscConfig+0x250>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005060:	6823      	ldr	r3, [r4, #0]
 8005062:	019a      	lsls	r2, r3, #6
 8005064:	d5f6      	bpl.n	8005054 <HAL_RCC_OscConfig+0x3a0>
 8005066:	e6d3      	b.n	8004e10 <HAL_RCC_OscConfig+0x15c>
 8005068:	40023800 	.word	0x40023800
 800506c:	42470060 	.word	0x42470060

08005070 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005070:	4917      	ldr	r1, [pc, #92]	; (80050d0 <HAL_RCC_GetSysClockFreq+0x60>)
{
 8005072:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005074:	688b      	ldr	r3, [r1, #8]
 8005076:	f003 030c 	and.w	r3, r3, #12
 800507a:	2b04      	cmp	r3, #4
 800507c:	d01b      	beq.n	80050b6 <HAL_RCC_GetSysClockFreq+0x46>
 800507e:	2b08      	cmp	r3, #8
 8005080:	d117      	bne.n	80050b2 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005082:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005084:	684b      	ldr	r3, [r1, #4]
 8005086:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800508a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800508e:	d114      	bne.n	80050ba <HAL_RCC_GetSysClockFreq+0x4a>
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005090:	6849      	ldr	r1, [r1, #4]
 8005092:	4810      	ldr	r0, [pc, #64]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x64>)
 8005094:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005098:	fba1 0100 	umull	r0, r1, r1, r0
 800509c:	f7fb fd80 	bl	8000ba0 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80050a0:	4b0b      	ldr	r3, [pc, #44]	; (80050d0 <HAL_RCC_GetSysClockFreq+0x60>)
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80050a8:	3301      	adds	r3, #1
 80050aa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80050ac:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80050b0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 80050b2:	4808      	ldr	r0, [pc, #32]	; (80050d4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 80050b4:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 80050b6:	4808      	ldr	r0, [pc, #32]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x68>)
}
 80050b8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ba:	684b      	ldr	r3, [r1, #4]
 80050bc:	4806      	ldr	r0, [pc, #24]	; (80050d8 <HAL_RCC_GetSysClockFreq+0x68>)
 80050be:	f3c3 1388 	ubfx	r3, r3, #6, #9
 80050c2:	fba3 0100 	umull	r0, r1, r3, r0
 80050c6:	2300      	movs	r3, #0
 80050c8:	f7fb fd6a 	bl	8000ba0 <__aeabi_uldivmod>
 80050cc:	e7e8      	b.n	80050a0 <HAL_RCC_GetSysClockFreq+0x30>
 80050ce:	bf00      	nop
 80050d0:	40023800 	.word	0x40023800
 80050d4:	00f42400 	.word	0x00f42400
 80050d8:	017d7840 	.word	0x017d7840

080050dc <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 80050dc:	b160      	cbz	r0, 80050f8 <HAL_RCC_ClockConfig+0x1c>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80050de:	4a49      	ldr	r2, [pc, #292]	; (8005204 <HAL_RCC_ClockConfig+0x128>)
 80050e0:	6813      	ldr	r3, [r2, #0]
 80050e2:	f003 030f 	and.w	r3, r3, #15
 80050e6:	428b      	cmp	r3, r1
 80050e8:	d208      	bcs.n	80050fc <HAL_RCC_ClockConfig+0x20>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80050ea:	b2cb      	uxtb	r3, r1
 80050ec:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80050ee:	6813      	ldr	r3, [r2, #0]
 80050f0:	f003 030f 	and.w	r3, r3, #15
 80050f4:	428b      	cmp	r3, r1
 80050f6:	d001      	beq.n	80050fc <HAL_RCC_ClockConfig+0x20>
    return HAL_ERROR;
 80050f8:	2001      	movs	r0, #1
}
 80050fa:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050fc:	6803      	ldr	r3, [r0, #0]
{
 80050fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005102:	079d      	lsls	r5, r3, #30
 8005104:	d514      	bpl.n	8005130 <HAL_RCC_ClockConfig+0x54>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005106:	075c      	lsls	r4, r3, #29
 8005108:	d504      	bpl.n	8005114 <HAL_RCC_ClockConfig+0x38>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800510a:	4c3f      	ldr	r4, [pc, #252]	; (8005208 <HAL_RCC_ClockConfig+0x12c>)
 800510c:	68a2      	ldr	r2, [r4, #8]
 800510e:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8005112:	60a2      	str	r2, [r4, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005114:	071a      	lsls	r2, r3, #28
 8005116:	d504      	bpl.n	8005122 <HAL_RCC_ClockConfig+0x46>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005118:	4c3b      	ldr	r4, [pc, #236]	; (8005208 <HAL_RCC_ClockConfig+0x12c>)
 800511a:	68a2      	ldr	r2, [r4, #8]
 800511c:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8005120:	60a2      	str	r2, [r4, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005122:	4c39      	ldr	r4, [pc, #228]	; (8005208 <HAL_RCC_ClockConfig+0x12c>)
 8005124:	6885      	ldr	r5, [r0, #8]
 8005126:	68a2      	ldr	r2, [r4, #8]
 8005128:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800512c:	432a      	orrs	r2, r5
 800512e:	60a2      	str	r2, [r4, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005130:	07df      	lsls	r7, r3, #31
 8005132:	4604      	mov	r4, r0
 8005134:	460d      	mov	r5, r1
 8005136:	d522      	bpl.n	800517e <HAL_RCC_ClockConfig+0xa2>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005138:	6842      	ldr	r2, [r0, #4]
 800513a:	2a01      	cmp	r2, #1
 800513c:	d057      	beq.n	80051ee <HAL_RCC_ClockConfig+0x112>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800513e:	1e93      	subs	r3, r2, #2
 8005140:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005142:	4b31      	ldr	r3, [pc, #196]	; (8005208 <HAL_RCC_ClockConfig+0x12c>)
 8005144:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005146:	d959      	bls.n	80051fc <HAL_RCC_ClockConfig+0x120>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005148:	0799      	lsls	r1, r3, #30
 800514a:	d525      	bpl.n	8005198 <HAL_RCC_ClockConfig+0xbc>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800514c:	4e2e      	ldr	r6, [pc, #184]	; (8005208 <HAL_RCC_ClockConfig+0x12c>)
 800514e:	68b3      	ldr	r3, [r6, #8]
 8005150:	f023 0303 	bic.w	r3, r3, #3
 8005154:	4313      	orrs	r3, r2
 8005156:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8005158:	f7fe fb68 	bl	800382c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800515c:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8005160:	4680      	mov	r8, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005162:	e005      	b.n	8005170 <HAL_RCC_ClockConfig+0x94>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005164:	f7fe fb62 	bl	800382c <HAL_GetTick>
 8005168:	eba0 0008 	sub.w	r0, r0, r8
 800516c:	42b8      	cmp	r0, r7
 800516e:	d843      	bhi.n	80051f8 <HAL_RCC_ClockConfig+0x11c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005170:	68b3      	ldr	r3, [r6, #8]
 8005172:	6862      	ldr	r2, [r4, #4]
 8005174:	f003 030c 	and.w	r3, r3, #12
 8005178:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 800517c:	d1f2      	bne.n	8005164 <HAL_RCC_ClockConfig+0x88>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800517e:	4a21      	ldr	r2, [pc, #132]	; (8005204 <HAL_RCC_ClockConfig+0x128>)
 8005180:	6813      	ldr	r3, [r2, #0]
 8005182:	f003 030f 	and.w	r3, r3, #15
 8005186:	42ab      	cmp	r3, r5
 8005188:	d909      	bls.n	800519e <HAL_RCC_ClockConfig+0xc2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800518a:	b2eb      	uxtb	r3, r5
 800518c:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800518e:	6813      	ldr	r3, [r2, #0]
 8005190:	f003 030f 	and.w	r3, r3, #15
 8005194:	42ab      	cmp	r3, r5
 8005196:	d002      	beq.n	800519e <HAL_RCC_ClockConfig+0xc2>
    return HAL_ERROR;
 8005198:	2001      	movs	r0, #1
}
 800519a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800519e:	6823      	ldr	r3, [r4, #0]
 80051a0:	075a      	lsls	r2, r3, #29
 80051a2:	d506      	bpl.n	80051b2 <HAL_RCC_ClockConfig+0xd6>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051a4:	4918      	ldr	r1, [pc, #96]	; (8005208 <HAL_RCC_ClockConfig+0x12c>)
 80051a6:	68e0      	ldr	r0, [r4, #12]
 80051a8:	688a      	ldr	r2, [r1, #8]
 80051aa:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80051ae:	4302      	orrs	r2, r0
 80051b0:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051b2:	071b      	lsls	r3, r3, #28
 80051b4:	d412      	bmi.n	80051dc <HAL_RCC_ClockConfig+0x100>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051b6:	f7ff ff5b 	bl	8005070 <HAL_RCC_GetSysClockFreq>
 80051ba:	4b13      	ldr	r3, [pc, #76]	; (8005208 <HAL_RCC_ClockConfig+0x12c>)
 80051bc:	4c13      	ldr	r4, [pc, #76]	; (800520c <HAL_RCC_ClockConfig+0x130>)
 80051be:	689b      	ldr	r3, [r3, #8]
  HAL_InitTick (uwTickPrio);
 80051c0:	4913      	ldr	r1, [pc, #76]	; (8005210 <HAL_RCC_ClockConfig+0x134>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051c2:	4a14      	ldr	r2, [pc, #80]	; (8005214 <HAL_RCC_ClockConfig+0x138>)
 80051c4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80051c8:	5ce3      	ldrb	r3, [r4, r3]
 80051ca:	fa20 f303 	lsr.w	r3, r0, r3
  HAL_InitTick (uwTickPrio);
 80051ce:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051d0:	6013      	str	r3, [r2, #0]
  HAL_InitTick (uwTickPrio);
 80051d2:	f7fe fae1 	bl	8003798 <HAL_InitTick>
  return HAL_OK;
 80051d6:	2000      	movs	r0, #0
}
 80051d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051dc:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <HAL_RCC_ClockConfig+0x12c>)
 80051de:	6921      	ldr	r1, [r4, #16]
 80051e0:	6893      	ldr	r3, [r2, #8]
 80051e2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80051e6:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80051ea:	6093      	str	r3, [r2, #8]
 80051ec:	e7e3      	b.n	80051b6 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80051ee:	4b06      	ldr	r3, [pc, #24]	; (8005208 <HAL_RCC_ClockConfig+0x12c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	039e      	lsls	r6, r3, #14
 80051f4:	d4aa      	bmi.n	800514c <HAL_RCC_ClockConfig+0x70>
 80051f6:	e7cf      	b.n	8005198 <HAL_RCC_ClockConfig+0xbc>
        return HAL_TIMEOUT;
 80051f8:	2003      	movs	r0, #3
 80051fa:	e7ed      	b.n	80051d8 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051fc:	0198      	lsls	r0, r3, #6
 80051fe:	d4a5      	bmi.n	800514c <HAL_RCC_ClockConfig+0x70>
 8005200:	e7ca      	b.n	8005198 <HAL_RCC_ClockConfig+0xbc>
 8005202:	bf00      	nop
 8005204:	40023c00 	.word	0x40023c00
 8005208:	40023800 	.word	0x40023800
 800520c:	08008af0 	.word	0x08008af0
 8005210:	200016e8 	.word	0x200016e8
 8005214:	200016cc 	.word	0x200016cc

08005218 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005218:	4b04      	ldr	r3, [pc, #16]	; (800522c <HAL_RCC_GetPCLK1Freq+0x14>)
 800521a:	4a05      	ldr	r2, [pc, #20]	; (8005230 <HAL_RCC_GetPCLK1Freq+0x18>)
 800521c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800521e:	4905      	ldr	r1, [pc, #20]	; (8005234 <HAL_RCC_GetPCLK1Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005220:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8005224:	6808      	ldr	r0, [r1, #0]
 8005226:	5cd3      	ldrb	r3, [r2, r3]
}
 8005228:	40d8      	lsrs	r0, r3
 800522a:	4770      	bx	lr
 800522c:	40023800 	.word	0x40023800
 8005230:	08008b00 	.word	0x08008b00
 8005234:	200016cc 	.word	0x200016cc

08005238 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005238:	4b04      	ldr	r3, [pc, #16]	; (800524c <HAL_RCC_GetPCLK2Freq+0x14>)
 800523a:	4a05      	ldr	r2, [pc, #20]	; (8005250 <HAL_RCC_GetPCLK2Freq+0x18>)
 800523c:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 800523e:	4905      	ldr	r1, [pc, #20]	; (8005254 <HAL_RCC_GetPCLK2Freq+0x1c>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005240:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8005244:	6808      	ldr	r0, [r1, #0]
 8005246:	5cd3      	ldrb	r3, [r2, r3]
}
 8005248:	40d8      	lsrs	r0, r3
 800524a:	4770      	bx	lr
 800524c:	40023800 	.word	0x40023800
 8005250:	08008b00 	.word	0x08008b00
 8005254:	200016cc 	.word	0x200016cc

08005258 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005258:	2800      	cmp	r0, #0
 800525a:	d05c      	beq.n	8005316 <HAL_TIM_Base_Init+0xbe>
{
 800525c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800525e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005262:	4604      	mov	r4, r0
 8005264:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005268:	b3bb      	cbz	r3, 80052da <HAL_TIM_Base_Init+0x82>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800526a:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800526c:	4e3a      	ldr	r6, [pc, #232]	; (8005358 <HAL_TIM_Base_Init+0x100>)
 800526e:	69a5      	ldr	r5, [r4, #24]
 8005270:	68e0      	ldr	r0, [r4, #12]
 8005272:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8005274:	2302      	movs	r3, #2
 8005276:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800527a:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 800527c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800527e:	d04c      	beq.n	800531a <HAL_TIM_Base_Init+0xc2>
 8005280:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005284:	d058      	beq.n	8005338 <HAL_TIM_Base_Init+0xe0>
 8005286:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 800528a:	42b2      	cmp	r2, r6
 800528c:	d02a      	beq.n	80052e4 <HAL_TIM_Base_Init+0x8c>
 800528e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005292:	42b2      	cmp	r2, r6
 8005294:	d026      	beq.n	80052e4 <HAL_TIM_Base_Init+0x8c>
 8005296:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800529a:	42b2      	cmp	r2, r6
 800529c:	d022      	beq.n	80052e4 <HAL_TIM_Base_Init+0x8c>
 800529e:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80052a2:	42b2      	cmp	r2, r6
 80052a4:	d01e      	beq.n	80052e4 <HAL_TIM_Base_Init+0x8c>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80052a6:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80052aa:	42b2      	cmp	r2, r6
 80052ac:	d013      	beq.n	80052d6 <HAL_TIM_Base_Init+0x7e>
 80052ae:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80052b2:	42b2      	cmp	r2, r6
 80052b4:	d00f      	beq.n	80052d6 <HAL_TIM_Base_Init+0x7e>
 80052b6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80052ba:	42b2      	cmp	r2, r6
 80052bc:	d00b      	beq.n	80052d6 <HAL_TIM_Base_Init+0x7e>
 80052be:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 80052c2:	42b2      	cmp	r2, r6
 80052c4:	d007      	beq.n	80052d6 <HAL_TIM_Base_Init+0x7e>
 80052c6:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80052ca:	42b2      	cmp	r2, r6
 80052cc:	d003      	beq.n	80052d6 <HAL_TIM_Base_Init+0x7e>
 80052ce:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80052d2:	42b2      	cmp	r2, r6
 80052d4:	d138      	bne.n	8005348 <HAL_TIM_Base_Init+0xf0>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052d6:	6926      	ldr	r6, [r4, #16]
 80052d8:	e033      	b.n	8005342 <HAL_TIM_Base_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 80052da:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80052de:	f7fe f829 	bl	8003334 <HAL_TIM_Base_MspInit>
 80052e2:	e7c2      	b.n	800526a <HAL_TIM_Base_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 80052e4:	68a6      	ldr	r6, [r4, #8]
  TIMx->ARR = (uint32_t)Structure->Period ;

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052e6:	4f1d      	ldr	r7, [pc, #116]	; (800535c <HAL_TIM_Base_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80052ec:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052ee:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80052f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052f4:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80052fa:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052fc:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 80052fe:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005300:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005302:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005304:	d101      	bne.n	800530a <HAL_TIM_Base_Init+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005306:	6963      	ldr	r3, [r4, #20]
 8005308:	6313      	str	r3, [r2, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800530a:	2301      	movs	r3, #1
 800530c:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800530e:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8005310:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005316:	2001      	movs	r0, #1
}
 8005318:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 800531a:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800531c:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800531e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005322:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005324:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005328:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800532a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800532e:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 8005330:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005332:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005334:	6291      	str	r1, [r2, #40]	; 0x28
 8005336:	e7e6      	b.n	8005306 <HAL_TIM_Base_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8005338:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800533a:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800533c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005340:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005342:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005346:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800534c:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800534e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005350:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005352:	6291      	str	r1, [r2, #40]	; 0x28
 8005354:	e7d9      	b.n	800530a <HAL_TIM_Base_Init+0xb2>
 8005356:	bf00      	nop
 8005358:	40010000 	.word	0x40010000
 800535c:	40010400 	.word	0x40010400

08005360 <HAL_TIM_PWM_MspInit>:
 8005360:	4770      	bx	lr
 8005362:	bf00      	nop

08005364 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8005364:	2800      	cmp	r0, #0
 8005366:	d05c      	beq.n	8005422 <HAL_TIM_PWM_Init+0xbe>
{
 8005368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 800536a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800536e:	4604      	mov	r4, r0
 8005370:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005374:	b3bb      	cbz	r3, 80053e6 <HAL_TIM_PWM_Init+0x82>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005376:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005378:	4e3a      	ldr	r6, [pc, #232]	; (8005464 <HAL_TIM_PWM_Init+0x100>)
 800537a:	69a5      	ldr	r5, [r4, #24]
 800537c:	68e0      	ldr	r0, [r4, #12]
 800537e:	6861      	ldr	r1, [r4, #4]
  htim->State = HAL_TIM_STATE_BUSY;
 8005380:	2302      	movs	r3, #2
 8005382:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005386:	42b2      	cmp	r2, r6
  tmpcr1 = TIMx->CR1;
 8005388:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800538a:	d04c      	beq.n	8005426 <HAL_TIM_PWM_Init+0xc2>
 800538c:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8005390:	d058      	beq.n	8005444 <HAL_TIM_PWM_Init+0xe0>
 8005392:	f5a6 467c 	sub.w	r6, r6, #64512	; 0xfc00
 8005396:	42b2      	cmp	r2, r6
 8005398:	d02a      	beq.n	80053f0 <HAL_TIM_PWM_Init+0x8c>
 800539a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800539e:	42b2      	cmp	r2, r6
 80053a0:	d026      	beq.n	80053f0 <HAL_TIM_PWM_Init+0x8c>
 80053a2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80053a6:	42b2      	cmp	r2, r6
 80053a8:	d022      	beq.n	80053f0 <HAL_TIM_PWM_Init+0x8c>
 80053aa:	f506 4678 	add.w	r6, r6, #63488	; 0xf800
 80053ae:	42b2      	cmp	r2, r6
 80053b0:	d01e      	beq.n	80053f0 <HAL_TIM_PWM_Init+0x8c>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053b2:	f506 5670 	add.w	r6, r6, #15360	; 0x3c00
 80053b6:	42b2      	cmp	r2, r6
 80053b8:	d013      	beq.n	80053e2 <HAL_TIM_PWM_Init+0x7e>
 80053ba:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80053be:	42b2      	cmp	r2, r6
 80053c0:	d00f      	beq.n	80053e2 <HAL_TIM_PWM_Init+0x7e>
 80053c2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80053c6:	42b2      	cmp	r2, r6
 80053c8:	d00b      	beq.n	80053e2 <HAL_TIM_PWM_Init+0x7e>
 80053ca:	f5a6 3698 	sub.w	r6, r6, #77824	; 0x13000
 80053ce:	42b2      	cmp	r2, r6
 80053d0:	d007      	beq.n	80053e2 <HAL_TIM_PWM_Init+0x7e>
 80053d2:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80053d6:	42b2      	cmp	r2, r6
 80053d8:	d003      	beq.n	80053e2 <HAL_TIM_PWM_Init+0x7e>
 80053da:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 80053de:	42b2      	cmp	r2, r6
 80053e0:	d138      	bne.n	8005454 <HAL_TIM_PWM_Init+0xf0>
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053e2:	6926      	ldr	r6, [r4, #16]
 80053e4:	e033      	b.n	800544e <HAL_TIM_PWM_Init+0xea>
    htim->Lock = HAL_UNLOCKED;
 80053e6:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 80053ea:	f7ff ffb9 	bl	8005360 <HAL_TIM_PWM_MspInit>
 80053ee:	e7c2      	b.n	8005376 <HAL_TIM_PWM_Init+0x12>
    tmpcr1 |= Structure->CounterMode;
 80053f0:	68a6      	ldr	r6, [r4, #8]
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053f2:	4f1d      	ldr	r7, [pc, #116]	; (8005468 <HAL_TIM_PWM_Init+0x104>)
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 80053f8:	4333      	orrs	r3, r6
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80053fa:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~TIM_CR1_CKD;
 80053fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005400:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005406:	432b      	orrs	r3, r5
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005408:	42ba      	cmp	r2, r7
  TIMx->CR1 = tmpcr1;
 800540a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800540c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800540e:	6291      	str	r1, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005410:	d101      	bne.n	8005416 <HAL_TIM_PWM_Init+0xb2>
    TIMx->RCR = Structure->RepetitionCounter;
 8005412:	6963      	ldr	r3, [r4, #20]
 8005414:	6313      	str	r3, [r2, #48]	; 0x30
  TIMx->EGR = TIM_EGR_UG;
 8005416:	2301      	movs	r3, #1
 8005418:	6153      	str	r3, [r2, #20]
  return HAL_OK;
 800541a:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 800541c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
}
 8005420:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8005422:	2001      	movs	r0, #1
}
 8005424:	4770      	bx	lr
    tmpcr1 |= Structure->CounterMode;
 8005426:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005428:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800542a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800542e:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 8005430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005434:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005436:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800543a:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800543c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800543e:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005440:	6291      	str	r1, [r2, #40]	; 0x28
 8005442:	e7e6      	b.n	8005412 <HAL_TIM_PWM_Init+0xae>
    tmpcr1 |= Structure->CounterMode;
 8005444:	68a7      	ldr	r7, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005446:	6926      	ldr	r6, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800544c:	433b      	orrs	r3, r7
    tmpcr1 &= ~TIM_CR1_CKD;
 800544e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005452:	4333      	orrs	r3, r6
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005454:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005458:	432b      	orrs	r3, r5
  TIMx->CR1 = tmpcr1;
 800545a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800545c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800545e:	6291      	str	r1, [r2, #40]	; 0x28
 8005460:	e7d9      	b.n	8005416 <HAL_TIM_PWM_Init+0xb2>
 8005462:	bf00      	nop
 8005464:	40010000 	.word	0x40010000
 8005468:	40010400 	.word	0x40010400

0800546c <HAL_TIM_PWM_Start>:
 800546c:	6803      	ldr	r3, [r0, #0]
 800546e:	2201      	movs	r2, #1
 8005470:	6a18      	ldr	r0, [r3, #32]
 8005472:	f001 011f 	and.w	r1, r1, #31
 8005476:	fa02 f101 	lsl.w	r1, r2, r1
 800547a:	ea20 0001 	bic.w	r0, r0, r1
 800547e:	b410      	push	{r4}
 8005480:	6218      	str	r0, [r3, #32]
 8005482:	6a1a      	ldr	r2, [r3, #32]
 8005484:	4c0c      	ldr	r4, [pc, #48]	; (80054b8 <HAL_TIM_PWM_Start+0x4c>)
 8005486:	4311      	orrs	r1, r2
 8005488:	42a3      	cmp	r3, r4
 800548a:	6219      	str	r1, [r3, #32]
 800548c:	d00f      	beq.n	80054ae <HAL_TIM_PWM_Start+0x42>
 800548e:	4a0b      	ldr	r2, [pc, #44]	; (80054bc <HAL_TIM_PWM_Start+0x50>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00c      	beq.n	80054ae <HAL_TIM_PWM_Start+0x42>
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	f002 0207 	and.w	r2, r2, #7
 800549a:	2a06      	cmp	r2, #6
 800549c:	d003      	beq.n	80054a6 <HAL_TIM_PWM_Start+0x3a>
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	f042 0201 	orr.w	r2, r2, #1
 80054a4:	601a      	str	r2, [r3, #0]
 80054a6:	2000      	movs	r0, #0
 80054a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80054ac:	4770      	bx	lr
 80054ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80054b4:	645a      	str	r2, [r3, #68]	; 0x44
 80054b6:	e7ed      	b.n	8005494 <HAL_TIM_PWM_Start+0x28>
 80054b8:	40010000 	.word	0x40010000
 80054bc:	40010400 	.word	0x40010400

080054c0 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80054c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	f000 80cc 	beq.w	8005662 <HAL_TIM_PWM_ConfigChannel+0x1a2>
{
 80054ca:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80054cc:	2302      	movs	r3, #2
  __HAL_LOCK(htim);
 80054ce:	2401      	movs	r4, #1
 80054d0:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80054d4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  switch (Channel)
 80054d8:	2a0c      	cmp	r2, #12
 80054da:	d835      	bhi.n	8005548 <HAL_TIM_PWM_ConfigChannel+0x88>
 80054dc:	e8df f002 	tbb	[pc, r2]
 80054e0:	34343407 	.word	0x34343407
 80054e4:	3434346a 	.word	0x3434346a
 80054e8:	34343496 	.word	0x34343496
 80054ec:	3d          	.byte	0x3d
 80054ed:	00          	.byte	0x00
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80054ee:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80054f0:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054f4:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 80054f6:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80054f8:	4e74      	ldr	r6, [pc, #464]	; (80056cc <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054fa:	f025 0501 	bic.w	r5, r5, #1
 80054fe:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 8005500:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005502:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005504:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC1P;
 8005506:	f022 0202 	bic.w	r2, r2, #2
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800550a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800550e:	42b3      	cmp	r3, r6
  tmpccer |= OC_Config->OCPolarity;
 8005510:	ea42 020c 	orr.w	r2, r2, ip
  tmpccmrx |= OC_Config->OCMode;
 8005514:	ea44 0407 	orr.w	r4, r4, r7
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005518:	f000 80bb 	beq.w	8005692 <HAL_TIM_PWM_ConfigChannel+0x1d2>
 800551c:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8005520:	42b3      	cmp	r3, r6
 8005522:	f000 80b6 	beq.w	8005692 <HAL_TIM_PWM_ConfigChannel+0x1d2>

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005526:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005528:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 800552a:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800552c:	635e      	str	r6, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800552e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005530:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005532:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005534:	f044 0408 	orr.w	r4, r4, #8
 8005538:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800553a:	6999      	ldr	r1, [r3, #24]
 800553c:	f021 0104 	bic.w	r1, r1, #4
 8005540:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005542:	699a      	ldr	r2, [r3, #24]
 8005544:	432a      	orrs	r2, r5
 8005546:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8005548:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800554a:	2201      	movs	r2, #1
 800554c:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005550:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 8005554:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 8005556:	4618      	mov	r0, r3
}
 8005558:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800555a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800555c:	f8d1 c008 	ldr.w	ip, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005560:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005562:	680f      	ldr	r7, [r1, #0]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005564:	4e59      	ldr	r6, [pc, #356]	; (80056cc <HAL_TIM_PWM_ConfigChannel+0x20c>)
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005566:	f425 5580 	bic.w	r5, r5, #4096	; 0x1000
 800556a:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800556c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800556e:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005570:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 8005572:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005576:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800557a:	42b3      	cmp	r3, r6
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800557c:	ea42 320c 	orr.w	r2, r2, ip, lsl #12
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005580:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005584:	d06f      	beq.n	8005666 <HAL_TIM_PWM_ConfigChannel+0x1a6>
 8005586:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800558a:	42b3      	cmp	r3, r6
 800558c:	d06b      	beq.n	8005666 <HAL_TIM_PWM_ConfigChannel+0x1a6>

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800558e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005590:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005592:	61dc      	str	r4, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 8005594:	641e      	str	r6, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005596:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005598:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800559a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800559c:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80055a0:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80055a2:	69d9      	ldr	r1, [r3, #28]
 80055a4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80055a8:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80055aa:	69da      	ldr	r2, [r3, #28]
 80055ac:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80055b0:	61da      	str	r2, [r3, #28]
      break;
 80055b2:	e7c9      	b.n	8005548 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055b4:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055b6:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055b8:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055ba:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055bc:	f8df c10c 	ldr.w	ip, [pc, #268]	; 80056cc <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80055c0:	f025 0510 	bic.w	r5, r5, #16
 80055c4:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 80055c6:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80055c8:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80055ca:	699c      	ldr	r4, [r3, #24]
  tmpccer &= ~TIM_CCER_CC2P;
 80055cc:	f022 0220 	bic.w	r2, r2, #32
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80055d0:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055d4:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80055d6:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055da:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055de:	d065      	beq.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x1ec>
 80055e0:	4f3b      	ldr	r7, [pc, #236]	; (80056d0 <HAL_TIM_PWM_ConfigChannel+0x210>)
 80055e2:	42bb      	cmp	r3, r7
 80055e4:	d062      	beq.n	80056ac <HAL_TIM_PWM_ConfigChannel+0x1ec>
  TIMx->CCR2 = OC_Config->Pulse;
 80055e6:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 80055e8:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80055ea:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80055ec:	639e      	str	r6, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80055ee:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055f0:	699c      	ldr	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055f2:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055f4:	f444 6400 	orr.w	r4, r4, #2048	; 0x800
 80055f8:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055fa:	6999      	ldr	r1, [r3, #24]
 80055fc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005600:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005602:	699a      	ldr	r2, [r3, #24]
 8005604:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005608:	619a      	str	r2, [r3, #24]
      break;
 800560a:	e79d      	b.n	8005548 <HAL_TIM_PWM_ConfigChannel+0x88>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800560c:	6803      	ldr	r3, [r0, #0]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800560e:	688f      	ldr	r7, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005610:	6a1d      	ldr	r5, [r3, #32]
  tmpccmrx |= OC_Config->OCMode;
 8005612:	680e      	ldr	r6, [r1, #0]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005614:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80056cc <HAL_TIM_PWM_ConfigChannel+0x20c>
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005618:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 800561c:	621d      	str	r5, [r3, #32]
  tmpccer = TIMx->CCER;
 800561e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005620:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005622:	69dc      	ldr	r4, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8005624:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005628:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800562c:	4563      	cmp	r3, ip
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800562e:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
  tmpccmrx |= OC_Config->OCMode;
 8005632:	ea44 0406 	orr.w	r4, r4, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005636:	d01c      	beq.n	8005672 <HAL_TIM_PWM_ConfigChannel+0x1b2>
 8005638:	4f25      	ldr	r7, [pc, #148]	; (80056d0 <HAL_TIM_PWM_ConfigChannel+0x210>)
 800563a:	42bb      	cmp	r3, r7
 800563c:	d019      	beq.n	8005672 <HAL_TIM_PWM_ConfigChannel+0x1b2>
  TIMx->CCR3 = OC_Config->Pulse;
 800563e:	684e      	ldr	r6, [r1, #4]
  TIMx->CR2 = tmpcr2;
 8005640:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8005642:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8005644:	63de      	str	r6, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005646:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005648:	69dc      	ldr	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800564a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800564c:	f044 0408 	orr.w	r4, r4, #8
 8005650:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005652:	69d9      	ldr	r1, [r3, #28]
 8005654:	f021 0104 	bic.w	r1, r1, #4
 8005658:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800565a:	69da      	ldr	r2, [r3, #28]
 800565c:	432a      	orrs	r2, r5
 800565e:	61da      	str	r2, [r3, #28]
      break;
 8005660:	e772      	b.n	8005548 <HAL_TIM_PWM_ConfigChannel+0x88>
  __HAL_LOCK(htim);
 8005662:	2002      	movs	r0, #2
}
 8005664:	4770      	bx	lr
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005666:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005668:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800566c:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8005670:	e78d      	b.n	800558e <HAL_TIM_PWM_ConfigChannel+0xce>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005672:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005674:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005678:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800567c:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005680:	f425 5c40 	bic.w	ip, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005684:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8005688:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800568c:	ea4c 1505 	orr.w	r5, ip, r5, lsl #4
 8005690:	e7d5      	b.n	800563e <HAL_TIM_PWM_ConfigChannel+0x17e>
    tmpccer |= OC_Config->OCNPolarity;
 8005692:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005694:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005698:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 800569a:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800569e:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a2:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 80056a4:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 80056a8:	4335      	orrs	r5, r6
 80056aa:	e73c      	b.n	8005526 <HAL_TIM_PWM_ConfigChannel+0x66>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056ac:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 80056ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056b2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056b6:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80056ba:	f425 6c40 	bic.w	ip, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056be:	ea46 0507 	orr.w	r5, r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 80056c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80056c6:	ea4c 0585 	orr.w	r5, ip, r5, lsl #2
 80056ca:	e78c      	b.n	80055e6 <HAL_TIM_PWM_ConfigChannel+0x126>
 80056cc:	40010000 	.word	0x40010000
 80056d0:	40010400 	.word	0x40010400

080056d4 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80056d4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d05a      	beq.n	8005792 <HAL_TIM_ConfigClockSource+0xbe>
  htim->State = HAL_TIM_STATE_BUSY;
 80056dc:	2202      	movs	r2, #2
  tmpsmcr = htim->Instance->SMCR;
 80056de:	6803      	ldr	r3, [r0, #0]
{
 80056e0:	b4f0      	push	{r4, r5, r6, r7}
  htim->State = HAL_TIM_STATE_BUSY;
 80056e2:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80056e6:	689a      	ldr	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80056e8:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056ea:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 80056ee:	f022 0277 	bic.w	r2, r2, #119	; 0x77
  __HAL_LOCK(htim);
 80056f2:	2501      	movs	r5, #1
  switch (sClockSourceConfig->ClockSource)
 80056f4:	2c40      	cmp	r4, #64	; 0x40
  __HAL_LOCK(htim);
 80056f6:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->Instance->SMCR = tmpsmcr;
 80056fa:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 80056fc:	d074      	beq.n	80057e8 <HAL_TIM_ConfigClockSource+0x114>
 80056fe:	d94a      	bls.n	8005796 <HAL_TIM_ConfigClockSource+0xc2>
 8005700:	2c60      	cmp	r4, #96	; 0x60
 8005702:	d02d      	beq.n	8005760 <HAL_TIM_ConfigClockSource+0x8c>
 8005704:	d956      	bls.n	80057b4 <HAL_TIM_ConfigClockSource+0xe0>
 8005706:	2c70      	cmp	r4, #112	; 0x70
 8005708:	d01a      	beq.n	8005740 <HAL_TIM_ConfigClockSource+0x6c>
 800570a:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
 800570e:	d10e      	bne.n	800572e <HAL_TIM_ConfigClockSource+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005710:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8005714:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8005716:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005718:	432a      	orrs	r2, r5
 800571a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800571e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005722:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005724:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005726:	689a      	ldr	r2, [r3, #8]
 8005728:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800572c:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(htim);
 800572e:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005730:	2201      	movs	r2, #1
 8005732:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005736:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
}
 800573a:	bcf0      	pop	{r4, r5, r6, r7}
  return HAL_OK;
 800573c:	4618      	mov	r0, r3
}
 800573e:	4770      	bx	lr
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005740:	e9d1 5201 	ldrd	r5, r2, [r1, #4]
 8005744:	68cc      	ldr	r4, [r1, #12]
  tmpsmcr = TIMx->SMCR;
 8005746:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005748:	432a      	orrs	r2, r5
 800574a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800574e:	f421 417f 	bic.w	r1, r1, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005752:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8005754:	609a      	str	r2, [r3, #8]
      tmpsmcr = htim->Instance->SMCR;
 8005756:	689a      	ldr	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005758:	f042 0277 	orr.w	r2, r2, #119	; 0x77
      htim->Instance->SMCR = tmpsmcr;
 800575c:	609a      	str	r2, [r3, #8]
      break;
 800575e:	e7e6      	b.n	800572e <HAL_TIM_ConfigClockSource+0x5a>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005760:	6a1c      	ldr	r4, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005762:	684d      	ldr	r5, [r1, #4]
 8005764:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005766:	f024 0410 	bic.w	r4, r4, #16
 800576a:	621c      	str	r4, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800576c:	6999      	ldr	r1, [r3, #24]
  tmpccer = TIMx->CCER;
 800576e:	6a1a      	ldr	r2, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005770:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005774:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005778:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800577c:	ea41 3106 	orr.w	r1, r1, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8005780:	6199      	str	r1, [r3, #24]
  TIMx->CCER = tmpccer;
 8005782:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8005784:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8005786:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800578a:	f042 0267 	orr.w	r2, r2, #103	; 0x67
  TIMx->SMCR = tmpsmcr;
 800578e:	609a      	str	r2, [r3, #8]
 8005790:	e7cd      	b.n	800572e <HAL_TIM_ConfigClockSource+0x5a>
  __HAL_LOCK(htim);
 8005792:	2002      	movs	r0, #2
}
 8005794:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8005796:	2c10      	cmp	r4, #16
 8005798:	d004      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0xd0>
 800579a:	d93d      	bls.n	8005818 <HAL_TIM_ConfigClockSource+0x144>
 800579c:	2c20      	cmp	r4, #32
 800579e:	d001      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0xd0>
 80057a0:	2c30      	cmp	r4, #48	; 0x30
 80057a2:	d1c4      	bne.n	800572e <HAL_TIM_ConfigClockSource+0x5a>
  tmpsmcr = TIMx->SMCR;
 80057a4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057a6:	f044 0407 	orr.w	r4, r4, #7
  tmpsmcr &= ~TIM_SMCR_TS;
 80057aa:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057ae:	4314      	orrs	r4, r2
  TIMx->SMCR = tmpsmcr;
 80057b0:	609c      	str	r4, [r3, #8]
 80057b2:	e7bc      	b.n	800572e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 80057b4:	2c50      	cmp	r4, #80	; 0x50
 80057b6:	d1ba      	bne.n	800572e <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80057b8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ba:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057bc:	684c      	ldr	r4, [r1, #4]
 80057be:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c0:	f026 0601 	bic.w	r6, r6, #1
 80057c4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057c6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057c8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057cc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80057d0:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 80057d4:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 80057d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80057d8:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 80057da:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80057dc:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057e0:	f042 0257 	orr.w	r2, r2, #87	; 0x57
  TIMx->SMCR = tmpsmcr;
 80057e4:	609a      	str	r2, [r3, #8]
 80057e6:	e7a2      	b.n	800572e <HAL_TIM_ConfigClockSource+0x5a>
  tmpccer = TIMx->CCER;
 80057e8:	6a1d      	ldr	r5, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057ea:	6a1e      	ldr	r6, [r3, #32]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ec:	684c      	ldr	r4, [r1, #4]
 80057ee:	68cf      	ldr	r7, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057f0:	f026 0601 	bic.w	r6, r6, #1
 80057f4:	621e      	str	r6, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80057f6:	699a      	ldr	r2, [r3, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80057f8:	f025 010a 	bic.w	r1, r5, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80057fc:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005800:	ea42 1207 	orr.w	r2, r2, r7, lsl #4
  tmpccer |= TIM_ICPolarity;
 8005804:	4321      	orrs	r1, r4
  TIMx->CCMR1 = tmpccmr1;
 8005806:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005808:	6219      	str	r1, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 800580a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 800580c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005810:	f042 0247 	orr.w	r2, r2, #71	; 0x47
  TIMx->SMCR = tmpsmcr;
 8005814:	609a      	str	r2, [r3, #8]
 8005816:	e78a      	b.n	800572e <HAL_TIM_ConfigClockSource+0x5a>
  switch (sClockSourceConfig->ClockSource)
 8005818:	2c00      	cmp	r4, #0
 800581a:	d0c3      	beq.n	80057a4 <HAL_TIM_ConfigClockSource+0xd0>
 800581c:	e787      	b.n	800572e <HAL_TIM_ConfigClockSource+0x5a>
 800581e:	bf00      	nop

08005820 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005820:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005824:	2b01      	cmp	r3, #1
 8005826:	d03a      	beq.n	800589e <HAL_TIMEx_MasterConfigSynchronization+0x7e>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005828:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800582a:	2202      	movs	r2, #2
{
 800582c:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 800582e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8005832:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005834:	680e      	ldr	r6, [r1, #0]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005836:	4d1b      	ldr	r5, [pc, #108]	; (80058a4 <HAL_TIMEx_MasterConfigSynchronization+0x84>)
  tmpsmcr = htim->Instance->SMCR;
 8005838:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800583a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800583e:	4332      	orrs	r2, r6
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005840:	42ab      	cmp	r3, r5
  __HAL_LOCK(htim);
 8005842:	f04f 0601 	mov.w	r6, #1
 8005846:	f880 603c 	strb.w	r6, [r0, #60]	; 0x3c
  htim->Instance->CR2 = tmpcr2;
 800584a:	605a      	str	r2, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800584c:	d019      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800584e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005852:	d016      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8005854:	4a14      	ldr	r2, [pc, #80]	; (80058a8 <HAL_TIMEx_MasterConfigSynchronization+0x88>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d013      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800585a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800585e:	4293      	cmp	r3, r2
 8005860:	d00f      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8005862:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005866:	4293      	cmp	r3, r2
 8005868:	d00b      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800586a:	f502 4278 	add.w	r2, r2, #63488	; 0xf800
 800586e:	4293      	cmp	r3, r2
 8005870:	d007      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 8005872:	f502 5270 	add.w	r2, r2, #15360	; 0x3c00
 8005876:	4293      	cmp	r3, r2
 8005878:	d003      	beq.n	8005882 <HAL_TIMEx_MasterConfigSynchronization+0x62>
 800587a:	f5a2 3294 	sub.w	r2, r2, #75776	; 0x12800
 800587e:	4293      	cmp	r3, r2
 8005880:	d104      	bne.n	800588c <HAL_TIMEx_MasterConfigSynchronization+0x6c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005882:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005884:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005888:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800588a:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 800588c:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800588e:	2201      	movs	r2, #1
 8005890:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005894:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005898:	bc70      	pop	{r4, r5, r6}
  return HAL_OK;
 800589a:	4618      	mov	r0, r3
}
 800589c:	4770      	bx	lr
  __HAL_LOCK(htim);
 800589e:	2002      	movs	r0, #2
}
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40010000 	.word	0x40010000
 80058a8:	40000400 	.word	0x40000400

080058ac <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d021      	beq.n	80058f8 <HAL_TIMEx_ConfigBreakDeadTime+0x4c>
{
 80058b4:	b430      	push	{r4, r5}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058b6:	e9d1 5302 	ldrd	r5, r3, [r1, #8]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058ba:	e9d1 2400 	ldrd	r2, r4, [r1]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80058be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c2:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80058c4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80058c8:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058ce:	e9d1 5404 	ldrd	r5, r4, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80058d2:	4313      	orrs	r3, r2
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80058d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80058d8:	432b      	orrs	r3, r5
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058de:	69c9      	ldr	r1, [r1, #28]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80058e0:	6802      	ldr	r2, [r0, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80058e2:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80058e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058e8:	430b      	orrs	r3, r1

  __HAL_UNLOCK(htim);
 80058ea:	2100      	movs	r1, #0
  htim->Instance->BDTR = tmpbdtr;
 80058ec:	6453      	str	r3, [r2, #68]	; 0x44

  return HAL_OK;
}
 80058ee:	bc30      	pop	{r4, r5}
  __HAL_UNLOCK(htim);
 80058f0:	f880 103c 	strb.w	r1, [r0, #60]	; 0x3c
}
 80058f4:	4608      	mov	r0, r1
 80058f6:	4770      	bx	lr
  __HAL_LOCK(htim);
 80058f8:	2302      	movs	r3, #2
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	4770      	bx	lr
 80058fe:	bf00      	nop

08005900 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005900:	2800      	cmp	r0, #0
 8005902:	f000 8093 	beq.w	8005a2c <HAL_UART_Init+0x12c>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005906:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
{
 800590a:	b570      	push	{r4, r5, r6, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 800590c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005910:	4604      	mov	r4, r0
 8005912:	2b00      	cmp	r3, #0
 8005914:	f000 8085 	beq.w	8005a22 <HAL_UART_Init+0x122>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005918:	6823      	ldr	r3, [r4, #0]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800591a:	6926      	ldr	r6, [r4, #16]
  huart->gState = HAL_UART_STATE_BUSY;
 800591c:	2224      	movs	r2, #36	; 0x24
 800591e:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8005922:	68d8      	ldr	r0, [r3, #12]
 8005924:	f420 5000 	bic.w	r0, r0, #8192	; 0x2000
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005928:	e9d4 2502 	ldrd	r2, r5, [r4, #8]
  __HAL_UART_DISABLE(huart);
 800592c:	60d8      	str	r0, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800592e:	6919      	ldr	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005930:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005932:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005936:	4329      	orrs	r1, r5
 8005938:	6119      	str	r1, [r3, #16]
  MODIFY_REG(huart->Instance->CR1,
 800593a:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800593c:	6965      	ldr	r5, [r4, #20]
 800593e:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR1,
 8005940:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005944:	432a      	orrs	r2, r5
  MODIFY_REG(huart->Instance->CR1,
 8005946:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800594a:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 800594c:	430a      	orrs	r2, r1
 800594e:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005950:	695a      	ldr	r2, [r3, #20]
 8005952:	69a1      	ldr	r1, [r4, #24]
 8005954:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005958:	430a      	orrs	r2, r1

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800595a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800595e:	615a      	str	r2, [r3, #20]
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005960:	4a36      	ldr	r2, [pc, #216]	; (8005a3c <HAL_UART_Init+0x13c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005962:	d034      	beq.n	80059ce <HAL_UART_Init+0xce>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005964:	4293      	cmp	r3, r2
 8005966:	d063      	beq.n	8005a30 <HAL_UART_Init+0x130>
 8005968:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800596c:	4293      	cmp	r3, r2
 800596e:	d05f      	beq.n	8005a30 <HAL_UART_Init+0x130>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005970:	f7ff fc52 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005974:	6863      	ldr	r3, [r4, #4]
 8005976:	4d32      	ldr	r5, [pc, #200]	; (8005a40 <HAL_UART_Init+0x140>)
 8005978:	2219      	movs	r2, #25
 800597a:	fba0 0102 	umull	r0, r1, r0, r2
 800597e:	009a      	lsls	r2, r3, #2
 8005980:	0f9b      	lsrs	r3, r3, #30
 8005982:	f7fb f90d 	bl	8000ba0 <__aeabi_uldivmod>
 8005986:	fba5 2100 	umull	r2, r1, r5, r0
 800598a:	0949      	lsrs	r1, r1, #5
 800598c:	2264      	movs	r2, #100	; 0x64
 800598e:	fb02 0211 	mls	r2, r2, r1, r0
 8005992:	0112      	lsls	r2, r2, #4
 8005994:	3232      	adds	r2, #50	; 0x32
 8005996:	6823      	ldr	r3, [r4, #0]
 8005998:	fba5 0202 	umull	r0, r2, r5, r2
 800599c:	0109      	lsls	r1, r1, #4
 800599e:	eb01 1252 	add.w	r2, r1, r2, lsr #5
 80059a2:	609a      	str	r2, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059a4:	691a      	ldr	r2, [r3, #16]
 80059a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059ac:	695a      	ldr	r2, [r3, #20]
 80059ae:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059b2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80059b4:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b6:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 80059b8:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 80059ba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059be:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 80059c0:	4628      	mov	r0, r5
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059c2:	63e5      	str	r5, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80059c4:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80059c8:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 80059cc:	bd70      	pop	{r4, r5, r6, pc}
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d031      	beq.n	8005a36 <HAL_UART_Init+0x136>
 80059d2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d02d      	beq.n	8005a36 <HAL_UART_Init+0x136>
      pclk = HAL_RCC_GetPCLK1Freq();
 80059da:	f7ff fc1d 	bl	8005218 <HAL_RCC_GetPCLK1Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80059de:	6862      	ldr	r2, [r4, #4]
 80059e0:	2600      	movs	r6, #0
 80059e2:	1892      	adds	r2, r2, r2
 80059e4:	f04f 0119 	mov.w	r1, #25
 80059e8:	eb46 0306 	adc.w	r3, r6, r6
 80059ec:	fba0 0101 	umull	r0, r1, r0, r1
 80059f0:	f7fb f8d6 	bl	8000ba0 <__aeabi_uldivmod>
 80059f4:	4e12      	ldr	r6, [pc, #72]	; (8005a40 <HAL_UART_Init+0x140>)
 80059f6:	6823      	ldr	r3, [r4, #0]
 80059f8:	fba6 2100 	umull	r2, r1, r6, r0
 80059fc:	094d      	lsrs	r5, r1, #5
 80059fe:	2264      	movs	r2, #100	; 0x64
 8005a00:	fb02 0215 	mls	r2, r2, r5, r0
 8005a04:	00d2      	lsls	r2, r2, #3
 8005a06:	3232      	adds	r2, #50	; 0x32
 8005a08:	fba6 1202 	umull	r1, r2, r6, r2
 8005a0c:	0952      	lsrs	r2, r2, #5
 8005a0e:	f002 0107 	and.w	r1, r2, #7
 8005a12:	0052      	lsls	r2, r2, #1
 8005a14:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8005a18:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005a1c:	440a      	add	r2, r1
 8005a1e:	609a      	str	r2, [r3, #8]
 8005a20:	e7c0      	b.n	80059a4 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8005a22:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 8005a26:	f7fd fcbb 	bl	80033a0 <HAL_UART_MspInit>
 8005a2a:	e775      	b.n	8005918 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8005a2c:	2001      	movs	r0, #1
}
 8005a2e:	4770      	bx	lr
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a30:	f7ff fc02 	bl	8005238 <HAL_RCC_GetPCLK2Freq>
 8005a34:	e79e      	b.n	8005974 <HAL_UART_Init+0x74>
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a36:	f7ff fbff 	bl	8005238 <HAL_RCC_GetPCLK2Freq>
 8005a3a:	e7d0      	b.n	80059de <HAL_UART_Init+0xde>
 8005a3c:	40011000 	.word	0x40011000
 8005a40:	51eb851f 	.word	0x51eb851f

08005a44 <HAL_UART_Transmit>:
{
 8005a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a48:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 8005a4a:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
 8005a4e:	2920      	cmp	r1, #32
{
 8005a50:	b082      	sub	sp, #8
  if (huart->gState == HAL_UART_STATE_READY)
 8005a52:	d132      	bne.n	8005aba <HAL_UART_Transmit+0x76>
    if ((pData == NULL) || (Size == 0U))
 8005a54:	2e00      	cmp	r6, #0
 8005a56:	d034      	beq.n	8005ac2 <HAL_UART_Transmit+0x7e>
 8005a58:	9201      	str	r2, [sp, #4]
 8005a5a:	2a00      	cmp	r2, #0
 8005a5c:	d031      	beq.n	8005ac2 <HAL_UART_Transmit+0x7e>
 8005a5e:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8005a60:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	4604      	mov	r4, r0
 8005a68:	d027      	beq.n	8005aba <HAL_UART_Transmit+0x76>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a6a:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8005a6e:	2101      	movs	r1, #1
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a70:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a72:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8005a76:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a7a:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8005a7e:	f7fd fed5 	bl	800382c <HAL_GetTick>
    huart->TxXferSize = Size;
 8005a82:	9a01      	ldr	r2, [sp, #4]
 8005a84:	84a2      	strh	r2, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8005a86:	84e2      	strh	r2, [r4, #38]	; 0x26
 8005a88:	6822      	ldr	r2, [r4, #0]
    __HAL_UNLOCK(huart);
 8005a8a:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8005a8e:	4605      	mov	r5, r0
    while (huart->TxXferCount > 0U)
 8005a90:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d03b      	beq.n	8005b10 <HAL_UART_Transmit+0xcc>
      huart->TxXferCount--;
 8005a98:	8ce0      	ldrh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005a9a:	68a1      	ldr	r1, [r4, #8]
      huart->TxXferCount--;
 8005a9c:	3801      	subs	r0, #1
 8005a9e:	b280      	uxth	r0, r0
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005aa0:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
      huart->TxXferCount--;
 8005aa4:	84e0      	strh	r0, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005aa6:	d01b      	beq.n	8005ae0 <HAL_UART_Transmit+0x9c>
 8005aa8:	1c78      	adds	r0, r7, #1
 8005aaa:	d13b      	bne.n	8005b24 <HAL_UART_Transmit+0xe0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aac:	6810      	ldr	r0, [r2, #0]
 8005aae:	0601      	lsls	r1, r0, #24
 8005ab0:	d5fc      	bpl.n	8005aac <HAL_UART_Transmit+0x68>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005ab2:	7833      	ldrb	r3, [r6, #0]
 8005ab4:	6053      	str	r3, [r2, #4]
 8005ab6:	3601      	adds	r6, #1
 8005ab8:	e7ea      	b.n	8005a90 <HAL_UART_Transmit+0x4c>
    return HAL_BUSY;
 8005aba:	2002      	movs	r0, #2
}
 8005abc:	b002      	add	sp, #8
 8005abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005ac2:	2001      	movs	r0, #1
}
 8005ac4:	b002      	add	sp, #8
 8005ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aca:	6813      	ldr	r3, [r2, #0]
 8005acc:	061b      	lsls	r3, r3, #24
 8005ace:	d40c      	bmi.n	8005aea <HAL_UART_Transmit+0xa6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ad0:	2f00      	cmp	r7, #0
 8005ad2:	d031      	beq.n	8005b38 <HAL_UART_Transmit+0xf4>
 8005ad4:	f7fd feaa 	bl	800382c <HAL_GetTick>
 8005ad8:	1b40      	subs	r0, r0, r5
 8005ada:	4287      	cmp	r7, r0
 8005adc:	6822      	ldr	r2, [r4, #0]
 8005ade:	d32b      	bcc.n	8005b38 <HAL_UART_Transmit+0xf4>
 8005ae0:	1c78      	adds	r0, r7, #1
 8005ae2:	d1f2      	bne.n	8005aca <HAL_UART_Transmit+0x86>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ae4:	6810      	ldr	r0, [r2, #0]
 8005ae6:	0601      	lsls	r1, r0, #24
 8005ae8:	d5fc      	bpl.n	8005ae4 <HAL_UART_Transmit+0xa0>
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005aea:	8833      	ldrh	r3, [r6, #0]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005aec:	6921      	ldr	r1, [r4, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005af2:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005af4:	2900      	cmp	r1, #0
 8005af6:	d1de      	bne.n	8005ab6 <HAL_UART_Transmit+0x72>
          pData += 2U;
 8005af8:	3602      	adds	r6, #2
 8005afa:	e7c9      	b.n	8005a90 <HAL_UART_Transmit+0x4c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005afc:	6813      	ldr	r3, [r2, #0]
 8005afe:	065b      	lsls	r3, r3, #25
 8005b00:	d40b      	bmi.n	8005b1a <HAL_UART_Transmit+0xd6>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b02:	b1cf      	cbz	r7, 8005b38 <HAL_UART_Transmit+0xf4>
 8005b04:	f7fd fe92 	bl	800382c <HAL_GetTick>
 8005b08:	1b40      	subs	r0, r0, r5
 8005b0a:	4287      	cmp	r7, r0
 8005b0c:	6822      	ldr	r2, [r4, #0]
 8005b0e:	d313      	bcc.n	8005b38 <HAL_UART_Transmit+0xf4>
 8005b10:	1c78      	adds	r0, r7, #1
 8005b12:	d1f3      	bne.n	8005afc <HAL_UART_Transmit+0xb8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b14:	6813      	ldr	r3, [r2, #0]
 8005b16:	0659      	lsls	r1, r3, #25
 8005b18:	d5fc      	bpl.n	8005b14 <HAL_UART_Transmit+0xd0>
    huart->gState = HAL_UART_STATE_READY;
 8005b1a:	2320      	movs	r3, #32
 8005b1c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    return HAL_OK;
 8005b20:	2000      	movs	r0, #0
 8005b22:	e7cb      	b.n	8005abc <HAL_UART_Transmit+0x78>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b24:	6813      	ldr	r3, [r2, #0]
 8005b26:	061b      	lsls	r3, r3, #24
 8005b28:	d4c3      	bmi.n	8005ab2 <HAL_UART_Transmit+0x6e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b2a:	b12f      	cbz	r7, 8005b38 <HAL_UART_Transmit+0xf4>
 8005b2c:	f7fd fe7e 	bl	800382c <HAL_GetTick>
 8005b30:	1b40      	subs	r0, r0, r5
 8005b32:	4287      	cmp	r7, r0
 8005b34:	6822      	ldr	r2, [r4, #0]
 8005b36:	d2b7      	bcs.n	8005aa8 <HAL_UART_Transmit+0x64>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b38:	68d3      	ldr	r3, [r2, #12]
 8005b3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b3e:	60d3      	str	r3, [r2, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b40:	6953      	ldr	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005b42:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b44:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8005b48:	2500      	movs	r5, #0
      return HAL_TIMEOUT;
 8005b4a:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b4c:	6153      	str	r3, [r2, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005b4e:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8005b52:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8005b56:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
}
 8005b5a:	b002      	add	sp, #8
 8005b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005b60 <HAL_UART_Receive>:
{
 8005b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b64:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b66:	f890 103a 	ldrb.w	r1, [r0, #58]	; 0x3a
 8005b6a:	2920      	cmp	r1, #32
{
 8005b6c:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8005b6e:	d136      	bne.n	8005bde <HAL_UART_Receive+0x7e>
    if ((pData == NULL) || (Size == 0U))
 8005b70:	2e00      	cmp	r6, #0
 8005b72:	d038      	beq.n	8005be6 <HAL_UART_Receive+0x86>
 8005b74:	9201      	str	r2, [sp, #4]
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	d035      	beq.n	8005be6 <HAL_UART_Receive+0x86>
 8005b7a:	461f      	mov	r7, r3
    __HAL_LOCK(huart);
 8005b7c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005b80:	2b01      	cmp	r3, #1
 8005b82:	4604      	mov	r4, r0
 8005b84:	d02b      	beq.n	8005bde <HAL_UART_Receive+0x7e>
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b86:	f04f 0800 	mov.w	r8, #0
    __HAL_LOCK(huart);
 8005b8a:	2101      	movs	r1, #1
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b8c:	2322      	movs	r3, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b8e:	f8c0 803c 	str.w	r8, [r0, #60]	; 0x3c
    __HAL_LOCK(huart);
 8005b92:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b96:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
    tickstart = HAL_GetTick();
 8005b9a:	f7fd fe47 	bl	800382c <HAL_GetTick>
    huart->RxXferSize = Size;
 8005b9e:	9a01      	ldr	r2, [sp, #4]
    __HAL_UNLOCK(huart);
 8005ba0:	f884 8038 	strb.w	r8, [r4, #56]	; 0x38
    tickstart = HAL_GetTick();
 8005ba4:	4605      	mov	r5, r0
    huart->RxXferSize = Size;
 8005ba6:	85a2      	strh	r2, [r4, #44]	; 0x2c
    huart->RxXferCount = Size;
 8005ba8:	85e2      	strh	r2, [r4, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8005baa:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
 8005bac:	b280      	uxth	r0, r0
 8005bae:	2800      	cmp	r0, #0
 8005bb0:	d05b      	beq.n	8005c6a <HAL_UART_Receive+0x10a>
      huart->RxXferCount--;
 8005bb2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bb4:	68a3      	ldr	r3, [r4, #8]
      huart->RxXferCount--;
 8005bb6:	3a01      	subs	r2, #1
 8005bb8:	b292      	uxth	r2, r2
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
      huart->RxXferCount--;
 8005bbe:	85e2      	strh	r2, [r4, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005bc0:	d01f      	beq.n	8005c02 <HAL_UART_Receive+0xa2>
 8005bc2:	1c79      	adds	r1, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bc4:	6820      	ldr	r0, [r4, #0]
 8005bc6:	d12a      	bne.n	8005c1e <HAL_UART_Receive+0xbe>
 8005bc8:	6802      	ldr	r2, [r0, #0]
 8005bca:	0692      	lsls	r2, r2, #26
 8005bcc:	d5fc      	bpl.n	8005bc8 <HAL_UART_Receive+0x68>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005bce:	6923      	ldr	r3, [r4, #16]
 8005bd0:	1c72      	adds	r2, r6, #1
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d13f      	bne.n	8005c56 <HAL_UART_Receive+0xf6>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005bd6:	6843      	ldr	r3, [r0, #4]
 8005bd8:	7033      	strb	r3, [r6, #0]
 8005bda:	4616      	mov	r6, r2
 8005bdc:	e7e5      	b.n	8005baa <HAL_UART_Receive+0x4a>
    return HAL_BUSY;
 8005bde:	2002      	movs	r0, #2
}
 8005be0:	b002      	add	sp, #8
 8005be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return  HAL_ERROR;
 8005be6:	2001      	movs	r0, #1
}
 8005be8:	b002      	add	sp, #8
 8005bea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bee:	681a      	ldr	r2, [r3, #0]
 8005bf0:	0690      	lsls	r0, r2, #26
 8005bf2:	d40c      	bmi.n	8005c0e <HAL_UART_Receive+0xae>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005bf4:	2f00      	cmp	r7, #0
 8005bf6:	d03d      	beq.n	8005c74 <HAL_UART_Receive+0x114>
 8005bf8:	f7fd fe18 	bl	800382c <HAL_GetTick>
 8005bfc:	1b40      	subs	r0, r0, r5
 8005bfe:	4287      	cmp	r7, r0
 8005c00:	d337      	bcc.n	8005c72 <HAL_UART_Receive+0x112>
 8005c02:	1c79      	adds	r1, r7, #1
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c04:	6823      	ldr	r3, [r4, #0]
 8005c06:	d1f2      	bne.n	8005bee <HAL_UART_Receive+0x8e>
 8005c08:	681a      	ldr	r2, [r3, #0]
 8005c0a:	0692      	lsls	r2, r2, #26
 8005c0c:	d5fc      	bpl.n	8005c08 <HAL_UART_Receive+0xa8>
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c0e:	6922      	ldr	r2, [r4, #16]
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c10:	685b      	ldr	r3, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005c12:	bb32      	cbnz	r2, 8005c62 <HAL_UART_Receive+0x102>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c18:	f826 3b02 	strh.w	r3, [r6], #2
 8005c1c:	e7c5      	b.n	8005baa <HAL_UART_Receive+0x4a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c1e:	6803      	ldr	r3, [r0, #0]
 8005c20:	069b      	lsls	r3, r3, #26
 8005c22:	d4d4      	bmi.n	8005bce <HAL_UART_Receive+0x6e>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c24:	b12f      	cbz	r7, 8005c32 <HAL_UART_Receive+0xd2>
 8005c26:	f7fd fe01 	bl	800382c <HAL_GetTick>
 8005c2a:	1b40      	subs	r0, r0, r5
 8005c2c:	4287      	cmp	r7, r0
 8005c2e:	d2c8      	bcs.n	8005bc2 <HAL_UART_Receive+0x62>
 8005c30:	6820      	ldr	r0, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c32:	68c3      	ldr	r3, [r0, #12]
 8005c34:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c38:	60c3      	str	r3, [r0, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3a:	6943      	ldr	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005c3c:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c3e:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8005c42:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c44:	6143      	str	r3, [r0, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005c46:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
          return HAL_TIMEOUT;
 8005c4a:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8005c4c:	f884 1038 	strb.w	r1, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8005c50:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8005c54:	e7c4      	b.n	8005be0 <HAL_UART_Receive+0x80>
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c56:	6843      	ldr	r3, [r0, #4]
 8005c58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c5c:	7033      	strb	r3, [r6, #0]
 8005c5e:	4616      	mov	r6, r2
 8005c60:	e7a3      	b.n	8005baa <HAL_UART_Receive+0x4a>
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	f826 3b01 	strh.w	r3, [r6], #1
 8005c68:	e79f      	b.n	8005baa <HAL_UART_Receive+0x4a>
    huart->RxState = HAL_UART_STATE_READY;
 8005c6a:	2320      	movs	r3, #32
 8005c6c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
    return HAL_OK;
 8005c70:	e7b6      	b.n	8005be0 <HAL_UART_Receive+0x80>
 8005c72:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c74:	68da      	ldr	r2, [r3, #12]
 8005c76:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005c7a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c7c:	695a      	ldr	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8005c7e:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c80:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8005c84:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c86:	615a      	str	r2, [r3, #20]
          return HAL_TIMEOUT;
 8005c88:	2003      	movs	r0, #3
        huart->gState  = HAL_UART_STATE_READY;
 8005c8a:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
        __HAL_UNLOCK(huart);
 8005c8e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
        huart->RxState = HAL_UART_STATE_READY;
 8005c92:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
 8005c96:	e7a3      	b.n	8005be0 <HAL_UART_Receive+0x80>

08005c98 <HAL_UART_Transmit_DMA>:
  if (huart->gState == HAL_UART_STATE_READY)
 8005c98:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8005c9c:	2b20      	cmp	r3, #32
 8005c9e:	d12d      	bne.n	8005cfc <HAL_UART_Transmit_DMA+0x64>
{
 8005ca0:	b570      	push	{r4, r5, r6, lr}
    if ((pData == NULL) || (Size == 0U))
 8005ca2:	b349      	cbz	r1, 8005cf8 <HAL_UART_Transmit_DMA+0x60>
 8005ca4:	b342      	cbz	r2, 8005cf8 <HAL_UART_Transmit_DMA+0x60>
    __HAL_LOCK(huart);
 8005ca6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d028      	beq.n	8005d00 <HAL_UART_Transmit_DMA+0x68>
 8005cae:	4604      	mov	r4, r0
 8005cb0:	2601      	movs	r6, #1
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cb2:	6b00      	ldr	r0, [r0, #48]	; 0x30
    __HAL_LOCK(huart);
 8005cb4:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
 8005cb8:	4613      	mov	r3, r2
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cba:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cbc:	2621      	movs	r6, #33	; 0x21
    huart->TxXferCount = Size;
 8005cbe:	84e3      	strh	r3, [r4, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cc0:	63e5      	str	r5, [r4, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cc2:	f884 6039 	strb.w	r6, [r4, #57]	; 0x39
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cc6:	4e0f      	ldr	r6, [pc, #60]	; (8005d04 <HAL_UART_Transmit_DMA+0x6c>)
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005cc8:	6822      	ldr	r2, [r4, #0]
    huart->TxXferSize = Size;
 8005cca:	84a3      	strh	r3, [r4, #36]	; 0x24
    huart->pTxBuffPtr = pData;
 8005ccc:	6221      	str	r1, [r4, #32]
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005cce:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005cd0:	4e0d      	ldr	r6, [pc, #52]	; (8005d08 <HAL_UART_Transmit_DMA+0x70>)
 8005cd2:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005cd4:	4e0d      	ldr	r6, [pc, #52]	; (8005d0c <HAL_UART_Transmit_DMA+0x74>)
    huart->hdmatx->XferAbortCallback = NULL;
 8005cd6:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005cd8:	64c6      	str	r6, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005cda:	3204      	adds	r2, #4
 8005cdc:	f7fd fec8 	bl	8003a70 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ce6:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005ce8:	695a      	ldr	r2, [r3, #20]
    __HAL_UNLOCK(huart);
 8005cea:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 8005cf2:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005cf4:	615a      	str	r2, [r3, #20]
}
 8005cf6:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005cf8:	2001      	movs	r0, #1
}
 8005cfa:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8005cfc:	2002      	movs	r0, #2
}
 8005cfe:	4770      	bx	lr
    return HAL_BUSY;
 8005d00:	2002      	movs	r0, #2
}
 8005d02:	bd70      	pop	{r4, r5, r6, pc}
 8005d04:	08005da9 	.word	0x08005da9
 8005d08:	08005dd9 	.word	0x08005dd9
 8005d0c:	08005ea1 	.word	0x08005ea1

08005d10 <HAL_UART_Receive_DMA>:
{
 8005d10:	b570      	push	{r4, r5, r6, lr}
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d12:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
 8005d16:	2c20      	cmp	r4, #32
{
 8005d18:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d1a:	d138      	bne.n	8005d8e <HAL_UART_Receive_DMA+0x7e>
    if ((pData == NULL) || (Size == 0U))
 8005d1c:	2900      	cmp	r1, #0
 8005d1e:	d039      	beq.n	8005d94 <HAL_UART_Receive_DMA+0x84>
 8005d20:	2a00      	cmp	r2, #0
 8005d22:	d037      	beq.n	8005d94 <HAL_UART_Receive_DMA+0x84>
    __HAL_LOCK(huart);
 8005d24:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8005d28:	2b01      	cmp	r3, #1
 8005d2a:	d030      	beq.n	8005d8e <HAL_UART_Receive_DMA+0x7e>
 8005d2c:	4604      	mov	r4, r0
 8005d2e:	2601      	movs	r6, #1
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d30:	6b40      	ldr	r0, [r0, #52]	; 0x34
    __HAL_LOCK(huart);
 8005d32:	f884 6038 	strb.w	r6, [r4, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d36:	2500      	movs	r5, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d38:	2622      	movs	r6, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d3a:	63e5      	str	r5, [r4, #60]	; 0x3c
 8005d3c:	4613      	mov	r3, r2
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d3e:	f884 603a 	strb.w	r6, [r4, #58]	; 0x3a
 8005d42:	460a      	mov	r2, r1
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d44:	4e15      	ldr	r6, [pc, #84]	; (8005d9c <HAL_UART_Receive_DMA+0x8c>)
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005d46:	6821      	ldr	r1, [r4, #0]
    huart->pRxBuffPtr = pData;
 8005d48:	62a2      	str	r2, [r4, #40]	; 0x28
    huart->RxXferSize = Size;
 8005d4a:	85a3      	strh	r3, [r4, #44]	; 0x2c
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005d4c:	63c6      	str	r6, [r0, #60]	; 0x3c
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005d4e:	4e14      	ldr	r6, [pc, #80]	; (8005da0 <HAL_UART_Receive_DMA+0x90>)
 8005d50:	6406      	str	r6, [r0, #64]	; 0x40
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d52:	4e14      	ldr	r6, [pc, #80]	; (8005da4 <HAL_UART_Receive_DMA+0x94>)
    huart->hdmarx->XferAbortCallback = NULL;
 8005d54:	6505      	str	r5, [r0, #80]	; 0x50
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005d56:	64c6      	str	r6, [r0, #76]	; 0x4c
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005d58:	3104      	adds	r1, #4
 8005d5a:	f7fd fe89 	bl	8003a70 <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005d5e:	6823      	ldr	r3, [r4, #0]
 8005d60:	9501      	str	r5, [sp, #4]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	9201      	str	r2, [sp, #4]
 8005d66:	685a      	ldr	r2, [r3, #4]
 8005d68:	9201      	str	r2, [sp, #4]
 8005d6a:	9a01      	ldr	r2, [sp, #4]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d6c:	68da      	ldr	r2, [r3, #12]
    __HAL_UNLOCK(huart);
 8005d6e:	f884 5038 	strb.w	r5, [r4, #56]	; 0x38
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d76:	60da      	str	r2, [r3, #12]
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d78:	695a      	ldr	r2, [r3, #20]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	615a      	str	r2, [r3, #20]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d80:	695a      	ldr	r2, [r3, #20]
    return HAL_OK;
 8005d82:	4628      	mov	r0, r5
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d88:	615a      	str	r2, [r3, #20]
}
 8005d8a:	b002      	add	sp, #8
 8005d8c:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_BUSY;
 8005d8e:	2002      	movs	r0, #2
}
 8005d90:	b002      	add	sp, #8
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
      return HAL_ERROR;
 8005d94:	2001      	movs	r0, #1
}
 8005d96:	b002      	add	sp, #8
 8005d98:	bd70      	pop	{r4, r5, r6, pc}
 8005d9a:	bf00      	nop
 8005d9c:	08005de9 	.word	0x08005de9
 8005da0:	08005e91 	.word	0x08005e91
 8005da4:	08005ea1 	.word	0x08005ea1

08005da8 <UART_DMATransmitCplt>:
{
 8005da8:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005daa:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dac:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005db4:	d10a      	bne.n	8005dcc <UART_DMATransmitCplt+0x24>
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005db6:	6802      	ldr	r2, [r0, #0]
    huart->TxXferCount = 0x00U;
 8005db8:	84c3      	strh	r3, [r0, #38]	; 0x26
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005dba:	6953      	ldr	r3, [r2, #20]
 8005dbc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005dc0:	6153      	str	r3, [r2, #20]
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005dc2:	68d3      	ldr	r3, [r2, #12]
 8005dc4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005dc8:	60d3      	str	r3, [r2, #12]
}
 8005dca:	bd08      	pop	{r3, pc}
    HAL_UART_TxCpltCallback(huart);
 8005dcc:	f7fd f9e0 	bl	8003190 <HAL_UART_TxCpltCallback>
}
 8005dd0:	bd08      	pop	{r3, pc}
 8005dd2:	bf00      	nop

08005dd4 <HAL_UART_TxHalfCpltCallback>:
 8005dd4:	4770      	bx	lr
 8005dd6:	bf00      	nop

08005dd8 <UART_DMATxHalfCplt>:
{
 8005dd8:	b508      	push	{r3, lr}
  HAL_UART_TxHalfCpltCallback(huart);
 8005dda:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005ddc:	f7ff fffa 	bl	8005dd4 <HAL_UART_TxHalfCpltCallback>
}
 8005de0:	bd08      	pop	{r3, pc}
 8005de2:	bf00      	nop

08005de4 <HAL_UART_RxCpltCallback>:
 8005de4:	4770      	bx	lr
 8005de6:	bf00      	nop

08005de8 <UART_DMAReceiveCplt>:
{
 8005de8:	b508      	push	{r3, lr}
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dea:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dec:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8005df4:	d110      	bne.n	8005e18 <UART_DMAReceiveCplt+0x30>
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005df6:	6802      	ldr	r2, [r0, #0]
    huart->RxXferCount = 0U;
 8005df8:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005dfa:	68d3      	ldr	r3, [r2, #12]
 8005dfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e00:	60d3      	str	r3, [r2, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005e02:	6953      	ldr	r3, [r2, #20]
 8005e04:	f023 0301 	bic.w	r3, r3, #1
 8005e08:	6153      	str	r3, [r2, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0a:	6953      	ldr	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8005e0c:	2120      	movs	r1, #32
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005e0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005e12:	6153      	str	r3, [r2, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8005e14:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
  HAL_UART_RxCpltCallback(huart);
 8005e18:	f7ff ffe4 	bl	8005de4 <HAL_UART_RxCpltCallback>
}
 8005e1c:	bd08      	pop	{r3, pc}
 8005e1e:	bf00      	nop

08005e20 <UART_Receive_IT.part.1>:
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8005e20:	b510      	push	{r4, lr}
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005e22:	6884      	ldr	r4, [r0, #8]
 8005e24:	6901      	ldr	r1, [r0, #16]
 8005e26:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8005e28:	6802      	ldr	r2, [r0, #0]
 8005e2a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
 8005e2e:	d020      	beq.n	8005e72 <UART_Receive_IT.part.1+0x52>
 8005e30:	1c5c      	adds	r4, r3, #1
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e32:	6852      	ldr	r2, [r2, #4]
 8005e34:	6284      	str	r4, [r0, #40]	; 0x28
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e36:	b9c9      	cbnz	r1, 8005e6c <UART_Receive_IT.part.1+0x4c>
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e38:	701a      	strb	r2, [r3, #0]
    if (--huart->RxXferCount == 0U)
 8005e3a:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29b      	uxth	r3, r3
 8005e40:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8005e42:	b98b      	cbnz	r3, 8005e68 <UART_Receive_IT.part.1+0x48>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005e44:	6802      	ldr	r2, [r0, #0]
 8005e46:	68d1      	ldr	r1, [r2, #12]
 8005e48:	f021 0120 	bic.w	r1, r1, #32
 8005e4c:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e4e:	68d1      	ldr	r1, [r2, #12]
 8005e50:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8005e54:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e56:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005e58:	2420      	movs	r4, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e5a:	f021 0101 	bic.w	r1, r1, #1
 8005e5e:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8005e60:	f880 403a 	strb.w	r4, [r0, #58]	; 0x3a
      HAL_UART_RxCpltCallback(huart);
 8005e64:	f7ff ffbe 	bl	8005de4 <HAL_UART_RxCpltCallback>
}
 8005e68:	2000      	movs	r0, #0
 8005e6a:	bd10      	pop	{r4, pc}
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e70:	e7e2      	b.n	8005e38 <UART_Receive_IT.part.1+0x18>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e72:	6852      	ldr	r2, [r2, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005e74:	b929      	cbnz	r1, 8005e82 <UART_Receive_IT.part.1+0x62>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e76:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e7a:	f823 2b02 	strh.w	r2, [r3], #2
        huart->pRxBuffPtr += 2U;
 8005e7e:	6283      	str	r3, [r0, #40]	; 0x28
 8005e80:	e7db      	b.n	8005e3a <UART_Receive_IT.part.1+0x1a>
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8005e82:	b2d2      	uxtb	r2, r2
 8005e84:	f823 2b01 	strh.w	r2, [r3], #1
        huart->pRxBuffPtr += 1U;
 8005e88:	6283      	str	r3, [r0, #40]	; 0x28
 8005e8a:	e7d6      	b.n	8005e3a <UART_Receive_IT.part.1+0x1a>

08005e8c <HAL_UART_RxHalfCpltCallback>:
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop

08005e90 <UART_DMARxHalfCplt>:
{
 8005e90:	b508      	push	{r3, lr}
  HAL_UART_RxHalfCpltCallback(huart);
 8005e92:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8005e94:	f7ff fffa 	bl	8005e8c <HAL_UART_RxHalfCpltCallback>
}
 8005e98:	bd08      	pop	{r3, pc}
 8005e9a:	bf00      	nop

08005e9c <HAL_UART_ErrorCallback>:
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop

08005ea0 <UART_DMAError>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ea0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 8005ea2:	b508      	push	{r3, lr}
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ea4:	6803      	ldr	r3, [r0, #0]
 8005ea6:	6959      	ldr	r1, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ea8:	f890 2039 	ldrb.w	r2, [r0, #57]	; 0x39
 8005eac:	2a21      	cmp	r2, #33	; 0x21
 8005eae:	d01b      	beq.n	8005ee8 <UART_DMAError+0x48>
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb0:	6959      	ldr	r1, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005eb2:	f890 203a 	ldrb.w	r2, [r0, #58]	; 0x3a
 8005eb6:	2a22      	cmp	r2, #34	; 0x22
 8005eb8:	d006      	beq.n	8005ec8 <UART_DMAError+0x28>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005eba:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8005ebc:	f043 0310 	orr.w	r3, r3, #16
 8005ec0:	63c3      	str	r3, [r0, #60]	; 0x3c
  HAL_UART_ErrorCallback(huart);
 8005ec2:	f7ff ffeb 	bl	8005e9c <HAL_UART_ErrorCallback>
}
 8005ec6:	bd08      	pop	{r3, pc}
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005ec8:	064a      	lsls	r2, r1, #25
 8005eca:	d5f6      	bpl.n	8005eba <UART_DMAError+0x1a>
    huart->RxXferCount = 0x00U;
 8005ecc:	2200      	movs	r2, #0
 8005ece:	85c2      	strh	r2, [r0, #46]	; 0x2e
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ed0:	68da      	ldr	r2, [r3, #12]
 8005ed2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005ed6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed8:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8005eda:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005edc:	f022 0201 	bic.w	r2, r2, #1
 8005ee0:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8005ee2:	f880 103a 	strb.w	r1, [r0, #58]	; 0x3a
 8005ee6:	e7e8      	b.n	8005eba <UART_DMAError+0x1a>
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ee8:	0609      	lsls	r1, r1, #24
 8005eea:	d5e1      	bpl.n	8005eb0 <UART_DMAError+0x10>
    huart->TxXferCount = 0x00U;
 8005eec:	2200      	movs	r2, #0
 8005eee:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ef0:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005ef2:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005ef4:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8005ef8:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005efa:	f880 1039 	strb.w	r1, [r0, #57]	; 0x39
 8005efe:	e7d7      	b.n	8005eb0 <UART_DMAError+0x10>

08005f00 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005f00:	6803      	ldr	r3, [r0, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
{
 8005f04:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8005f06:	0716      	lsls	r6, r2, #28
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005f08:	68dd      	ldr	r5, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005f0a:	6959      	ldr	r1, [r3, #20]
{
 8005f0c:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8005f0e:	d046      	beq.n	8005f9e <HAL_UART_IRQHandler+0x9e>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f10:	f011 0101 	ands.w	r1, r1, #1
 8005f14:	d04c      	beq.n	8005fb0 <HAL_UART_IRQHandler+0xb0>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f16:	07d0      	lsls	r0, r2, #31
 8005f18:	d505      	bpl.n	8005f26 <HAL_UART_IRQHandler+0x26>
 8005f1a:	05ee      	lsls	r6, r5, #23
 8005f1c:	d503      	bpl.n	8005f26 <HAL_UART_IRQHandler+0x26>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f1e:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 8005f20:	f040 0001 	orr.w	r0, r0, #1
 8005f24:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f26:	0750      	lsls	r0, r2, #29
 8005f28:	d574      	bpl.n	8006014 <HAL_UART_IRQHandler+0x114>
 8005f2a:	b129      	cbz	r1, 8005f38 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f2c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f2e:	0796      	lsls	r6, r2, #30
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f30:	f040 0002 	orr.w	r0, r0, #2
 8005f34:	63e0      	str	r0, [r4, #60]	; 0x3c
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f36:	d471      	bmi.n	800601c <HAL_UART_IRQHandler+0x11c>
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005f38:	0716      	lsls	r6, r2, #28
 8005f3a:	d503      	bpl.n	8005f44 <HAL_UART_IRQHandler+0x44>
 8005f3c:	06a8      	lsls	r0, r5, #26
 8005f3e:	d472      	bmi.n	8006026 <HAL_UART_IRQHandler+0x126>
 8005f40:	2900      	cmp	r1, #0
 8005f42:	d170      	bne.n	8006026 <HAL_UART_IRQHandler+0x126>
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005f44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005f46:	2900      	cmp	r1, #0
 8005f48:	d031      	beq.n	8005fae <HAL_UART_IRQHandler+0xae>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f4a:	0696      	lsls	r6, r2, #26
 8005f4c:	d501      	bpl.n	8005f52 <HAL_UART_IRQHandler+0x52>
 8005f4e:	06a8      	lsls	r0, r5, #26
 8005f50:	d472      	bmi.n	8006038 <HAL_UART_IRQHandler+0x138>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005f52:	695d      	ldr	r5, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005f54:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005f56:	0709      	lsls	r1, r1, #28
 8005f58:	d402      	bmi.n	8005f60 <HAL_UART_IRQHandler+0x60>
 8005f5a:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8005f5e:	d078      	beq.n	8006052 <HAL_UART_IRQHandler+0x152>
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005f66:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f68:	695a      	ldr	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8005f6a:	2120      	movs	r1, #32
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6c:	f022 0201 	bic.w	r2, r2, #1
 8005f70:	615a      	str	r2, [r3, #20]
  huart->RxState = HAL_UART_STATE_READY;
 8005f72:	f884 103a 	strb.w	r1, [r4, #58]	; 0x3a
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	0652      	lsls	r2, r2, #25
 8005f7a:	d559      	bpl.n	8006030 <HAL_UART_IRQHandler+0x130>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7c:	695a      	ldr	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005f7e:	6b60      	ldr	r0, [r4, #52]	; 0x34
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f84:	615a      	str	r2, [r3, #20]
          if (huart->hdmarx != NULL)
 8005f86:	2800      	cmp	r0, #0
 8005f88:	d052      	beq.n	8006030 <HAL_UART_IRQHandler+0x130>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f8a:	4b3a      	ldr	r3, [pc, #232]	; (8006074 <HAL_UART_IRQHandler+0x174>)
 8005f8c:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f8e:	f7fd fdad 	bl	8003aec <HAL_DMA_Abort_IT>
 8005f92:	b160      	cbz	r0, 8005fae <HAL_UART_IRQHandler+0xae>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f94:	6b60      	ldr	r0, [r4, #52]	; 0x34
}
 8005f96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f9a:	6d03      	ldr	r3, [r0, #80]	; 0x50
 8005f9c:	4718      	bx	r3
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f9e:	0691      	lsls	r1, r2, #26
 8005fa0:	d509      	bpl.n	8005fb6 <HAL_UART_IRQHandler+0xb6>
 8005fa2:	06ae      	lsls	r6, r5, #26
 8005fa4:	d507      	bpl.n	8005fb6 <HAL_UART_IRQHandler+0xb6>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005fa6:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8005faa:	2b22      	cmp	r3, #34	; 0x22
 8005fac:	d04d      	beq.n	800604a <HAL_UART_IRQHandler+0x14a>
}
 8005fae:	bd70      	pop	{r4, r5, r6, pc}
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005fb0:	f415 7f90 	tst.w	r5, #288	; 0x120
 8005fb4:	d1af      	bne.n	8005f16 <HAL_UART_IRQHandler+0x16>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fb6:	0616      	lsls	r6, r2, #24
 8005fb8:	d40e      	bmi.n	8005fd8 <HAL_UART_IRQHandler+0xd8>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005fba:	0651      	lsls	r1, r2, #25
 8005fbc:	d5f7      	bpl.n	8005fae <HAL_UART_IRQHandler+0xae>
 8005fbe:	066a      	lsls	r2, r5, #25
 8005fc0:	d5f5      	bpl.n	8005fae <HAL_UART_IRQHandler+0xae>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fc2:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8005fc4:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005fc6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fca:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8005fcc:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8005fce:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
  HAL_UART_TxCpltCallback(huart);
 8005fd2:	f7fd f8dd 	bl	8003190 <HAL_UART_TxCpltCallback>
}
 8005fd6:	bd70      	pop	{r4, r5, r6, pc}
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005fd8:	0628      	lsls	r0, r5, #24
 8005fda:	d5ee      	bpl.n	8005fba <HAL_UART_IRQHandler+0xba>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005fdc:	f894 2039 	ldrb.w	r2, [r4, #57]	; 0x39
 8005fe0:	2a21      	cmp	r2, #33	; 0x21
 8005fe2:	d1e4      	bne.n	8005fae <HAL_UART_IRQHandler+0xae>
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005fe4:	68a1      	ldr	r1, [r4, #8]
 8005fe6:	6a22      	ldr	r2, [r4, #32]
 8005fe8:	f5b1 5f80 	cmp.w	r1, #4096	; 0x1000
 8005fec:	d036      	beq.n	800605c <HAL_UART_IRQHandler+0x15c>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005fee:	1c51      	adds	r1, r2, #1
 8005ff0:	6221      	str	r1, [r4, #32]
 8005ff2:	7812      	ldrb	r2, [r2, #0]
 8005ff4:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8005ff6:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8005ff8:	3a01      	subs	r2, #1
 8005ffa:	b292      	uxth	r2, r2
 8005ffc:	84e2      	strh	r2, [r4, #38]	; 0x26
 8005ffe:	2a00      	cmp	r2, #0
 8006000:	d1d5      	bne.n	8005fae <HAL_UART_IRQHandler+0xae>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006002:	68da      	ldr	r2, [r3, #12]
 8006004:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006008:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800600a:	68da      	ldr	r2, [r3, #12]
 800600c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006010:	60da      	str	r2, [r3, #12]
}
 8006012:	bd70      	pop	{r4, r5, r6, pc}
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006014:	0790      	lsls	r0, r2, #30
 8006016:	d58f      	bpl.n	8005f38 <HAL_UART_IRQHandler+0x38>
 8006018:	2900      	cmp	r1, #0
 800601a:	d08d      	beq.n	8005f38 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800601c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800601e:	f040 0004 	orr.w	r0, r0, #4
 8006022:	63e0      	str	r0, [r4, #60]	; 0x3c
 8006024:	e788      	b.n	8005f38 <HAL_UART_IRQHandler+0x38>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006026:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006028:	f041 0108 	orr.w	r1, r1, #8
 800602c:	63e1      	str	r1, [r4, #60]	; 0x3c
 800602e:	e789      	b.n	8005f44 <HAL_UART_IRQHandler+0x44>
            HAL_UART_ErrorCallback(huart);
 8006030:	4620      	mov	r0, r4
 8006032:	f7ff ff33 	bl	8005e9c <HAL_UART_ErrorCallback>
}
 8006036:	bd70      	pop	{r4, r5, r6, pc}
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006038:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
 800603c:	2a22      	cmp	r2, #34	; 0x22
 800603e:	d188      	bne.n	8005f52 <HAL_UART_IRQHandler+0x52>
 8006040:	4620      	mov	r0, r4
 8006042:	f7ff feed 	bl	8005e20 <UART_Receive_IT.part.1>
 8006046:	6823      	ldr	r3, [r4, #0]
 8006048:	e783      	b.n	8005f52 <HAL_UART_IRQHandler+0x52>
}
 800604a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800604e:	f7ff bee7 	b.w	8005e20 <UART_Receive_IT.part.1>
        HAL_UART_ErrorCallback(huart);
 8006052:	4620      	mov	r0, r4
 8006054:	f7ff ff22 	bl	8005e9c <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006058:	63e5      	str	r5, [r4, #60]	; 0x3c
}
 800605a:	bd70      	pop	{r4, r5, r6, pc}
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800605c:	8811      	ldrh	r1, [r2, #0]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800605e:	6920      	ldr	r0, [r4, #16]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006060:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8006064:	6059      	str	r1, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006066:	b910      	cbnz	r0, 800606e <HAL_UART_IRQHandler+0x16e>
        huart->pTxBuffPtr += 2U;
 8006068:	3202      	adds	r2, #2
 800606a:	6222      	str	r2, [r4, #32]
 800606c:	e7c3      	b.n	8005ff6 <HAL_UART_IRQHandler+0xf6>
        huart->pTxBuffPtr += 1U;
 800606e:	3201      	adds	r2, #1
 8006070:	6222      	str	r2, [r4, #32]
 8006072:	e7c0      	b.n	8005ff6 <HAL_UART_IRQHandler+0xf6>
 8006074:	08006079 	.word	0x08006079

08006078 <UART_DMAAbortOnError>:
{
 8006078:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800607a:	6b83      	ldr	r3, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 800607c:	2200      	movs	r2, #0
 800607e:	85da      	strh	r2, [r3, #46]	; 0x2e
  HAL_UART_ErrorCallback(huart);
 8006080:	4618      	mov	r0, r3
  huart->TxXferCount = 0x00U;
 8006082:	84da      	strh	r2, [r3, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8006084:	f7ff ff0a 	bl	8005e9c <HAL_UART_ErrorCallback>
}
 8006088:	bd08      	pop	{r3, pc}
 800608a:	bf00      	nop

0800608c <FILTER_init>:
#include "../Inc/Filters.h"

void FILTER_init(Filter_t * filter, float settings[3], Filter_order_e order){
	//Param�tre le filtre
	for(int32_t s = 0; s < 3; s++)
		filter->settings[s] = settings[s] ;
 800608c:	680b      	ldr	r3, [r1, #0]
 800608e:	6003      	str	r3, [r0, #0]
 8006090:	684b      	ldr	r3, [r1, #4]
 8006092:	6043      	str	r3, [r0, #4]
 8006094:	688b      	ldr	r3, [r1, #8]
 8006096:	6083      	str	r3, [r0, #8]
	//Mode de filtrage, first order or second order
	filter->order = order ;
 8006098:	7602      	strb	r2, [r0, #24]
}
 800609a:	4770      	bx	lr

0800609c <FILTER_process>:

float FILTER_process(Filter_t * filter, float new_value){
	float to_return = 0 ;
	switch(filter->order){
 800609c:	7e03      	ldrb	r3, [r0, #24]
 800609e:	b1db      	cbz	r3, 80060d8 <FILTER_process+0x3c>
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d118      	bne.n	80060d6 <FILTER_process+0x3a>
			filter->values[1] = filter->values[0];
			to_return =  filter->values[0];
			break ;

		case FILTER_SECOND_ORDER :
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 80060a4:	edd0 7a04 	vldr	s15, [r0, #16]
 80060a8:	edd0 5a01 	vldr	s11, [r0, #4]
 80060ac:	edd0 6a05 	vldr	s13, [r0, #20]
 80060b0:	ed90 6a00 	vldr	s12, [r0]
			filter->values[2] = filter->values[1];
 80060b4:	edc0 7a05 	vstr	s15, [r0, #20]
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] + filter->values[2] * filter->settings[2];
 80060b8:	ee67 7aa5 	vmul.f32	s15, s15, s11
 80060bc:	ed90 7a02 	vldr	s14, [r0, #8]
 80060c0:	eee6 7a00 	vfma.f32	s15, s12, s0
 80060c4:	eeb0 0a67 	vmov.f32	s0, s15
 80060c8:	eea6 0a87 	vfma.f32	s0, s13, s14
 80060cc:	ed80 0a03 	vstr	s0, [r0, #12]
			filter->values[1] = filter->values[0];
 80060d0:	ed80 0a04 	vstr	s0, [r0, #16]
			to_return = new_value ;
			break;
	}

	return to_return ;
};
 80060d4:	4770      	bx	lr
 80060d6:	4770      	bx	lr
			filter->values[0] = new_value * filter->settings[0] + filter->values[1] * filter->settings[1] ;
 80060d8:	edd0 7a04 	vldr	s15, [r0, #16]
 80060dc:	edd0 6a01 	vldr	s13, [r0, #4]
 80060e0:	ed90 7a00 	vldr	s14, [r0]
 80060e4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80060e8:	eee7 7a00 	vfma.f32	s15, s14, s0
 80060ec:	eeb0 0a67 	vmov.f32	s0, s15
 80060f0:	edc0 7a03 	vstr	s15, [r0, #12]
			filter->values[1] = filter->values[0];
 80060f4:	edc0 7a04 	vstr	s15, [r0, #16]
			break ;
 80060f8:	4770      	bx	lr
 80060fa:	bf00      	nop

080060fc <MOTORS_Init>:
 */

#include "../Inc/Motors.h"


void MOTORS_Init(motors_t * motors, TIM_HandleTypeDef * htim, int16_t * duty, bool_e start){
 80060fc:	b570      	push	{r4, r5, r6, lr}
	motors->htim = htim ;
	motors->duty = duty;
	motors->duty[0] = 0 ;
 80060fe:	2600      	movs	r6, #0
	motors->duty = duty;
 8006100:	6082      	str	r2, [r0, #8]
	motors->htim = htim ;
 8006102:	6001      	str	r1, [r0, #0]
	motors->duty[0] = 0 ;
 8006104:	6016      	str	r6, [r2, #0]
 8006106:	6056      	str	r6, [r2, #4]
	motors->duty[1] = 0 ;
	motors->duty[2] = 0 ;
	motors->duty[3] = 0 ;
	if(start){
 8006108:	b903      	cbnz	r3, 800610c <MOTORS_Init+0x10>
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
	}
}
 800610a:	bd70      	pop	{r4, r5, r6, pc}
 800610c:	460d      	mov	r5, r1
		motors->state = MOTORS_STATE_RUNNING ;
 800610e:	2301      	movs	r3, #1
 8006110:	4604      	mov	r4, r0
 8006112:	7103      	strb	r3, [r0, #4]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 8006114:	4631      	mov	r1, r6
 8006116:	4628      	mov	r0, r5
 8006118:	f7ff f9a8 	bl	800546c <HAL_TIM_PWM_Start>
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 800611c:	2104      	movs	r1, #4
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_1);
 800611e:	7320      	strb	r0, [r4, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8006120:	4628      	mov	r0, r5
 8006122:	f7ff f9a3 	bl	800546c <HAL_TIM_PWM_Start>
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8006126:	2108      	movs	r1, #8
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_2);
 8006128:	7320      	strb	r0, [r4, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 800612a:	4628      	mov	r0, r5
 800612c:	f7ff f99e 	bl	800546c <HAL_TIM_PWM_Start>
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8006130:	210c      	movs	r1, #12
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_3);
 8006132:	7320      	strb	r0, [r4, #12]
		motors->hal_state = HAL_TIM_PWM_Start(htim, TIM_CHANNEL_4);
 8006134:	4628      	mov	r0, r5
 8006136:	f7ff f999 	bl	800546c <HAL_TIM_PWM_Start>
 800613a:	7320      	strb	r0, [r4, #12]
}
 800613c:	bd70      	pop	{r4, r5, r6, pc}
 800613e:	bf00      	nop

08006140 <MOTORS_Change_output>:
	motors->hal_state = HAL_TIM_PWM_Stop(motors->htim, TIM_CHANNEL_4);
}

void MOTORS_Change_output(motors_t * motors){

	motors->duty[0] = MIN(1000, motors->duty[0]);
 8006140:	6883      	ldr	r3, [r0, #8]
	motors->duty[1] = MIN(1000, motors->duty[1]);
	motors->duty[2] = MIN(1000, motors->duty[2]);
	motors->duty[3] = MIN(1000, motors->duty[3]);


	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 8006142:	6802      	ldr	r2, [r0, #0]
	motors->duty[2] = MIN(1000, motors->duty[2]);
 8006144:	f9b3 0004 	ldrsh.w	r0, [r3, #4]
	motors->duty[3] = MIN(1000, motors->duty[3]);
 8006148:	f9b3 1006 	ldrsh.w	r1, [r3, #6]
	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 800614c:	6812      	ldr	r2, [r2, #0]
void MOTORS_Change_output(motors_t * motors){
 800614e:	b470      	push	{r4, r5, r6}
	motors->duty[0] = MIN(1000, motors->duty[0]);
 8006150:	f9b3 5000 	ldrsh.w	r5, [r3]
	motors->duty[1] = MIN(1000, motors->duty[1]);
 8006154:	f9b3 4002 	ldrsh.w	r4, [r3, #2]
	motors->duty[0] = MIN(1000, motors->duty[0]);
 8006158:	f5b5 7f7a 	cmp.w	r5, #1000	; 0x3e8
 800615c:	bfa8      	it	ge
 800615e:	f44f 757a 	movge.w	r5, #1000	; 0x3e8
	motors->duty[1] = MIN(1000, motors->duty[1]);
 8006162:	f5b4 7f7a 	cmp.w	r4, #1000	; 0x3e8
 8006166:	bfa8      	it	ge
 8006168:	f44f 747a 	movge.w	r4, #1000	; 0x3e8
	motors->duty[2] = MIN(1000, motors->duty[2]);
 800616c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006170:	bfa8      	it	ge
 8006172:	f44f 707a 	movge.w	r0, #1000	; 0x3e8
	motors->duty[3] = MIN(1000, motors->duty[3]);
 8006176:	f5b1 7f7a 	cmp.w	r1, #1000	; 0x3e8
 800617a:	bfa8      	it	ge
 800617c:	f44f 717a 	movge.w	r1, #1000	; 0x3e8
	motors->duty[0] = MIN(1000, motors->duty[0]);
 8006180:	801d      	strh	r5, [r3, #0]
	motors->duty[1] = MIN(1000, motors->duty[1]);
 8006182:	805c      	strh	r4, [r3, #2]
	motors->duty[2] = MIN(1000, motors->duty[2]);
 8006184:	8098      	strh	r0, [r3, #4]
	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 8006186:	f205 36e7 	addw	r6, r5, #999	; 0x3e7
	motors->htim->Instance->CCR2 = motors->duty[1]+999;
 800618a:	f204 35e7 	addw	r5, r4, #999	; 0x3e7
	motors->htim->Instance->CCR3 = motors->duty[2]+999;
 800618e:	f200 34e7 	addw	r4, r0, #999	; 0x3e7
	motors->htim->Instance->CCR4 = motors->duty[3]+999;
 8006192:	f201 30e7 	addw	r0, r1, #999	; 0x3e7
	motors->duty[3] = MIN(1000, motors->duty[3]);
 8006196:	80d9      	strh	r1, [r3, #6]
	motors->htim->Instance->CCR1 = motors->duty[0]+999;
 8006198:	6356      	str	r6, [r2, #52]	; 0x34
	motors->htim->Instance->CCR2 = motors->duty[1]+999;
 800619a:	6395      	str	r5, [r2, #56]	; 0x38
	motors->htim->Instance->CCR3 = motors->duty[2]+999;
 800619c:	63d4      	str	r4, [r2, #60]	; 0x3c
	motors->htim->Instance->CCR4 = motors->duty[3]+999;
 800619e:	6410      	str	r0, [r2, #64]	; 0x40
}
 80061a0:	bc70      	pop	{r4, r5, r6}
 80061a2:	4770      	bx	lr

080061a4 <PID_init>:
}



//Init des valeurs sur le pid donn�
void PID_init(PID_t * pid, float settings[PID_NB_SETTINGS], Filter_order_e d_filter_order, float settings_filter[3]){
 80061a4:	b430      	push	{r4, r5}
	//Set settings
	for(uint8_t s = 0 ; s < PID_NB_SETTINGS; s++)
		pid->settings[s] = settings[s] ;
 80061a6:	680d      	ldr	r5, [r1, #0]
 80061a8:	6105      	str	r5, [r0, #16]
 80061aa:	684d      	ldr	r5, [r1, #4]
 80061ac:	6145      	str	r5, [r0, #20]
 80061ae:	688d      	ldr	r5, [r1, #8]
 80061b0:	6185      	str	r5, [r0, #24]
 80061b2:	68cd      	ldr	r5, [r1, #12]
 80061b4:	61c5      	str	r5, [r0, #28]
 80061b6:	690d      	ldr	r5, [r1, #16]
 80061b8:	6205      	str	r5, [r0, #32]

	//Init values
	pid->P = 0 ;
 80061ba:	2400      	movs	r4, #0
 80061bc:	6044      	str	r4, [r0, #4]
	pid->I = 0 ;
 80061be:	6084      	str	r4, [r0, #8]
	pid->D = 0 ;
 80061c0:	60c4      	str	r4, [r0, #12]

	//Init du filtre
	FILTER_init(&pid->d_filter, settings_filter, d_filter_order);
 80061c2:	4619      	mov	r1, r3
 80061c4:	302c      	adds	r0, #44	; 0x2c
}
 80061c6:	bc30      	pop	{r4, r5}
	FILTER_init(&pid->d_filter, settings_filter, d_filter_order);
 80061c8:	f7ff bf60 	b.w	800608c <FILTER_init>

080061cc <arm_mat_mult_f32>:
 80061cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d0:	8843      	ldrh	r3, [r0, #2]
 80061d2:	880d      	ldrh	r5, [r1, #0]
 80061d4:	8804      	ldrh	r4, [r0, #0]
 80061d6:	b087      	sub	sp, #28
 80061d8:	429d      	cmp	r5, r3
 80061da:	9403      	str	r4, [sp, #12]
 80061dc:	f040 8094 	bne.w	8006308 <arm_mat_mult_f32+0x13c>
 80061e0:	8813      	ldrh	r3, [r2, #0]
 80061e2:	4626      	mov	r6, r4
 80061e4:	42b3      	cmp	r3, r6
 80061e6:	4614      	mov	r4, r2
 80061e8:	f040 808e 	bne.w	8006308 <arm_mat_mult_f32+0x13c>
 80061ec:	f8b1 8002 	ldrh.w	r8, [r1, #2]
 80061f0:	8863      	ldrh	r3, [r4, #2]
 80061f2:	4543      	cmp	r3, r8
 80061f4:	f040 8088 	bne.w	8006308 <arm_mat_mult_f32+0x13c>
 80061f8:	ea4f 0a95 	mov.w	sl, r5, lsr #2
 80061fc:	f005 0303 	and.w	r3, r5, #3
 8006200:	461a      	mov	r2, r3
 8006202:	9301      	str	r3, [sp, #4]
 8006204:	f10a 33ff 	add.w	r3, sl, #4294967295
 8006208:	f8d0 e004 	ldr.w	lr, [r0, #4]
 800620c:	6860      	ldr	r0, [r4, #4]
 800620e:	9004      	str	r0, [sp, #16]
 8006210:	b29b      	uxth	r3, r3
 8006212:	3301      	adds	r3, #1
 8006214:	ea4f 1b08 	mov.w	fp, r8, lsl #4
 8006218:	3a01      	subs	r2, #1
 800621a:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
 800621e:	fb03 fb0b 	mul.w	fp, r3, fp
 8006222:	00ab      	lsls	r3, r5, #2
 8006224:	b292      	uxth	r2, r2
 8006226:	9305      	str	r3, [sp, #20]
 8006228:	2300      	movs	r3, #0
 800622a:	3201      	adds	r2, #1
 800622c:	9302      	str	r3, [sp, #8]
 800622e:	460b      	mov	r3, r1
 8006230:	684c      	ldr	r4, [r1, #4]
 8006232:	ea4f 0982 	mov.w	r9, r2, lsl #2
 8006236:	4651      	mov	r1, sl
 8006238:	ea4f 0088 	mov.w	r0, r8, lsl #2
 800623c:	469a      	mov	sl, r3
 800623e:	9b04      	ldr	r3, [sp, #16]
 8006240:	9a02      	ldr	r2, [sp, #8]
 8006242:	2600      	movs	r6, #0
 8006244:	eb03 0782 	add.w	r7, r3, r2, lsl #2
 8006248:	f10c 0510 	add.w	r5, ip, #16
 800624c:	eddf 7a31 	vldr	s15, [pc, #196]	; 8006314 <arm_mat_mult_f32+0x148>
 8006250:	2900      	cmp	r1, #0
 8006252:	d057      	beq.n	8006304 <arm_mat_mult_f32+0x138>
 8006254:	f10e 0210 	add.w	r2, lr, #16
 8006258:	4623      	mov	r3, r4
 800625a:	ed93 5a00 	vldr	s10, [r3]
 800625e:	ed52 5a04 	vldr	s11, [r2, #-16]
 8006262:	ed12 7a03 	vldr	s14, [r2, #-12]
 8006266:	ed52 6a02 	vldr	s13, [r2, #-8]
 800626a:	ed12 6a01 	vldr	s12, [r2, #-4]
 800626e:	4403      	add	r3, r0
 8006270:	ee65 5a25 	vmul.f32	s11, s10, s11
 8006274:	ed93 5a00 	vldr	s10, [r3]
 8006278:	4403      	add	r3, r0
 800627a:	ee27 7a05 	vmul.f32	s14, s14, s10
 800627e:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8006282:	ed93 5a00 	vldr	s10, [r3]
 8006286:	4403      	add	r3, r0
 8006288:	ee77 5a27 	vadd.f32	s11, s14, s15
 800628c:	ee65 7a26 	vmul.f32	s15, s10, s13
 8006290:	edd3 6a00 	vldr	s13, [r3]
 8006294:	ee37 7aa5 	vadd.f32	s14, s15, s11
 8006298:	3210      	adds	r2, #16
 800629a:	ee66 7a26 	vmul.f32	s15, s12, s13
 800629e:	42aa      	cmp	r2, r5
 80062a0:	4403      	add	r3, r0
 80062a2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062a6:	d1d8      	bne.n	800625a <arm_mat_mult_f32+0x8e>
 80062a8:	445c      	add	r4, fp
 80062aa:	4663      	mov	r3, ip
 80062ac:	9a01      	ldr	r2, [sp, #4]
 80062ae:	b162      	cbz	r2, 80062ca <arm_mat_mult_f32+0xfe>
 80062b0:	eb03 0209 	add.w	r2, r3, r9
 80062b4:	ecf3 6a01 	vldmia	r3!, {s13}
 80062b8:	ed94 7a00 	vldr	s14, [r4]
 80062bc:	ee26 7a87 	vmul.f32	s14, s13, s14
 80062c0:	4293      	cmp	r3, r2
 80062c2:	4404      	add	r4, r0
 80062c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80062c8:	d1f4      	bne.n	80062b4 <arm_mat_mult_f32+0xe8>
 80062ca:	ece7 7a01 	vstmia	r7!, {s15}
 80062ce:	3601      	adds	r6, #1
 80062d0:	b2b6      	uxth	r6, r6
 80062d2:	f8da 3004 	ldr.w	r3, [sl, #4]
 80062d6:	45b0      	cmp	r8, r6
 80062d8:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 80062dc:	d1b6      	bne.n	800624c <arm_mat_mult_f32+0x80>
 80062de:	9a03      	ldr	r2, [sp, #12]
 80062e0:	9c05      	ldr	r4, [sp, #20]
 80062e2:	3a01      	subs	r2, #1
 80062e4:	b292      	uxth	r2, r2
 80062e6:	4615      	mov	r5, r2
 80062e8:	9203      	str	r2, [sp, #12]
 80062ea:	9a02      	ldr	r2, [sp, #8]
 80062ec:	4442      	add	r2, r8
 80062ee:	b292      	uxth	r2, r2
 80062f0:	44a6      	add	lr, r4
 80062f2:	44a4      	add	ip, r4
 80062f4:	9202      	str	r2, [sp, #8]
 80062f6:	461c      	mov	r4, r3
 80062f8:	2d00      	cmp	r5, #0
 80062fa:	d1a0      	bne.n	800623e <arm_mat_mult_f32+0x72>
 80062fc:	4628      	mov	r0, r5
 80062fe:	b007      	add	sp, #28
 8006300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006304:	4673      	mov	r3, lr
 8006306:	e7d1      	b.n	80062ac <arm_mat_mult_f32+0xe0>
 8006308:	f06f 0002 	mvn.w	r0, #2
 800630c:	b007      	add	sp, #28
 800630e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006312:	bf00      	nop
 8006314:	00000000 	.word	0x00000000

08006318 <arm_mat_init_f32>:
 8006318:	8001      	strh	r1, [r0, #0]
 800631a:	8042      	strh	r2, [r0, #2]
 800631c:	6043      	str	r3, [r0, #4]
 800631e:	4770      	bx	lr

08006320 <__errno>:
 8006320:	4b01      	ldr	r3, [pc, #4]	; (8006328 <__errno+0x8>)
 8006322:	6818      	ldr	r0, [r3, #0]
 8006324:	4770      	bx	lr
 8006326:	bf00      	nop
 8006328:	200016ec 	.word	0x200016ec

0800632c <__libc_init_array>:
 800632c:	b570      	push	{r4, r5, r6, lr}
 800632e:	4e0d      	ldr	r6, [pc, #52]	; (8006364 <__libc_init_array+0x38>)
 8006330:	4c0d      	ldr	r4, [pc, #52]	; (8006368 <__libc_init_array+0x3c>)
 8006332:	1ba4      	subs	r4, r4, r6
 8006334:	10a4      	asrs	r4, r4, #2
 8006336:	2500      	movs	r5, #0
 8006338:	42a5      	cmp	r5, r4
 800633a:	d109      	bne.n	8006350 <__libc_init_array+0x24>
 800633c:	4e0b      	ldr	r6, [pc, #44]	; (800636c <__libc_init_array+0x40>)
 800633e:	4c0c      	ldr	r4, [pc, #48]	; (8006370 <__libc_init_array+0x44>)
 8006340:	f002 fbb2 	bl	8008aa8 <_init>
 8006344:	1ba4      	subs	r4, r4, r6
 8006346:	10a4      	asrs	r4, r4, #2
 8006348:	2500      	movs	r5, #0
 800634a:	42a5      	cmp	r5, r4
 800634c:	d105      	bne.n	800635a <__libc_init_array+0x2e>
 800634e:	bd70      	pop	{r4, r5, r6, pc}
 8006350:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006354:	4798      	blx	r3
 8006356:	3501      	adds	r5, #1
 8006358:	e7ee      	b.n	8006338 <__libc_init_array+0xc>
 800635a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800635e:	4798      	blx	r3
 8006360:	3501      	adds	r5, #1
 8006362:	e7f2      	b.n	800634a <__libc_init_array+0x1e>
 8006364:	08008dac 	.word	0x08008dac
 8006368:	08008dac 	.word	0x08008dac
 800636c:	08008dac 	.word	0x08008dac
 8006370:	08008db0 	.word	0x08008db0

08006374 <memcpy>:
 8006374:	b510      	push	{r4, lr}
 8006376:	1e43      	subs	r3, r0, #1
 8006378:	440a      	add	r2, r1
 800637a:	4291      	cmp	r1, r2
 800637c:	d100      	bne.n	8006380 <memcpy+0xc>
 800637e:	bd10      	pop	{r4, pc}
 8006380:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006384:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006388:	e7f7      	b.n	800637a <memcpy+0x6>

0800638a <memmove>:
 800638a:	4288      	cmp	r0, r1
 800638c:	b510      	push	{r4, lr}
 800638e:	eb01 0302 	add.w	r3, r1, r2
 8006392:	d807      	bhi.n	80063a4 <memmove+0x1a>
 8006394:	1e42      	subs	r2, r0, #1
 8006396:	4299      	cmp	r1, r3
 8006398:	d00a      	beq.n	80063b0 <memmove+0x26>
 800639a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800639e:	f802 4f01 	strb.w	r4, [r2, #1]!
 80063a2:	e7f8      	b.n	8006396 <memmove+0xc>
 80063a4:	4283      	cmp	r3, r0
 80063a6:	d9f5      	bls.n	8006394 <memmove+0xa>
 80063a8:	1881      	adds	r1, r0, r2
 80063aa:	1ad2      	subs	r2, r2, r3
 80063ac:	42d3      	cmn	r3, r2
 80063ae:	d100      	bne.n	80063b2 <memmove+0x28>
 80063b0:	bd10      	pop	{r4, pc}
 80063b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80063b6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80063ba:	e7f7      	b.n	80063ac <memmove+0x22>

080063bc <memset>:
 80063bc:	4402      	add	r2, r0
 80063be:	4603      	mov	r3, r0
 80063c0:	4293      	cmp	r3, r2
 80063c2:	d100      	bne.n	80063c6 <memset+0xa>
 80063c4:	4770      	bx	lr
 80063c6:	f803 1b01 	strb.w	r1, [r3], #1
 80063ca:	e7f9      	b.n	80063c0 <memset+0x4>

080063cc <__cvt>:
 80063cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80063d0:	ec55 4b10 	vmov	r4, r5, d0
 80063d4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 80063d6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80063da:	2d00      	cmp	r5, #0
 80063dc:	460e      	mov	r6, r1
 80063de:	4691      	mov	r9, r2
 80063e0:	4619      	mov	r1, r3
 80063e2:	bfb8      	it	lt
 80063e4:	4622      	movlt	r2, r4
 80063e6:	462b      	mov	r3, r5
 80063e8:	f027 0720 	bic.w	r7, r7, #32
 80063ec:	bfbb      	ittet	lt
 80063ee:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80063f2:	461d      	movlt	r5, r3
 80063f4:	2300      	movge	r3, #0
 80063f6:	232d      	movlt	r3, #45	; 0x2d
 80063f8:	bfb8      	it	lt
 80063fa:	4614      	movlt	r4, r2
 80063fc:	2f46      	cmp	r7, #70	; 0x46
 80063fe:	700b      	strb	r3, [r1, #0]
 8006400:	d004      	beq.n	800640c <__cvt+0x40>
 8006402:	2f45      	cmp	r7, #69	; 0x45
 8006404:	d100      	bne.n	8006408 <__cvt+0x3c>
 8006406:	3601      	adds	r6, #1
 8006408:	2102      	movs	r1, #2
 800640a:	e000      	b.n	800640e <__cvt+0x42>
 800640c:	2103      	movs	r1, #3
 800640e:	ab03      	add	r3, sp, #12
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	ab02      	add	r3, sp, #8
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	4632      	mov	r2, r6
 8006418:	4653      	mov	r3, sl
 800641a:	ec45 4b10 	vmov	d0, r4, r5
 800641e:	f000 fd7f 	bl	8006f20 <_dtoa_r>
 8006422:	2f47      	cmp	r7, #71	; 0x47
 8006424:	4680      	mov	r8, r0
 8006426:	d102      	bne.n	800642e <__cvt+0x62>
 8006428:	f019 0f01 	tst.w	r9, #1
 800642c:	d026      	beq.n	800647c <__cvt+0xb0>
 800642e:	2f46      	cmp	r7, #70	; 0x46
 8006430:	eb08 0906 	add.w	r9, r8, r6
 8006434:	d111      	bne.n	800645a <__cvt+0x8e>
 8006436:	f898 3000 	ldrb.w	r3, [r8]
 800643a:	2b30      	cmp	r3, #48	; 0x30
 800643c:	d10a      	bne.n	8006454 <__cvt+0x88>
 800643e:	2200      	movs	r2, #0
 8006440:	2300      	movs	r3, #0
 8006442:	4620      	mov	r0, r4
 8006444:	4629      	mov	r1, r5
 8006446:	f7fa faeb 	bl	8000a20 <__aeabi_dcmpeq>
 800644a:	b918      	cbnz	r0, 8006454 <__cvt+0x88>
 800644c:	f1c6 0601 	rsb	r6, r6, #1
 8006450:	f8ca 6000 	str.w	r6, [sl]
 8006454:	f8da 3000 	ldr.w	r3, [sl]
 8006458:	4499      	add	r9, r3
 800645a:	2200      	movs	r2, #0
 800645c:	2300      	movs	r3, #0
 800645e:	4620      	mov	r0, r4
 8006460:	4629      	mov	r1, r5
 8006462:	f7fa fadd 	bl	8000a20 <__aeabi_dcmpeq>
 8006466:	b938      	cbnz	r0, 8006478 <__cvt+0xac>
 8006468:	2230      	movs	r2, #48	; 0x30
 800646a:	9b03      	ldr	r3, [sp, #12]
 800646c:	454b      	cmp	r3, r9
 800646e:	d205      	bcs.n	800647c <__cvt+0xb0>
 8006470:	1c59      	adds	r1, r3, #1
 8006472:	9103      	str	r1, [sp, #12]
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	e7f8      	b.n	800646a <__cvt+0x9e>
 8006478:	f8cd 900c 	str.w	r9, [sp, #12]
 800647c:	9b03      	ldr	r3, [sp, #12]
 800647e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006480:	eba3 0308 	sub.w	r3, r3, r8
 8006484:	4640      	mov	r0, r8
 8006486:	6013      	str	r3, [r2, #0]
 8006488:	b004      	add	sp, #16
 800648a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800648e <__exponent>:
 800648e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006490:	2900      	cmp	r1, #0
 8006492:	4604      	mov	r4, r0
 8006494:	bfba      	itte	lt
 8006496:	4249      	neglt	r1, r1
 8006498:	232d      	movlt	r3, #45	; 0x2d
 800649a:	232b      	movge	r3, #43	; 0x2b
 800649c:	2909      	cmp	r1, #9
 800649e:	f804 2b02 	strb.w	r2, [r4], #2
 80064a2:	7043      	strb	r3, [r0, #1]
 80064a4:	dd20      	ble.n	80064e8 <__exponent+0x5a>
 80064a6:	f10d 0307 	add.w	r3, sp, #7
 80064aa:	461f      	mov	r7, r3
 80064ac:	260a      	movs	r6, #10
 80064ae:	fb91 f5f6 	sdiv	r5, r1, r6
 80064b2:	fb06 1115 	mls	r1, r6, r5, r1
 80064b6:	3130      	adds	r1, #48	; 0x30
 80064b8:	2d09      	cmp	r5, #9
 80064ba:	f803 1c01 	strb.w	r1, [r3, #-1]
 80064be:	f103 32ff 	add.w	r2, r3, #4294967295
 80064c2:	4629      	mov	r1, r5
 80064c4:	dc09      	bgt.n	80064da <__exponent+0x4c>
 80064c6:	3130      	adds	r1, #48	; 0x30
 80064c8:	3b02      	subs	r3, #2
 80064ca:	f802 1c01 	strb.w	r1, [r2, #-1]
 80064ce:	42bb      	cmp	r3, r7
 80064d0:	4622      	mov	r2, r4
 80064d2:	d304      	bcc.n	80064de <__exponent+0x50>
 80064d4:	1a10      	subs	r0, r2, r0
 80064d6:	b003      	add	sp, #12
 80064d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80064da:	4613      	mov	r3, r2
 80064dc:	e7e7      	b.n	80064ae <__exponent+0x20>
 80064de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064e2:	f804 2b01 	strb.w	r2, [r4], #1
 80064e6:	e7f2      	b.n	80064ce <__exponent+0x40>
 80064e8:	2330      	movs	r3, #48	; 0x30
 80064ea:	4419      	add	r1, r3
 80064ec:	7083      	strb	r3, [r0, #2]
 80064ee:	1d02      	adds	r2, r0, #4
 80064f0:	70c1      	strb	r1, [r0, #3]
 80064f2:	e7ef      	b.n	80064d4 <__exponent+0x46>

080064f4 <_printf_float>:
 80064f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064f8:	b08d      	sub	sp, #52	; 0x34
 80064fa:	460c      	mov	r4, r1
 80064fc:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8006500:	4616      	mov	r6, r2
 8006502:	461f      	mov	r7, r3
 8006504:	4605      	mov	r5, r0
 8006506:	f001 fc3d 	bl	8007d84 <_localeconv_r>
 800650a:	6803      	ldr	r3, [r0, #0]
 800650c:	9304      	str	r3, [sp, #16]
 800650e:	4618      	mov	r0, r3
 8006510:	f7f9 fe5a 	bl	80001c8 <strlen>
 8006514:	2300      	movs	r3, #0
 8006516:	930a      	str	r3, [sp, #40]	; 0x28
 8006518:	f8d8 3000 	ldr.w	r3, [r8]
 800651c:	9005      	str	r0, [sp, #20]
 800651e:	3307      	adds	r3, #7
 8006520:	f023 0307 	bic.w	r3, r3, #7
 8006524:	f103 0208 	add.w	r2, r3, #8
 8006528:	f894 a018 	ldrb.w	sl, [r4, #24]
 800652c:	f8d4 b000 	ldr.w	fp, [r4]
 8006530:	f8c8 2000 	str.w	r2, [r8]
 8006534:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006538:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800653c:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8006540:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8006544:	9307      	str	r3, [sp, #28]
 8006546:	f8cd 8018 	str.w	r8, [sp, #24]
 800654a:	f04f 32ff 	mov.w	r2, #4294967295
 800654e:	4ba7      	ldr	r3, [pc, #668]	; (80067ec <_printf_float+0x2f8>)
 8006550:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006554:	f7fa fa96 	bl	8000a84 <__aeabi_dcmpun>
 8006558:	bb70      	cbnz	r0, 80065b8 <_printf_float+0xc4>
 800655a:	f04f 32ff 	mov.w	r2, #4294967295
 800655e:	4ba3      	ldr	r3, [pc, #652]	; (80067ec <_printf_float+0x2f8>)
 8006560:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8006564:	f7fa fa70 	bl	8000a48 <__aeabi_dcmple>
 8006568:	bb30      	cbnz	r0, 80065b8 <_printf_float+0xc4>
 800656a:	2200      	movs	r2, #0
 800656c:	2300      	movs	r3, #0
 800656e:	4640      	mov	r0, r8
 8006570:	4649      	mov	r1, r9
 8006572:	f7fa fa5f 	bl	8000a34 <__aeabi_dcmplt>
 8006576:	b110      	cbz	r0, 800657e <_printf_float+0x8a>
 8006578:	232d      	movs	r3, #45	; 0x2d
 800657a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800657e:	4a9c      	ldr	r2, [pc, #624]	; (80067f0 <_printf_float+0x2fc>)
 8006580:	4b9c      	ldr	r3, [pc, #624]	; (80067f4 <_printf_float+0x300>)
 8006582:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006586:	bf8c      	ite	hi
 8006588:	4690      	movhi	r8, r2
 800658a:	4698      	movls	r8, r3
 800658c:	2303      	movs	r3, #3
 800658e:	f02b 0204 	bic.w	r2, fp, #4
 8006592:	6123      	str	r3, [r4, #16]
 8006594:	6022      	str	r2, [r4, #0]
 8006596:	f04f 0900 	mov.w	r9, #0
 800659a:	9700      	str	r7, [sp, #0]
 800659c:	4633      	mov	r3, r6
 800659e:	aa0b      	add	r2, sp, #44	; 0x2c
 80065a0:	4621      	mov	r1, r4
 80065a2:	4628      	mov	r0, r5
 80065a4:	f000 f9e6 	bl	8006974 <_printf_common>
 80065a8:	3001      	adds	r0, #1
 80065aa:	f040 808d 	bne.w	80066c8 <_printf_float+0x1d4>
 80065ae:	f04f 30ff 	mov.w	r0, #4294967295
 80065b2:	b00d      	add	sp, #52	; 0x34
 80065b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065b8:	4642      	mov	r2, r8
 80065ba:	464b      	mov	r3, r9
 80065bc:	4640      	mov	r0, r8
 80065be:	4649      	mov	r1, r9
 80065c0:	f7fa fa60 	bl	8000a84 <__aeabi_dcmpun>
 80065c4:	b110      	cbz	r0, 80065cc <_printf_float+0xd8>
 80065c6:	4a8c      	ldr	r2, [pc, #560]	; (80067f8 <_printf_float+0x304>)
 80065c8:	4b8c      	ldr	r3, [pc, #560]	; (80067fc <_printf_float+0x308>)
 80065ca:	e7da      	b.n	8006582 <_printf_float+0x8e>
 80065cc:	6861      	ldr	r1, [r4, #4]
 80065ce:	1c4b      	adds	r3, r1, #1
 80065d0:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 80065d4:	a80a      	add	r0, sp, #40	; 0x28
 80065d6:	d13e      	bne.n	8006656 <_printf_float+0x162>
 80065d8:	2306      	movs	r3, #6
 80065da:	6063      	str	r3, [r4, #4]
 80065dc:	2300      	movs	r3, #0
 80065de:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80065e2:	ab09      	add	r3, sp, #36	; 0x24
 80065e4:	9300      	str	r3, [sp, #0]
 80065e6:	ec49 8b10 	vmov	d0, r8, r9
 80065ea:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80065ee:	6022      	str	r2, [r4, #0]
 80065f0:	f8cd a004 	str.w	sl, [sp, #4]
 80065f4:	6861      	ldr	r1, [r4, #4]
 80065f6:	4628      	mov	r0, r5
 80065f8:	f7ff fee8 	bl	80063cc <__cvt>
 80065fc:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8006600:	2b47      	cmp	r3, #71	; 0x47
 8006602:	4680      	mov	r8, r0
 8006604:	d109      	bne.n	800661a <_printf_float+0x126>
 8006606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006608:	1cd8      	adds	r0, r3, #3
 800660a:	db02      	blt.n	8006612 <_printf_float+0x11e>
 800660c:	6862      	ldr	r2, [r4, #4]
 800660e:	4293      	cmp	r3, r2
 8006610:	dd47      	ble.n	80066a2 <_printf_float+0x1ae>
 8006612:	f1aa 0a02 	sub.w	sl, sl, #2
 8006616:	fa5f fa8a 	uxtb.w	sl, sl
 800661a:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800661e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006620:	d824      	bhi.n	800666c <_printf_float+0x178>
 8006622:	3901      	subs	r1, #1
 8006624:	4652      	mov	r2, sl
 8006626:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800662a:	9109      	str	r1, [sp, #36]	; 0x24
 800662c:	f7ff ff2f 	bl	800648e <__exponent>
 8006630:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006632:	1813      	adds	r3, r2, r0
 8006634:	2a01      	cmp	r2, #1
 8006636:	4681      	mov	r9, r0
 8006638:	6123      	str	r3, [r4, #16]
 800663a:	dc02      	bgt.n	8006642 <_printf_float+0x14e>
 800663c:	6822      	ldr	r2, [r4, #0]
 800663e:	07d1      	lsls	r1, r2, #31
 8006640:	d501      	bpl.n	8006646 <_printf_float+0x152>
 8006642:	3301      	adds	r3, #1
 8006644:	6123      	str	r3, [r4, #16]
 8006646:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800664a:	2b00      	cmp	r3, #0
 800664c:	d0a5      	beq.n	800659a <_printf_float+0xa6>
 800664e:	232d      	movs	r3, #45	; 0x2d
 8006650:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006654:	e7a1      	b.n	800659a <_printf_float+0xa6>
 8006656:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 800665a:	f000 8177 	beq.w	800694c <_printf_float+0x458>
 800665e:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 8006662:	d1bb      	bne.n	80065dc <_printf_float+0xe8>
 8006664:	2900      	cmp	r1, #0
 8006666:	d1b9      	bne.n	80065dc <_printf_float+0xe8>
 8006668:	2301      	movs	r3, #1
 800666a:	e7b6      	b.n	80065da <_printf_float+0xe6>
 800666c:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 8006670:	d119      	bne.n	80066a6 <_printf_float+0x1b2>
 8006672:	2900      	cmp	r1, #0
 8006674:	6863      	ldr	r3, [r4, #4]
 8006676:	dd0c      	ble.n	8006692 <_printf_float+0x19e>
 8006678:	6121      	str	r1, [r4, #16]
 800667a:	b913      	cbnz	r3, 8006682 <_printf_float+0x18e>
 800667c:	6822      	ldr	r2, [r4, #0]
 800667e:	07d2      	lsls	r2, r2, #31
 8006680:	d502      	bpl.n	8006688 <_printf_float+0x194>
 8006682:	3301      	adds	r3, #1
 8006684:	440b      	add	r3, r1
 8006686:	6123      	str	r3, [r4, #16]
 8006688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800668a:	65a3      	str	r3, [r4, #88]	; 0x58
 800668c:	f04f 0900 	mov.w	r9, #0
 8006690:	e7d9      	b.n	8006646 <_printf_float+0x152>
 8006692:	b913      	cbnz	r3, 800669a <_printf_float+0x1a6>
 8006694:	6822      	ldr	r2, [r4, #0]
 8006696:	07d0      	lsls	r0, r2, #31
 8006698:	d501      	bpl.n	800669e <_printf_float+0x1aa>
 800669a:	3302      	adds	r3, #2
 800669c:	e7f3      	b.n	8006686 <_printf_float+0x192>
 800669e:	2301      	movs	r3, #1
 80066a0:	e7f1      	b.n	8006686 <_printf_float+0x192>
 80066a2:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80066a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80066aa:	4293      	cmp	r3, r2
 80066ac:	db05      	blt.n	80066ba <_printf_float+0x1c6>
 80066ae:	6822      	ldr	r2, [r4, #0]
 80066b0:	6123      	str	r3, [r4, #16]
 80066b2:	07d1      	lsls	r1, r2, #31
 80066b4:	d5e8      	bpl.n	8006688 <_printf_float+0x194>
 80066b6:	3301      	adds	r3, #1
 80066b8:	e7e5      	b.n	8006686 <_printf_float+0x192>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	bfd4      	ite	le
 80066be:	f1c3 0302 	rsble	r3, r3, #2
 80066c2:	2301      	movgt	r3, #1
 80066c4:	4413      	add	r3, r2
 80066c6:	e7de      	b.n	8006686 <_printf_float+0x192>
 80066c8:	6823      	ldr	r3, [r4, #0]
 80066ca:	055a      	lsls	r2, r3, #21
 80066cc:	d407      	bmi.n	80066de <_printf_float+0x1ea>
 80066ce:	6923      	ldr	r3, [r4, #16]
 80066d0:	4642      	mov	r2, r8
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	d12b      	bne.n	8006734 <_printf_float+0x240>
 80066dc:	e767      	b.n	80065ae <_printf_float+0xba>
 80066de:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 80066e2:	f240 80dc 	bls.w	800689e <_printf_float+0x3aa>
 80066e6:	2200      	movs	r2, #0
 80066e8:	2300      	movs	r3, #0
 80066ea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80066ee:	f7fa f997 	bl	8000a20 <__aeabi_dcmpeq>
 80066f2:	2800      	cmp	r0, #0
 80066f4:	d033      	beq.n	800675e <_printf_float+0x26a>
 80066f6:	2301      	movs	r3, #1
 80066f8:	4a41      	ldr	r2, [pc, #260]	; (8006800 <_printf_float+0x30c>)
 80066fa:	4631      	mov	r1, r6
 80066fc:	4628      	mov	r0, r5
 80066fe:	47b8      	blx	r7
 8006700:	3001      	adds	r0, #1
 8006702:	f43f af54 	beq.w	80065ae <_printf_float+0xba>
 8006706:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800670a:	429a      	cmp	r2, r3
 800670c:	db02      	blt.n	8006714 <_printf_float+0x220>
 800670e:	6823      	ldr	r3, [r4, #0]
 8006710:	07d8      	lsls	r0, r3, #31
 8006712:	d50f      	bpl.n	8006734 <_printf_float+0x240>
 8006714:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006718:	4631      	mov	r1, r6
 800671a:	4628      	mov	r0, r5
 800671c:	47b8      	blx	r7
 800671e:	3001      	adds	r0, #1
 8006720:	f43f af45 	beq.w	80065ae <_printf_float+0xba>
 8006724:	f04f 0800 	mov.w	r8, #0
 8006728:	f104 091a 	add.w	r9, r4, #26
 800672c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800672e:	3b01      	subs	r3, #1
 8006730:	4543      	cmp	r3, r8
 8006732:	dc09      	bgt.n	8006748 <_printf_float+0x254>
 8006734:	6823      	ldr	r3, [r4, #0]
 8006736:	079b      	lsls	r3, r3, #30
 8006738:	f100 8103 	bmi.w	8006942 <_printf_float+0x44e>
 800673c:	68e0      	ldr	r0, [r4, #12]
 800673e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006740:	4298      	cmp	r0, r3
 8006742:	bfb8      	it	lt
 8006744:	4618      	movlt	r0, r3
 8006746:	e734      	b.n	80065b2 <_printf_float+0xbe>
 8006748:	2301      	movs	r3, #1
 800674a:	464a      	mov	r2, r9
 800674c:	4631      	mov	r1, r6
 800674e:	4628      	mov	r0, r5
 8006750:	47b8      	blx	r7
 8006752:	3001      	adds	r0, #1
 8006754:	f43f af2b 	beq.w	80065ae <_printf_float+0xba>
 8006758:	f108 0801 	add.w	r8, r8, #1
 800675c:	e7e6      	b.n	800672c <_printf_float+0x238>
 800675e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006760:	2b00      	cmp	r3, #0
 8006762:	dc2b      	bgt.n	80067bc <_printf_float+0x2c8>
 8006764:	2301      	movs	r3, #1
 8006766:	4a26      	ldr	r2, [pc, #152]	; (8006800 <_printf_float+0x30c>)
 8006768:	4631      	mov	r1, r6
 800676a:	4628      	mov	r0, r5
 800676c:	47b8      	blx	r7
 800676e:	3001      	adds	r0, #1
 8006770:	f43f af1d 	beq.w	80065ae <_printf_float+0xba>
 8006774:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006776:	b923      	cbnz	r3, 8006782 <_printf_float+0x28e>
 8006778:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800677a:	b913      	cbnz	r3, 8006782 <_printf_float+0x28e>
 800677c:	6823      	ldr	r3, [r4, #0]
 800677e:	07d9      	lsls	r1, r3, #31
 8006780:	d5d8      	bpl.n	8006734 <_printf_float+0x240>
 8006782:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006786:	4631      	mov	r1, r6
 8006788:	4628      	mov	r0, r5
 800678a:	47b8      	blx	r7
 800678c:	3001      	adds	r0, #1
 800678e:	f43f af0e 	beq.w	80065ae <_printf_float+0xba>
 8006792:	f04f 0900 	mov.w	r9, #0
 8006796:	f104 0a1a 	add.w	sl, r4, #26
 800679a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800679c:	425b      	negs	r3, r3
 800679e:	454b      	cmp	r3, r9
 80067a0:	dc01      	bgt.n	80067a6 <_printf_float+0x2b2>
 80067a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a4:	e794      	b.n	80066d0 <_printf_float+0x1dc>
 80067a6:	2301      	movs	r3, #1
 80067a8:	4652      	mov	r2, sl
 80067aa:	4631      	mov	r1, r6
 80067ac:	4628      	mov	r0, r5
 80067ae:	47b8      	blx	r7
 80067b0:	3001      	adds	r0, #1
 80067b2:	f43f aefc 	beq.w	80065ae <_printf_float+0xba>
 80067b6:	f109 0901 	add.w	r9, r9, #1
 80067ba:	e7ee      	b.n	800679a <_printf_float+0x2a6>
 80067bc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80067c0:	429a      	cmp	r2, r3
 80067c2:	bfa8      	it	ge
 80067c4:	461a      	movge	r2, r3
 80067c6:	2a00      	cmp	r2, #0
 80067c8:	4691      	mov	r9, r2
 80067ca:	dd07      	ble.n	80067dc <_printf_float+0x2e8>
 80067cc:	4613      	mov	r3, r2
 80067ce:	4631      	mov	r1, r6
 80067d0:	4642      	mov	r2, r8
 80067d2:	4628      	mov	r0, r5
 80067d4:	47b8      	blx	r7
 80067d6:	3001      	adds	r0, #1
 80067d8:	f43f aee9 	beq.w	80065ae <_printf_float+0xba>
 80067dc:	f104 031a 	add.w	r3, r4, #26
 80067e0:	f04f 0b00 	mov.w	fp, #0
 80067e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80067e8:	9306      	str	r3, [sp, #24]
 80067ea:	e015      	b.n	8006818 <_printf_float+0x324>
 80067ec:	7fefffff 	.word	0x7fefffff
 80067f0:	08008d99 	.word	0x08008d99
 80067f4:	08008b14 	.word	0x08008b14
 80067f8:	08008b1c 	.word	0x08008b1c
 80067fc:	08008b18 	.word	0x08008b18
 8006800:	08008b20 	.word	0x08008b20
 8006804:	2301      	movs	r3, #1
 8006806:	9a06      	ldr	r2, [sp, #24]
 8006808:	4631      	mov	r1, r6
 800680a:	4628      	mov	r0, r5
 800680c:	47b8      	blx	r7
 800680e:	3001      	adds	r0, #1
 8006810:	f43f aecd 	beq.w	80065ae <_printf_float+0xba>
 8006814:	f10b 0b01 	add.w	fp, fp, #1
 8006818:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800681c:	ebaa 0309 	sub.w	r3, sl, r9
 8006820:	455b      	cmp	r3, fp
 8006822:	dcef      	bgt.n	8006804 <_printf_float+0x310>
 8006824:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006828:	429a      	cmp	r2, r3
 800682a:	44d0      	add	r8, sl
 800682c:	db15      	blt.n	800685a <_printf_float+0x366>
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	07da      	lsls	r2, r3, #31
 8006832:	d412      	bmi.n	800685a <_printf_float+0x366>
 8006834:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006836:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006838:	eba3 020a 	sub.w	r2, r3, sl
 800683c:	eba3 0a01 	sub.w	sl, r3, r1
 8006840:	4592      	cmp	sl, r2
 8006842:	bfa8      	it	ge
 8006844:	4692      	movge	sl, r2
 8006846:	f1ba 0f00 	cmp.w	sl, #0
 800684a:	dc0e      	bgt.n	800686a <_printf_float+0x376>
 800684c:	f04f 0800 	mov.w	r8, #0
 8006850:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006854:	f104 091a 	add.w	r9, r4, #26
 8006858:	e019      	b.n	800688e <_printf_float+0x39a>
 800685a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800685e:	4631      	mov	r1, r6
 8006860:	4628      	mov	r0, r5
 8006862:	47b8      	blx	r7
 8006864:	3001      	adds	r0, #1
 8006866:	d1e5      	bne.n	8006834 <_printf_float+0x340>
 8006868:	e6a1      	b.n	80065ae <_printf_float+0xba>
 800686a:	4653      	mov	r3, sl
 800686c:	4642      	mov	r2, r8
 800686e:	4631      	mov	r1, r6
 8006870:	4628      	mov	r0, r5
 8006872:	47b8      	blx	r7
 8006874:	3001      	adds	r0, #1
 8006876:	d1e9      	bne.n	800684c <_printf_float+0x358>
 8006878:	e699      	b.n	80065ae <_printf_float+0xba>
 800687a:	2301      	movs	r3, #1
 800687c:	464a      	mov	r2, r9
 800687e:	4631      	mov	r1, r6
 8006880:	4628      	mov	r0, r5
 8006882:	47b8      	blx	r7
 8006884:	3001      	adds	r0, #1
 8006886:	f43f ae92 	beq.w	80065ae <_printf_float+0xba>
 800688a:	f108 0801 	add.w	r8, r8, #1
 800688e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006892:	1a9b      	subs	r3, r3, r2
 8006894:	eba3 030a 	sub.w	r3, r3, sl
 8006898:	4543      	cmp	r3, r8
 800689a:	dcee      	bgt.n	800687a <_printf_float+0x386>
 800689c:	e74a      	b.n	8006734 <_printf_float+0x240>
 800689e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80068a0:	2a01      	cmp	r2, #1
 80068a2:	dc01      	bgt.n	80068a8 <_printf_float+0x3b4>
 80068a4:	07db      	lsls	r3, r3, #31
 80068a6:	d53a      	bpl.n	800691e <_printf_float+0x42a>
 80068a8:	2301      	movs	r3, #1
 80068aa:	4642      	mov	r2, r8
 80068ac:	4631      	mov	r1, r6
 80068ae:	4628      	mov	r0, r5
 80068b0:	47b8      	blx	r7
 80068b2:	3001      	adds	r0, #1
 80068b4:	f43f ae7b 	beq.w	80065ae <_printf_float+0xba>
 80068b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80068bc:	4631      	mov	r1, r6
 80068be:	4628      	mov	r0, r5
 80068c0:	47b8      	blx	r7
 80068c2:	3001      	adds	r0, #1
 80068c4:	f108 0801 	add.w	r8, r8, #1
 80068c8:	f43f ae71 	beq.w	80065ae <_printf_float+0xba>
 80068cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068ce:	2200      	movs	r2, #0
 80068d0:	f103 3aff 	add.w	sl, r3, #4294967295
 80068d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80068d8:	2300      	movs	r3, #0
 80068da:	f7fa f8a1 	bl	8000a20 <__aeabi_dcmpeq>
 80068de:	b9c8      	cbnz	r0, 8006914 <_printf_float+0x420>
 80068e0:	4653      	mov	r3, sl
 80068e2:	4642      	mov	r2, r8
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	d10e      	bne.n	800690c <_printf_float+0x418>
 80068ee:	e65e      	b.n	80065ae <_printf_float+0xba>
 80068f0:	2301      	movs	r3, #1
 80068f2:	4652      	mov	r2, sl
 80068f4:	4631      	mov	r1, r6
 80068f6:	4628      	mov	r0, r5
 80068f8:	47b8      	blx	r7
 80068fa:	3001      	adds	r0, #1
 80068fc:	f43f ae57 	beq.w	80065ae <_printf_float+0xba>
 8006900:	f108 0801 	add.w	r8, r8, #1
 8006904:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006906:	3b01      	subs	r3, #1
 8006908:	4543      	cmp	r3, r8
 800690a:	dcf1      	bgt.n	80068f0 <_printf_float+0x3fc>
 800690c:	464b      	mov	r3, r9
 800690e:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006912:	e6de      	b.n	80066d2 <_printf_float+0x1de>
 8006914:	f04f 0800 	mov.w	r8, #0
 8006918:	f104 0a1a 	add.w	sl, r4, #26
 800691c:	e7f2      	b.n	8006904 <_printf_float+0x410>
 800691e:	2301      	movs	r3, #1
 8006920:	e7df      	b.n	80068e2 <_printf_float+0x3ee>
 8006922:	2301      	movs	r3, #1
 8006924:	464a      	mov	r2, r9
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	f43f ae3e 	beq.w	80065ae <_printf_float+0xba>
 8006932:	f108 0801 	add.w	r8, r8, #1
 8006936:	68e3      	ldr	r3, [r4, #12]
 8006938:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800693a:	1a9b      	subs	r3, r3, r2
 800693c:	4543      	cmp	r3, r8
 800693e:	dcf0      	bgt.n	8006922 <_printf_float+0x42e>
 8006940:	e6fc      	b.n	800673c <_printf_float+0x248>
 8006942:	f04f 0800 	mov.w	r8, #0
 8006946:	f104 0919 	add.w	r9, r4, #25
 800694a:	e7f4      	b.n	8006936 <_printf_float+0x442>
 800694c:	2900      	cmp	r1, #0
 800694e:	f43f ae8b 	beq.w	8006668 <_printf_float+0x174>
 8006952:	2300      	movs	r3, #0
 8006954:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8006958:	ab09      	add	r3, sp, #36	; 0x24
 800695a:	9300      	str	r3, [sp, #0]
 800695c:	ec49 8b10 	vmov	d0, r8, r9
 8006960:	6022      	str	r2, [r4, #0]
 8006962:	f8cd a004 	str.w	sl, [sp, #4]
 8006966:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800696a:	4628      	mov	r0, r5
 800696c:	f7ff fd2e 	bl	80063cc <__cvt>
 8006970:	4680      	mov	r8, r0
 8006972:	e648      	b.n	8006606 <_printf_float+0x112>

08006974 <_printf_common>:
 8006974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006978:	4691      	mov	r9, r2
 800697a:	461f      	mov	r7, r3
 800697c:	688a      	ldr	r2, [r1, #8]
 800697e:	690b      	ldr	r3, [r1, #16]
 8006980:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006984:	4293      	cmp	r3, r2
 8006986:	bfb8      	it	lt
 8006988:	4613      	movlt	r3, r2
 800698a:	f8c9 3000 	str.w	r3, [r9]
 800698e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006992:	4606      	mov	r6, r0
 8006994:	460c      	mov	r4, r1
 8006996:	b112      	cbz	r2, 800699e <_printf_common+0x2a>
 8006998:	3301      	adds	r3, #1
 800699a:	f8c9 3000 	str.w	r3, [r9]
 800699e:	6823      	ldr	r3, [r4, #0]
 80069a0:	0699      	lsls	r1, r3, #26
 80069a2:	bf42      	ittt	mi
 80069a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80069a8:	3302      	addmi	r3, #2
 80069aa:	f8c9 3000 	strmi.w	r3, [r9]
 80069ae:	6825      	ldr	r5, [r4, #0]
 80069b0:	f015 0506 	ands.w	r5, r5, #6
 80069b4:	d107      	bne.n	80069c6 <_printf_common+0x52>
 80069b6:	f104 0a19 	add.w	sl, r4, #25
 80069ba:	68e3      	ldr	r3, [r4, #12]
 80069bc:	f8d9 2000 	ldr.w	r2, [r9]
 80069c0:	1a9b      	subs	r3, r3, r2
 80069c2:	42ab      	cmp	r3, r5
 80069c4:	dc28      	bgt.n	8006a18 <_printf_common+0xa4>
 80069c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80069ca:	6822      	ldr	r2, [r4, #0]
 80069cc:	3300      	adds	r3, #0
 80069ce:	bf18      	it	ne
 80069d0:	2301      	movne	r3, #1
 80069d2:	0692      	lsls	r2, r2, #26
 80069d4:	d42d      	bmi.n	8006a32 <_printf_common+0xbe>
 80069d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80069da:	4639      	mov	r1, r7
 80069dc:	4630      	mov	r0, r6
 80069de:	47c0      	blx	r8
 80069e0:	3001      	adds	r0, #1
 80069e2:	d020      	beq.n	8006a26 <_printf_common+0xb2>
 80069e4:	6823      	ldr	r3, [r4, #0]
 80069e6:	68e5      	ldr	r5, [r4, #12]
 80069e8:	f8d9 2000 	ldr.w	r2, [r9]
 80069ec:	f003 0306 	and.w	r3, r3, #6
 80069f0:	2b04      	cmp	r3, #4
 80069f2:	bf08      	it	eq
 80069f4:	1aad      	subeq	r5, r5, r2
 80069f6:	68a3      	ldr	r3, [r4, #8]
 80069f8:	6922      	ldr	r2, [r4, #16]
 80069fa:	bf0c      	ite	eq
 80069fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006a00:	2500      	movne	r5, #0
 8006a02:	4293      	cmp	r3, r2
 8006a04:	bfc4      	itt	gt
 8006a06:	1a9b      	subgt	r3, r3, r2
 8006a08:	18ed      	addgt	r5, r5, r3
 8006a0a:	f04f 0900 	mov.w	r9, #0
 8006a0e:	341a      	adds	r4, #26
 8006a10:	454d      	cmp	r5, r9
 8006a12:	d11a      	bne.n	8006a4a <_printf_common+0xd6>
 8006a14:	2000      	movs	r0, #0
 8006a16:	e008      	b.n	8006a2a <_printf_common+0xb6>
 8006a18:	2301      	movs	r3, #1
 8006a1a:	4652      	mov	r2, sl
 8006a1c:	4639      	mov	r1, r7
 8006a1e:	4630      	mov	r0, r6
 8006a20:	47c0      	blx	r8
 8006a22:	3001      	adds	r0, #1
 8006a24:	d103      	bne.n	8006a2e <_printf_common+0xba>
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a2e:	3501      	adds	r5, #1
 8006a30:	e7c3      	b.n	80069ba <_printf_common+0x46>
 8006a32:	18e1      	adds	r1, r4, r3
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	2030      	movs	r0, #48	; 0x30
 8006a38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006a3c:	4422      	add	r2, r4
 8006a3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006a42:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006a46:	3302      	adds	r3, #2
 8006a48:	e7c5      	b.n	80069d6 <_printf_common+0x62>
 8006a4a:	2301      	movs	r3, #1
 8006a4c:	4622      	mov	r2, r4
 8006a4e:	4639      	mov	r1, r7
 8006a50:	4630      	mov	r0, r6
 8006a52:	47c0      	blx	r8
 8006a54:	3001      	adds	r0, #1
 8006a56:	d0e6      	beq.n	8006a26 <_printf_common+0xb2>
 8006a58:	f109 0901 	add.w	r9, r9, #1
 8006a5c:	e7d8      	b.n	8006a10 <_printf_common+0x9c>
	...

08006a60 <_puts_r>:
 8006a60:	b570      	push	{r4, r5, r6, lr}
 8006a62:	460e      	mov	r6, r1
 8006a64:	4605      	mov	r5, r0
 8006a66:	b118      	cbz	r0, 8006a70 <_puts_r+0x10>
 8006a68:	6983      	ldr	r3, [r0, #24]
 8006a6a:	b90b      	cbnz	r3, 8006a70 <_puts_r+0x10>
 8006a6c:	f001 f900 	bl	8007c70 <__sinit>
 8006a70:	69ab      	ldr	r3, [r5, #24]
 8006a72:	68ac      	ldr	r4, [r5, #8]
 8006a74:	b913      	cbnz	r3, 8006a7c <_puts_r+0x1c>
 8006a76:	4628      	mov	r0, r5
 8006a78:	f001 f8fa 	bl	8007c70 <__sinit>
 8006a7c:	4b23      	ldr	r3, [pc, #140]	; (8006b0c <_puts_r+0xac>)
 8006a7e:	429c      	cmp	r4, r3
 8006a80:	d117      	bne.n	8006ab2 <_puts_r+0x52>
 8006a82:	686c      	ldr	r4, [r5, #4]
 8006a84:	89a3      	ldrh	r3, [r4, #12]
 8006a86:	071b      	lsls	r3, r3, #28
 8006a88:	d51d      	bpl.n	8006ac6 <_puts_r+0x66>
 8006a8a:	6923      	ldr	r3, [r4, #16]
 8006a8c:	b1db      	cbz	r3, 8006ac6 <_puts_r+0x66>
 8006a8e:	3e01      	subs	r6, #1
 8006a90:	68a3      	ldr	r3, [r4, #8]
 8006a92:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006a96:	3b01      	subs	r3, #1
 8006a98:	60a3      	str	r3, [r4, #8]
 8006a9a:	b9e9      	cbnz	r1, 8006ad8 <_puts_r+0x78>
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	da2e      	bge.n	8006afe <_puts_r+0x9e>
 8006aa0:	4622      	mov	r2, r4
 8006aa2:	210a      	movs	r1, #10
 8006aa4:	4628      	mov	r0, r5
 8006aa6:	f000 f8ed 	bl	8006c84 <__swbuf_r>
 8006aaa:	3001      	adds	r0, #1
 8006aac:	d011      	beq.n	8006ad2 <_puts_r+0x72>
 8006aae:	200a      	movs	r0, #10
 8006ab0:	e011      	b.n	8006ad6 <_puts_r+0x76>
 8006ab2:	4b17      	ldr	r3, [pc, #92]	; (8006b10 <_puts_r+0xb0>)
 8006ab4:	429c      	cmp	r4, r3
 8006ab6:	d101      	bne.n	8006abc <_puts_r+0x5c>
 8006ab8:	68ac      	ldr	r4, [r5, #8]
 8006aba:	e7e3      	b.n	8006a84 <_puts_r+0x24>
 8006abc:	4b15      	ldr	r3, [pc, #84]	; (8006b14 <_puts_r+0xb4>)
 8006abe:	429c      	cmp	r4, r3
 8006ac0:	bf08      	it	eq
 8006ac2:	68ec      	ldreq	r4, [r5, #12]
 8006ac4:	e7de      	b.n	8006a84 <_puts_r+0x24>
 8006ac6:	4621      	mov	r1, r4
 8006ac8:	4628      	mov	r0, r5
 8006aca:	f000 f92d 	bl	8006d28 <__swsetup_r>
 8006ace:	2800      	cmp	r0, #0
 8006ad0:	d0dd      	beq.n	8006a8e <_puts_r+0x2e>
 8006ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ad6:	bd70      	pop	{r4, r5, r6, pc}
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	da04      	bge.n	8006ae6 <_puts_r+0x86>
 8006adc:	69a2      	ldr	r2, [r4, #24]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	dc06      	bgt.n	8006af0 <_puts_r+0x90>
 8006ae2:	290a      	cmp	r1, #10
 8006ae4:	d004      	beq.n	8006af0 <_puts_r+0x90>
 8006ae6:	6823      	ldr	r3, [r4, #0]
 8006ae8:	1c5a      	adds	r2, r3, #1
 8006aea:	6022      	str	r2, [r4, #0]
 8006aec:	7019      	strb	r1, [r3, #0]
 8006aee:	e7cf      	b.n	8006a90 <_puts_r+0x30>
 8006af0:	4622      	mov	r2, r4
 8006af2:	4628      	mov	r0, r5
 8006af4:	f000 f8c6 	bl	8006c84 <__swbuf_r>
 8006af8:	3001      	adds	r0, #1
 8006afa:	d1c9      	bne.n	8006a90 <_puts_r+0x30>
 8006afc:	e7e9      	b.n	8006ad2 <_puts_r+0x72>
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	200a      	movs	r0, #10
 8006b02:	1c5a      	adds	r2, r3, #1
 8006b04:	6022      	str	r2, [r4, #0]
 8006b06:	7018      	strb	r0, [r3, #0]
 8006b08:	e7e5      	b.n	8006ad6 <_puts_r+0x76>
 8006b0a:	bf00      	nop
 8006b0c:	08008b50 	.word	0x08008b50
 8006b10:	08008b70 	.word	0x08008b70
 8006b14:	08008b30 	.word	0x08008b30

08006b18 <puts>:
 8006b18:	4b02      	ldr	r3, [pc, #8]	; (8006b24 <puts+0xc>)
 8006b1a:	4601      	mov	r1, r0
 8006b1c:	6818      	ldr	r0, [r3, #0]
 8006b1e:	f7ff bf9f 	b.w	8006a60 <_puts_r>
 8006b22:	bf00      	nop
 8006b24:	200016ec 	.word	0x200016ec

08006b28 <setvbuf>:
 8006b28:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006b2c:	461d      	mov	r5, r3
 8006b2e:	4b51      	ldr	r3, [pc, #324]	; (8006c74 <setvbuf+0x14c>)
 8006b30:	681e      	ldr	r6, [r3, #0]
 8006b32:	4604      	mov	r4, r0
 8006b34:	460f      	mov	r7, r1
 8006b36:	4690      	mov	r8, r2
 8006b38:	b126      	cbz	r6, 8006b44 <setvbuf+0x1c>
 8006b3a:	69b3      	ldr	r3, [r6, #24]
 8006b3c:	b913      	cbnz	r3, 8006b44 <setvbuf+0x1c>
 8006b3e:	4630      	mov	r0, r6
 8006b40:	f001 f896 	bl	8007c70 <__sinit>
 8006b44:	4b4c      	ldr	r3, [pc, #304]	; (8006c78 <setvbuf+0x150>)
 8006b46:	429c      	cmp	r4, r3
 8006b48:	d152      	bne.n	8006bf0 <setvbuf+0xc8>
 8006b4a:	6874      	ldr	r4, [r6, #4]
 8006b4c:	f1b8 0f02 	cmp.w	r8, #2
 8006b50:	d006      	beq.n	8006b60 <setvbuf+0x38>
 8006b52:	f1b8 0f01 	cmp.w	r8, #1
 8006b56:	f200 8089 	bhi.w	8006c6c <setvbuf+0x144>
 8006b5a:	2d00      	cmp	r5, #0
 8006b5c:	f2c0 8086 	blt.w	8006c6c <setvbuf+0x144>
 8006b60:	4621      	mov	r1, r4
 8006b62:	4630      	mov	r0, r6
 8006b64:	f001 f81a 	bl	8007b9c <_fflush_r>
 8006b68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b6a:	b141      	cbz	r1, 8006b7e <setvbuf+0x56>
 8006b6c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006b70:	4299      	cmp	r1, r3
 8006b72:	d002      	beq.n	8006b7a <setvbuf+0x52>
 8006b74:	4630      	mov	r0, r6
 8006b76:	f001 fc69 	bl	800844c <_free_r>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	6363      	str	r3, [r4, #52]	; 0x34
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61a3      	str	r3, [r4, #24]
 8006b82:	6063      	str	r3, [r4, #4]
 8006b84:	89a3      	ldrh	r3, [r4, #12]
 8006b86:	061b      	lsls	r3, r3, #24
 8006b88:	d503      	bpl.n	8006b92 <setvbuf+0x6a>
 8006b8a:	6921      	ldr	r1, [r4, #16]
 8006b8c:	4630      	mov	r0, r6
 8006b8e:	f001 fc5d 	bl	800844c <_free_r>
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8006b98:	f023 0303 	bic.w	r3, r3, #3
 8006b9c:	f1b8 0f02 	cmp.w	r8, #2
 8006ba0:	81a3      	strh	r3, [r4, #12]
 8006ba2:	d05d      	beq.n	8006c60 <setvbuf+0x138>
 8006ba4:	ab01      	add	r3, sp, #4
 8006ba6:	466a      	mov	r2, sp
 8006ba8:	4621      	mov	r1, r4
 8006baa:	4630      	mov	r0, r6
 8006bac:	f001 f8f8 	bl	8007da0 <__swhatbuf_r>
 8006bb0:	89a3      	ldrh	r3, [r4, #12]
 8006bb2:	4318      	orrs	r0, r3
 8006bb4:	81a0      	strh	r0, [r4, #12]
 8006bb6:	bb2d      	cbnz	r5, 8006c04 <setvbuf+0xdc>
 8006bb8:	9d00      	ldr	r5, [sp, #0]
 8006bba:	4628      	mov	r0, r5
 8006bbc:	f001 f954 	bl	8007e68 <malloc>
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	2800      	cmp	r0, #0
 8006bc4:	d14e      	bne.n	8006c64 <setvbuf+0x13c>
 8006bc6:	f8dd 9000 	ldr.w	r9, [sp]
 8006bca:	45a9      	cmp	r9, r5
 8006bcc:	d13c      	bne.n	8006c48 <setvbuf+0x120>
 8006bce:	f04f 30ff 	mov.w	r0, #4294967295
 8006bd2:	89a3      	ldrh	r3, [r4, #12]
 8006bd4:	f043 0302 	orr.w	r3, r3, #2
 8006bd8:	81a3      	strh	r3, [r4, #12]
 8006bda:	2300      	movs	r3, #0
 8006bdc:	60a3      	str	r3, [r4, #8]
 8006bde:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006be2:	6023      	str	r3, [r4, #0]
 8006be4:	6123      	str	r3, [r4, #16]
 8006be6:	2301      	movs	r3, #1
 8006be8:	6163      	str	r3, [r4, #20]
 8006bea:	b003      	add	sp, #12
 8006bec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006bf0:	4b22      	ldr	r3, [pc, #136]	; (8006c7c <setvbuf+0x154>)
 8006bf2:	429c      	cmp	r4, r3
 8006bf4:	d101      	bne.n	8006bfa <setvbuf+0xd2>
 8006bf6:	68b4      	ldr	r4, [r6, #8]
 8006bf8:	e7a8      	b.n	8006b4c <setvbuf+0x24>
 8006bfa:	4b21      	ldr	r3, [pc, #132]	; (8006c80 <setvbuf+0x158>)
 8006bfc:	429c      	cmp	r4, r3
 8006bfe:	bf08      	it	eq
 8006c00:	68f4      	ldreq	r4, [r6, #12]
 8006c02:	e7a3      	b.n	8006b4c <setvbuf+0x24>
 8006c04:	2f00      	cmp	r7, #0
 8006c06:	d0d8      	beq.n	8006bba <setvbuf+0x92>
 8006c08:	69b3      	ldr	r3, [r6, #24]
 8006c0a:	b913      	cbnz	r3, 8006c12 <setvbuf+0xea>
 8006c0c:	4630      	mov	r0, r6
 8006c0e:	f001 f82f 	bl	8007c70 <__sinit>
 8006c12:	f1b8 0f01 	cmp.w	r8, #1
 8006c16:	bf08      	it	eq
 8006c18:	89a3      	ldrheq	r3, [r4, #12]
 8006c1a:	6027      	str	r7, [r4, #0]
 8006c1c:	bf04      	itt	eq
 8006c1e:	f043 0301 	orreq.w	r3, r3, #1
 8006c22:	81a3      	strheq	r3, [r4, #12]
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	f013 0008 	ands.w	r0, r3, #8
 8006c2a:	e9c4 7504 	strd	r7, r5, [r4, #16]
 8006c2e:	d01b      	beq.n	8006c68 <setvbuf+0x140>
 8006c30:	f013 0001 	ands.w	r0, r3, #1
 8006c34:	bf18      	it	ne
 8006c36:	426d      	negne	r5, r5
 8006c38:	f04f 0300 	mov.w	r3, #0
 8006c3c:	bf1d      	ittte	ne
 8006c3e:	60a3      	strne	r3, [r4, #8]
 8006c40:	61a5      	strne	r5, [r4, #24]
 8006c42:	4618      	movne	r0, r3
 8006c44:	60a5      	streq	r5, [r4, #8]
 8006c46:	e7d0      	b.n	8006bea <setvbuf+0xc2>
 8006c48:	4648      	mov	r0, r9
 8006c4a:	f001 f90d 	bl	8007e68 <malloc>
 8006c4e:	4607      	mov	r7, r0
 8006c50:	2800      	cmp	r0, #0
 8006c52:	d0bc      	beq.n	8006bce <setvbuf+0xa6>
 8006c54:	89a3      	ldrh	r3, [r4, #12]
 8006c56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c5a:	81a3      	strh	r3, [r4, #12]
 8006c5c:	464d      	mov	r5, r9
 8006c5e:	e7d3      	b.n	8006c08 <setvbuf+0xe0>
 8006c60:	2000      	movs	r0, #0
 8006c62:	e7b6      	b.n	8006bd2 <setvbuf+0xaa>
 8006c64:	46a9      	mov	r9, r5
 8006c66:	e7f5      	b.n	8006c54 <setvbuf+0x12c>
 8006c68:	60a0      	str	r0, [r4, #8]
 8006c6a:	e7be      	b.n	8006bea <setvbuf+0xc2>
 8006c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006c70:	e7bb      	b.n	8006bea <setvbuf+0xc2>
 8006c72:	bf00      	nop
 8006c74:	200016ec 	.word	0x200016ec
 8006c78:	08008b50 	.word	0x08008b50
 8006c7c:	08008b70 	.word	0x08008b70
 8006c80:	08008b30 	.word	0x08008b30

08006c84 <__swbuf_r>:
 8006c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c86:	460e      	mov	r6, r1
 8006c88:	4614      	mov	r4, r2
 8006c8a:	4605      	mov	r5, r0
 8006c8c:	b118      	cbz	r0, 8006c96 <__swbuf_r+0x12>
 8006c8e:	6983      	ldr	r3, [r0, #24]
 8006c90:	b90b      	cbnz	r3, 8006c96 <__swbuf_r+0x12>
 8006c92:	f000 ffed 	bl	8007c70 <__sinit>
 8006c96:	4b21      	ldr	r3, [pc, #132]	; (8006d1c <__swbuf_r+0x98>)
 8006c98:	429c      	cmp	r4, r3
 8006c9a:	d12a      	bne.n	8006cf2 <__swbuf_r+0x6e>
 8006c9c:	686c      	ldr	r4, [r5, #4]
 8006c9e:	69a3      	ldr	r3, [r4, #24]
 8006ca0:	60a3      	str	r3, [r4, #8]
 8006ca2:	89a3      	ldrh	r3, [r4, #12]
 8006ca4:	071a      	lsls	r2, r3, #28
 8006ca6:	d52e      	bpl.n	8006d06 <__swbuf_r+0x82>
 8006ca8:	6923      	ldr	r3, [r4, #16]
 8006caa:	b363      	cbz	r3, 8006d06 <__swbuf_r+0x82>
 8006cac:	6923      	ldr	r3, [r4, #16]
 8006cae:	6820      	ldr	r0, [r4, #0]
 8006cb0:	1ac0      	subs	r0, r0, r3
 8006cb2:	6963      	ldr	r3, [r4, #20]
 8006cb4:	b2f6      	uxtb	r6, r6
 8006cb6:	4283      	cmp	r3, r0
 8006cb8:	4637      	mov	r7, r6
 8006cba:	dc04      	bgt.n	8006cc6 <__swbuf_r+0x42>
 8006cbc:	4621      	mov	r1, r4
 8006cbe:	4628      	mov	r0, r5
 8006cc0:	f000 ff6c 	bl	8007b9c <_fflush_r>
 8006cc4:	bb28      	cbnz	r0, 8006d12 <__swbuf_r+0x8e>
 8006cc6:	68a3      	ldr	r3, [r4, #8]
 8006cc8:	3b01      	subs	r3, #1
 8006cca:	60a3      	str	r3, [r4, #8]
 8006ccc:	6823      	ldr	r3, [r4, #0]
 8006cce:	1c5a      	adds	r2, r3, #1
 8006cd0:	6022      	str	r2, [r4, #0]
 8006cd2:	701e      	strb	r6, [r3, #0]
 8006cd4:	6963      	ldr	r3, [r4, #20]
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	4283      	cmp	r3, r0
 8006cda:	d004      	beq.n	8006ce6 <__swbuf_r+0x62>
 8006cdc:	89a3      	ldrh	r3, [r4, #12]
 8006cde:	07db      	lsls	r3, r3, #31
 8006ce0:	d519      	bpl.n	8006d16 <__swbuf_r+0x92>
 8006ce2:	2e0a      	cmp	r6, #10
 8006ce4:	d117      	bne.n	8006d16 <__swbuf_r+0x92>
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	4628      	mov	r0, r5
 8006cea:	f000 ff57 	bl	8007b9c <_fflush_r>
 8006cee:	b190      	cbz	r0, 8006d16 <__swbuf_r+0x92>
 8006cf0:	e00f      	b.n	8006d12 <__swbuf_r+0x8e>
 8006cf2:	4b0b      	ldr	r3, [pc, #44]	; (8006d20 <__swbuf_r+0x9c>)
 8006cf4:	429c      	cmp	r4, r3
 8006cf6:	d101      	bne.n	8006cfc <__swbuf_r+0x78>
 8006cf8:	68ac      	ldr	r4, [r5, #8]
 8006cfa:	e7d0      	b.n	8006c9e <__swbuf_r+0x1a>
 8006cfc:	4b09      	ldr	r3, [pc, #36]	; (8006d24 <__swbuf_r+0xa0>)
 8006cfe:	429c      	cmp	r4, r3
 8006d00:	bf08      	it	eq
 8006d02:	68ec      	ldreq	r4, [r5, #12]
 8006d04:	e7cb      	b.n	8006c9e <__swbuf_r+0x1a>
 8006d06:	4621      	mov	r1, r4
 8006d08:	4628      	mov	r0, r5
 8006d0a:	f000 f80d 	bl	8006d28 <__swsetup_r>
 8006d0e:	2800      	cmp	r0, #0
 8006d10:	d0cc      	beq.n	8006cac <__swbuf_r+0x28>
 8006d12:	f04f 37ff 	mov.w	r7, #4294967295
 8006d16:	4638      	mov	r0, r7
 8006d18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d1a:	bf00      	nop
 8006d1c:	08008b50 	.word	0x08008b50
 8006d20:	08008b70 	.word	0x08008b70
 8006d24:	08008b30 	.word	0x08008b30

08006d28 <__swsetup_r>:
 8006d28:	4b32      	ldr	r3, [pc, #200]	; (8006df4 <__swsetup_r+0xcc>)
 8006d2a:	b570      	push	{r4, r5, r6, lr}
 8006d2c:	681d      	ldr	r5, [r3, #0]
 8006d2e:	4606      	mov	r6, r0
 8006d30:	460c      	mov	r4, r1
 8006d32:	b125      	cbz	r5, 8006d3e <__swsetup_r+0x16>
 8006d34:	69ab      	ldr	r3, [r5, #24]
 8006d36:	b913      	cbnz	r3, 8006d3e <__swsetup_r+0x16>
 8006d38:	4628      	mov	r0, r5
 8006d3a:	f000 ff99 	bl	8007c70 <__sinit>
 8006d3e:	4b2e      	ldr	r3, [pc, #184]	; (8006df8 <__swsetup_r+0xd0>)
 8006d40:	429c      	cmp	r4, r3
 8006d42:	d10f      	bne.n	8006d64 <__swsetup_r+0x3c>
 8006d44:	686c      	ldr	r4, [r5, #4]
 8006d46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	0715      	lsls	r5, r2, #28
 8006d4e:	d42c      	bmi.n	8006daa <__swsetup_r+0x82>
 8006d50:	06d0      	lsls	r0, r2, #27
 8006d52:	d411      	bmi.n	8006d78 <__swsetup_r+0x50>
 8006d54:	2209      	movs	r2, #9
 8006d56:	6032      	str	r2, [r6, #0]
 8006d58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d62:	e03e      	b.n	8006de2 <__swsetup_r+0xba>
 8006d64:	4b25      	ldr	r3, [pc, #148]	; (8006dfc <__swsetup_r+0xd4>)
 8006d66:	429c      	cmp	r4, r3
 8006d68:	d101      	bne.n	8006d6e <__swsetup_r+0x46>
 8006d6a:	68ac      	ldr	r4, [r5, #8]
 8006d6c:	e7eb      	b.n	8006d46 <__swsetup_r+0x1e>
 8006d6e:	4b24      	ldr	r3, [pc, #144]	; (8006e00 <__swsetup_r+0xd8>)
 8006d70:	429c      	cmp	r4, r3
 8006d72:	bf08      	it	eq
 8006d74:	68ec      	ldreq	r4, [r5, #12]
 8006d76:	e7e6      	b.n	8006d46 <__swsetup_r+0x1e>
 8006d78:	0751      	lsls	r1, r2, #29
 8006d7a:	d512      	bpl.n	8006da2 <__swsetup_r+0x7a>
 8006d7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d7e:	b141      	cbz	r1, 8006d92 <__swsetup_r+0x6a>
 8006d80:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d84:	4299      	cmp	r1, r3
 8006d86:	d002      	beq.n	8006d8e <__swsetup_r+0x66>
 8006d88:	4630      	mov	r0, r6
 8006d8a:	f001 fb5f 	bl	800844c <_free_r>
 8006d8e:	2300      	movs	r3, #0
 8006d90:	6363      	str	r3, [r4, #52]	; 0x34
 8006d92:	89a3      	ldrh	r3, [r4, #12]
 8006d94:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d98:	81a3      	strh	r3, [r4, #12]
 8006d9a:	2300      	movs	r3, #0
 8006d9c:	6063      	str	r3, [r4, #4]
 8006d9e:	6923      	ldr	r3, [r4, #16]
 8006da0:	6023      	str	r3, [r4, #0]
 8006da2:	89a3      	ldrh	r3, [r4, #12]
 8006da4:	f043 0308 	orr.w	r3, r3, #8
 8006da8:	81a3      	strh	r3, [r4, #12]
 8006daa:	6923      	ldr	r3, [r4, #16]
 8006dac:	b94b      	cbnz	r3, 8006dc2 <__swsetup_r+0x9a>
 8006dae:	89a3      	ldrh	r3, [r4, #12]
 8006db0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006db8:	d003      	beq.n	8006dc2 <__swsetup_r+0x9a>
 8006dba:	4621      	mov	r1, r4
 8006dbc:	4630      	mov	r0, r6
 8006dbe:	f001 f813 	bl	8007de8 <__smakebuf_r>
 8006dc2:	89a2      	ldrh	r2, [r4, #12]
 8006dc4:	f012 0301 	ands.w	r3, r2, #1
 8006dc8:	d00c      	beq.n	8006de4 <__swsetup_r+0xbc>
 8006dca:	2300      	movs	r3, #0
 8006dcc:	60a3      	str	r3, [r4, #8]
 8006dce:	6963      	ldr	r3, [r4, #20]
 8006dd0:	425b      	negs	r3, r3
 8006dd2:	61a3      	str	r3, [r4, #24]
 8006dd4:	6923      	ldr	r3, [r4, #16]
 8006dd6:	b953      	cbnz	r3, 8006dee <__swsetup_r+0xc6>
 8006dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ddc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8006de0:	d1ba      	bne.n	8006d58 <__swsetup_r+0x30>
 8006de2:	bd70      	pop	{r4, r5, r6, pc}
 8006de4:	0792      	lsls	r2, r2, #30
 8006de6:	bf58      	it	pl
 8006de8:	6963      	ldrpl	r3, [r4, #20]
 8006dea:	60a3      	str	r3, [r4, #8]
 8006dec:	e7f2      	b.n	8006dd4 <__swsetup_r+0xac>
 8006dee:	2000      	movs	r0, #0
 8006df0:	e7f7      	b.n	8006de2 <__swsetup_r+0xba>
 8006df2:	bf00      	nop
 8006df4:	200016ec 	.word	0x200016ec
 8006df8:	08008b50 	.word	0x08008b50
 8006dfc:	08008b70 	.word	0x08008b70
 8006e00:	08008b30 	.word	0x08008b30

08006e04 <quorem>:
 8006e04:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e08:	6903      	ldr	r3, [r0, #16]
 8006e0a:	690c      	ldr	r4, [r1, #16]
 8006e0c:	42a3      	cmp	r3, r4
 8006e0e:	4680      	mov	r8, r0
 8006e10:	f2c0 8082 	blt.w	8006f18 <quorem+0x114>
 8006e14:	3c01      	subs	r4, #1
 8006e16:	f101 0714 	add.w	r7, r1, #20
 8006e1a:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8006e1e:	f100 0614 	add.w	r6, r0, #20
 8006e22:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8006e26:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8006e2a:	eb06 030c 	add.w	r3, r6, ip
 8006e2e:	3501      	adds	r5, #1
 8006e30:	eb07 090c 	add.w	r9, r7, ip
 8006e34:	9301      	str	r3, [sp, #4]
 8006e36:	fbb0 f5f5 	udiv	r5, r0, r5
 8006e3a:	b395      	cbz	r5, 8006ea2 <quorem+0x9e>
 8006e3c:	f04f 0a00 	mov.w	sl, #0
 8006e40:	4638      	mov	r0, r7
 8006e42:	46b6      	mov	lr, r6
 8006e44:	46d3      	mov	fp, sl
 8006e46:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e4a:	b293      	uxth	r3, r2
 8006e4c:	fb05 a303 	mla	r3, r5, r3, sl
 8006e50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e54:	b29b      	uxth	r3, r3
 8006e56:	ebab 0303 	sub.w	r3, fp, r3
 8006e5a:	0c12      	lsrs	r2, r2, #16
 8006e5c:	f8de b000 	ldr.w	fp, [lr]
 8006e60:	fb05 a202 	mla	r2, r5, r2, sl
 8006e64:	fa13 f38b 	uxtah	r3, r3, fp
 8006e68:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8006e6c:	fa1f fb82 	uxth.w	fp, r2
 8006e70:	f8de 2000 	ldr.w	r2, [lr]
 8006e74:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8006e78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e82:	4581      	cmp	r9, r0
 8006e84:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8006e88:	f84e 3b04 	str.w	r3, [lr], #4
 8006e8c:	d2db      	bcs.n	8006e46 <quorem+0x42>
 8006e8e:	f856 300c 	ldr.w	r3, [r6, ip]
 8006e92:	b933      	cbnz	r3, 8006ea2 <quorem+0x9e>
 8006e94:	9b01      	ldr	r3, [sp, #4]
 8006e96:	3b04      	subs	r3, #4
 8006e98:	429e      	cmp	r6, r3
 8006e9a:	461a      	mov	r2, r3
 8006e9c:	d330      	bcc.n	8006f00 <quorem+0xfc>
 8006e9e:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ea2:	4640      	mov	r0, r8
 8006ea4:	f001 f9fe 	bl	80082a4 <__mcmp>
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	db25      	blt.n	8006ef8 <quorem+0xf4>
 8006eac:	3501      	adds	r5, #1
 8006eae:	4630      	mov	r0, r6
 8006eb0:	f04f 0c00 	mov.w	ip, #0
 8006eb4:	f857 2b04 	ldr.w	r2, [r7], #4
 8006eb8:	f8d0 e000 	ldr.w	lr, [r0]
 8006ebc:	b293      	uxth	r3, r2
 8006ebe:	ebac 0303 	sub.w	r3, ip, r3
 8006ec2:	0c12      	lsrs	r2, r2, #16
 8006ec4:	fa13 f38e 	uxtah	r3, r3, lr
 8006ec8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ecc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ed0:	b29b      	uxth	r3, r3
 8006ed2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006ed6:	45b9      	cmp	r9, r7
 8006ed8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006edc:	f840 3b04 	str.w	r3, [r0], #4
 8006ee0:	d2e8      	bcs.n	8006eb4 <quorem+0xb0>
 8006ee2:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 8006ee6:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8006eea:	b92a      	cbnz	r2, 8006ef8 <quorem+0xf4>
 8006eec:	3b04      	subs	r3, #4
 8006eee:	429e      	cmp	r6, r3
 8006ef0:	461a      	mov	r2, r3
 8006ef2:	d30b      	bcc.n	8006f0c <quorem+0x108>
 8006ef4:	f8c8 4010 	str.w	r4, [r8, #16]
 8006ef8:	4628      	mov	r0, r5
 8006efa:	b003      	add	sp, #12
 8006efc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f00:	6812      	ldr	r2, [r2, #0]
 8006f02:	3b04      	subs	r3, #4
 8006f04:	2a00      	cmp	r2, #0
 8006f06:	d1ca      	bne.n	8006e9e <quorem+0x9a>
 8006f08:	3c01      	subs	r4, #1
 8006f0a:	e7c5      	b.n	8006e98 <quorem+0x94>
 8006f0c:	6812      	ldr	r2, [r2, #0]
 8006f0e:	3b04      	subs	r3, #4
 8006f10:	2a00      	cmp	r2, #0
 8006f12:	d1ef      	bne.n	8006ef4 <quorem+0xf0>
 8006f14:	3c01      	subs	r4, #1
 8006f16:	e7ea      	b.n	8006eee <quorem+0xea>
 8006f18:	2000      	movs	r0, #0
 8006f1a:	e7ee      	b.n	8006efa <quorem+0xf6>
 8006f1c:	0000      	movs	r0, r0
	...

08006f20 <_dtoa_r>:
 8006f20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f24:	ec57 6b10 	vmov	r6, r7, d0
 8006f28:	b097      	sub	sp, #92	; 0x5c
 8006f2a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f2c:	9106      	str	r1, [sp, #24]
 8006f2e:	4604      	mov	r4, r0
 8006f30:	920b      	str	r2, [sp, #44]	; 0x2c
 8006f32:	9312      	str	r3, [sp, #72]	; 0x48
 8006f34:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006f38:	e9cd 6700 	strd	r6, r7, [sp]
 8006f3c:	b93d      	cbnz	r5, 8006f4e <_dtoa_r+0x2e>
 8006f3e:	2010      	movs	r0, #16
 8006f40:	f000 ff92 	bl	8007e68 <malloc>
 8006f44:	6260      	str	r0, [r4, #36]	; 0x24
 8006f46:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f4a:	6005      	str	r5, [r0, #0]
 8006f4c:	60c5      	str	r5, [r0, #12]
 8006f4e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f50:	6819      	ldr	r1, [r3, #0]
 8006f52:	b151      	cbz	r1, 8006f6a <_dtoa_r+0x4a>
 8006f54:	685a      	ldr	r2, [r3, #4]
 8006f56:	604a      	str	r2, [r1, #4]
 8006f58:	2301      	movs	r3, #1
 8006f5a:	4093      	lsls	r3, r2
 8006f5c:	608b      	str	r3, [r1, #8]
 8006f5e:	4620      	mov	r0, r4
 8006f60:	f000 ffbe 	bl	8007ee0 <_Bfree>
 8006f64:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006f66:	2200      	movs	r2, #0
 8006f68:	601a      	str	r2, [r3, #0]
 8006f6a:	1e3b      	subs	r3, r7, #0
 8006f6c:	bfbb      	ittet	lt
 8006f6e:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f72:	9301      	strlt	r3, [sp, #4]
 8006f74:	2300      	movge	r3, #0
 8006f76:	2201      	movlt	r2, #1
 8006f78:	bfac      	ite	ge
 8006f7a:	f8c8 3000 	strge.w	r3, [r8]
 8006f7e:	f8c8 2000 	strlt.w	r2, [r8]
 8006f82:	4baf      	ldr	r3, [pc, #700]	; (8007240 <_dtoa_r+0x320>)
 8006f84:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8006f88:	ea33 0308 	bics.w	r3, r3, r8
 8006f8c:	d114      	bne.n	8006fb8 <_dtoa_r+0x98>
 8006f8e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f90:	f242 730f 	movw	r3, #9999	; 0x270f
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	9b00      	ldr	r3, [sp, #0]
 8006f98:	b923      	cbnz	r3, 8006fa4 <_dtoa_r+0x84>
 8006f9a:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8006f9e:	2800      	cmp	r0, #0
 8006fa0:	f000 8542 	beq.w	8007a28 <_dtoa_r+0xb08>
 8006fa4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fa6:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 8007254 <_dtoa_r+0x334>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 8544 	beq.w	8007a38 <_dtoa_r+0xb18>
 8006fb0:	f10b 0303 	add.w	r3, fp, #3
 8006fb4:	f000 bd3e 	b.w	8007a34 <_dtoa_r+0xb14>
 8006fb8:	e9dd 6700 	ldrd	r6, r7, [sp]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	4630      	mov	r0, r6
 8006fc2:	4639      	mov	r1, r7
 8006fc4:	f7f9 fd2c 	bl	8000a20 <__aeabi_dcmpeq>
 8006fc8:	4681      	mov	r9, r0
 8006fca:	b168      	cbz	r0, 8006fe8 <_dtoa_r+0xc8>
 8006fcc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fce:	2301      	movs	r3, #1
 8006fd0:	6013      	str	r3, [r2, #0]
 8006fd2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	f000 8524 	beq.w	8007a22 <_dtoa_r+0xb02>
 8006fda:	4b9a      	ldr	r3, [pc, #616]	; (8007244 <_dtoa_r+0x324>)
 8006fdc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8006fde:	f103 3bff 	add.w	fp, r3, #4294967295
 8006fe2:	6013      	str	r3, [r2, #0]
 8006fe4:	f000 bd28 	b.w	8007a38 <_dtoa_r+0xb18>
 8006fe8:	aa14      	add	r2, sp, #80	; 0x50
 8006fea:	a915      	add	r1, sp, #84	; 0x54
 8006fec:	ec47 6b10 	vmov	d0, r6, r7
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f001 f9ce 	bl	8008392 <__d2b>
 8006ff6:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8006ffa:	9004      	str	r0, [sp, #16]
 8006ffc:	2d00      	cmp	r5, #0
 8006ffe:	d07c      	beq.n	80070fa <_dtoa_r+0x1da>
 8007000:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007004:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 8007008:	46b2      	mov	sl, r6
 800700a:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 800700e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8007012:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 8007016:	2200      	movs	r2, #0
 8007018:	4b8b      	ldr	r3, [pc, #556]	; (8007248 <_dtoa_r+0x328>)
 800701a:	4650      	mov	r0, sl
 800701c:	4659      	mov	r1, fp
 800701e:	f7f9 f8df 	bl	80001e0 <__aeabi_dsub>
 8007022:	a381      	add	r3, pc, #516	; (adr r3, 8007228 <_dtoa_r+0x308>)
 8007024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007028:	f7f9 fa92 	bl	8000550 <__aeabi_dmul>
 800702c:	a380      	add	r3, pc, #512	; (adr r3, 8007230 <_dtoa_r+0x310>)
 800702e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007032:	f7f9 f8d7 	bl	80001e4 <__adddf3>
 8007036:	4606      	mov	r6, r0
 8007038:	4628      	mov	r0, r5
 800703a:	460f      	mov	r7, r1
 800703c:	f7f9 fa1e 	bl	800047c <__aeabi_i2d>
 8007040:	a37d      	add	r3, pc, #500	; (adr r3, 8007238 <_dtoa_r+0x318>)
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	f7f9 fa83 	bl	8000550 <__aeabi_dmul>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	4630      	mov	r0, r6
 8007050:	4639      	mov	r1, r7
 8007052:	f7f9 f8c7 	bl	80001e4 <__adddf3>
 8007056:	4606      	mov	r6, r0
 8007058:	460f      	mov	r7, r1
 800705a:	f7f9 fd29 	bl	8000ab0 <__aeabi_d2iz>
 800705e:	2200      	movs	r2, #0
 8007060:	4682      	mov	sl, r0
 8007062:	2300      	movs	r3, #0
 8007064:	4630      	mov	r0, r6
 8007066:	4639      	mov	r1, r7
 8007068:	f7f9 fce4 	bl	8000a34 <__aeabi_dcmplt>
 800706c:	b148      	cbz	r0, 8007082 <_dtoa_r+0x162>
 800706e:	4650      	mov	r0, sl
 8007070:	f7f9 fa04 	bl	800047c <__aeabi_i2d>
 8007074:	4632      	mov	r2, r6
 8007076:	463b      	mov	r3, r7
 8007078:	f7f9 fcd2 	bl	8000a20 <__aeabi_dcmpeq>
 800707c:	b908      	cbnz	r0, 8007082 <_dtoa_r+0x162>
 800707e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007082:	f1ba 0f16 	cmp.w	sl, #22
 8007086:	d859      	bhi.n	800713c <_dtoa_r+0x21c>
 8007088:	4970      	ldr	r1, [pc, #448]	; (800724c <_dtoa_r+0x32c>)
 800708a:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800708e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007092:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007096:	f7f9 fceb 	bl	8000a70 <__aeabi_dcmpgt>
 800709a:	2800      	cmp	r0, #0
 800709c:	d050      	beq.n	8007140 <_dtoa_r+0x220>
 800709e:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070a2:	2300      	movs	r3, #0
 80070a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80070a6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80070a8:	1b5d      	subs	r5, r3, r5
 80070aa:	f1b5 0801 	subs.w	r8, r5, #1
 80070ae:	bf49      	itett	mi
 80070b0:	f1c5 0301 	rsbmi	r3, r5, #1
 80070b4:	2300      	movpl	r3, #0
 80070b6:	9305      	strmi	r3, [sp, #20]
 80070b8:	f04f 0800 	movmi.w	r8, #0
 80070bc:	bf58      	it	pl
 80070be:	9305      	strpl	r3, [sp, #20]
 80070c0:	f1ba 0f00 	cmp.w	sl, #0
 80070c4:	db3e      	blt.n	8007144 <_dtoa_r+0x224>
 80070c6:	2300      	movs	r3, #0
 80070c8:	44d0      	add	r8, sl
 80070ca:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80070ce:	9307      	str	r3, [sp, #28]
 80070d0:	9b06      	ldr	r3, [sp, #24]
 80070d2:	2b09      	cmp	r3, #9
 80070d4:	f200 8090 	bhi.w	80071f8 <_dtoa_r+0x2d8>
 80070d8:	2b05      	cmp	r3, #5
 80070da:	bfc4      	itt	gt
 80070dc:	3b04      	subgt	r3, #4
 80070de:	9306      	strgt	r3, [sp, #24]
 80070e0:	9b06      	ldr	r3, [sp, #24]
 80070e2:	f1a3 0302 	sub.w	r3, r3, #2
 80070e6:	bfcc      	ite	gt
 80070e8:	2500      	movgt	r5, #0
 80070ea:	2501      	movle	r5, #1
 80070ec:	2b03      	cmp	r3, #3
 80070ee:	f200 808f 	bhi.w	8007210 <_dtoa_r+0x2f0>
 80070f2:	e8df f003 	tbb	[pc, r3]
 80070f6:	7f7d      	.short	0x7f7d
 80070f8:	7131      	.short	0x7131
 80070fa:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 80070fe:	441d      	add	r5, r3
 8007100:	f205 4032 	addw	r0, r5, #1074	; 0x432
 8007104:	2820      	cmp	r0, #32
 8007106:	dd13      	ble.n	8007130 <_dtoa_r+0x210>
 8007108:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 800710c:	9b00      	ldr	r3, [sp, #0]
 800710e:	fa08 f800 	lsl.w	r8, r8, r0
 8007112:	f205 4012 	addw	r0, r5, #1042	; 0x412
 8007116:	fa23 f000 	lsr.w	r0, r3, r0
 800711a:	ea48 0000 	orr.w	r0, r8, r0
 800711e:	f7f9 f99d 	bl	800045c <__aeabi_ui2d>
 8007122:	2301      	movs	r3, #1
 8007124:	4682      	mov	sl, r0
 8007126:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 800712a:	3d01      	subs	r5, #1
 800712c:	9313      	str	r3, [sp, #76]	; 0x4c
 800712e:	e772      	b.n	8007016 <_dtoa_r+0xf6>
 8007130:	9b00      	ldr	r3, [sp, #0]
 8007132:	f1c0 0020 	rsb	r0, r0, #32
 8007136:	fa03 f000 	lsl.w	r0, r3, r0
 800713a:	e7f0      	b.n	800711e <_dtoa_r+0x1fe>
 800713c:	2301      	movs	r3, #1
 800713e:	e7b1      	b.n	80070a4 <_dtoa_r+0x184>
 8007140:	900f      	str	r0, [sp, #60]	; 0x3c
 8007142:	e7b0      	b.n	80070a6 <_dtoa_r+0x186>
 8007144:	9b05      	ldr	r3, [sp, #20]
 8007146:	eba3 030a 	sub.w	r3, r3, sl
 800714a:	9305      	str	r3, [sp, #20]
 800714c:	f1ca 0300 	rsb	r3, sl, #0
 8007150:	9307      	str	r3, [sp, #28]
 8007152:	2300      	movs	r3, #0
 8007154:	930e      	str	r3, [sp, #56]	; 0x38
 8007156:	e7bb      	b.n	80070d0 <_dtoa_r+0x1b0>
 8007158:	2301      	movs	r3, #1
 800715a:	930a      	str	r3, [sp, #40]	; 0x28
 800715c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800715e:	2b00      	cmp	r3, #0
 8007160:	dd59      	ble.n	8007216 <_dtoa_r+0x2f6>
 8007162:	9302      	str	r3, [sp, #8]
 8007164:	4699      	mov	r9, r3
 8007166:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007168:	2200      	movs	r2, #0
 800716a:	6072      	str	r2, [r6, #4]
 800716c:	2204      	movs	r2, #4
 800716e:	f102 0014 	add.w	r0, r2, #20
 8007172:	4298      	cmp	r0, r3
 8007174:	6871      	ldr	r1, [r6, #4]
 8007176:	d953      	bls.n	8007220 <_dtoa_r+0x300>
 8007178:	4620      	mov	r0, r4
 800717a:	f000 fe7d 	bl	8007e78 <_Balloc>
 800717e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007180:	6030      	str	r0, [r6, #0]
 8007182:	f1b9 0f0e 	cmp.w	r9, #14
 8007186:	f8d3 b000 	ldr.w	fp, [r3]
 800718a:	f200 80e6 	bhi.w	800735a <_dtoa_r+0x43a>
 800718e:	2d00      	cmp	r5, #0
 8007190:	f000 80e3 	beq.w	800735a <_dtoa_r+0x43a>
 8007194:	ed9d 7b00 	vldr	d7, [sp]
 8007198:	f1ba 0f00 	cmp.w	sl, #0
 800719c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 80071a0:	dd74      	ble.n	800728c <_dtoa_r+0x36c>
 80071a2:	4a2a      	ldr	r2, [pc, #168]	; (800724c <_dtoa_r+0x32c>)
 80071a4:	f00a 030f 	and.w	r3, sl, #15
 80071a8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80071ac:	ed93 7b00 	vldr	d7, [r3]
 80071b0:	ea4f 162a 	mov.w	r6, sl, asr #4
 80071b4:	06f0      	lsls	r0, r6, #27
 80071b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80071ba:	d565      	bpl.n	8007288 <_dtoa_r+0x368>
 80071bc:	4b24      	ldr	r3, [pc, #144]	; (8007250 <_dtoa_r+0x330>)
 80071be:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80071c2:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071c6:	f7f9 faed 	bl	80007a4 <__aeabi_ddiv>
 80071ca:	e9cd 0100 	strd	r0, r1, [sp]
 80071ce:	f006 060f 	and.w	r6, r6, #15
 80071d2:	2503      	movs	r5, #3
 80071d4:	4f1e      	ldr	r7, [pc, #120]	; (8007250 <_dtoa_r+0x330>)
 80071d6:	e04c      	b.n	8007272 <_dtoa_r+0x352>
 80071d8:	2301      	movs	r3, #1
 80071da:	930a      	str	r3, [sp, #40]	; 0x28
 80071dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80071de:	4453      	add	r3, sl
 80071e0:	f103 0901 	add.w	r9, r3, #1
 80071e4:	9302      	str	r3, [sp, #8]
 80071e6:	464b      	mov	r3, r9
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	bfb8      	it	lt
 80071ec:	2301      	movlt	r3, #1
 80071ee:	e7ba      	b.n	8007166 <_dtoa_r+0x246>
 80071f0:	2300      	movs	r3, #0
 80071f2:	e7b2      	b.n	800715a <_dtoa_r+0x23a>
 80071f4:	2300      	movs	r3, #0
 80071f6:	e7f0      	b.n	80071da <_dtoa_r+0x2ba>
 80071f8:	2501      	movs	r5, #1
 80071fa:	2300      	movs	r3, #0
 80071fc:	9306      	str	r3, [sp, #24]
 80071fe:	950a      	str	r5, [sp, #40]	; 0x28
 8007200:	f04f 33ff 	mov.w	r3, #4294967295
 8007204:	9302      	str	r3, [sp, #8]
 8007206:	4699      	mov	r9, r3
 8007208:	2200      	movs	r2, #0
 800720a:	2312      	movs	r3, #18
 800720c:	920b      	str	r2, [sp, #44]	; 0x2c
 800720e:	e7aa      	b.n	8007166 <_dtoa_r+0x246>
 8007210:	2301      	movs	r3, #1
 8007212:	930a      	str	r3, [sp, #40]	; 0x28
 8007214:	e7f4      	b.n	8007200 <_dtoa_r+0x2e0>
 8007216:	2301      	movs	r3, #1
 8007218:	9302      	str	r3, [sp, #8]
 800721a:	4699      	mov	r9, r3
 800721c:	461a      	mov	r2, r3
 800721e:	e7f5      	b.n	800720c <_dtoa_r+0x2ec>
 8007220:	3101      	adds	r1, #1
 8007222:	6071      	str	r1, [r6, #4]
 8007224:	0052      	lsls	r2, r2, #1
 8007226:	e7a2      	b.n	800716e <_dtoa_r+0x24e>
 8007228:	636f4361 	.word	0x636f4361
 800722c:	3fd287a7 	.word	0x3fd287a7
 8007230:	8b60c8b3 	.word	0x8b60c8b3
 8007234:	3fc68a28 	.word	0x3fc68a28
 8007238:	509f79fb 	.word	0x509f79fb
 800723c:	3fd34413 	.word	0x3fd34413
 8007240:	7ff00000 	.word	0x7ff00000
 8007244:	08008b21 	.word	0x08008b21
 8007248:	3ff80000 	.word	0x3ff80000
 800724c:	08008bb8 	.word	0x08008bb8
 8007250:	08008b90 	.word	0x08008b90
 8007254:	08008b2b 	.word	0x08008b2b
 8007258:	07f1      	lsls	r1, r6, #31
 800725a:	d508      	bpl.n	800726e <_dtoa_r+0x34e>
 800725c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8007260:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007264:	f7f9 f974 	bl	8000550 <__aeabi_dmul>
 8007268:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800726c:	3501      	adds	r5, #1
 800726e:	1076      	asrs	r6, r6, #1
 8007270:	3708      	adds	r7, #8
 8007272:	2e00      	cmp	r6, #0
 8007274:	d1f0      	bne.n	8007258 <_dtoa_r+0x338>
 8007276:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800727a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800727e:	f7f9 fa91 	bl	80007a4 <__aeabi_ddiv>
 8007282:	e9cd 0100 	strd	r0, r1, [sp]
 8007286:	e01a      	b.n	80072be <_dtoa_r+0x39e>
 8007288:	2502      	movs	r5, #2
 800728a:	e7a3      	b.n	80071d4 <_dtoa_r+0x2b4>
 800728c:	f000 80a0 	beq.w	80073d0 <_dtoa_r+0x4b0>
 8007290:	f1ca 0600 	rsb	r6, sl, #0
 8007294:	4b9f      	ldr	r3, [pc, #636]	; (8007514 <_dtoa_r+0x5f4>)
 8007296:	4fa0      	ldr	r7, [pc, #640]	; (8007518 <_dtoa_r+0x5f8>)
 8007298:	f006 020f 	and.w	r2, r6, #15
 800729c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80072a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072a4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80072a8:	f7f9 f952 	bl	8000550 <__aeabi_dmul>
 80072ac:	e9cd 0100 	strd	r0, r1, [sp]
 80072b0:	1136      	asrs	r6, r6, #4
 80072b2:	2300      	movs	r3, #0
 80072b4:	2502      	movs	r5, #2
 80072b6:	2e00      	cmp	r6, #0
 80072b8:	d17f      	bne.n	80073ba <_dtoa_r+0x49a>
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e1      	bne.n	8007282 <_dtoa_r+0x362>
 80072be:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	f000 8087 	beq.w	80073d4 <_dtoa_r+0x4b4>
 80072c6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80072ca:	2200      	movs	r2, #0
 80072cc:	4b93      	ldr	r3, [pc, #588]	; (800751c <_dtoa_r+0x5fc>)
 80072ce:	4630      	mov	r0, r6
 80072d0:	4639      	mov	r1, r7
 80072d2:	f7f9 fbaf 	bl	8000a34 <__aeabi_dcmplt>
 80072d6:	2800      	cmp	r0, #0
 80072d8:	d07c      	beq.n	80073d4 <_dtoa_r+0x4b4>
 80072da:	f1b9 0f00 	cmp.w	r9, #0
 80072de:	d079      	beq.n	80073d4 <_dtoa_r+0x4b4>
 80072e0:	9b02      	ldr	r3, [sp, #8]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	dd35      	ble.n	8007352 <_dtoa_r+0x432>
 80072e6:	f10a 33ff 	add.w	r3, sl, #4294967295
 80072ea:	9308      	str	r3, [sp, #32]
 80072ec:	4639      	mov	r1, r7
 80072ee:	2200      	movs	r2, #0
 80072f0:	4b8b      	ldr	r3, [pc, #556]	; (8007520 <_dtoa_r+0x600>)
 80072f2:	4630      	mov	r0, r6
 80072f4:	f7f9 f92c 	bl	8000550 <__aeabi_dmul>
 80072f8:	e9cd 0100 	strd	r0, r1, [sp]
 80072fc:	9f02      	ldr	r7, [sp, #8]
 80072fe:	3501      	adds	r5, #1
 8007300:	4628      	mov	r0, r5
 8007302:	f7f9 f8bb 	bl	800047c <__aeabi_i2d>
 8007306:	e9dd 2300 	ldrd	r2, r3, [sp]
 800730a:	f7f9 f921 	bl	8000550 <__aeabi_dmul>
 800730e:	2200      	movs	r2, #0
 8007310:	4b84      	ldr	r3, [pc, #528]	; (8007524 <_dtoa_r+0x604>)
 8007312:	f7f8 ff67 	bl	80001e4 <__adddf3>
 8007316:	4605      	mov	r5, r0
 8007318:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800731c:	2f00      	cmp	r7, #0
 800731e:	d15d      	bne.n	80073dc <_dtoa_r+0x4bc>
 8007320:	2200      	movs	r2, #0
 8007322:	4b81      	ldr	r3, [pc, #516]	; (8007528 <_dtoa_r+0x608>)
 8007324:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007328:	f7f8 ff5a 	bl	80001e0 <__aeabi_dsub>
 800732c:	462a      	mov	r2, r5
 800732e:	4633      	mov	r3, r6
 8007330:	e9cd 0100 	strd	r0, r1, [sp]
 8007334:	f7f9 fb9c 	bl	8000a70 <__aeabi_dcmpgt>
 8007338:	2800      	cmp	r0, #0
 800733a:	f040 8288 	bne.w	800784e <_dtoa_r+0x92e>
 800733e:	462a      	mov	r2, r5
 8007340:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8007344:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007348:	f7f9 fb74 	bl	8000a34 <__aeabi_dcmplt>
 800734c:	2800      	cmp	r0, #0
 800734e:	f040 827c 	bne.w	800784a <_dtoa_r+0x92a>
 8007352:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007356:	e9cd 2300 	strd	r2, r3, [sp]
 800735a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800735c:	2b00      	cmp	r3, #0
 800735e:	f2c0 8150 	blt.w	8007602 <_dtoa_r+0x6e2>
 8007362:	f1ba 0f0e 	cmp.w	sl, #14
 8007366:	f300 814c 	bgt.w	8007602 <_dtoa_r+0x6e2>
 800736a:	4b6a      	ldr	r3, [pc, #424]	; (8007514 <_dtoa_r+0x5f4>)
 800736c:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007370:	ed93 7b00 	vldr	d7, [r3]
 8007374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007376:	2b00      	cmp	r3, #0
 8007378:	ed8d 7b02 	vstr	d7, [sp, #8]
 800737c:	f280 80d8 	bge.w	8007530 <_dtoa_r+0x610>
 8007380:	f1b9 0f00 	cmp.w	r9, #0
 8007384:	f300 80d4 	bgt.w	8007530 <_dtoa_r+0x610>
 8007388:	f040 825e 	bne.w	8007848 <_dtoa_r+0x928>
 800738c:	2200      	movs	r2, #0
 800738e:	4b66      	ldr	r3, [pc, #408]	; (8007528 <_dtoa_r+0x608>)
 8007390:	ec51 0b17 	vmov	r0, r1, d7
 8007394:	f7f9 f8dc 	bl	8000550 <__aeabi_dmul>
 8007398:	e9dd 2300 	ldrd	r2, r3, [sp]
 800739c:	f7f9 fb5e 	bl	8000a5c <__aeabi_dcmpge>
 80073a0:	464f      	mov	r7, r9
 80073a2:	464e      	mov	r6, r9
 80073a4:	2800      	cmp	r0, #0
 80073a6:	f040 8234 	bne.w	8007812 <_dtoa_r+0x8f2>
 80073aa:	2331      	movs	r3, #49	; 0x31
 80073ac:	f10b 0501 	add.w	r5, fp, #1
 80073b0:	f88b 3000 	strb.w	r3, [fp]
 80073b4:	f10a 0a01 	add.w	sl, sl, #1
 80073b8:	e22f      	b.n	800781a <_dtoa_r+0x8fa>
 80073ba:	07f2      	lsls	r2, r6, #31
 80073bc:	d505      	bpl.n	80073ca <_dtoa_r+0x4aa>
 80073be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073c2:	f7f9 f8c5 	bl	8000550 <__aeabi_dmul>
 80073c6:	3501      	adds	r5, #1
 80073c8:	2301      	movs	r3, #1
 80073ca:	1076      	asrs	r6, r6, #1
 80073cc:	3708      	adds	r7, #8
 80073ce:	e772      	b.n	80072b6 <_dtoa_r+0x396>
 80073d0:	2502      	movs	r5, #2
 80073d2:	e774      	b.n	80072be <_dtoa_r+0x39e>
 80073d4:	f8cd a020 	str.w	sl, [sp, #32]
 80073d8:	464f      	mov	r7, r9
 80073da:	e791      	b.n	8007300 <_dtoa_r+0x3e0>
 80073dc:	4b4d      	ldr	r3, [pc, #308]	; (8007514 <_dtoa_r+0x5f4>)
 80073de:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80073e2:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 80073e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d047      	beq.n	800747c <_dtoa_r+0x55c>
 80073ec:	4602      	mov	r2, r0
 80073ee:	460b      	mov	r3, r1
 80073f0:	2000      	movs	r0, #0
 80073f2:	494e      	ldr	r1, [pc, #312]	; (800752c <_dtoa_r+0x60c>)
 80073f4:	f7f9 f9d6 	bl	80007a4 <__aeabi_ddiv>
 80073f8:	462a      	mov	r2, r5
 80073fa:	4633      	mov	r3, r6
 80073fc:	f7f8 fef0 	bl	80001e0 <__aeabi_dsub>
 8007400:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007404:	465d      	mov	r5, fp
 8007406:	e9dd 0100 	ldrd	r0, r1, [sp]
 800740a:	f7f9 fb51 	bl	8000ab0 <__aeabi_d2iz>
 800740e:	4606      	mov	r6, r0
 8007410:	f7f9 f834 	bl	800047c <__aeabi_i2d>
 8007414:	4602      	mov	r2, r0
 8007416:	460b      	mov	r3, r1
 8007418:	e9dd 0100 	ldrd	r0, r1, [sp]
 800741c:	f7f8 fee0 	bl	80001e0 <__aeabi_dsub>
 8007420:	3630      	adds	r6, #48	; 0x30
 8007422:	f805 6b01 	strb.w	r6, [r5], #1
 8007426:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800742a:	e9cd 0100 	strd	r0, r1, [sp]
 800742e:	f7f9 fb01 	bl	8000a34 <__aeabi_dcmplt>
 8007432:	2800      	cmp	r0, #0
 8007434:	d163      	bne.n	80074fe <_dtoa_r+0x5de>
 8007436:	e9dd 2300 	ldrd	r2, r3, [sp]
 800743a:	2000      	movs	r0, #0
 800743c:	4937      	ldr	r1, [pc, #220]	; (800751c <_dtoa_r+0x5fc>)
 800743e:	f7f8 fecf 	bl	80001e0 <__aeabi_dsub>
 8007442:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8007446:	f7f9 faf5 	bl	8000a34 <__aeabi_dcmplt>
 800744a:	2800      	cmp	r0, #0
 800744c:	f040 80b7 	bne.w	80075be <_dtoa_r+0x69e>
 8007450:	eba5 030b 	sub.w	r3, r5, fp
 8007454:	429f      	cmp	r7, r3
 8007456:	f77f af7c 	ble.w	8007352 <_dtoa_r+0x432>
 800745a:	2200      	movs	r2, #0
 800745c:	4b30      	ldr	r3, [pc, #192]	; (8007520 <_dtoa_r+0x600>)
 800745e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8007462:	f7f9 f875 	bl	8000550 <__aeabi_dmul>
 8007466:	2200      	movs	r2, #0
 8007468:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800746c:	4b2c      	ldr	r3, [pc, #176]	; (8007520 <_dtoa_r+0x600>)
 800746e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007472:	f7f9 f86d 	bl	8000550 <__aeabi_dmul>
 8007476:	e9cd 0100 	strd	r0, r1, [sp]
 800747a:	e7c4      	b.n	8007406 <_dtoa_r+0x4e6>
 800747c:	462a      	mov	r2, r5
 800747e:	4633      	mov	r3, r6
 8007480:	f7f9 f866 	bl	8000550 <__aeabi_dmul>
 8007484:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8007488:	eb0b 0507 	add.w	r5, fp, r7
 800748c:	465e      	mov	r6, fp
 800748e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007492:	f7f9 fb0d 	bl	8000ab0 <__aeabi_d2iz>
 8007496:	4607      	mov	r7, r0
 8007498:	f7f8 fff0 	bl	800047c <__aeabi_i2d>
 800749c:	3730      	adds	r7, #48	; 0x30
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074a6:	f7f8 fe9b 	bl	80001e0 <__aeabi_dsub>
 80074aa:	f806 7b01 	strb.w	r7, [r6], #1
 80074ae:	42ae      	cmp	r6, r5
 80074b0:	e9cd 0100 	strd	r0, r1, [sp]
 80074b4:	f04f 0200 	mov.w	r2, #0
 80074b8:	d126      	bne.n	8007508 <_dtoa_r+0x5e8>
 80074ba:	4b1c      	ldr	r3, [pc, #112]	; (800752c <_dtoa_r+0x60c>)
 80074bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80074c0:	f7f8 fe90 	bl	80001e4 <__adddf3>
 80074c4:	4602      	mov	r2, r0
 80074c6:	460b      	mov	r3, r1
 80074c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074cc:	f7f9 fad0 	bl	8000a70 <__aeabi_dcmpgt>
 80074d0:	2800      	cmp	r0, #0
 80074d2:	d174      	bne.n	80075be <_dtoa_r+0x69e>
 80074d4:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80074d8:	2000      	movs	r0, #0
 80074da:	4914      	ldr	r1, [pc, #80]	; (800752c <_dtoa_r+0x60c>)
 80074dc:	f7f8 fe80 	bl	80001e0 <__aeabi_dsub>
 80074e0:	4602      	mov	r2, r0
 80074e2:	460b      	mov	r3, r1
 80074e4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074e8:	f7f9 faa4 	bl	8000a34 <__aeabi_dcmplt>
 80074ec:	2800      	cmp	r0, #0
 80074ee:	f43f af30 	beq.w	8007352 <_dtoa_r+0x432>
 80074f2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 80074f6:	2b30      	cmp	r3, #48	; 0x30
 80074f8:	f105 32ff 	add.w	r2, r5, #4294967295
 80074fc:	d002      	beq.n	8007504 <_dtoa_r+0x5e4>
 80074fe:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007502:	e04a      	b.n	800759a <_dtoa_r+0x67a>
 8007504:	4615      	mov	r5, r2
 8007506:	e7f4      	b.n	80074f2 <_dtoa_r+0x5d2>
 8007508:	4b05      	ldr	r3, [pc, #20]	; (8007520 <_dtoa_r+0x600>)
 800750a:	f7f9 f821 	bl	8000550 <__aeabi_dmul>
 800750e:	e9cd 0100 	strd	r0, r1, [sp]
 8007512:	e7bc      	b.n	800748e <_dtoa_r+0x56e>
 8007514:	08008bb8 	.word	0x08008bb8
 8007518:	08008b90 	.word	0x08008b90
 800751c:	3ff00000 	.word	0x3ff00000
 8007520:	40240000 	.word	0x40240000
 8007524:	401c0000 	.word	0x401c0000
 8007528:	40140000 	.word	0x40140000
 800752c:	3fe00000 	.word	0x3fe00000
 8007530:	e9dd 6700 	ldrd	r6, r7, [sp]
 8007534:	465d      	mov	r5, fp
 8007536:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800753a:	4630      	mov	r0, r6
 800753c:	4639      	mov	r1, r7
 800753e:	f7f9 f931 	bl	80007a4 <__aeabi_ddiv>
 8007542:	f7f9 fab5 	bl	8000ab0 <__aeabi_d2iz>
 8007546:	4680      	mov	r8, r0
 8007548:	f7f8 ff98 	bl	800047c <__aeabi_i2d>
 800754c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007550:	f7f8 fffe 	bl	8000550 <__aeabi_dmul>
 8007554:	4602      	mov	r2, r0
 8007556:	460b      	mov	r3, r1
 8007558:	4630      	mov	r0, r6
 800755a:	4639      	mov	r1, r7
 800755c:	f108 0630 	add.w	r6, r8, #48	; 0x30
 8007560:	f7f8 fe3e 	bl	80001e0 <__aeabi_dsub>
 8007564:	f805 6b01 	strb.w	r6, [r5], #1
 8007568:	eba5 060b 	sub.w	r6, r5, fp
 800756c:	45b1      	cmp	r9, r6
 800756e:	4602      	mov	r2, r0
 8007570:	460b      	mov	r3, r1
 8007572:	d139      	bne.n	80075e8 <_dtoa_r+0x6c8>
 8007574:	f7f8 fe36 	bl	80001e4 <__adddf3>
 8007578:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800757c:	4606      	mov	r6, r0
 800757e:	460f      	mov	r7, r1
 8007580:	f7f9 fa76 	bl	8000a70 <__aeabi_dcmpgt>
 8007584:	b9c8      	cbnz	r0, 80075ba <_dtoa_r+0x69a>
 8007586:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800758a:	4630      	mov	r0, r6
 800758c:	4639      	mov	r1, r7
 800758e:	f7f9 fa47 	bl	8000a20 <__aeabi_dcmpeq>
 8007592:	b110      	cbz	r0, 800759a <_dtoa_r+0x67a>
 8007594:	f018 0f01 	tst.w	r8, #1
 8007598:	d10f      	bne.n	80075ba <_dtoa_r+0x69a>
 800759a:	9904      	ldr	r1, [sp, #16]
 800759c:	4620      	mov	r0, r4
 800759e:	f000 fc9f 	bl	8007ee0 <_Bfree>
 80075a2:	2300      	movs	r3, #0
 80075a4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80075a6:	702b      	strb	r3, [r5, #0]
 80075a8:	f10a 0301 	add.w	r3, sl, #1
 80075ac:	6013      	str	r3, [r2, #0]
 80075ae:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	f000 8241 	beq.w	8007a38 <_dtoa_r+0xb18>
 80075b6:	601d      	str	r5, [r3, #0]
 80075b8:	e23e      	b.n	8007a38 <_dtoa_r+0xb18>
 80075ba:	f8cd a020 	str.w	sl, [sp, #32]
 80075be:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80075c2:	2a39      	cmp	r2, #57	; 0x39
 80075c4:	f105 33ff 	add.w	r3, r5, #4294967295
 80075c8:	d108      	bne.n	80075dc <_dtoa_r+0x6bc>
 80075ca:	459b      	cmp	fp, r3
 80075cc:	d10a      	bne.n	80075e4 <_dtoa_r+0x6c4>
 80075ce:	9b08      	ldr	r3, [sp, #32]
 80075d0:	3301      	adds	r3, #1
 80075d2:	9308      	str	r3, [sp, #32]
 80075d4:	2330      	movs	r3, #48	; 0x30
 80075d6:	f88b 3000 	strb.w	r3, [fp]
 80075da:	465b      	mov	r3, fp
 80075dc:	781a      	ldrb	r2, [r3, #0]
 80075de:	3201      	adds	r2, #1
 80075e0:	701a      	strb	r2, [r3, #0]
 80075e2:	e78c      	b.n	80074fe <_dtoa_r+0x5de>
 80075e4:	461d      	mov	r5, r3
 80075e6:	e7ea      	b.n	80075be <_dtoa_r+0x69e>
 80075e8:	2200      	movs	r2, #0
 80075ea:	4b9b      	ldr	r3, [pc, #620]	; (8007858 <_dtoa_r+0x938>)
 80075ec:	f7f8 ffb0 	bl	8000550 <__aeabi_dmul>
 80075f0:	2200      	movs	r2, #0
 80075f2:	2300      	movs	r3, #0
 80075f4:	4606      	mov	r6, r0
 80075f6:	460f      	mov	r7, r1
 80075f8:	f7f9 fa12 	bl	8000a20 <__aeabi_dcmpeq>
 80075fc:	2800      	cmp	r0, #0
 80075fe:	d09a      	beq.n	8007536 <_dtoa_r+0x616>
 8007600:	e7cb      	b.n	800759a <_dtoa_r+0x67a>
 8007602:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007604:	2a00      	cmp	r2, #0
 8007606:	f000 808b 	beq.w	8007720 <_dtoa_r+0x800>
 800760a:	9a06      	ldr	r2, [sp, #24]
 800760c:	2a01      	cmp	r2, #1
 800760e:	dc6e      	bgt.n	80076ee <_dtoa_r+0x7ce>
 8007610:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007612:	2a00      	cmp	r2, #0
 8007614:	d067      	beq.n	80076e6 <_dtoa_r+0x7c6>
 8007616:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800761a:	9f07      	ldr	r7, [sp, #28]
 800761c:	9d05      	ldr	r5, [sp, #20]
 800761e:	9a05      	ldr	r2, [sp, #20]
 8007620:	2101      	movs	r1, #1
 8007622:	441a      	add	r2, r3
 8007624:	4620      	mov	r0, r4
 8007626:	9205      	str	r2, [sp, #20]
 8007628:	4498      	add	r8, r3
 800762a:	f000 fcf9 	bl	8008020 <__i2b>
 800762e:	4606      	mov	r6, r0
 8007630:	2d00      	cmp	r5, #0
 8007632:	dd0c      	ble.n	800764e <_dtoa_r+0x72e>
 8007634:	f1b8 0f00 	cmp.w	r8, #0
 8007638:	dd09      	ble.n	800764e <_dtoa_r+0x72e>
 800763a:	4545      	cmp	r5, r8
 800763c:	9a05      	ldr	r2, [sp, #20]
 800763e:	462b      	mov	r3, r5
 8007640:	bfa8      	it	ge
 8007642:	4643      	movge	r3, r8
 8007644:	1ad2      	subs	r2, r2, r3
 8007646:	9205      	str	r2, [sp, #20]
 8007648:	1aed      	subs	r5, r5, r3
 800764a:	eba8 0803 	sub.w	r8, r8, r3
 800764e:	9b07      	ldr	r3, [sp, #28]
 8007650:	b1eb      	cbz	r3, 800768e <_dtoa_r+0x76e>
 8007652:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007654:	2b00      	cmp	r3, #0
 8007656:	d067      	beq.n	8007728 <_dtoa_r+0x808>
 8007658:	b18f      	cbz	r7, 800767e <_dtoa_r+0x75e>
 800765a:	4631      	mov	r1, r6
 800765c:	463a      	mov	r2, r7
 800765e:	4620      	mov	r0, r4
 8007660:	f000 fd7e 	bl	8008160 <__pow5mult>
 8007664:	9a04      	ldr	r2, [sp, #16]
 8007666:	4601      	mov	r1, r0
 8007668:	4606      	mov	r6, r0
 800766a:	4620      	mov	r0, r4
 800766c:	f000 fce1 	bl	8008032 <__multiply>
 8007670:	9904      	ldr	r1, [sp, #16]
 8007672:	9008      	str	r0, [sp, #32]
 8007674:	4620      	mov	r0, r4
 8007676:	f000 fc33 	bl	8007ee0 <_Bfree>
 800767a:	9b08      	ldr	r3, [sp, #32]
 800767c:	9304      	str	r3, [sp, #16]
 800767e:	9b07      	ldr	r3, [sp, #28]
 8007680:	1bda      	subs	r2, r3, r7
 8007682:	d004      	beq.n	800768e <_dtoa_r+0x76e>
 8007684:	9904      	ldr	r1, [sp, #16]
 8007686:	4620      	mov	r0, r4
 8007688:	f000 fd6a 	bl	8008160 <__pow5mult>
 800768c:	9004      	str	r0, [sp, #16]
 800768e:	2101      	movs	r1, #1
 8007690:	4620      	mov	r0, r4
 8007692:	f000 fcc5 	bl	8008020 <__i2b>
 8007696:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007698:	4607      	mov	r7, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	f000 81d0 	beq.w	8007a40 <_dtoa_r+0xb20>
 80076a0:	461a      	mov	r2, r3
 80076a2:	4601      	mov	r1, r0
 80076a4:	4620      	mov	r0, r4
 80076a6:	f000 fd5b 	bl	8008160 <__pow5mult>
 80076aa:	9b06      	ldr	r3, [sp, #24]
 80076ac:	2b01      	cmp	r3, #1
 80076ae:	4607      	mov	r7, r0
 80076b0:	dc40      	bgt.n	8007734 <_dtoa_r+0x814>
 80076b2:	9b00      	ldr	r3, [sp, #0]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d139      	bne.n	800772c <_dtoa_r+0x80c>
 80076b8:	9b01      	ldr	r3, [sp, #4]
 80076ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d136      	bne.n	8007730 <_dtoa_r+0x810>
 80076c2:	9b01      	ldr	r3, [sp, #4]
 80076c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076c8:	0d1b      	lsrs	r3, r3, #20
 80076ca:	051b      	lsls	r3, r3, #20
 80076cc:	b12b      	cbz	r3, 80076da <_dtoa_r+0x7ba>
 80076ce:	9b05      	ldr	r3, [sp, #20]
 80076d0:	3301      	adds	r3, #1
 80076d2:	9305      	str	r3, [sp, #20]
 80076d4:	f108 0801 	add.w	r8, r8, #1
 80076d8:	2301      	movs	r3, #1
 80076da:	9307      	str	r3, [sp, #28]
 80076dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d12a      	bne.n	8007738 <_dtoa_r+0x818>
 80076e2:	2001      	movs	r0, #1
 80076e4:	e030      	b.n	8007748 <_dtoa_r+0x828>
 80076e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80076e8:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80076ec:	e795      	b.n	800761a <_dtoa_r+0x6fa>
 80076ee:	9b07      	ldr	r3, [sp, #28]
 80076f0:	f109 37ff 	add.w	r7, r9, #4294967295
 80076f4:	42bb      	cmp	r3, r7
 80076f6:	bfbf      	itttt	lt
 80076f8:	9b07      	ldrlt	r3, [sp, #28]
 80076fa:	9707      	strlt	r7, [sp, #28]
 80076fc:	1afa      	sublt	r2, r7, r3
 80076fe:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8007700:	bfbb      	ittet	lt
 8007702:	189b      	addlt	r3, r3, r2
 8007704:	930e      	strlt	r3, [sp, #56]	; 0x38
 8007706:	1bdf      	subge	r7, r3, r7
 8007708:	2700      	movlt	r7, #0
 800770a:	f1b9 0f00 	cmp.w	r9, #0
 800770e:	bfb5      	itete	lt
 8007710:	9b05      	ldrlt	r3, [sp, #20]
 8007712:	9d05      	ldrge	r5, [sp, #20]
 8007714:	eba3 0509 	sublt.w	r5, r3, r9
 8007718:	464b      	movge	r3, r9
 800771a:	bfb8      	it	lt
 800771c:	2300      	movlt	r3, #0
 800771e:	e77e      	b.n	800761e <_dtoa_r+0x6fe>
 8007720:	9f07      	ldr	r7, [sp, #28]
 8007722:	9d05      	ldr	r5, [sp, #20]
 8007724:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8007726:	e783      	b.n	8007630 <_dtoa_r+0x710>
 8007728:	9a07      	ldr	r2, [sp, #28]
 800772a:	e7ab      	b.n	8007684 <_dtoa_r+0x764>
 800772c:	2300      	movs	r3, #0
 800772e:	e7d4      	b.n	80076da <_dtoa_r+0x7ba>
 8007730:	9b00      	ldr	r3, [sp, #0]
 8007732:	e7d2      	b.n	80076da <_dtoa_r+0x7ba>
 8007734:	2300      	movs	r3, #0
 8007736:	9307      	str	r3, [sp, #28]
 8007738:	693b      	ldr	r3, [r7, #16]
 800773a:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 800773e:	6918      	ldr	r0, [r3, #16]
 8007740:	f000 fc20 	bl	8007f84 <__hi0bits>
 8007744:	f1c0 0020 	rsb	r0, r0, #32
 8007748:	4440      	add	r0, r8
 800774a:	f010 001f 	ands.w	r0, r0, #31
 800774e:	d047      	beq.n	80077e0 <_dtoa_r+0x8c0>
 8007750:	f1c0 0320 	rsb	r3, r0, #32
 8007754:	2b04      	cmp	r3, #4
 8007756:	dd3b      	ble.n	80077d0 <_dtoa_r+0x8b0>
 8007758:	9b05      	ldr	r3, [sp, #20]
 800775a:	f1c0 001c 	rsb	r0, r0, #28
 800775e:	4403      	add	r3, r0
 8007760:	9305      	str	r3, [sp, #20]
 8007762:	4405      	add	r5, r0
 8007764:	4480      	add	r8, r0
 8007766:	9b05      	ldr	r3, [sp, #20]
 8007768:	2b00      	cmp	r3, #0
 800776a:	dd05      	ble.n	8007778 <_dtoa_r+0x858>
 800776c:	461a      	mov	r2, r3
 800776e:	9904      	ldr	r1, [sp, #16]
 8007770:	4620      	mov	r0, r4
 8007772:	f000 fd43 	bl	80081fc <__lshift>
 8007776:	9004      	str	r0, [sp, #16]
 8007778:	f1b8 0f00 	cmp.w	r8, #0
 800777c:	dd05      	ble.n	800778a <_dtoa_r+0x86a>
 800777e:	4639      	mov	r1, r7
 8007780:	4642      	mov	r2, r8
 8007782:	4620      	mov	r0, r4
 8007784:	f000 fd3a 	bl	80081fc <__lshift>
 8007788:	4607      	mov	r7, r0
 800778a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800778c:	b353      	cbz	r3, 80077e4 <_dtoa_r+0x8c4>
 800778e:	4639      	mov	r1, r7
 8007790:	9804      	ldr	r0, [sp, #16]
 8007792:	f000 fd87 	bl	80082a4 <__mcmp>
 8007796:	2800      	cmp	r0, #0
 8007798:	da24      	bge.n	80077e4 <_dtoa_r+0x8c4>
 800779a:	2300      	movs	r3, #0
 800779c:	220a      	movs	r2, #10
 800779e:	9904      	ldr	r1, [sp, #16]
 80077a0:	4620      	mov	r0, r4
 80077a2:	f000 fbb4 	bl	8007f0e <__multadd>
 80077a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077a8:	9004      	str	r0, [sp, #16]
 80077aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	f000 814d 	beq.w	8007a4e <_dtoa_r+0xb2e>
 80077b4:	2300      	movs	r3, #0
 80077b6:	4631      	mov	r1, r6
 80077b8:	220a      	movs	r2, #10
 80077ba:	4620      	mov	r0, r4
 80077bc:	f000 fba7 	bl	8007f0e <__multadd>
 80077c0:	9b02      	ldr	r3, [sp, #8]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	4606      	mov	r6, r0
 80077c6:	dc4f      	bgt.n	8007868 <_dtoa_r+0x948>
 80077c8:	9b06      	ldr	r3, [sp, #24]
 80077ca:	2b02      	cmp	r3, #2
 80077cc:	dd4c      	ble.n	8007868 <_dtoa_r+0x948>
 80077ce:	e011      	b.n	80077f4 <_dtoa_r+0x8d4>
 80077d0:	d0c9      	beq.n	8007766 <_dtoa_r+0x846>
 80077d2:	9a05      	ldr	r2, [sp, #20]
 80077d4:	331c      	adds	r3, #28
 80077d6:	441a      	add	r2, r3
 80077d8:	9205      	str	r2, [sp, #20]
 80077da:	441d      	add	r5, r3
 80077dc:	4498      	add	r8, r3
 80077de:	e7c2      	b.n	8007766 <_dtoa_r+0x846>
 80077e0:	4603      	mov	r3, r0
 80077e2:	e7f6      	b.n	80077d2 <_dtoa_r+0x8b2>
 80077e4:	f1b9 0f00 	cmp.w	r9, #0
 80077e8:	dc38      	bgt.n	800785c <_dtoa_r+0x93c>
 80077ea:	9b06      	ldr	r3, [sp, #24]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	dd35      	ble.n	800785c <_dtoa_r+0x93c>
 80077f0:	f8cd 9008 	str.w	r9, [sp, #8]
 80077f4:	9b02      	ldr	r3, [sp, #8]
 80077f6:	b963      	cbnz	r3, 8007812 <_dtoa_r+0x8f2>
 80077f8:	4639      	mov	r1, r7
 80077fa:	2205      	movs	r2, #5
 80077fc:	4620      	mov	r0, r4
 80077fe:	f000 fb86 	bl	8007f0e <__multadd>
 8007802:	4601      	mov	r1, r0
 8007804:	4607      	mov	r7, r0
 8007806:	9804      	ldr	r0, [sp, #16]
 8007808:	f000 fd4c 	bl	80082a4 <__mcmp>
 800780c:	2800      	cmp	r0, #0
 800780e:	f73f adcc 	bgt.w	80073aa <_dtoa_r+0x48a>
 8007812:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007814:	465d      	mov	r5, fp
 8007816:	ea6f 0a03 	mvn.w	sl, r3
 800781a:	f04f 0900 	mov.w	r9, #0
 800781e:	4639      	mov	r1, r7
 8007820:	4620      	mov	r0, r4
 8007822:	f000 fb5d 	bl	8007ee0 <_Bfree>
 8007826:	2e00      	cmp	r6, #0
 8007828:	f43f aeb7 	beq.w	800759a <_dtoa_r+0x67a>
 800782c:	f1b9 0f00 	cmp.w	r9, #0
 8007830:	d005      	beq.n	800783e <_dtoa_r+0x91e>
 8007832:	45b1      	cmp	r9, r6
 8007834:	d003      	beq.n	800783e <_dtoa_r+0x91e>
 8007836:	4649      	mov	r1, r9
 8007838:	4620      	mov	r0, r4
 800783a:	f000 fb51 	bl	8007ee0 <_Bfree>
 800783e:	4631      	mov	r1, r6
 8007840:	4620      	mov	r0, r4
 8007842:	f000 fb4d 	bl	8007ee0 <_Bfree>
 8007846:	e6a8      	b.n	800759a <_dtoa_r+0x67a>
 8007848:	2700      	movs	r7, #0
 800784a:	463e      	mov	r6, r7
 800784c:	e7e1      	b.n	8007812 <_dtoa_r+0x8f2>
 800784e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8007852:	463e      	mov	r6, r7
 8007854:	e5a9      	b.n	80073aa <_dtoa_r+0x48a>
 8007856:	bf00      	nop
 8007858:	40240000 	.word	0x40240000
 800785c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800785e:	f8cd 9008 	str.w	r9, [sp, #8]
 8007862:	2b00      	cmp	r3, #0
 8007864:	f000 80fa 	beq.w	8007a5c <_dtoa_r+0xb3c>
 8007868:	2d00      	cmp	r5, #0
 800786a:	dd05      	ble.n	8007878 <_dtoa_r+0x958>
 800786c:	4631      	mov	r1, r6
 800786e:	462a      	mov	r2, r5
 8007870:	4620      	mov	r0, r4
 8007872:	f000 fcc3 	bl	80081fc <__lshift>
 8007876:	4606      	mov	r6, r0
 8007878:	9b07      	ldr	r3, [sp, #28]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d04c      	beq.n	8007918 <_dtoa_r+0x9f8>
 800787e:	6871      	ldr	r1, [r6, #4]
 8007880:	4620      	mov	r0, r4
 8007882:	f000 faf9 	bl	8007e78 <_Balloc>
 8007886:	6932      	ldr	r2, [r6, #16]
 8007888:	3202      	adds	r2, #2
 800788a:	4605      	mov	r5, r0
 800788c:	0092      	lsls	r2, r2, #2
 800788e:	f106 010c 	add.w	r1, r6, #12
 8007892:	300c      	adds	r0, #12
 8007894:	f7fe fd6e 	bl	8006374 <memcpy>
 8007898:	2201      	movs	r2, #1
 800789a:	4629      	mov	r1, r5
 800789c:	4620      	mov	r0, r4
 800789e:	f000 fcad 	bl	80081fc <__lshift>
 80078a2:	9b00      	ldr	r3, [sp, #0]
 80078a4:	f8cd b014 	str.w	fp, [sp, #20]
 80078a8:	f003 0301 	and.w	r3, r3, #1
 80078ac:	46b1      	mov	r9, r6
 80078ae:	9307      	str	r3, [sp, #28]
 80078b0:	4606      	mov	r6, r0
 80078b2:	4639      	mov	r1, r7
 80078b4:	9804      	ldr	r0, [sp, #16]
 80078b6:	f7ff faa5 	bl	8006e04 <quorem>
 80078ba:	4649      	mov	r1, r9
 80078bc:	4605      	mov	r5, r0
 80078be:	f100 0830 	add.w	r8, r0, #48	; 0x30
 80078c2:	9804      	ldr	r0, [sp, #16]
 80078c4:	f000 fcee 	bl	80082a4 <__mcmp>
 80078c8:	4632      	mov	r2, r6
 80078ca:	9000      	str	r0, [sp, #0]
 80078cc:	4639      	mov	r1, r7
 80078ce:	4620      	mov	r0, r4
 80078d0:	f000 fd02 	bl	80082d8 <__mdiff>
 80078d4:	68c3      	ldr	r3, [r0, #12]
 80078d6:	4602      	mov	r2, r0
 80078d8:	bb03      	cbnz	r3, 800791c <_dtoa_r+0x9fc>
 80078da:	4601      	mov	r1, r0
 80078dc:	9008      	str	r0, [sp, #32]
 80078de:	9804      	ldr	r0, [sp, #16]
 80078e0:	f000 fce0 	bl	80082a4 <__mcmp>
 80078e4:	9a08      	ldr	r2, [sp, #32]
 80078e6:	4603      	mov	r3, r0
 80078e8:	4611      	mov	r1, r2
 80078ea:	4620      	mov	r0, r4
 80078ec:	9308      	str	r3, [sp, #32]
 80078ee:	f000 faf7 	bl	8007ee0 <_Bfree>
 80078f2:	9b08      	ldr	r3, [sp, #32]
 80078f4:	b9a3      	cbnz	r3, 8007920 <_dtoa_r+0xa00>
 80078f6:	9a06      	ldr	r2, [sp, #24]
 80078f8:	b992      	cbnz	r2, 8007920 <_dtoa_r+0xa00>
 80078fa:	9a07      	ldr	r2, [sp, #28]
 80078fc:	b982      	cbnz	r2, 8007920 <_dtoa_r+0xa00>
 80078fe:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007902:	d029      	beq.n	8007958 <_dtoa_r+0xa38>
 8007904:	9b00      	ldr	r3, [sp, #0]
 8007906:	2b00      	cmp	r3, #0
 8007908:	dd01      	ble.n	800790e <_dtoa_r+0x9ee>
 800790a:	f105 0831 	add.w	r8, r5, #49	; 0x31
 800790e:	9b05      	ldr	r3, [sp, #20]
 8007910:	1c5d      	adds	r5, r3, #1
 8007912:	f883 8000 	strb.w	r8, [r3]
 8007916:	e782      	b.n	800781e <_dtoa_r+0x8fe>
 8007918:	4630      	mov	r0, r6
 800791a:	e7c2      	b.n	80078a2 <_dtoa_r+0x982>
 800791c:	2301      	movs	r3, #1
 800791e:	e7e3      	b.n	80078e8 <_dtoa_r+0x9c8>
 8007920:	9a00      	ldr	r2, [sp, #0]
 8007922:	2a00      	cmp	r2, #0
 8007924:	db04      	blt.n	8007930 <_dtoa_r+0xa10>
 8007926:	d125      	bne.n	8007974 <_dtoa_r+0xa54>
 8007928:	9a06      	ldr	r2, [sp, #24]
 800792a:	bb1a      	cbnz	r2, 8007974 <_dtoa_r+0xa54>
 800792c:	9a07      	ldr	r2, [sp, #28]
 800792e:	bb0a      	cbnz	r2, 8007974 <_dtoa_r+0xa54>
 8007930:	2b00      	cmp	r3, #0
 8007932:	ddec      	ble.n	800790e <_dtoa_r+0x9ee>
 8007934:	2201      	movs	r2, #1
 8007936:	9904      	ldr	r1, [sp, #16]
 8007938:	4620      	mov	r0, r4
 800793a:	f000 fc5f 	bl	80081fc <__lshift>
 800793e:	4639      	mov	r1, r7
 8007940:	9004      	str	r0, [sp, #16]
 8007942:	f000 fcaf 	bl	80082a4 <__mcmp>
 8007946:	2800      	cmp	r0, #0
 8007948:	dc03      	bgt.n	8007952 <_dtoa_r+0xa32>
 800794a:	d1e0      	bne.n	800790e <_dtoa_r+0x9ee>
 800794c:	f018 0f01 	tst.w	r8, #1
 8007950:	d0dd      	beq.n	800790e <_dtoa_r+0x9ee>
 8007952:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007956:	d1d8      	bne.n	800790a <_dtoa_r+0x9ea>
 8007958:	9b05      	ldr	r3, [sp, #20]
 800795a:	9a05      	ldr	r2, [sp, #20]
 800795c:	1c5d      	adds	r5, r3, #1
 800795e:	2339      	movs	r3, #57	; 0x39
 8007960:	7013      	strb	r3, [r2, #0]
 8007962:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007966:	2b39      	cmp	r3, #57	; 0x39
 8007968:	f105 32ff 	add.w	r2, r5, #4294967295
 800796c:	d04f      	beq.n	8007a0e <_dtoa_r+0xaee>
 800796e:	3301      	adds	r3, #1
 8007970:	7013      	strb	r3, [r2, #0]
 8007972:	e754      	b.n	800781e <_dtoa_r+0x8fe>
 8007974:	9a05      	ldr	r2, [sp, #20]
 8007976:	2b00      	cmp	r3, #0
 8007978:	f102 0501 	add.w	r5, r2, #1
 800797c:	dd06      	ble.n	800798c <_dtoa_r+0xa6c>
 800797e:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8007982:	d0e9      	beq.n	8007958 <_dtoa_r+0xa38>
 8007984:	f108 0801 	add.w	r8, r8, #1
 8007988:	9b05      	ldr	r3, [sp, #20]
 800798a:	e7c2      	b.n	8007912 <_dtoa_r+0x9f2>
 800798c:	9a02      	ldr	r2, [sp, #8]
 800798e:	f805 8c01 	strb.w	r8, [r5, #-1]
 8007992:	eba5 030b 	sub.w	r3, r5, fp
 8007996:	4293      	cmp	r3, r2
 8007998:	d021      	beq.n	80079de <_dtoa_r+0xabe>
 800799a:	2300      	movs	r3, #0
 800799c:	220a      	movs	r2, #10
 800799e:	9904      	ldr	r1, [sp, #16]
 80079a0:	4620      	mov	r0, r4
 80079a2:	f000 fab4 	bl	8007f0e <__multadd>
 80079a6:	45b1      	cmp	r9, r6
 80079a8:	9004      	str	r0, [sp, #16]
 80079aa:	f04f 0300 	mov.w	r3, #0
 80079ae:	f04f 020a 	mov.w	r2, #10
 80079b2:	4649      	mov	r1, r9
 80079b4:	4620      	mov	r0, r4
 80079b6:	d105      	bne.n	80079c4 <_dtoa_r+0xaa4>
 80079b8:	f000 faa9 	bl	8007f0e <__multadd>
 80079bc:	4681      	mov	r9, r0
 80079be:	4606      	mov	r6, r0
 80079c0:	9505      	str	r5, [sp, #20]
 80079c2:	e776      	b.n	80078b2 <_dtoa_r+0x992>
 80079c4:	f000 faa3 	bl	8007f0e <__multadd>
 80079c8:	4631      	mov	r1, r6
 80079ca:	4681      	mov	r9, r0
 80079cc:	2300      	movs	r3, #0
 80079ce:	220a      	movs	r2, #10
 80079d0:	4620      	mov	r0, r4
 80079d2:	f000 fa9c 	bl	8007f0e <__multadd>
 80079d6:	4606      	mov	r6, r0
 80079d8:	e7f2      	b.n	80079c0 <_dtoa_r+0xaa0>
 80079da:	f04f 0900 	mov.w	r9, #0
 80079de:	2201      	movs	r2, #1
 80079e0:	9904      	ldr	r1, [sp, #16]
 80079e2:	4620      	mov	r0, r4
 80079e4:	f000 fc0a 	bl	80081fc <__lshift>
 80079e8:	4639      	mov	r1, r7
 80079ea:	9004      	str	r0, [sp, #16]
 80079ec:	f000 fc5a 	bl	80082a4 <__mcmp>
 80079f0:	2800      	cmp	r0, #0
 80079f2:	dcb6      	bgt.n	8007962 <_dtoa_r+0xa42>
 80079f4:	d102      	bne.n	80079fc <_dtoa_r+0xadc>
 80079f6:	f018 0f01 	tst.w	r8, #1
 80079fa:	d1b2      	bne.n	8007962 <_dtoa_r+0xa42>
 80079fc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8007a00:	2b30      	cmp	r3, #48	; 0x30
 8007a02:	f105 32ff 	add.w	r2, r5, #4294967295
 8007a06:	f47f af0a 	bne.w	800781e <_dtoa_r+0x8fe>
 8007a0a:	4615      	mov	r5, r2
 8007a0c:	e7f6      	b.n	80079fc <_dtoa_r+0xadc>
 8007a0e:	4593      	cmp	fp, r2
 8007a10:	d105      	bne.n	8007a1e <_dtoa_r+0xafe>
 8007a12:	2331      	movs	r3, #49	; 0x31
 8007a14:	f10a 0a01 	add.w	sl, sl, #1
 8007a18:	f88b 3000 	strb.w	r3, [fp]
 8007a1c:	e6ff      	b.n	800781e <_dtoa_r+0x8fe>
 8007a1e:	4615      	mov	r5, r2
 8007a20:	e79f      	b.n	8007962 <_dtoa_r+0xa42>
 8007a22:	f8df b064 	ldr.w	fp, [pc, #100]	; 8007a88 <_dtoa_r+0xb68>
 8007a26:	e007      	b.n	8007a38 <_dtoa_r+0xb18>
 8007a28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8007a2a:	f8df b060 	ldr.w	fp, [pc, #96]	; 8007a8c <_dtoa_r+0xb6c>
 8007a2e:	b11b      	cbz	r3, 8007a38 <_dtoa_r+0xb18>
 8007a30:	f10b 0308 	add.w	r3, fp, #8
 8007a34:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8007a36:	6013      	str	r3, [r2, #0]
 8007a38:	4658      	mov	r0, fp
 8007a3a:	b017      	add	sp, #92	; 0x5c
 8007a3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a40:	9b06      	ldr	r3, [sp, #24]
 8007a42:	2b01      	cmp	r3, #1
 8007a44:	f77f ae35 	ble.w	80076b2 <_dtoa_r+0x792>
 8007a48:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a4a:	9307      	str	r3, [sp, #28]
 8007a4c:	e649      	b.n	80076e2 <_dtoa_r+0x7c2>
 8007a4e:	9b02      	ldr	r3, [sp, #8]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	dc03      	bgt.n	8007a5c <_dtoa_r+0xb3c>
 8007a54:	9b06      	ldr	r3, [sp, #24]
 8007a56:	2b02      	cmp	r3, #2
 8007a58:	f73f aecc 	bgt.w	80077f4 <_dtoa_r+0x8d4>
 8007a5c:	465d      	mov	r5, fp
 8007a5e:	4639      	mov	r1, r7
 8007a60:	9804      	ldr	r0, [sp, #16]
 8007a62:	f7ff f9cf 	bl	8006e04 <quorem>
 8007a66:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8007a6a:	f805 8b01 	strb.w	r8, [r5], #1
 8007a6e:	9a02      	ldr	r2, [sp, #8]
 8007a70:	eba5 030b 	sub.w	r3, r5, fp
 8007a74:	429a      	cmp	r2, r3
 8007a76:	ddb0      	ble.n	80079da <_dtoa_r+0xaba>
 8007a78:	2300      	movs	r3, #0
 8007a7a:	220a      	movs	r2, #10
 8007a7c:	9904      	ldr	r1, [sp, #16]
 8007a7e:	4620      	mov	r0, r4
 8007a80:	f000 fa45 	bl	8007f0e <__multadd>
 8007a84:	9004      	str	r0, [sp, #16]
 8007a86:	e7ea      	b.n	8007a5e <_dtoa_r+0xb3e>
 8007a88:	08008b20 	.word	0x08008b20
 8007a8c:	08008b22 	.word	0x08008b22

08007a90 <__sflush_r>:
 8007a90:	898a      	ldrh	r2, [r1, #12]
 8007a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a96:	4605      	mov	r5, r0
 8007a98:	0710      	lsls	r0, r2, #28
 8007a9a:	460c      	mov	r4, r1
 8007a9c:	d458      	bmi.n	8007b50 <__sflush_r+0xc0>
 8007a9e:	684b      	ldr	r3, [r1, #4]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	dc05      	bgt.n	8007ab0 <__sflush_r+0x20>
 8007aa4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	dc02      	bgt.n	8007ab0 <__sflush_r+0x20>
 8007aaa:	2000      	movs	r0, #0
 8007aac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ab0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ab2:	2e00      	cmp	r6, #0
 8007ab4:	d0f9      	beq.n	8007aaa <__sflush_r+0x1a>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007abc:	682f      	ldr	r7, [r5, #0]
 8007abe:	6a21      	ldr	r1, [r4, #32]
 8007ac0:	602b      	str	r3, [r5, #0]
 8007ac2:	d032      	beq.n	8007b2a <__sflush_r+0x9a>
 8007ac4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ac6:	89a3      	ldrh	r3, [r4, #12]
 8007ac8:	075a      	lsls	r2, r3, #29
 8007aca:	d505      	bpl.n	8007ad8 <__sflush_r+0x48>
 8007acc:	6863      	ldr	r3, [r4, #4]
 8007ace:	1ac0      	subs	r0, r0, r3
 8007ad0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007ad2:	b10b      	cbz	r3, 8007ad8 <__sflush_r+0x48>
 8007ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007ad6:	1ac0      	subs	r0, r0, r3
 8007ad8:	2300      	movs	r3, #0
 8007ada:	4602      	mov	r2, r0
 8007adc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ade:	6a21      	ldr	r1, [r4, #32]
 8007ae0:	4628      	mov	r0, r5
 8007ae2:	47b0      	blx	r6
 8007ae4:	1c43      	adds	r3, r0, #1
 8007ae6:	89a3      	ldrh	r3, [r4, #12]
 8007ae8:	d106      	bne.n	8007af8 <__sflush_r+0x68>
 8007aea:	6829      	ldr	r1, [r5, #0]
 8007aec:	291d      	cmp	r1, #29
 8007aee:	d848      	bhi.n	8007b82 <__sflush_r+0xf2>
 8007af0:	4a29      	ldr	r2, [pc, #164]	; (8007b98 <__sflush_r+0x108>)
 8007af2:	40ca      	lsrs	r2, r1
 8007af4:	07d6      	lsls	r6, r2, #31
 8007af6:	d544      	bpl.n	8007b82 <__sflush_r+0xf2>
 8007af8:	2200      	movs	r2, #0
 8007afa:	6062      	str	r2, [r4, #4]
 8007afc:	04d9      	lsls	r1, r3, #19
 8007afe:	6922      	ldr	r2, [r4, #16]
 8007b00:	6022      	str	r2, [r4, #0]
 8007b02:	d504      	bpl.n	8007b0e <__sflush_r+0x7e>
 8007b04:	1c42      	adds	r2, r0, #1
 8007b06:	d101      	bne.n	8007b0c <__sflush_r+0x7c>
 8007b08:	682b      	ldr	r3, [r5, #0]
 8007b0a:	b903      	cbnz	r3, 8007b0e <__sflush_r+0x7e>
 8007b0c:	6560      	str	r0, [r4, #84]	; 0x54
 8007b0e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b10:	602f      	str	r7, [r5, #0]
 8007b12:	2900      	cmp	r1, #0
 8007b14:	d0c9      	beq.n	8007aaa <__sflush_r+0x1a>
 8007b16:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b1a:	4299      	cmp	r1, r3
 8007b1c:	d002      	beq.n	8007b24 <__sflush_r+0x94>
 8007b1e:	4628      	mov	r0, r5
 8007b20:	f000 fc94 	bl	800844c <_free_r>
 8007b24:	2000      	movs	r0, #0
 8007b26:	6360      	str	r0, [r4, #52]	; 0x34
 8007b28:	e7c0      	b.n	8007aac <__sflush_r+0x1c>
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	4628      	mov	r0, r5
 8007b2e:	47b0      	blx	r6
 8007b30:	1c41      	adds	r1, r0, #1
 8007b32:	d1c8      	bne.n	8007ac6 <__sflush_r+0x36>
 8007b34:	682b      	ldr	r3, [r5, #0]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d0c5      	beq.n	8007ac6 <__sflush_r+0x36>
 8007b3a:	2b1d      	cmp	r3, #29
 8007b3c:	d001      	beq.n	8007b42 <__sflush_r+0xb2>
 8007b3e:	2b16      	cmp	r3, #22
 8007b40:	d101      	bne.n	8007b46 <__sflush_r+0xb6>
 8007b42:	602f      	str	r7, [r5, #0]
 8007b44:	e7b1      	b.n	8007aaa <__sflush_r+0x1a>
 8007b46:	89a3      	ldrh	r3, [r4, #12]
 8007b48:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b4c:	81a3      	strh	r3, [r4, #12]
 8007b4e:	e7ad      	b.n	8007aac <__sflush_r+0x1c>
 8007b50:	690f      	ldr	r7, [r1, #16]
 8007b52:	2f00      	cmp	r7, #0
 8007b54:	d0a9      	beq.n	8007aaa <__sflush_r+0x1a>
 8007b56:	0793      	lsls	r3, r2, #30
 8007b58:	680e      	ldr	r6, [r1, #0]
 8007b5a:	bf08      	it	eq
 8007b5c:	694b      	ldreq	r3, [r1, #20]
 8007b5e:	600f      	str	r7, [r1, #0]
 8007b60:	bf18      	it	ne
 8007b62:	2300      	movne	r3, #0
 8007b64:	eba6 0807 	sub.w	r8, r6, r7
 8007b68:	608b      	str	r3, [r1, #8]
 8007b6a:	f1b8 0f00 	cmp.w	r8, #0
 8007b6e:	dd9c      	ble.n	8007aaa <__sflush_r+0x1a>
 8007b70:	4643      	mov	r3, r8
 8007b72:	463a      	mov	r2, r7
 8007b74:	6a21      	ldr	r1, [r4, #32]
 8007b76:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007b78:	4628      	mov	r0, r5
 8007b7a:	47b0      	blx	r6
 8007b7c:	2800      	cmp	r0, #0
 8007b7e:	dc06      	bgt.n	8007b8e <__sflush_r+0xfe>
 8007b80:	89a3      	ldrh	r3, [r4, #12]
 8007b82:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007b86:	81a3      	strh	r3, [r4, #12]
 8007b88:	f04f 30ff 	mov.w	r0, #4294967295
 8007b8c:	e78e      	b.n	8007aac <__sflush_r+0x1c>
 8007b8e:	4407      	add	r7, r0
 8007b90:	eba8 0800 	sub.w	r8, r8, r0
 8007b94:	e7e9      	b.n	8007b6a <__sflush_r+0xda>
 8007b96:	bf00      	nop
 8007b98:	20400001 	.word	0x20400001

08007b9c <_fflush_r>:
 8007b9c:	b538      	push	{r3, r4, r5, lr}
 8007b9e:	690b      	ldr	r3, [r1, #16]
 8007ba0:	4605      	mov	r5, r0
 8007ba2:	460c      	mov	r4, r1
 8007ba4:	b1db      	cbz	r3, 8007bde <_fflush_r+0x42>
 8007ba6:	b118      	cbz	r0, 8007bb0 <_fflush_r+0x14>
 8007ba8:	6983      	ldr	r3, [r0, #24]
 8007baa:	b90b      	cbnz	r3, 8007bb0 <_fflush_r+0x14>
 8007bac:	f000 f860 	bl	8007c70 <__sinit>
 8007bb0:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <_fflush_r+0x48>)
 8007bb2:	429c      	cmp	r4, r3
 8007bb4:	d109      	bne.n	8007bca <_fflush_r+0x2e>
 8007bb6:	686c      	ldr	r4, [r5, #4]
 8007bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007bbc:	b17b      	cbz	r3, 8007bde <_fflush_r+0x42>
 8007bbe:	4621      	mov	r1, r4
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007bc6:	f7ff bf63 	b.w	8007a90 <__sflush_r>
 8007bca:	4b07      	ldr	r3, [pc, #28]	; (8007be8 <_fflush_r+0x4c>)
 8007bcc:	429c      	cmp	r4, r3
 8007bce:	d101      	bne.n	8007bd4 <_fflush_r+0x38>
 8007bd0:	68ac      	ldr	r4, [r5, #8]
 8007bd2:	e7f1      	b.n	8007bb8 <_fflush_r+0x1c>
 8007bd4:	4b05      	ldr	r3, [pc, #20]	; (8007bec <_fflush_r+0x50>)
 8007bd6:	429c      	cmp	r4, r3
 8007bd8:	bf08      	it	eq
 8007bda:	68ec      	ldreq	r4, [r5, #12]
 8007bdc:	e7ec      	b.n	8007bb8 <_fflush_r+0x1c>
 8007bde:	2000      	movs	r0, #0
 8007be0:	bd38      	pop	{r3, r4, r5, pc}
 8007be2:	bf00      	nop
 8007be4:	08008b50 	.word	0x08008b50
 8007be8:	08008b70 	.word	0x08008b70
 8007bec:	08008b30 	.word	0x08008b30

08007bf0 <std>:
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	b510      	push	{r4, lr}
 8007bf4:	4604      	mov	r4, r0
 8007bf6:	e9c0 3300 	strd	r3, r3, [r0]
 8007bfa:	6083      	str	r3, [r0, #8]
 8007bfc:	8181      	strh	r1, [r0, #12]
 8007bfe:	6643      	str	r3, [r0, #100]	; 0x64
 8007c00:	81c2      	strh	r2, [r0, #14]
 8007c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c06:	6183      	str	r3, [r0, #24]
 8007c08:	4619      	mov	r1, r3
 8007c0a:	2208      	movs	r2, #8
 8007c0c:	305c      	adds	r0, #92	; 0x5c
 8007c0e:	f7fe fbd5 	bl	80063bc <memset>
 8007c12:	4b05      	ldr	r3, [pc, #20]	; (8007c28 <std+0x38>)
 8007c14:	6263      	str	r3, [r4, #36]	; 0x24
 8007c16:	4b05      	ldr	r3, [pc, #20]	; (8007c2c <std+0x3c>)
 8007c18:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c1a:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <std+0x40>)
 8007c1c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <std+0x44>)
 8007c20:	6224      	str	r4, [r4, #32]
 8007c22:	6323      	str	r3, [r4, #48]	; 0x30
 8007c24:	bd10      	pop	{r4, pc}
 8007c26:	bf00      	nop
 8007c28:	080085bd 	.word	0x080085bd
 8007c2c:	080085df 	.word	0x080085df
 8007c30:	08008617 	.word	0x08008617
 8007c34:	0800863b 	.word	0x0800863b

08007c38 <_cleanup_r>:
 8007c38:	4901      	ldr	r1, [pc, #4]	; (8007c40 <_cleanup_r+0x8>)
 8007c3a:	f000 b885 	b.w	8007d48 <_fwalk_reent>
 8007c3e:	bf00      	nop
 8007c40:	08007b9d 	.word	0x08007b9d

08007c44 <__sfmoreglue>:
 8007c44:	b570      	push	{r4, r5, r6, lr}
 8007c46:	1e4a      	subs	r2, r1, #1
 8007c48:	2568      	movs	r5, #104	; 0x68
 8007c4a:	4355      	muls	r5, r2
 8007c4c:	460e      	mov	r6, r1
 8007c4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c52:	f000 fc49 	bl	80084e8 <_malloc_r>
 8007c56:	4604      	mov	r4, r0
 8007c58:	b140      	cbz	r0, 8007c6c <__sfmoreglue+0x28>
 8007c5a:	2100      	movs	r1, #0
 8007c5c:	e9c0 1600 	strd	r1, r6, [r0]
 8007c60:	300c      	adds	r0, #12
 8007c62:	60a0      	str	r0, [r4, #8]
 8007c64:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c68:	f7fe fba8 	bl	80063bc <memset>
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	bd70      	pop	{r4, r5, r6, pc}

08007c70 <__sinit>:
 8007c70:	6983      	ldr	r3, [r0, #24]
 8007c72:	b510      	push	{r4, lr}
 8007c74:	4604      	mov	r4, r0
 8007c76:	bb33      	cbnz	r3, 8007cc6 <__sinit+0x56>
 8007c78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007c7c:	6503      	str	r3, [r0, #80]	; 0x50
 8007c7e:	4b12      	ldr	r3, [pc, #72]	; (8007cc8 <__sinit+0x58>)
 8007c80:	4a12      	ldr	r2, [pc, #72]	; (8007ccc <__sinit+0x5c>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	6282      	str	r2, [r0, #40]	; 0x28
 8007c86:	4298      	cmp	r0, r3
 8007c88:	bf04      	itt	eq
 8007c8a:	2301      	moveq	r3, #1
 8007c8c:	6183      	streq	r3, [r0, #24]
 8007c8e:	f000 f81f 	bl	8007cd0 <__sfp>
 8007c92:	6060      	str	r0, [r4, #4]
 8007c94:	4620      	mov	r0, r4
 8007c96:	f000 f81b 	bl	8007cd0 <__sfp>
 8007c9a:	60a0      	str	r0, [r4, #8]
 8007c9c:	4620      	mov	r0, r4
 8007c9e:	f000 f817 	bl	8007cd0 <__sfp>
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	60e0      	str	r0, [r4, #12]
 8007ca6:	2104      	movs	r1, #4
 8007ca8:	6860      	ldr	r0, [r4, #4]
 8007caa:	f7ff ffa1 	bl	8007bf0 <std>
 8007cae:	2201      	movs	r2, #1
 8007cb0:	2109      	movs	r1, #9
 8007cb2:	68a0      	ldr	r0, [r4, #8]
 8007cb4:	f7ff ff9c 	bl	8007bf0 <std>
 8007cb8:	2202      	movs	r2, #2
 8007cba:	2112      	movs	r1, #18
 8007cbc:	68e0      	ldr	r0, [r4, #12]
 8007cbe:	f7ff ff97 	bl	8007bf0 <std>
 8007cc2:	2301      	movs	r3, #1
 8007cc4:	61a3      	str	r3, [r4, #24]
 8007cc6:	bd10      	pop	{r4, pc}
 8007cc8:	08008b10 	.word	0x08008b10
 8007ccc:	08007c39 	.word	0x08007c39

08007cd0 <__sfp>:
 8007cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cd2:	4b1b      	ldr	r3, [pc, #108]	; (8007d40 <__sfp+0x70>)
 8007cd4:	681e      	ldr	r6, [r3, #0]
 8007cd6:	69b3      	ldr	r3, [r6, #24]
 8007cd8:	4607      	mov	r7, r0
 8007cda:	b913      	cbnz	r3, 8007ce2 <__sfp+0x12>
 8007cdc:	4630      	mov	r0, r6
 8007cde:	f7ff ffc7 	bl	8007c70 <__sinit>
 8007ce2:	3648      	adds	r6, #72	; 0x48
 8007ce4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007ce8:	3b01      	subs	r3, #1
 8007cea:	d503      	bpl.n	8007cf4 <__sfp+0x24>
 8007cec:	6833      	ldr	r3, [r6, #0]
 8007cee:	b133      	cbz	r3, 8007cfe <__sfp+0x2e>
 8007cf0:	6836      	ldr	r6, [r6, #0]
 8007cf2:	e7f7      	b.n	8007ce4 <__sfp+0x14>
 8007cf4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cf8:	b16d      	cbz	r5, 8007d16 <__sfp+0x46>
 8007cfa:	3468      	adds	r4, #104	; 0x68
 8007cfc:	e7f4      	b.n	8007ce8 <__sfp+0x18>
 8007cfe:	2104      	movs	r1, #4
 8007d00:	4638      	mov	r0, r7
 8007d02:	f7ff ff9f 	bl	8007c44 <__sfmoreglue>
 8007d06:	6030      	str	r0, [r6, #0]
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	d1f1      	bne.n	8007cf0 <__sfp+0x20>
 8007d0c:	230c      	movs	r3, #12
 8007d0e:	603b      	str	r3, [r7, #0]
 8007d10:	4604      	mov	r4, r0
 8007d12:	4620      	mov	r0, r4
 8007d14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d16:	4b0b      	ldr	r3, [pc, #44]	; (8007d44 <__sfp+0x74>)
 8007d18:	6665      	str	r5, [r4, #100]	; 0x64
 8007d1a:	e9c4 5500 	strd	r5, r5, [r4]
 8007d1e:	60a5      	str	r5, [r4, #8]
 8007d20:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8007d24:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8007d28:	2208      	movs	r2, #8
 8007d2a:	4629      	mov	r1, r5
 8007d2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d30:	f7fe fb44 	bl	80063bc <memset>
 8007d34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d3c:	e7e9      	b.n	8007d12 <__sfp+0x42>
 8007d3e:	bf00      	nop
 8007d40:	08008b10 	.word	0x08008b10
 8007d44:	ffff0001 	.word	0xffff0001

08007d48 <_fwalk_reent>:
 8007d48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d4c:	4680      	mov	r8, r0
 8007d4e:	4689      	mov	r9, r1
 8007d50:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d54:	2600      	movs	r6, #0
 8007d56:	b914      	cbnz	r4, 8007d5e <_fwalk_reent+0x16>
 8007d58:	4630      	mov	r0, r6
 8007d5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8007d62:	3f01      	subs	r7, #1
 8007d64:	d501      	bpl.n	8007d6a <_fwalk_reent+0x22>
 8007d66:	6824      	ldr	r4, [r4, #0]
 8007d68:	e7f5      	b.n	8007d56 <_fwalk_reent+0xe>
 8007d6a:	89ab      	ldrh	r3, [r5, #12]
 8007d6c:	2b01      	cmp	r3, #1
 8007d6e:	d907      	bls.n	8007d80 <_fwalk_reent+0x38>
 8007d70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d74:	3301      	adds	r3, #1
 8007d76:	d003      	beq.n	8007d80 <_fwalk_reent+0x38>
 8007d78:	4629      	mov	r1, r5
 8007d7a:	4640      	mov	r0, r8
 8007d7c:	47c8      	blx	r9
 8007d7e:	4306      	orrs	r6, r0
 8007d80:	3568      	adds	r5, #104	; 0x68
 8007d82:	e7ee      	b.n	8007d62 <_fwalk_reent+0x1a>

08007d84 <_localeconv_r>:
 8007d84:	4b04      	ldr	r3, [pc, #16]	; (8007d98 <_localeconv_r+0x14>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6a18      	ldr	r0, [r3, #32]
 8007d8a:	4b04      	ldr	r3, [pc, #16]	; (8007d9c <_localeconv_r+0x18>)
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	bf08      	it	eq
 8007d90:	4618      	moveq	r0, r3
 8007d92:	30f0      	adds	r0, #240	; 0xf0
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	200016ec 	.word	0x200016ec
 8007d9c:	20001750 	.word	0x20001750

08007da0 <__swhatbuf_r>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	460e      	mov	r6, r1
 8007da4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007da8:	2900      	cmp	r1, #0
 8007daa:	b096      	sub	sp, #88	; 0x58
 8007dac:	4614      	mov	r4, r2
 8007dae:	461d      	mov	r5, r3
 8007db0:	da07      	bge.n	8007dc2 <__swhatbuf_r+0x22>
 8007db2:	2300      	movs	r3, #0
 8007db4:	602b      	str	r3, [r5, #0]
 8007db6:	89b3      	ldrh	r3, [r6, #12]
 8007db8:	061a      	lsls	r2, r3, #24
 8007dba:	d410      	bmi.n	8007dde <__swhatbuf_r+0x3e>
 8007dbc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007dc0:	e00e      	b.n	8007de0 <__swhatbuf_r+0x40>
 8007dc2:	466a      	mov	r2, sp
 8007dc4:	f000 fc60 	bl	8008688 <_fstat_r>
 8007dc8:	2800      	cmp	r0, #0
 8007dca:	dbf2      	blt.n	8007db2 <__swhatbuf_r+0x12>
 8007dcc:	9a01      	ldr	r2, [sp, #4]
 8007dce:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007dd2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007dd6:	425a      	negs	r2, r3
 8007dd8:	415a      	adcs	r2, r3
 8007dda:	602a      	str	r2, [r5, #0]
 8007ddc:	e7ee      	b.n	8007dbc <__swhatbuf_r+0x1c>
 8007dde:	2340      	movs	r3, #64	; 0x40
 8007de0:	2000      	movs	r0, #0
 8007de2:	6023      	str	r3, [r4, #0]
 8007de4:	b016      	add	sp, #88	; 0x58
 8007de6:	bd70      	pop	{r4, r5, r6, pc}

08007de8 <__smakebuf_r>:
 8007de8:	898b      	ldrh	r3, [r1, #12]
 8007dea:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dec:	079d      	lsls	r5, r3, #30
 8007dee:	4606      	mov	r6, r0
 8007df0:	460c      	mov	r4, r1
 8007df2:	d507      	bpl.n	8007e04 <__smakebuf_r+0x1c>
 8007df4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	6123      	str	r3, [r4, #16]
 8007dfc:	2301      	movs	r3, #1
 8007dfe:	6163      	str	r3, [r4, #20]
 8007e00:	b002      	add	sp, #8
 8007e02:	bd70      	pop	{r4, r5, r6, pc}
 8007e04:	ab01      	add	r3, sp, #4
 8007e06:	466a      	mov	r2, sp
 8007e08:	f7ff ffca 	bl	8007da0 <__swhatbuf_r>
 8007e0c:	9900      	ldr	r1, [sp, #0]
 8007e0e:	4605      	mov	r5, r0
 8007e10:	4630      	mov	r0, r6
 8007e12:	f000 fb69 	bl	80084e8 <_malloc_r>
 8007e16:	b948      	cbnz	r0, 8007e2c <__smakebuf_r+0x44>
 8007e18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e1c:	059a      	lsls	r2, r3, #22
 8007e1e:	d4ef      	bmi.n	8007e00 <__smakebuf_r+0x18>
 8007e20:	f023 0303 	bic.w	r3, r3, #3
 8007e24:	f043 0302 	orr.w	r3, r3, #2
 8007e28:	81a3      	strh	r3, [r4, #12]
 8007e2a:	e7e3      	b.n	8007df4 <__smakebuf_r+0xc>
 8007e2c:	4b0d      	ldr	r3, [pc, #52]	; (8007e64 <__smakebuf_r+0x7c>)
 8007e2e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	6020      	str	r0, [r4, #0]
 8007e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e38:	81a3      	strh	r3, [r4, #12]
 8007e3a:	9b00      	ldr	r3, [sp, #0]
 8007e3c:	6163      	str	r3, [r4, #20]
 8007e3e:	9b01      	ldr	r3, [sp, #4]
 8007e40:	6120      	str	r0, [r4, #16]
 8007e42:	b15b      	cbz	r3, 8007e5c <__smakebuf_r+0x74>
 8007e44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f000 fc2f 	bl	80086ac <_isatty_r>
 8007e4e:	b128      	cbz	r0, 8007e5c <__smakebuf_r+0x74>
 8007e50:	89a3      	ldrh	r3, [r4, #12]
 8007e52:	f023 0303 	bic.w	r3, r3, #3
 8007e56:	f043 0301 	orr.w	r3, r3, #1
 8007e5a:	81a3      	strh	r3, [r4, #12]
 8007e5c:	89a3      	ldrh	r3, [r4, #12]
 8007e5e:	431d      	orrs	r5, r3
 8007e60:	81a5      	strh	r5, [r4, #12]
 8007e62:	e7cd      	b.n	8007e00 <__smakebuf_r+0x18>
 8007e64:	08007c39 	.word	0x08007c39

08007e68 <malloc>:
 8007e68:	4b02      	ldr	r3, [pc, #8]	; (8007e74 <malloc+0xc>)
 8007e6a:	4601      	mov	r1, r0
 8007e6c:	6818      	ldr	r0, [r3, #0]
 8007e6e:	f000 bb3b 	b.w	80084e8 <_malloc_r>
 8007e72:	bf00      	nop
 8007e74:	200016ec 	.word	0x200016ec

08007e78 <_Balloc>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	460e      	mov	r6, r1
 8007e80:	b93d      	cbnz	r5, 8007e92 <_Balloc+0x1a>
 8007e82:	2010      	movs	r0, #16
 8007e84:	f7ff fff0 	bl	8007e68 <malloc>
 8007e88:	6260      	str	r0, [r4, #36]	; 0x24
 8007e8a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8007e8e:	6005      	str	r5, [r0, #0]
 8007e90:	60c5      	str	r5, [r0, #12]
 8007e92:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8007e94:	68eb      	ldr	r3, [r5, #12]
 8007e96:	b183      	cbz	r3, 8007eba <_Balloc+0x42>
 8007e98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8007ea0:	b9b8      	cbnz	r0, 8007ed2 <_Balloc+0x5a>
 8007ea2:	2101      	movs	r1, #1
 8007ea4:	fa01 f506 	lsl.w	r5, r1, r6
 8007ea8:	1d6a      	adds	r2, r5, #5
 8007eaa:	0092      	lsls	r2, r2, #2
 8007eac:	4620      	mov	r0, r4
 8007eae:	f000 fabf 	bl	8008430 <_calloc_r>
 8007eb2:	b160      	cbz	r0, 8007ece <_Balloc+0x56>
 8007eb4:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8007eb8:	e00e      	b.n	8007ed8 <_Balloc+0x60>
 8007eba:	2221      	movs	r2, #33	; 0x21
 8007ebc:	2104      	movs	r1, #4
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	f000 fab6 	bl	8008430 <_calloc_r>
 8007ec4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007ec6:	60e8      	str	r0, [r5, #12]
 8007ec8:	68db      	ldr	r3, [r3, #12]
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1e4      	bne.n	8007e98 <_Balloc+0x20>
 8007ece:	2000      	movs	r0, #0
 8007ed0:	bd70      	pop	{r4, r5, r6, pc}
 8007ed2:	6802      	ldr	r2, [r0, #0]
 8007ed4:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8007ed8:	2300      	movs	r3, #0
 8007eda:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ede:	e7f7      	b.n	8007ed0 <_Balloc+0x58>

08007ee0 <_Bfree>:
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8007ee4:	4606      	mov	r6, r0
 8007ee6:	460d      	mov	r5, r1
 8007ee8:	b93c      	cbnz	r4, 8007efa <_Bfree+0x1a>
 8007eea:	2010      	movs	r0, #16
 8007eec:	f7ff ffbc 	bl	8007e68 <malloc>
 8007ef0:	6270      	str	r0, [r6, #36]	; 0x24
 8007ef2:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007ef6:	6004      	str	r4, [r0, #0]
 8007ef8:	60c4      	str	r4, [r0, #12]
 8007efa:	b13d      	cbz	r5, 8007f0c <_Bfree+0x2c>
 8007efc:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007efe:	686a      	ldr	r2, [r5, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007f06:	6029      	str	r1, [r5, #0]
 8007f08:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8007f0c:	bd70      	pop	{r4, r5, r6, pc}

08007f0e <__multadd>:
 8007f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f12:	690d      	ldr	r5, [r1, #16]
 8007f14:	461f      	mov	r7, r3
 8007f16:	4606      	mov	r6, r0
 8007f18:	460c      	mov	r4, r1
 8007f1a:	f101 0c14 	add.w	ip, r1, #20
 8007f1e:	2300      	movs	r3, #0
 8007f20:	f8dc 0000 	ldr.w	r0, [ip]
 8007f24:	b281      	uxth	r1, r0
 8007f26:	fb02 7101 	mla	r1, r2, r1, r7
 8007f2a:	0c0f      	lsrs	r7, r1, #16
 8007f2c:	0c00      	lsrs	r0, r0, #16
 8007f2e:	fb02 7000 	mla	r0, r2, r0, r7
 8007f32:	b289      	uxth	r1, r1
 8007f34:	3301      	adds	r3, #1
 8007f36:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8007f3a:	429d      	cmp	r5, r3
 8007f3c:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8007f40:	f84c 1b04 	str.w	r1, [ip], #4
 8007f44:	dcec      	bgt.n	8007f20 <__multadd+0x12>
 8007f46:	b1d7      	cbz	r7, 8007f7e <__multadd+0x70>
 8007f48:	68a3      	ldr	r3, [r4, #8]
 8007f4a:	42ab      	cmp	r3, r5
 8007f4c:	dc12      	bgt.n	8007f74 <__multadd+0x66>
 8007f4e:	6861      	ldr	r1, [r4, #4]
 8007f50:	4630      	mov	r0, r6
 8007f52:	3101      	adds	r1, #1
 8007f54:	f7ff ff90 	bl	8007e78 <_Balloc>
 8007f58:	6922      	ldr	r2, [r4, #16]
 8007f5a:	3202      	adds	r2, #2
 8007f5c:	f104 010c 	add.w	r1, r4, #12
 8007f60:	4680      	mov	r8, r0
 8007f62:	0092      	lsls	r2, r2, #2
 8007f64:	300c      	adds	r0, #12
 8007f66:	f7fe fa05 	bl	8006374 <memcpy>
 8007f6a:	4621      	mov	r1, r4
 8007f6c:	4630      	mov	r0, r6
 8007f6e:	f7ff ffb7 	bl	8007ee0 <_Bfree>
 8007f72:	4644      	mov	r4, r8
 8007f74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f78:	3501      	adds	r5, #1
 8007f7a:	615f      	str	r7, [r3, #20]
 8007f7c:	6125      	str	r5, [r4, #16]
 8007f7e:	4620      	mov	r0, r4
 8007f80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007f84 <__hi0bits>:
 8007f84:	0c02      	lsrs	r2, r0, #16
 8007f86:	0412      	lsls	r2, r2, #16
 8007f88:	4603      	mov	r3, r0
 8007f8a:	b9b2      	cbnz	r2, 8007fba <__hi0bits+0x36>
 8007f8c:	0403      	lsls	r3, r0, #16
 8007f8e:	2010      	movs	r0, #16
 8007f90:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007f94:	bf04      	itt	eq
 8007f96:	021b      	lsleq	r3, r3, #8
 8007f98:	3008      	addeq	r0, #8
 8007f9a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007f9e:	bf04      	itt	eq
 8007fa0:	011b      	lsleq	r3, r3, #4
 8007fa2:	3004      	addeq	r0, #4
 8007fa4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007fa8:	bf04      	itt	eq
 8007faa:	009b      	lsleq	r3, r3, #2
 8007fac:	3002      	addeq	r0, #2
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	db06      	blt.n	8007fc0 <__hi0bits+0x3c>
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	d503      	bpl.n	8007fbe <__hi0bits+0x3a>
 8007fb6:	3001      	adds	r0, #1
 8007fb8:	4770      	bx	lr
 8007fba:	2000      	movs	r0, #0
 8007fbc:	e7e8      	b.n	8007f90 <__hi0bits+0xc>
 8007fbe:	2020      	movs	r0, #32
 8007fc0:	4770      	bx	lr

08007fc2 <__lo0bits>:
 8007fc2:	6803      	ldr	r3, [r0, #0]
 8007fc4:	f013 0207 	ands.w	r2, r3, #7
 8007fc8:	4601      	mov	r1, r0
 8007fca:	d00b      	beq.n	8007fe4 <__lo0bits+0x22>
 8007fcc:	07da      	lsls	r2, r3, #31
 8007fce:	d423      	bmi.n	8008018 <__lo0bits+0x56>
 8007fd0:	0798      	lsls	r0, r3, #30
 8007fd2:	bf49      	itett	mi
 8007fd4:	085b      	lsrmi	r3, r3, #1
 8007fd6:	089b      	lsrpl	r3, r3, #2
 8007fd8:	2001      	movmi	r0, #1
 8007fda:	600b      	strmi	r3, [r1, #0]
 8007fdc:	bf5c      	itt	pl
 8007fde:	600b      	strpl	r3, [r1, #0]
 8007fe0:	2002      	movpl	r0, #2
 8007fe2:	4770      	bx	lr
 8007fe4:	b298      	uxth	r0, r3
 8007fe6:	b9a8      	cbnz	r0, 8008014 <__lo0bits+0x52>
 8007fe8:	0c1b      	lsrs	r3, r3, #16
 8007fea:	2010      	movs	r0, #16
 8007fec:	f013 0fff 	tst.w	r3, #255	; 0xff
 8007ff0:	bf04      	itt	eq
 8007ff2:	0a1b      	lsreq	r3, r3, #8
 8007ff4:	3008      	addeq	r0, #8
 8007ff6:	071a      	lsls	r2, r3, #28
 8007ff8:	bf04      	itt	eq
 8007ffa:	091b      	lsreq	r3, r3, #4
 8007ffc:	3004      	addeq	r0, #4
 8007ffe:	079a      	lsls	r2, r3, #30
 8008000:	bf04      	itt	eq
 8008002:	089b      	lsreq	r3, r3, #2
 8008004:	3002      	addeq	r0, #2
 8008006:	07da      	lsls	r2, r3, #31
 8008008:	d402      	bmi.n	8008010 <__lo0bits+0x4e>
 800800a:	085b      	lsrs	r3, r3, #1
 800800c:	d006      	beq.n	800801c <__lo0bits+0x5a>
 800800e:	3001      	adds	r0, #1
 8008010:	600b      	str	r3, [r1, #0]
 8008012:	4770      	bx	lr
 8008014:	4610      	mov	r0, r2
 8008016:	e7e9      	b.n	8007fec <__lo0bits+0x2a>
 8008018:	2000      	movs	r0, #0
 800801a:	4770      	bx	lr
 800801c:	2020      	movs	r0, #32
 800801e:	4770      	bx	lr

08008020 <__i2b>:
 8008020:	b510      	push	{r4, lr}
 8008022:	460c      	mov	r4, r1
 8008024:	2101      	movs	r1, #1
 8008026:	f7ff ff27 	bl	8007e78 <_Balloc>
 800802a:	2201      	movs	r2, #1
 800802c:	6144      	str	r4, [r0, #20]
 800802e:	6102      	str	r2, [r0, #16]
 8008030:	bd10      	pop	{r4, pc}

08008032 <__multiply>:
 8008032:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008036:	4614      	mov	r4, r2
 8008038:	690a      	ldr	r2, [r1, #16]
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	429a      	cmp	r2, r3
 800803e:	bfb8      	it	lt
 8008040:	460b      	movlt	r3, r1
 8008042:	4688      	mov	r8, r1
 8008044:	bfbc      	itt	lt
 8008046:	46a0      	movlt	r8, r4
 8008048:	461c      	movlt	r4, r3
 800804a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800804e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8008052:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008056:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800805a:	eb07 0609 	add.w	r6, r7, r9
 800805e:	42b3      	cmp	r3, r6
 8008060:	bfb8      	it	lt
 8008062:	3101      	addlt	r1, #1
 8008064:	f7ff ff08 	bl	8007e78 <_Balloc>
 8008068:	f100 0514 	add.w	r5, r0, #20
 800806c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8008070:	462b      	mov	r3, r5
 8008072:	2200      	movs	r2, #0
 8008074:	4573      	cmp	r3, lr
 8008076:	d316      	bcc.n	80080a6 <__multiply+0x74>
 8008078:	f104 0214 	add.w	r2, r4, #20
 800807c:	f108 0114 	add.w	r1, r8, #20
 8008080:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8008084:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8008088:	9300      	str	r3, [sp, #0]
 800808a:	9b00      	ldr	r3, [sp, #0]
 800808c:	9201      	str	r2, [sp, #4]
 800808e:	4293      	cmp	r3, r2
 8008090:	d80c      	bhi.n	80080ac <__multiply+0x7a>
 8008092:	2e00      	cmp	r6, #0
 8008094:	dd03      	ble.n	800809e <__multiply+0x6c>
 8008096:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800809a:	2b00      	cmp	r3, #0
 800809c:	d05d      	beq.n	800815a <__multiply+0x128>
 800809e:	6106      	str	r6, [r0, #16]
 80080a0:	b003      	add	sp, #12
 80080a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080a6:	f843 2b04 	str.w	r2, [r3], #4
 80080aa:	e7e3      	b.n	8008074 <__multiply+0x42>
 80080ac:	f8b2 b000 	ldrh.w	fp, [r2]
 80080b0:	f1bb 0f00 	cmp.w	fp, #0
 80080b4:	d023      	beq.n	80080fe <__multiply+0xcc>
 80080b6:	4689      	mov	r9, r1
 80080b8:	46ac      	mov	ip, r5
 80080ba:	f04f 0800 	mov.w	r8, #0
 80080be:	f859 4b04 	ldr.w	r4, [r9], #4
 80080c2:	f8dc a000 	ldr.w	sl, [ip]
 80080c6:	b2a3      	uxth	r3, r4
 80080c8:	fa1f fa8a 	uxth.w	sl, sl
 80080cc:	fb0b a303 	mla	r3, fp, r3, sl
 80080d0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 80080d4:	f8dc 4000 	ldr.w	r4, [ip]
 80080d8:	4443      	add	r3, r8
 80080da:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80080de:	fb0b 840a 	mla	r4, fp, sl, r8
 80080e2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 80080e6:	46e2      	mov	sl, ip
 80080e8:	b29b      	uxth	r3, r3
 80080ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80080ee:	454f      	cmp	r7, r9
 80080f0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 80080f4:	f84a 3b04 	str.w	r3, [sl], #4
 80080f8:	d82b      	bhi.n	8008152 <__multiply+0x120>
 80080fa:	f8cc 8004 	str.w	r8, [ip, #4]
 80080fe:	9b01      	ldr	r3, [sp, #4]
 8008100:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8008104:	3204      	adds	r2, #4
 8008106:	f1ba 0f00 	cmp.w	sl, #0
 800810a:	d020      	beq.n	800814e <__multiply+0x11c>
 800810c:	682b      	ldr	r3, [r5, #0]
 800810e:	4689      	mov	r9, r1
 8008110:	46a8      	mov	r8, r5
 8008112:	f04f 0b00 	mov.w	fp, #0
 8008116:	f8b9 c000 	ldrh.w	ip, [r9]
 800811a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800811e:	fb0a 440c 	mla	r4, sl, ip, r4
 8008122:	445c      	add	r4, fp
 8008124:	46c4      	mov	ip, r8
 8008126:	b29b      	uxth	r3, r3
 8008128:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800812c:	f84c 3b04 	str.w	r3, [ip], #4
 8008130:	f859 3b04 	ldr.w	r3, [r9], #4
 8008134:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8008138:	0c1b      	lsrs	r3, r3, #16
 800813a:	fb0a b303 	mla	r3, sl, r3, fp
 800813e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8008142:	454f      	cmp	r7, r9
 8008144:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8008148:	d805      	bhi.n	8008156 <__multiply+0x124>
 800814a:	f8c8 3004 	str.w	r3, [r8, #4]
 800814e:	3504      	adds	r5, #4
 8008150:	e79b      	b.n	800808a <__multiply+0x58>
 8008152:	46d4      	mov	ip, sl
 8008154:	e7b3      	b.n	80080be <__multiply+0x8c>
 8008156:	46e0      	mov	r8, ip
 8008158:	e7dd      	b.n	8008116 <__multiply+0xe4>
 800815a:	3e01      	subs	r6, #1
 800815c:	e799      	b.n	8008092 <__multiply+0x60>
	...

08008160 <__pow5mult>:
 8008160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008164:	4615      	mov	r5, r2
 8008166:	f012 0203 	ands.w	r2, r2, #3
 800816a:	4606      	mov	r6, r0
 800816c:	460f      	mov	r7, r1
 800816e:	d007      	beq.n	8008180 <__pow5mult+0x20>
 8008170:	3a01      	subs	r2, #1
 8008172:	4c21      	ldr	r4, [pc, #132]	; (80081f8 <__pow5mult+0x98>)
 8008174:	2300      	movs	r3, #0
 8008176:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800817a:	f7ff fec8 	bl	8007f0e <__multadd>
 800817e:	4607      	mov	r7, r0
 8008180:	10ad      	asrs	r5, r5, #2
 8008182:	d035      	beq.n	80081f0 <__pow5mult+0x90>
 8008184:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8008186:	b93c      	cbnz	r4, 8008198 <__pow5mult+0x38>
 8008188:	2010      	movs	r0, #16
 800818a:	f7ff fe6d 	bl	8007e68 <malloc>
 800818e:	6270      	str	r0, [r6, #36]	; 0x24
 8008190:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008194:	6004      	str	r4, [r0, #0]
 8008196:	60c4      	str	r4, [r0, #12]
 8008198:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800819c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081a0:	b94c      	cbnz	r4, 80081b6 <__pow5mult+0x56>
 80081a2:	f240 2171 	movw	r1, #625	; 0x271
 80081a6:	4630      	mov	r0, r6
 80081a8:	f7ff ff3a 	bl	8008020 <__i2b>
 80081ac:	2300      	movs	r3, #0
 80081ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80081b2:	4604      	mov	r4, r0
 80081b4:	6003      	str	r3, [r0, #0]
 80081b6:	f04f 0800 	mov.w	r8, #0
 80081ba:	07eb      	lsls	r3, r5, #31
 80081bc:	d50a      	bpl.n	80081d4 <__pow5mult+0x74>
 80081be:	4639      	mov	r1, r7
 80081c0:	4622      	mov	r2, r4
 80081c2:	4630      	mov	r0, r6
 80081c4:	f7ff ff35 	bl	8008032 <__multiply>
 80081c8:	4639      	mov	r1, r7
 80081ca:	4681      	mov	r9, r0
 80081cc:	4630      	mov	r0, r6
 80081ce:	f7ff fe87 	bl	8007ee0 <_Bfree>
 80081d2:	464f      	mov	r7, r9
 80081d4:	106d      	asrs	r5, r5, #1
 80081d6:	d00b      	beq.n	80081f0 <__pow5mult+0x90>
 80081d8:	6820      	ldr	r0, [r4, #0]
 80081da:	b938      	cbnz	r0, 80081ec <__pow5mult+0x8c>
 80081dc:	4622      	mov	r2, r4
 80081de:	4621      	mov	r1, r4
 80081e0:	4630      	mov	r0, r6
 80081e2:	f7ff ff26 	bl	8008032 <__multiply>
 80081e6:	6020      	str	r0, [r4, #0]
 80081e8:	f8c0 8000 	str.w	r8, [r0]
 80081ec:	4604      	mov	r4, r0
 80081ee:	e7e4      	b.n	80081ba <__pow5mult+0x5a>
 80081f0:	4638      	mov	r0, r7
 80081f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081f6:	bf00      	nop
 80081f8:	08008c80 	.word	0x08008c80

080081fc <__lshift>:
 80081fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008200:	460c      	mov	r4, r1
 8008202:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008206:	6923      	ldr	r3, [r4, #16]
 8008208:	6849      	ldr	r1, [r1, #4]
 800820a:	eb0a 0903 	add.w	r9, sl, r3
 800820e:	68a3      	ldr	r3, [r4, #8]
 8008210:	4607      	mov	r7, r0
 8008212:	4616      	mov	r6, r2
 8008214:	f109 0501 	add.w	r5, r9, #1
 8008218:	42ab      	cmp	r3, r5
 800821a:	db32      	blt.n	8008282 <__lshift+0x86>
 800821c:	4638      	mov	r0, r7
 800821e:	f7ff fe2b 	bl	8007e78 <_Balloc>
 8008222:	2300      	movs	r3, #0
 8008224:	4680      	mov	r8, r0
 8008226:	f100 0114 	add.w	r1, r0, #20
 800822a:	461a      	mov	r2, r3
 800822c:	4553      	cmp	r3, sl
 800822e:	db2b      	blt.n	8008288 <__lshift+0x8c>
 8008230:	6920      	ldr	r0, [r4, #16]
 8008232:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008236:	f104 0314 	add.w	r3, r4, #20
 800823a:	f016 021f 	ands.w	r2, r6, #31
 800823e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008242:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008246:	d025      	beq.n	8008294 <__lshift+0x98>
 8008248:	f1c2 0e20 	rsb	lr, r2, #32
 800824c:	2000      	movs	r0, #0
 800824e:	681e      	ldr	r6, [r3, #0]
 8008250:	468a      	mov	sl, r1
 8008252:	4096      	lsls	r6, r2
 8008254:	4330      	orrs	r0, r6
 8008256:	f84a 0b04 	str.w	r0, [sl], #4
 800825a:	f853 0b04 	ldr.w	r0, [r3], #4
 800825e:	459c      	cmp	ip, r3
 8008260:	fa20 f00e 	lsr.w	r0, r0, lr
 8008264:	d814      	bhi.n	8008290 <__lshift+0x94>
 8008266:	6048      	str	r0, [r1, #4]
 8008268:	b108      	cbz	r0, 800826e <__lshift+0x72>
 800826a:	f109 0502 	add.w	r5, r9, #2
 800826e:	3d01      	subs	r5, #1
 8008270:	4638      	mov	r0, r7
 8008272:	f8c8 5010 	str.w	r5, [r8, #16]
 8008276:	4621      	mov	r1, r4
 8008278:	f7ff fe32 	bl	8007ee0 <_Bfree>
 800827c:	4640      	mov	r0, r8
 800827e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008282:	3101      	adds	r1, #1
 8008284:	005b      	lsls	r3, r3, #1
 8008286:	e7c7      	b.n	8008218 <__lshift+0x1c>
 8008288:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800828c:	3301      	adds	r3, #1
 800828e:	e7cd      	b.n	800822c <__lshift+0x30>
 8008290:	4651      	mov	r1, sl
 8008292:	e7dc      	b.n	800824e <__lshift+0x52>
 8008294:	3904      	subs	r1, #4
 8008296:	f853 2b04 	ldr.w	r2, [r3], #4
 800829a:	f841 2f04 	str.w	r2, [r1, #4]!
 800829e:	459c      	cmp	ip, r3
 80082a0:	d8f9      	bhi.n	8008296 <__lshift+0x9a>
 80082a2:	e7e4      	b.n	800826e <__lshift+0x72>

080082a4 <__mcmp>:
 80082a4:	6903      	ldr	r3, [r0, #16]
 80082a6:	690a      	ldr	r2, [r1, #16]
 80082a8:	1a9b      	subs	r3, r3, r2
 80082aa:	b530      	push	{r4, r5, lr}
 80082ac:	d10c      	bne.n	80082c8 <__mcmp+0x24>
 80082ae:	0092      	lsls	r2, r2, #2
 80082b0:	3014      	adds	r0, #20
 80082b2:	3114      	adds	r1, #20
 80082b4:	1884      	adds	r4, r0, r2
 80082b6:	4411      	add	r1, r2
 80082b8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80082bc:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80082c0:	4295      	cmp	r5, r2
 80082c2:	d003      	beq.n	80082cc <__mcmp+0x28>
 80082c4:	d305      	bcc.n	80082d2 <__mcmp+0x2e>
 80082c6:	2301      	movs	r3, #1
 80082c8:	4618      	mov	r0, r3
 80082ca:	bd30      	pop	{r4, r5, pc}
 80082cc:	42a0      	cmp	r0, r4
 80082ce:	d3f3      	bcc.n	80082b8 <__mcmp+0x14>
 80082d0:	e7fa      	b.n	80082c8 <__mcmp+0x24>
 80082d2:	f04f 33ff 	mov.w	r3, #4294967295
 80082d6:	e7f7      	b.n	80082c8 <__mcmp+0x24>

080082d8 <__mdiff>:
 80082d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082dc:	460d      	mov	r5, r1
 80082de:	4607      	mov	r7, r0
 80082e0:	4611      	mov	r1, r2
 80082e2:	4628      	mov	r0, r5
 80082e4:	4614      	mov	r4, r2
 80082e6:	f7ff ffdd 	bl	80082a4 <__mcmp>
 80082ea:	1e06      	subs	r6, r0, #0
 80082ec:	d108      	bne.n	8008300 <__mdiff+0x28>
 80082ee:	4631      	mov	r1, r6
 80082f0:	4638      	mov	r0, r7
 80082f2:	f7ff fdc1 	bl	8007e78 <_Balloc>
 80082f6:	2301      	movs	r3, #1
 80082f8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80082fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008300:	bfa4      	itt	ge
 8008302:	4623      	movge	r3, r4
 8008304:	462c      	movge	r4, r5
 8008306:	4638      	mov	r0, r7
 8008308:	6861      	ldr	r1, [r4, #4]
 800830a:	bfa6      	itte	ge
 800830c:	461d      	movge	r5, r3
 800830e:	2600      	movge	r6, #0
 8008310:	2601      	movlt	r6, #1
 8008312:	f7ff fdb1 	bl	8007e78 <_Balloc>
 8008316:	692b      	ldr	r3, [r5, #16]
 8008318:	60c6      	str	r6, [r0, #12]
 800831a:	6926      	ldr	r6, [r4, #16]
 800831c:	f105 0914 	add.w	r9, r5, #20
 8008320:	f104 0214 	add.w	r2, r4, #20
 8008324:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8008328:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800832c:	f100 0514 	add.w	r5, r0, #20
 8008330:	f04f 0e00 	mov.w	lr, #0
 8008334:	f852 ab04 	ldr.w	sl, [r2], #4
 8008338:	f859 4b04 	ldr.w	r4, [r9], #4
 800833c:	fa1e f18a 	uxtah	r1, lr, sl
 8008340:	b2a3      	uxth	r3, r4
 8008342:	1ac9      	subs	r1, r1, r3
 8008344:	0c23      	lsrs	r3, r4, #16
 8008346:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800834a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800834e:	b289      	uxth	r1, r1
 8008350:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8008354:	45c8      	cmp	r8, r9
 8008356:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800835a:	4694      	mov	ip, r2
 800835c:	f845 3b04 	str.w	r3, [r5], #4
 8008360:	d8e8      	bhi.n	8008334 <__mdiff+0x5c>
 8008362:	45bc      	cmp	ip, r7
 8008364:	d304      	bcc.n	8008370 <__mdiff+0x98>
 8008366:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800836a:	b183      	cbz	r3, 800838e <__mdiff+0xb6>
 800836c:	6106      	str	r6, [r0, #16]
 800836e:	e7c5      	b.n	80082fc <__mdiff+0x24>
 8008370:	f85c 1b04 	ldr.w	r1, [ip], #4
 8008374:	fa1e f381 	uxtah	r3, lr, r1
 8008378:	141a      	asrs	r2, r3, #16
 800837a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800837e:	b29b      	uxth	r3, r3
 8008380:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008384:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8008388:	f845 3b04 	str.w	r3, [r5], #4
 800838c:	e7e9      	b.n	8008362 <__mdiff+0x8a>
 800838e:	3e01      	subs	r6, #1
 8008390:	e7e9      	b.n	8008366 <__mdiff+0x8e>

08008392 <__d2b>:
 8008392:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008396:	460e      	mov	r6, r1
 8008398:	2101      	movs	r1, #1
 800839a:	ec59 8b10 	vmov	r8, r9, d0
 800839e:	4615      	mov	r5, r2
 80083a0:	f7ff fd6a 	bl	8007e78 <_Balloc>
 80083a4:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80083a8:	4607      	mov	r7, r0
 80083aa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80083ae:	bb34      	cbnz	r4, 80083fe <__d2b+0x6c>
 80083b0:	9301      	str	r3, [sp, #4]
 80083b2:	f1b8 0300 	subs.w	r3, r8, #0
 80083b6:	d027      	beq.n	8008408 <__d2b+0x76>
 80083b8:	a802      	add	r0, sp, #8
 80083ba:	f840 3d08 	str.w	r3, [r0, #-8]!
 80083be:	f7ff fe00 	bl	8007fc2 <__lo0bits>
 80083c2:	9900      	ldr	r1, [sp, #0]
 80083c4:	b1f0      	cbz	r0, 8008404 <__d2b+0x72>
 80083c6:	9a01      	ldr	r2, [sp, #4]
 80083c8:	f1c0 0320 	rsb	r3, r0, #32
 80083cc:	fa02 f303 	lsl.w	r3, r2, r3
 80083d0:	430b      	orrs	r3, r1
 80083d2:	40c2      	lsrs	r2, r0
 80083d4:	617b      	str	r3, [r7, #20]
 80083d6:	9201      	str	r2, [sp, #4]
 80083d8:	9b01      	ldr	r3, [sp, #4]
 80083da:	61bb      	str	r3, [r7, #24]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	bf14      	ite	ne
 80083e0:	2102      	movne	r1, #2
 80083e2:	2101      	moveq	r1, #1
 80083e4:	6139      	str	r1, [r7, #16]
 80083e6:	b1c4      	cbz	r4, 800841a <__d2b+0x88>
 80083e8:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80083ec:	4404      	add	r4, r0
 80083ee:	6034      	str	r4, [r6, #0]
 80083f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80083f4:	6028      	str	r0, [r5, #0]
 80083f6:	4638      	mov	r0, r7
 80083f8:	b003      	add	sp, #12
 80083fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80083fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008402:	e7d5      	b.n	80083b0 <__d2b+0x1e>
 8008404:	6179      	str	r1, [r7, #20]
 8008406:	e7e7      	b.n	80083d8 <__d2b+0x46>
 8008408:	a801      	add	r0, sp, #4
 800840a:	f7ff fdda 	bl	8007fc2 <__lo0bits>
 800840e:	9b01      	ldr	r3, [sp, #4]
 8008410:	617b      	str	r3, [r7, #20]
 8008412:	2101      	movs	r1, #1
 8008414:	6139      	str	r1, [r7, #16]
 8008416:	3020      	adds	r0, #32
 8008418:	e7e5      	b.n	80083e6 <__d2b+0x54>
 800841a:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800841e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008422:	6030      	str	r0, [r6, #0]
 8008424:	6918      	ldr	r0, [r3, #16]
 8008426:	f7ff fdad 	bl	8007f84 <__hi0bits>
 800842a:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800842e:	e7e1      	b.n	80083f4 <__d2b+0x62>

08008430 <_calloc_r>:
 8008430:	b538      	push	{r3, r4, r5, lr}
 8008432:	fb02 f401 	mul.w	r4, r2, r1
 8008436:	4621      	mov	r1, r4
 8008438:	f000 f856 	bl	80084e8 <_malloc_r>
 800843c:	4605      	mov	r5, r0
 800843e:	b118      	cbz	r0, 8008448 <_calloc_r+0x18>
 8008440:	4622      	mov	r2, r4
 8008442:	2100      	movs	r1, #0
 8008444:	f7fd ffba 	bl	80063bc <memset>
 8008448:	4628      	mov	r0, r5
 800844a:	bd38      	pop	{r3, r4, r5, pc}

0800844c <_free_r>:
 800844c:	b538      	push	{r3, r4, r5, lr}
 800844e:	4605      	mov	r5, r0
 8008450:	2900      	cmp	r1, #0
 8008452:	d045      	beq.n	80084e0 <_free_r+0x94>
 8008454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008458:	1f0c      	subs	r4, r1, #4
 800845a:	2b00      	cmp	r3, #0
 800845c:	bfb8      	it	lt
 800845e:	18e4      	addlt	r4, r4, r3
 8008460:	f000 f958 	bl	8008714 <__malloc_lock>
 8008464:	4a1f      	ldr	r2, [pc, #124]	; (80084e4 <_free_r+0x98>)
 8008466:	6813      	ldr	r3, [r2, #0]
 8008468:	4610      	mov	r0, r2
 800846a:	b933      	cbnz	r3, 800847a <_free_r+0x2e>
 800846c:	6063      	str	r3, [r4, #4]
 800846e:	6014      	str	r4, [r2, #0]
 8008470:	4628      	mov	r0, r5
 8008472:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008476:	f000 b94e 	b.w	8008716 <__malloc_unlock>
 800847a:	42a3      	cmp	r3, r4
 800847c:	d90c      	bls.n	8008498 <_free_r+0x4c>
 800847e:	6821      	ldr	r1, [r4, #0]
 8008480:	1862      	adds	r2, r4, r1
 8008482:	4293      	cmp	r3, r2
 8008484:	bf04      	itt	eq
 8008486:	681a      	ldreq	r2, [r3, #0]
 8008488:	685b      	ldreq	r3, [r3, #4]
 800848a:	6063      	str	r3, [r4, #4]
 800848c:	bf04      	itt	eq
 800848e:	1852      	addeq	r2, r2, r1
 8008490:	6022      	streq	r2, [r4, #0]
 8008492:	6004      	str	r4, [r0, #0]
 8008494:	e7ec      	b.n	8008470 <_free_r+0x24>
 8008496:	4613      	mov	r3, r2
 8008498:	685a      	ldr	r2, [r3, #4]
 800849a:	b10a      	cbz	r2, 80084a0 <_free_r+0x54>
 800849c:	42a2      	cmp	r2, r4
 800849e:	d9fa      	bls.n	8008496 <_free_r+0x4a>
 80084a0:	6819      	ldr	r1, [r3, #0]
 80084a2:	1858      	adds	r0, r3, r1
 80084a4:	42a0      	cmp	r0, r4
 80084a6:	d10b      	bne.n	80084c0 <_free_r+0x74>
 80084a8:	6820      	ldr	r0, [r4, #0]
 80084aa:	4401      	add	r1, r0
 80084ac:	1858      	adds	r0, r3, r1
 80084ae:	4282      	cmp	r2, r0
 80084b0:	6019      	str	r1, [r3, #0]
 80084b2:	d1dd      	bne.n	8008470 <_free_r+0x24>
 80084b4:	6810      	ldr	r0, [r2, #0]
 80084b6:	6852      	ldr	r2, [r2, #4]
 80084b8:	605a      	str	r2, [r3, #4]
 80084ba:	4401      	add	r1, r0
 80084bc:	6019      	str	r1, [r3, #0]
 80084be:	e7d7      	b.n	8008470 <_free_r+0x24>
 80084c0:	d902      	bls.n	80084c8 <_free_r+0x7c>
 80084c2:	230c      	movs	r3, #12
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	e7d3      	b.n	8008470 <_free_r+0x24>
 80084c8:	6820      	ldr	r0, [r4, #0]
 80084ca:	1821      	adds	r1, r4, r0
 80084cc:	428a      	cmp	r2, r1
 80084ce:	bf04      	itt	eq
 80084d0:	6811      	ldreq	r1, [r2, #0]
 80084d2:	6852      	ldreq	r2, [r2, #4]
 80084d4:	6062      	str	r2, [r4, #4]
 80084d6:	bf04      	itt	eq
 80084d8:	1809      	addeq	r1, r1, r0
 80084da:	6021      	streq	r1, [r4, #0]
 80084dc:	605c      	str	r4, [r3, #4]
 80084de:	e7c7      	b.n	8008470 <_free_r+0x24>
 80084e0:	bd38      	pop	{r3, r4, r5, pc}
 80084e2:	bf00      	nop
 80084e4:	20001c20 	.word	0x20001c20

080084e8 <_malloc_r>:
 80084e8:	b570      	push	{r4, r5, r6, lr}
 80084ea:	1ccd      	adds	r5, r1, #3
 80084ec:	f025 0503 	bic.w	r5, r5, #3
 80084f0:	3508      	adds	r5, #8
 80084f2:	2d0c      	cmp	r5, #12
 80084f4:	bf38      	it	cc
 80084f6:	250c      	movcc	r5, #12
 80084f8:	2d00      	cmp	r5, #0
 80084fa:	4606      	mov	r6, r0
 80084fc:	db01      	blt.n	8008502 <_malloc_r+0x1a>
 80084fe:	42a9      	cmp	r1, r5
 8008500:	d903      	bls.n	800850a <_malloc_r+0x22>
 8008502:	230c      	movs	r3, #12
 8008504:	6033      	str	r3, [r6, #0]
 8008506:	2000      	movs	r0, #0
 8008508:	bd70      	pop	{r4, r5, r6, pc}
 800850a:	f000 f903 	bl	8008714 <__malloc_lock>
 800850e:	4a21      	ldr	r2, [pc, #132]	; (8008594 <_malloc_r+0xac>)
 8008510:	6814      	ldr	r4, [r2, #0]
 8008512:	4621      	mov	r1, r4
 8008514:	b991      	cbnz	r1, 800853c <_malloc_r+0x54>
 8008516:	4c20      	ldr	r4, [pc, #128]	; (8008598 <_malloc_r+0xb0>)
 8008518:	6823      	ldr	r3, [r4, #0]
 800851a:	b91b      	cbnz	r3, 8008524 <_malloc_r+0x3c>
 800851c:	4630      	mov	r0, r6
 800851e:	f000 f83d 	bl	800859c <_sbrk_r>
 8008522:	6020      	str	r0, [r4, #0]
 8008524:	4629      	mov	r1, r5
 8008526:	4630      	mov	r0, r6
 8008528:	f000 f838 	bl	800859c <_sbrk_r>
 800852c:	1c43      	adds	r3, r0, #1
 800852e:	d124      	bne.n	800857a <_malloc_r+0x92>
 8008530:	230c      	movs	r3, #12
 8008532:	6033      	str	r3, [r6, #0]
 8008534:	4630      	mov	r0, r6
 8008536:	f000 f8ee 	bl	8008716 <__malloc_unlock>
 800853a:	e7e4      	b.n	8008506 <_malloc_r+0x1e>
 800853c:	680b      	ldr	r3, [r1, #0]
 800853e:	1b5b      	subs	r3, r3, r5
 8008540:	d418      	bmi.n	8008574 <_malloc_r+0x8c>
 8008542:	2b0b      	cmp	r3, #11
 8008544:	d90f      	bls.n	8008566 <_malloc_r+0x7e>
 8008546:	600b      	str	r3, [r1, #0]
 8008548:	50cd      	str	r5, [r1, r3]
 800854a:	18cc      	adds	r4, r1, r3
 800854c:	4630      	mov	r0, r6
 800854e:	f000 f8e2 	bl	8008716 <__malloc_unlock>
 8008552:	f104 000b 	add.w	r0, r4, #11
 8008556:	1d23      	adds	r3, r4, #4
 8008558:	f020 0007 	bic.w	r0, r0, #7
 800855c:	1ac3      	subs	r3, r0, r3
 800855e:	d0d3      	beq.n	8008508 <_malloc_r+0x20>
 8008560:	425a      	negs	r2, r3
 8008562:	50e2      	str	r2, [r4, r3]
 8008564:	e7d0      	b.n	8008508 <_malloc_r+0x20>
 8008566:	428c      	cmp	r4, r1
 8008568:	684b      	ldr	r3, [r1, #4]
 800856a:	bf16      	itet	ne
 800856c:	6063      	strne	r3, [r4, #4]
 800856e:	6013      	streq	r3, [r2, #0]
 8008570:	460c      	movne	r4, r1
 8008572:	e7eb      	b.n	800854c <_malloc_r+0x64>
 8008574:	460c      	mov	r4, r1
 8008576:	6849      	ldr	r1, [r1, #4]
 8008578:	e7cc      	b.n	8008514 <_malloc_r+0x2c>
 800857a:	1cc4      	adds	r4, r0, #3
 800857c:	f024 0403 	bic.w	r4, r4, #3
 8008580:	42a0      	cmp	r0, r4
 8008582:	d005      	beq.n	8008590 <_malloc_r+0xa8>
 8008584:	1a21      	subs	r1, r4, r0
 8008586:	4630      	mov	r0, r6
 8008588:	f000 f808 	bl	800859c <_sbrk_r>
 800858c:	3001      	adds	r0, #1
 800858e:	d0cf      	beq.n	8008530 <_malloc_r+0x48>
 8008590:	6025      	str	r5, [r4, #0]
 8008592:	e7db      	b.n	800854c <_malloc_r+0x64>
 8008594:	20001c20 	.word	0x20001c20
 8008598:	20001c24 	.word	0x20001c24

0800859c <_sbrk_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4c06      	ldr	r4, [pc, #24]	; (80085b8 <_sbrk_r+0x1c>)
 80085a0:	2300      	movs	r3, #0
 80085a2:	4605      	mov	r5, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	6023      	str	r3, [r4, #0]
 80085a8:	f7fa fdfa 	bl	80031a0 <_sbrk>
 80085ac:	1c43      	adds	r3, r0, #1
 80085ae:	d102      	bne.n	80085b6 <_sbrk_r+0x1a>
 80085b0:	6823      	ldr	r3, [r4, #0]
 80085b2:	b103      	cbz	r3, 80085b6 <_sbrk_r+0x1a>
 80085b4:	602b      	str	r3, [r5, #0]
 80085b6:	bd38      	pop	{r3, r4, r5, pc}
 80085b8:	20002548 	.word	0x20002548

080085bc <__sread>:
 80085bc:	b510      	push	{r4, lr}
 80085be:	460c      	mov	r4, r1
 80085c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085c4:	f000 f8a8 	bl	8008718 <_read_r>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	bfab      	itete	ge
 80085cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80085ce:	89a3      	ldrhlt	r3, [r4, #12]
 80085d0:	181b      	addge	r3, r3, r0
 80085d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80085d6:	bfac      	ite	ge
 80085d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80085da:	81a3      	strhlt	r3, [r4, #12]
 80085dc:	bd10      	pop	{r4, pc}

080085de <__swrite>:
 80085de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80085e2:	461f      	mov	r7, r3
 80085e4:	898b      	ldrh	r3, [r1, #12]
 80085e6:	05db      	lsls	r3, r3, #23
 80085e8:	4605      	mov	r5, r0
 80085ea:	460c      	mov	r4, r1
 80085ec:	4616      	mov	r6, r2
 80085ee:	d505      	bpl.n	80085fc <__swrite+0x1e>
 80085f0:	2302      	movs	r3, #2
 80085f2:	2200      	movs	r2, #0
 80085f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f8:	f000 f868 	bl	80086cc <_lseek_r>
 80085fc:	89a3      	ldrh	r3, [r4, #12]
 80085fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008602:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008606:	81a3      	strh	r3, [r4, #12]
 8008608:	4632      	mov	r2, r6
 800860a:	463b      	mov	r3, r7
 800860c:	4628      	mov	r0, r5
 800860e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008612:	f000 b817 	b.w	8008644 <_write_r>

08008616 <__sseek>:
 8008616:	b510      	push	{r4, lr}
 8008618:	460c      	mov	r4, r1
 800861a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800861e:	f000 f855 	bl	80086cc <_lseek_r>
 8008622:	1c43      	adds	r3, r0, #1
 8008624:	89a3      	ldrh	r3, [r4, #12]
 8008626:	bf15      	itete	ne
 8008628:	6560      	strne	r0, [r4, #84]	; 0x54
 800862a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800862e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008632:	81a3      	strheq	r3, [r4, #12]
 8008634:	bf18      	it	ne
 8008636:	81a3      	strhne	r3, [r4, #12]
 8008638:	bd10      	pop	{r4, pc}

0800863a <__sclose>:
 800863a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800863e:	f000 b813 	b.w	8008668 <_close_r>
	...

08008644 <_write_r>:
 8008644:	b538      	push	{r3, r4, r5, lr}
 8008646:	4c07      	ldr	r4, [pc, #28]	; (8008664 <_write_r+0x20>)
 8008648:	4605      	mov	r5, r0
 800864a:	4608      	mov	r0, r1
 800864c:	4611      	mov	r1, r2
 800864e:	2200      	movs	r2, #0
 8008650:	6022      	str	r2, [r4, #0]
 8008652:	461a      	mov	r2, r3
 8008654:	f7f9 f934 	bl	80018c0 <_write>
 8008658:	1c43      	adds	r3, r0, #1
 800865a:	d102      	bne.n	8008662 <_write_r+0x1e>
 800865c:	6823      	ldr	r3, [r4, #0]
 800865e:	b103      	cbz	r3, 8008662 <_write_r+0x1e>
 8008660:	602b      	str	r3, [r5, #0]
 8008662:	bd38      	pop	{r3, r4, r5, pc}
 8008664:	20002548 	.word	0x20002548

08008668 <_close_r>:
 8008668:	b538      	push	{r3, r4, r5, lr}
 800866a:	4c06      	ldr	r4, [pc, #24]	; (8008684 <_close_r+0x1c>)
 800866c:	2300      	movs	r3, #0
 800866e:	4605      	mov	r5, r0
 8008670:	4608      	mov	r0, r1
 8008672:	6023      	str	r3, [r4, #0]
 8008674:	f7f9 f93e 	bl	80018f4 <_close>
 8008678:	1c43      	adds	r3, r0, #1
 800867a:	d102      	bne.n	8008682 <_close_r+0x1a>
 800867c:	6823      	ldr	r3, [r4, #0]
 800867e:	b103      	cbz	r3, 8008682 <_close_r+0x1a>
 8008680:	602b      	str	r3, [r5, #0]
 8008682:	bd38      	pop	{r3, r4, r5, pc}
 8008684:	20002548 	.word	0x20002548

08008688 <_fstat_r>:
 8008688:	b538      	push	{r3, r4, r5, lr}
 800868a:	4c07      	ldr	r4, [pc, #28]	; (80086a8 <_fstat_r+0x20>)
 800868c:	2300      	movs	r3, #0
 800868e:	4605      	mov	r5, r0
 8008690:	4608      	mov	r0, r1
 8008692:	4611      	mov	r1, r2
 8008694:	6023      	str	r3, [r4, #0]
 8008696:	f7f9 f959 	bl	800194c <_fstat>
 800869a:	1c43      	adds	r3, r0, #1
 800869c:	d102      	bne.n	80086a4 <_fstat_r+0x1c>
 800869e:	6823      	ldr	r3, [r4, #0]
 80086a0:	b103      	cbz	r3, 80086a4 <_fstat_r+0x1c>
 80086a2:	602b      	str	r3, [r5, #0]
 80086a4:	bd38      	pop	{r3, r4, r5, pc}
 80086a6:	bf00      	nop
 80086a8:	20002548 	.word	0x20002548

080086ac <_isatty_r>:
 80086ac:	b538      	push	{r3, r4, r5, lr}
 80086ae:	4c06      	ldr	r4, [pc, #24]	; (80086c8 <_isatty_r+0x1c>)
 80086b0:	2300      	movs	r3, #0
 80086b2:	4605      	mov	r5, r0
 80086b4:	4608      	mov	r0, r1
 80086b6:	6023      	str	r3, [r4, #0]
 80086b8:	f7f9 f8f6 	bl	80018a8 <_isatty>
 80086bc:	1c43      	adds	r3, r0, #1
 80086be:	d102      	bne.n	80086c6 <_isatty_r+0x1a>
 80086c0:	6823      	ldr	r3, [r4, #0]
 80086c2:	b103      	cbz	r3, 80086c6 <_isatty_r+0x1a>
 80086c4:	602b      	str	r3, [r5, #0]
 80086c6:	bd38      	pop	{r3, r4, r5, pc}
 80086c8:	20002548 	.word	0x20002548

080086cc <_lseek_r>:
 80086cc:	b538      	push	{r3, r4, r5, lr}
 80086ce:	4c07      	ldr	r4, [pc, #28]	; (80086ec <_lseek_r+0x20>)
 80086d0:	4605      	mov	r5, r0
 80086d2:	4608      	mov	r0, r1
 80086d4:	4611      	mov	r1, r2
 80086d6:	2200      	movs	r2, #0
 80086d8:	6022      	str	r2, [r4, #0]
 80086da:	461a      	mov	r2, r3
 80086dc:	f7f9 f916 	bl	800190c <_lseek>
 80086e0:	1c43      	adds	r3, r0, #1
 80086e2:	d102      	bne.n	80086ea <_lseek_r+0x1e>
 80086e4:	6823      	ldr	r3, [r4, #0]
 80086e6:	b103      	cbz	r3, 80086ea <_lseek_r+0x1e>
 80086e8:	602b      	str	r3, [r5, #0]
 80086ea:	bd38      	pop	{r3, r4, r5, pc}
 80086ec:	20002548 	.word	0x20002548

080086f0 <__ascii_mbtowc>:
 80086f0:	b082      	sub	sp, #8
 80086f2:	b901      	cbnz	r1, 80086f6 <__ascii_mbtowc+0x6>
 80086f4:	a901      	add	r1, sp, #4
 80086f6:	b142      	cbz	r2, 800870a <__ascii_mbtowc+0x1a>
 80086f8:	b14b      	cbz	r3, 800870e <__ascii_mbtowc+0x1e>
 80086fa:	7813      	ldrb	r3, [r2, #0]
 80086fc:	600b      	str	r3, [r1, #0]
 80086fe:	7812      	ldrb	r2, [r2, #0]
 8008700:	1c10      	adds	r0, r2, #0
 8008702:	bf18      	it	ne
 8008704:	2001      	movne	r0, #1
 8008706:	b002      	add	sp, #8
 8008708:	4770      	bx	lr
 800870a:	4610      	mov	r0, r2
 800870c:	e7fb      	b.n	8008706 <__ascii_mbtowc+0x16>
 800870e:	f06f 0001 	mvn.w	r0, #1
 8008712:	e7f8      	b.n	8008706 <__ascii_mbtowc+0x16>

08008714 <__malloc_lock>:
 8008714:	4770      	bx	lr

08008716 <__malloc_unlock>:
 8008716:	4770      	bx	lr

08008718 <_read_r>:
 8008718:	b538      	push	{r3, r4, r5, lr}
 800871a:	4c07      	ldr	r4, [pc, #28]	; (8008738 <_read_r+0x20>)
 800871c:	4605      	mov	r5, r0
 800871e:	4608      	mov	r0, r1
 8008720:	4611      	mov	r1, r2
 8008722:	2200      	movs	r2, #0
 8008724:	6022      	str	r2, [r4, #0]
 8008726:	461a      	mov	r2, r3
 8008728:	f7f9 f8f8 	bl	800191c <_read>
 800872c:	1c43      	adds	r3, r0, #1
 800872e:	d102      	bne.n	8008736 <_read_r+0x1e>
 8008730:	6823      	ldr	r3, [r4, #0]
 8008732:	b103      	cbz	r3, 8008736 <_read_r+0x1e>
 8008734:	602b      	str	r3, [r5, #0]
 8008736:	bd38      	pop	{r3, r4, r5, pc}
 8008738:	20002548 	.word	0x20002548

0800873c <__ascii_wctomb>:
 800873c:	b149      	cbz	r1, 8008752 <__ascii_wctomb+0x16>
 800873e:	2aff      	cmp	r2, #255	; 0xff
 8008740:	bf85      	ittet	hi
 8008742:	238a      	movhi	r3, #138	; 0x8a
 8008744:	6003      	strhi	r3, [r0, #0]
 8008746:	700a      	strbls	r2, [r1, #0]
 8008748:	f04f 30ff 	movhi.w	r0, #4294967295
 800874c:	bf98      	it	ls
 800874e:	2001      	movls	r0, #1
 8008750:	4770      	bx	lr
 8008752:	4608      	mov	r0, r1
 8008754:	4770      	bx	lr
	...

08008758 <asinf>:
 8008758:	b510      	push	{r4, lr}
 800875a:	ed2d 8b02 	vpush	{d8}
 800875e:	4c27      	ldr	r4, [pc, #156]	; (80087fc <asinf+0xa4>)
 8008760:	b08a      	sub	sp, #40	; 0x28
 8008762:	eeb0 8a40 	vmov.f32	s16, s0
 8008766:	f000 f89f 	bl	80088a8 <__ieee754_asinf>
 800876a:	f994 3000 	ldrsb.w	r3, [r4]
 800876e:	3301      	adds	r3, #1
 8008770:	eef0 8a40 	vmov.f32	s17, s0
 8008774:	d03c      	beq.n	80087f0 <asinf+0x98>
 8008776:	eeb4 8a48 	vcmp.f32	s16, s16
 800877a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800877e:	d637      	bvs.n	80087f0 <asinf+0x98>
 8008780:	eeb0 0a48 	vmov.f32	s0, s16
 8008784:	f000 f988 	bl	8008a98 <fabsf>
 8008788:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800878c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8008790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008794:	dd2c      	ble.n	80087f0 <asinf+0x98>
 8008796:	2301      	movs	r3, #1
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	4b19      	ldr	r3, [pc, #100]	; (8008800 <asinf+0xa8>)
 800879c:	9301      	str	r3, [sp, #4]
 800879e:	ee18 0a10 	vmov	r0, s16
 80087a2:	2300      	movs	r3, #0
 80087a4:	9308      	str	r3, [sp, #32]
 80087a6:	f7f7 fe7b 	bl	80004a0 <__aeabi_f2d>
 80087aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80087ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80087b2:	4814      	ldr	r0, [pc, #80]	; (8008804 <asinf+0xac>)
 80087b4:	f000 f968 	bl	8008a88 <nan>
 80087b8:	f994 3000 	ldrsb.w	r3, [r4]
 80087bc:	2b02      	cmp	r3, #2
 80087be:	ed8d 0b06 	vstr	d0, [sp, #24]
 80087c2:	d104      	bne.n	80087ce <asinf+0x76>
 80087c4:	f7fd fdac 	bl	8006320 <__errno>
 80087c8:	2321      	movs	r3, #33	; 0x21
 80087ca:	6003      	str	r3, [r0, #0]
 80087cc:	e004      	b.n	80087d8 <asinf+0x80>
 80087ce:	4668      	mov	r0, sp
 80087d0:	f000 f955 	bl	8008a7e <matherr>
 80087d4:	2800      	cmp	r0, #0
 80087d6:	d0f5      	beq.n	80087c4 <asinf+0x6c>
 80087d8:	9b08      	ldr	r3, [sp, #32]
 80087da:	b11b      	cbz	r3, 80087e4 <asinf+0x8c>
 80087dc:	f7fd fda0 	bl	8006320 <__errno>
 80087e0:	9b08      	ldr	r3, [sp, #32]
 80087e2:	6003      	str	r3, [r0, #0]
 80087e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80087e8:	f7f8 f98a 	bl	8000b00 <__aeabi_d2f>
 80087ec:	ee08 0a90 	vmov	s17, r0
 80087f0:	eeb0 0a68 	vmov.f32	s0, s17
 80087f4:	b00a      	add	sp, #40	; 0x28
 80087f6:	ecbd 8b02 	vpop	{d8}
 80087fa:	bd10      	pop	{r4, pc}
 80087fc:	200018bc 	.word	0x200018bc
 8008800:	08008d97 	.word	0x08008d97
 8008804:	08008c95 	.word	0x08008c95

08008808 <sqrtf>:
 8008808:	b510      	push	{r4, lr}
 800880a:	ed2d 8b02 	vpush	{d8}
 800880e:	b08a      	sub	sp, #40	; 0x28
 8008810:	eeb0 8a40 	vmov.f32	s16, s0
 8008814:	f000 f930 	bl	8008a78 <__ieee754_sqrtf>
 8008818:	4b21      	ldr	r3, [pc, #132]	; (80088a0 <sqrtf+0x98>)
 800881a:	f993 4000 	ldrsb.w	r4, [r3]
 800881e:	1c63      	adds	r3, r4, #1
 8008820:	d02c      	beq.n	800887c <sqrtf+0x74>
 8008822:	eeb4 8a48 	vcmp.f32	s16, s16
 8008826:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800882a:	d627      	bvs.n	800887c <sqrtf+0x74>
 800882c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8008830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008834:	d522      	bpl.n	800887c <sqrtf+0x74>
 8008836:	2301      	movs	r3, #1
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	4b1a      	ldr	r3, [pc, #104]	; (80088a4 <sqrtf+0x9c>)
 800883c:	9301      	str	r3, [sp, #4]
 800883e:	ee18 0a10 	vmov	r0, s16
 8008842:	2300      	movs	r3, #0
 8008844:	9308      	str	r3, [sp, #32]
 8008846:	f7f7 fe2b 	bl	80004a0 <__aeabi_f2d>
 800884a:	2200      	movs	r2, #0
 800884c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008850:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008854:	2300      	movs	r3, #0
 8008856:	b9ac      	cbnz	r4, 8008884 <sqrtf+0x7c>
 8008858:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800885c:	4668      	mov	r0, sp
 800885e:	f000 f90e 	bl	8008a7e <matherr>
 8008862:	b1b8      	cbz	r0, 8008894 <sqrtf+0x8c>
 8008864:	9b08      	ldr	r3, [sp, #32]
 8008866:	b11b      	cbz	r3, 8008870 <sqrtf+0x68>
 8008868:	f7fd fd5a 	bl	8006320 <__errno>
 800886c:	9b08      	ldr	r3, [sp, #32]
 800886e:	6003      	str	r3, [r0, #0]
 8008870:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008874:	f7f8 f944 	bl	8000b00 <__aeabi_d2f>
 8008878:	ee00 0a10 	vmov	s0, r0
 800887c:	b00a      	add	sp, #40	; 0x28
 800887e:	ecbd 8b02 	vpop	{d8}
 8008882:	bd10      	pop	{r4, pc}
 8008884:	4610      	mov	r0, r2
 8008886:	4619      	mov	r1, r3
 8008888:	f7f7 ff8c 	bl	80007a4 <__aeabi_ddiv>
 800888c:	2c02      	cmp	r4, #2
 800888e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008892:	d1e3      	bne.n	800885c <sqrtf+0x54>
 8008894:	f7fd fd44 	bl	8006320 <__errno>
 8008898:	2321      	movs	r3, #33	; 0x21
 800889a:	6003      	str	r3, [r0, #0]
 800889c:	e7e2      	b.n	8008864 <sqrtf+0x5c>
 800889e:	bf00      	nop
 80088a0:	200018bc 	.word	0x200018bc
 80088a4:	08008d9d 	.word	0x08008d9d

080088a8 <__ieee754_asinf>:
 80088a8:	b538      	push	{r3, r4, r5, lr}
 80088aa:	ee10 5a10 	vmov	r5, s0
 80088ae:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 80088b2:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 80088b6:	ed2d 8b04 	vpush	{d8-d9}
 80088ba:	d10c      	bne.n	80088d6 <__ieee754_asinf+0x2e>
 80088bc:	eddf 7a5e 	vldr	s15, [pc, #376]	; 8008a38 <__ieee754_asinf+0x190>
 80088c0:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8008a3c <__ieee754_asinf+0x194>
 80088c4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80088c8:	eee0 7a07 	vfma.f32	s15, s0, s14
 80088cc:	eeb0 0a67 	vmov.f32	s0, s15
 80088d0:	ecbd 8b04 	vpop	{d8-d9}
 80088d4:	bd38      	pop	{r3, r4, r5, pc}
 80088d6:	dd04      	ble.n	80088e2 <__ieee754_asinf+0x3a>
 80088d8:	ee70 7a40 	vsub.f32	s15, s0, s0
 80088dc:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80088e0:	e7f6      	b.n	80088d0 <__ieee754_asinf+0x28>
 80088e2:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 80088e6:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 80088ea:	da0b      	bge.n	8008904 <__ieee754_asinf+0x5c>
 80088ec:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 80088f0:	da52      	bge.n	8008998 <__ieee754_asinf+0xf0>
 80088f2:	eddf 7a53 	vldr	s15, [pc, #332]	; 8008a40 <__ieee754_asinf+0x198>
 80088f6:	ee70 7a27 	vadd.f32	s15, s0, s15
 80088fa:	eef4 7ae8 	vcmpe.f32	s15, s17
 80088fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008902:	dce5      	bgt.n	80088d0 <__ieee754_asinf+0x28>
 8008904:	f000 f8c8 	bl	8008a98 <fabsf>
 8008908:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800890c:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 8008910:	ee20 8a08 	vmul.f32	s16, s0, s16
 8008914:	eddf 7a4b 	vldr	s15, [pc, #300]	; 8008a44 <__ieee754_asinf+0x19c>
 8008918:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8008a48 <__ieee754_asinf+0x1a0>
 800891c:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 8008a4c <__ieee754_asinf+0x1a4>
 8008920:	eea8 7a27 	vfma.f32	s14, s16, s15
 8008924:	eddf 7a4a 	vldr	s15, [pc, #296]	; 8008a50 <__ieee754_asinf+0x1a8>
 8008928:	eee7 7a08 	vfma.f32	s15, s14, s16
 800892c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8008a54 <__ieee754_asinf+0x1ac>
 8008930:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008934:	eddf 7a48 	vldr	s15, [pc, #288]	; 8008a58 <__ieee754_asinf+0x1b0>
 8008938:	eee7 7a08 	vfma.f32	s15, s14, s16
 800893c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8008a5c <__ieee754_asinf+0x1b4>
 8008940:	eea7 9a88 	vfma.f32	s18, s15, s16
 8008944:	eddf 7a46 	vldr	s15, [pc, #280]	; 8008a60 <__ieee754_asinf+0x1b8>
 8008948:	eee8 7a07 	vfma.f32	s15, s16, s14
 800894c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8008a64 <__ieee754_asinf+0x1bc>
 8008950:	eea7 7a88 	vfma.f32	s14, s15, s16
 8008954:	eddf 7a44 	vldr	s15, [pc, #272]	; 8008a68 <__ieee754_asinf+0x1c0>
 8008958:	eee7 7a08 	vfma.f32	s15, s14, s16
 800895c:	eeb0 0a48 	vmov.f32	s0, s16
 8008960:	eee7 8a88 	vfma.f32	s17, s15, s16
 8008964:	f000 f888 	bl	8008a78 <__ieee754_sqrtf>
 8008968:	4b40      	ldr	r3, [pc, #256]	; (8008a6c <__ieee754_asinf+0x1c4>)
 800896a:	ee29 9a08 	vmul.f32	s18, s18, s16
 800896e:	429c      	cmp	r4, r3
 8008970:	ee89 6a28 	vdiv.f32	s12, s18, s17
 8008974:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8008978:	dd3d      	ble.n	80089f6 <__ieee754_asinf+0x14e>
 800897a:	eea0 0a06 	vfma.f32	s0, s0, s12
 800897e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 8008a70 <__ieee754_asinf+0x1c8>
 8008982:	eee0 7a07 	vfma.f32	s15, s0, s14
 8008986:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 8008a3c <__ieee754_asinf+0x194>
 800898a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800898e:	2d00      	cmp	r5, #0
 8008990:	bfd8      	it	le
 8008992:	eeb1 0a40 	vnegle.f32	s0, s0
 8008996:	e79b      	b.n	80088d0 <__ieee754_asinf+0x28>
 8008998:	ee60 7a00 	vmul.f32	s15, s0, s0
 800899c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8008a44 <__ieee754_asinf+0x19c>
 80089a0:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8008a48 <__ieee754_asinf+0x1a0>
 80089a4:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 8008a5c <__ieee754_asinf+0x1b4>
 80089a8:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80089ac:	eddf 6a28 	vldr	s13, [pc, #160]	; 8008a50 <__ieee754_asinf+0x1a8>
 80089b0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089b4:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8008a54 <__ieee754_asinf+0x1ac>
 80089b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089bc:	eddf 6a26 	vldr	s13, [pc, #152]	; 8008a58 <__ieee754_asinf+0x1b0>
 80089c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 80089c4:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8008a4c <__ieee754_asinf+0x1a4>
 80089c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089cc:	eddf 6a24 	vldr	s13, [pc, #144]	; 8008a60 <__ieee754_asinf+0x1b8>
 80089d0:	eee7 6a86 	vfma.f32	s13, s15, s12
 80089d4:	ed9f 6a23 	vldr	s12, [pc, #140]	; 8008a64 <__ieee754_asinf+0x1bc>
 80089d8:	eea6 6aa7 	vfma.f32	s12, s13, s15
 80089dc:	eddf 6a22 	vldr	s13, [pc, #136]	; 8008a68 <__ieee754_asinf+0x1c0>
 80089e0:	eee6 6a27 	vfma.f32	s13, s12, s15
 80089e4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80089e8:	eee6 8aa7 	vfma.f32	s17, s13, s15
 80089ec:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80089f0:	eea0 0a27 	vfma.f32	s0, s0, s15
 80089f4:	e76c      	b.n	80088d0 <__ieee754_asinf+0x28>
 80089f6:	ee10 3a10 	vmov	r3, s0
 80089fa:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80089fe:	f023 030f 	bic.w	r3, r3, #15
 8008a02:	ee07 3a90 	vmov	s15, r3
 8008a06:	eef1 6a67 	vneg.f32	s13, s15
 8008a0a:	eea6 8aa7 	vfma.f32	s16, s13, s15
 8008a0e:	ee70 5a00 	vadd.f32	s11, s0, s0
 8008a12:	ee37 0a80 	vadd.f32	s0, s15, s0
 8008a16:	eddf 7a08 	vldr	s15, [pc, #32]	; 8008a38 <__ieee754_asinf+0x190>
 8008a1a:	ee88 5a00 	vdiv.f32	s10, s16, s0
 8008a1e:	ed9f 0a15 	vldr	s0, [pc, #84]	; 8008a74 <__ieee754_asinf+0x1cc>
 8008a22:	eee5 7a47 	vfms.f32	s15, s10, s14
 8008a26:	eed5 7a86 	vfnms.f32	s15, s11, s12
 8008a2a:	eeb0 6a40 	vmov.f32	s12, s0
 8008a2e:	eea6 6a87 	vfma.f32	s12, s13, s14
 8008a32:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8008a36:	e7a8      	b.n	800898a <__ieee754_asinf+0xe2>
 8008a38:	b33bbd2e 	.word	0xb33bbd2e
 8008a3c:	3fc90fdb 	.word	0x3fc90fdb
 8008a40:	7149f2ca 	.word	0x7149f2ca
 8008a44:	3811ef08 	.word	0x3811ef08
 8008a48:	3a4f7f04 	.word	0x3a4f7f04
 8008a4c:	3e2aaaab 	.word	0x3e2aaaab
 8008a50:	bd241146 	.word	0xbd241146
 8008a54:	3e4e0aa8 	.word	0x3e4e0aa8
 8008a58:	bea6b090 	.word	0xbea6b090
 8008a5c:	3d9dc62e 	.word	0x3d9dc62e
 8008a60:	bf303361 	.word	0xbf303361
 8008a64:	4001572d 	.word	0x4001572d
 8008a68:	c019d139 	.word	0xc019d139
 8008a6c:	3f799999 	.word	0x3f799999
 8008a70:	333bbd2e 	.word	0x333bbd2e
 8008a74:	3f490fdb 	.word	0x3f490fdb

08008a78 <__ieee754_sqrtf>:
 8008a78:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8008a7c:	4770      	bx	lr

08008a7e <matherr>:
 8008a7e:	2000      	movs	r0, #0
 8008a80:	4770      	bx	lr
 8008a82:	0000      	movs	r0, r0
 8008a84:	0000      	movs	r0, r0
	...

08008a88 <nan>:
 8008a88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008a90 <nan+0x8>
 8008a8c:	4770      	bx	lr
 8008a8e:	bf00      	nop
 8008a90:	00000000 	.word	0x00000000
 8008a94:	7ff80000 	.word	0x7ff80000

08008a98 <fabsf>:
 8008a98:	ee10 3a10 	vmov	r3, s0
 8008a9c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008aa0:	ee00 3a10 	vmov	s0, r3
 8008aa4:	4770      	bx	lr
	...

08008aa8 <_init>:
 8008aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008aaa:	bf00      	nop
 8008aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aae:	bc08      	pop	{r3}
 8008ab0:	469e      	mov	lr, r3
 8008ab2:	4770      	bx	lr

08008ab4 <_fini>:
 8008ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ab6:	bf00      	nop
 8008ab8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008aba:	bc08      	pop	{r3}
 8008abc:	469e      	mov	lr, r3
 8008abe:	4770      	bx	lr
